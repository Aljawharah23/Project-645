[
    [
        "MNG-233",
        "MNG-889",
        "ability to clean up local repository it's probably not too heavy to touch some metadata (or update a single file in the repository) for each dependency that is used (not downloaded, but actually used). It would only be needed once per dep per session.\n\nWith that information, a tool could easily remove files from the local repository not used in X days so they can be downloaded again later.",
        "m2 should warn (fail?) if a parent POM is discovered in the USD with a different version to the one requested if the project file is found but has a different version, this may indicate a sync issue in the code or SCM. This should either warn or fail (with option to bypass if intentional)"
    ],
    [
        "MNG-1217",
        "MNG-5646",
        "Relocation messages don't mention the artifact that was relocated The message you get everytime is\n[WARNING]\n  This artifact has been relocated to javax.sql:jdbc-stdext:2.0.\n\nnow print something useful instead of \"This\", and better if there's a way to know where it comes from",
        "could I create class which implements EventSpy  to Injection  the class of EventSpyDispatcher I am writing a maven plugin for checking jar conflict.  now i have a question,that could I create class which implements EventSpy  to Injection  the class of EventSpyDispatcher\u00ef\u00bc\u009fhow can i use it?"
    ],
    [
        "MNG-5087",
        "MNG-490",
        "Maven 3 dependency resolution fails until maven-metadata-local.xml files (created by maven-invoker-plugin) are deleted In one of my Maven projects, dependency resolution will succeed once, then fail for later build attempts:\n\n{code}\n[WARNING] The POM for commons-logging:commons-logging:jar:1.1.1 is missing, no dependency information available\n[WARNING] The POM for commons-httpclient:commons-httpclient:jar:3.1 is missing, no dependency information available\n[WARNING] The POM for javax.mail:mail:jar:1.4.4 is missing, no dependency information available\n{code}\n\n...and so on, until I delete the {{maven-metadata-local.xml}} files corresponding to the failing artifacts (e.g. {{~/.m2/repository/commons-logging/commons-logging/maven-metadata-local.xml}}), which appear to be created by maven-invoker-plugin:install. After those files are deleted, the next {{mvn}} invocation proceeds properly; the metadata files are restored by that invocation (presumably as part of the process of checking my upstream repositories/mirrors for updated artifacts), and I am again presented with the above errors until I again delete the metadata files.\n\nThis is repeatable, even after starting with a completely fresh local repository. Note that Maven 2.2.1 does *NOT* exhibit this problem.\n\nFYI, I'm not using an integration-testing-only local repo [http://maven.apache.org/plugins/maven-invoker-plugin/install-mojo.html#localRepositoryPath|as described here], simply because doing so causes the re-downloading of all transitive dependencies ([http://maven.apache.org/plugins/maven-invoker-plugin/examples/fast-use.html|unless you want to maintain an integration-specific settings.xml file!!!]). I've used the invoker plugin with a variety of other projects in this way with good results ([http://github.com/clojure/tools.nrepl|example]) -- certainly never encountering a borked local repository in the process like this.\n\nHere's an affected project: [https://github.com/cemerick/rummage/tree/1.3.0-compat|the 1.3.0-compat branch of rummage]. To reproduce, just clone that repo, checkout {{1.3.0-compat}}, and:\n\n{code}\n> mvn clean test\n# no error -- can run this and other builds that don't involve maven-invoker-plugin all day w/o problems\n> mvn clean integration-test\n# FAIL: \"Could not resolve dependencies\", with warnings as noted above\n> mvn clean test\n# FAIL: \"Could not resolve dependencies\", with warnings as noted above\n{code}\n\nOnce the local repository is broken (by the generation of the {{maven-metadata-local.xml}} files, AFAICT), no builds will get past the dependency resolution stage.\n\nRunning mvn -X reveals lines like this for each artifact that is later apparently not found:\n\n{code}\n[DEBUG] Verifying availability of /Users/chas/.m2/repository/javax/mail/mail/1.4.4/mail-1.4.4.jar from []\n{code}\n\nOf course, {{/Users/chas/.m2/repository/javax/mail/mail/1.4.4/mail-1.4.4.jar}} et al. does exist, as does {{/Users/chas/.m2/repository/javax/mail/mail/1.4.4/mail-1.4.4.pom}}.\n\nI'm assuming this is a bug in Maven 3's core dependency resolution mechanisms (as opposed to maven-invoker-plugin) since Maven 2.2.1 doesn't exhibit the behaviour.",
        "Creating an archetype with a different folder structure for java and test sources still results in default (src/main/java) folder being generated. Creating an archetype with a different folder structure for java and test sources still results in default (src/main/java) folder being generated, even though these are being created empty.\n\nI created an archetype and need to follow a set folder structure (all java sources to sit under folder \"src\" and tests under \"test\" folder respectively)\n\nAlso the Archetype plugin makes an assumption that the archetype resources will always reside under \"archetype-resources/\". User should be able to override this and specify a custom name. \n"
    ],
    [
        "MNG-3434",
        "MNG-5238",
        "[regression] Integration test it0103 is broken This is currently being demonstrated locally and in Continuum.\n\nThe error starts with: \n                      org.apache.maven.it.VerificationException: Exit code was non-zero: 1; log = \n+ Error stacktraces are turned on.\nWAGON_VERSION: 1.0-beta-2\nurl = http://repo1.maven.org/maven2\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/its/it0103/level1/1/level1-1.pom\n[ERROR]\nFailed to resolve parent-POM from repository.\nParent POM Information: \nGroup-Id: org.apache.maven.its.it0103\nArtifact-Id: level1\nVersion: 1\nLocal Repository: /export/home/build/.m2/repository\nRemote Repositories: \ncentral -& http://repo1.maven.org/maven2\nReason: Unable to download the artifact from any repository\n  org.apache.maven.its.it0103:level1:pom:1\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\nProject Id: [inherited]:level3:jar:1\nFrom file: /var/tmp/it0103/level1/level2/level3/pom.xml\nError stacktrace:\norg.apache.maven.reactor.MavenExecutionException: Error scanning for extensions: Error building model lineage in order to pre-scan for extensions: Cannot find artifact for parent POM: org.apache.maven.its.it0103:level1::1 for project [inherited]:level3:jar:1 at /var/tmp/it0103/level1/level2/level3/pom.xml\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:281)\n\tat org.apache.maven.DefaultMaven.createReactorManager(DefaultMaven.java:105)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:162)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:304)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody2(MavenEmbedder.java:895)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody3$advice(MavenEmbedder.java:304)\n\tat org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:176)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\nCaused by: org.apache.maven.extension.ExtensionScanningException: Error building model lineage in order to pre-scan for extensions: Cannot find artifact for parent POM: org.apache.maven.its.it0103:level1::1 for project [inherited]:level3:jar:1 at /var/tmp/it0103/level1/level2/level3/pom.xml\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.buildModelLineage(DefaultBuildExtensionScanner.java:428)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:136)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.checkModulesForExtensions(DefaultBuildExtensionScanner.java:330)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:196)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.checkModulesForExtensions(DefaultBuildExtensionScanner.java:330)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:196)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.checkModulesForExtensions(DefaultBuildExtensionScanner.java:330)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:196)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanForBuildExtensions(DefaultBuildExtensionScanner.java:106)\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:277)\n\t... 17 more\nCaused by: org.apache.maven.project.ProjectBuildingException: Cannot find artifact for parent POM: org.apache.maven.its.it0103:level1::1 for project [inherited]:level3:jar:1 at /var/tmp/it0103/level1/level2/level3/pom.xml\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentFromRepositories(DefaultModelLineageBuilder.java:463)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentPom_aroundBody4(DefaultModelLineageBuilder.java:355)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentPom_aroundBody5$advice(DefaultModelLineageBuilder.java:260)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentPom(DefaultModelLineageBuilder.java:1)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.buildModelLineage(DefaultModelLineageBuilder.java:128)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.buildModelLineage(DefaultBuildExtensionScanner.java:423)\n\t... 26 more\nCaused by: org.apache.maven.artifact.resolver.ArtifactNotFoundException: Unable to download the artifact from any repository\n  org.apache.maven.its.it0103:level1:pom:1\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:200)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:81)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentFromRepositories(DefaultModelLineageBuilder.java:454)\n\t... 31 more\nCaused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to download the artifact from any repository\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:374)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:184)\n\t... 33 more\n[INFO] ------------------------------------------------------------------------\n[INFO]  + Ignoring build failures\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: & 1 second\n[INFO] Finished at: Tue Mar 04 00:42:01 GMT+00:00 2008\n[INFO] Final Memory: 2M/254M\n[INFO] ------------------------------------------------------------------------\n\tat org.apache.maven.it.Verifier.executeGoals(Verifier.java:994)\n\tat org.apache.maven.it.Verifier.executeGoal(Verifier.java:850)\n\tat org.apache.maven.it.Verifier.executeGoal(Verifier.java:844)\n\tat org.apache.maven.integrationtests.MavenIT0103Test.testit0103(MavenIT0103Test.java:22)\n\tat org.apache.maven.integrationtests.MavenIT0103Test.testit0103(MavenIT0103Test.java:22)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat org.apache.maven.integrationtests.AbstractMavenIntegrationTestCase.runTest(AbstractMavenIntegrationTestCase.java:75)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)\n\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)\n\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:125)\n\tat org.apache.maven.surefire.Surefire.run(Surefire.java:132)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:290)\n\tat org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:818)",
        "301, ReasonPhrase:Moved Permanently I was in Maven 2.0.9 until two weeks ago.\nI did integration test with maven 3.0.3 and everything was working fine.\nWhen I decided to migrate my integration system this week I upgrade to 3.0.4 and then the clean deploy failed with this error:\nCould not transfer artifact groupe:artifact:pom:0.5.0-20120203.164640-2 from/to snapshots (http://archiva.company.fr/repository/snapshots/): Failed to transfer file: http://archiva.company.fr/repository/snapshots/groupe/artifact/0.5.0-SNAPSHOT/panel-0.5.0-20120203.164640-2.pom. Return code is: 301, ReasonPhrase:Moved Permanently\n\nI don't know how to investigate the problem because it's working with 3.0.3 (Wagon enhancement ?)\nI migrate to 3.0.3 but I think it's better to be with the last version."
    ],
    [
        "MNG-2971",
        "MNG-4948",
        "Variables are not replaced into installed pom file Variables are not replaced into installed pom file.\nHere is a sample pom file\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.xxx.root</groupId>\n\t<artifactId>root</artifactId>\n\t<packaging>pom</packaging>\n\t<version>${prop.version}</version>\n\t<name>My Project</name>\n        ...\n\t<properties>\n\t\t<prop.version>3.0.20</prop.version>\n\t</properties>\n\n</project>\n{code}\nThe installed pom is into $\\{localRepository}/com/xxx/root/root/3.0.20/root-3.0.20.pom\nis the same as the project pom file but the version referenced into the installed pom file is $\\{prop.version} instead of 3.0.20\nwhich creates problem to artifacts depending of this one.\n\nThanks in advance",
        "Use the presence of SNAPSHOT to activate profile I would like to have a profile be activated not by the version # but by the presence of SNAPSHOT.\n\nThe current version # spec does not appear to allow for this (unless I'm reading it wrong, always a possibility).\n"
    ],
    [
        "MNG-145",
        "MNG-2709",
        "built in notion of a mirror repository this probably relates to repository work as much as Maven work.\n\nCurrently, if users wish to use a mirror of ibiblio, they specify that as an alternative remote repository. In m1, this causes a problem because if you add a new repository not equivalent to that in your project, it is not in the build.properties.\n\nIn m2, they are all added to the list, so the mirror will be used first, but the others may also be checked. This is better, but still requires the user specify it in their configuration and it may be used on projects it is never needed for.\n\nIt would be good if we could have a repository descriptor at the base of the repository that lists mirrors. On first use of the repository, the user could be prompted to select any mirrors they'd like to use, and it can be saved in their configuration for that repository ID.\n\nThat way any project listing ibiblio as a repository could actually use, say, planetmirror instead (and fall back to ibiblio last).",
        "Maven 2 doesn't resolve parent test dependencies when using JDK 6 http://www.nabble.com/Maven-2-and-JDK-6-tf2841587s177.html"
    ],
    [
        "MNG-2616",
        "MNG-2282",
        "Guide to Being a Good Maven Citizen Beginning a guide with information on being a good member of the Maven community. This was created out of a need to tell people not to do things like \"wget\" the entire central repository.",
        "If a repo is down, maven stops the buid instead of trying other repos In this case, the artifact is available at http://www.ibiblio.org/maven2/activemq/jmdns/1.0-RC2/ and the build always fail until the artifact is downloaded manually.\nSee the following build output:\n\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.4\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settings\\gnodet\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\java-bin\\maven-2.0.4\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT of project: null:servicemix-core:jar:null in relative path: ../pom.xml\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: null:servicemix-core:jar:null\n[DEBUG] Searching for parent-POM: org.apache:apache::1 of project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT in relative path: ../pom.xml\n[DEBUG] Parent-POM: org.apache:apache::1 not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building ServiceMix :: Core\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-resources-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-resources-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-compiler-plugin: resolved to version 2.0.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-compiler-plugin:maven-plugin:2.0.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-surefire-plugin: resolved to version 2.1.3 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-surefire-plugin:maven-plugin:2.1.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-jar-plugin: resolved to version 2.0 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-jar-plugin:maven-plugin:2.0 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-install-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-install-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0.1 for project: null:maven-one-plugin:maven-plugin:1.0 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:maven-xbean-plugin:maven-plugin:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG] org.apache.xbean:maven-xbean-plugin:maven-plugin:2.3:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-archiver:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-archiver:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-project:jar:2.0 from the repository.\n[DEBUG]     org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]         junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-model:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact-manager:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-repository-metadata:jar:2.0 from the repository.\n[DEBUG]         org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-profile:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.2:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: null:plexus-utils:jar:1.1 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   qdox:qdox:jar:1.5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-spring:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:runtime (selected for runtime)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:runtime (selected for runtime)\n[DEBUG]     org.springframework:spring:jar:1.2.4:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-plugin-api:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-components::1.1.4 for project: null:plexus-archiver:jar:1.0-alpha-5 from the repository.\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: org.codehaus.plexus:plexus-components:pom:1.1.4 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (removed - nearer found: 1.0-alpha-5)\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.xbean:maven-xbean-plugin:2.3:mapping' -->\n[DEBUG]   (f) namespace = http://servicemix.apache.org/config/1.0\n[DEBUG]   (f) outputDir = c:\\java\\servicemix\\servicemix-core\\target\\xbean\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) propertyEditorPaths = org.apache.xbean.spring.context.impl\n[DEBUG]   (f) schema = c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd\n[DEBUG]   (f) srcDir = c:\\java\\servicemix\\servicemix-core\\src\\main\\java\n[DEBUG] -- end configuration --\n[INFO] [xbean:mapping {execution: default}]\n[DEBUG]  ======= XBeanMojo settings =======\n[DEBUG] namespace[http://servicemix.apache.org/config/1.0]\n[DEBUG] srcDir[c:\\java\\servicemix\\servicemix-core\\src\\main\\java]\n[DEBUG] schema[c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd]\n[DEBUG] outputDir[c:\\java\\servicemix\\servicemix-core\\target\\xbean]\n[DEBUG] propertyEditorPaths[org.apache.xbean.spring.context.impl]\n[INFO] Generating META-INF properties file: c:\\java\\servicemix\\servicemix-core\\target\\xbean\\META-INF\\services\\org\\apache\\xbean\\spring\\http\\servicemix.apache.org\\config\\1.0 for namespace: http://servicemix.apache.org/config/1.0\n[INFO] Generating HTML documentation file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd.html for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] Generating XSD file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] ...done.\n[DEBUG] org.apache.maven.plugins:maven-resources-plugin:maven-plugin:2.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]   commons-io:commons-io:jar:1.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-resources-plugin:2.1:resources' -->\n[DEBUG]   (f) filters = []\n[DEBUG]   (f) outputDirectory = c:\\java\\servicemix\\servicemix-core\\target\\classes\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) resources = [org.apache.maven.model.Resource@f07355, org.apache.maven.model.Resource@23f1bb, org.apache.maven.model.Resource@1d33a6b]\n[DEBUG] -- end configuration --\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[DEBUG] org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT (selected for null)\n[DEBUG]   org.apache.servicemix.dependencies:jencks:jar:1.1.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-jacc_1.0_spec:jar:1.0:compile (selected for compile)\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from central\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: central\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from servicemix-m2-repo\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: servicemix-m2-repo\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from apache.snapshots\n[DEBUG] activemq-ra: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-ra/4.0-SNAPSHOT/activemq-ra-4.0-20060508.005319-6.pom\n1/1K\n1K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-ra:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.pom\n149/149b\n149b downloaded\n[DEBUG]   Artifact resolved\n[DEBUG]     activemq:jmdns:jar:1.0-RC2:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n4/9K\n8/9K\n9/9K\n9K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]     incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (selected for compile)\n[DEBUG]       org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]       incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.springframework:spring-full::1.2.6 for project: null:spring:jar:1.2.6 from the repository.\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.6 for project: null:spring-full:pom:null from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   junit:junit:jar:3.8.1:compile (selected for compile)\n[DEBUG]   log4j:log4j:jar:1.2.12:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.5:compile (selected for compile)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG] activemq-core: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (removed - nearer found: 4.0-SNAPSHOT)\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]     incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG]   org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]   commons-lang:commons-lang:jar:2.1:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   lingo:lingo:jar:1.0:compile (selected for compile)\n[DEBUG]     concurrent:concurrent:jar:1.3.4:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     aopalliance:aopalliance:jar:1.0:compile (selected for compile)\n[DEBUG]     xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG] While downloading springframework:spring:1.2.5\n  This artifact has been relocated to org.springframework:spring:1.2.5.\n\n\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.5 for project: null:spring:jar:1.2.5 from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.5:compile (removed - nearer found: 1.2.6)\n[DEBUG]     mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG]   backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]   jaxen:jaxen:jar:1.1-beta-8:compile (selected for compile)\n[DEBUG]     xerces:xercesImpl:jar:2.6.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   stax-utils:stax-utils:jar:snapshot-20060502:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-connector:jar:1.0:compile (selected for compile)\n[DEBUG]   commons-collections:commons-collections:jar:3.1:compile (selected for compile)\n[DEBUG]   xmlbeans:xbean:jar:2.1.0:compile (selected for compile)\n[DEBUG]   hsqldb:hsqldb:jar:1.7.3.3:test (selected for test)\n[DEBUG]   lucene:lucene:jar:1.4.3:compile (selected for compile)\n[DEBUG]   mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG] servicemix-jbi: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT for project: null:servicemix-jbi:jar:3.0-20060507.131217-6 from the repository.\n[DEBUG] servicemix: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[DEBUG]   org.apache.servicemix:servicemix-jbi:jar:3.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-activation_1.0.2_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-qname_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   easymock:easymock:jar:1.2_Java1.3:test (selected for test)\n[DEBUG]   xerces:xercesImpl:jar:2.6.2:compile (removed - nearer found: 2.7.1)\n[DEBUG]   xerces:xercesImpl:jar:2.7.1:compile (selected for compile)\n[DEBUG]   xml-apis:xml-apis:jar:1.3.02:compile (selected for compile)\n[DEBUG]   wsdl4j:wsdl4j:jar:1.5.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-server:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-server:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-kernel:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]     org.apache.xbean:xbean-kernel:jar:2.3:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.0_01_pd:compile (removed - nearer found: 2.1)\n[DEBUG]     org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]       org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-transaction:jar:1.0:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-management_1.0_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   xalan:xalan:jar:2.7.0:compile (selected for compile)\n[DEBUG] While downloading xml-apis:xml-apis:2.0.2\n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]   mx4j:mx4j-remote:jar:3.0.1:compile (selected for compile)\n[DEBUG]   commons-betwixt:commons-betwixt:jar:0.7:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.2:compile (removed - nearer found: 1.0.4)\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]     commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]     commons-digester:commons-digester:jar:1.6:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]       commons-collections:commons-collections:jar:2.1:compile (removed - nearer found: 3.1)\n[DEBUG]   stax:stax-api:jar:1.0:compile (selected for compile)\n[DEBUG]   xmlbeans:xmlpublic:jar:2.1.0:compile (selected for compile)\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]     commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]   woodstox:wstx-asl:jar:2.0.3:compile (selected for compile)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] Trying repository codehaus-snapshot\nDownloading: http://snapshots.maven.codehaus.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2)\n[DEBUG] Trying repository maven-csharp\nDownloading: http://localhost/repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\nCaused by I/O exception: Connection refused: connect\n\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:551)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:475)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:454)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:140)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:233)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n\tat org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1117)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:366)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n\t... 16 more\nCaused by: org.apache.maven.wagon.TransferFailedException: Error transferring file\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:99)\n\tat org.apache.maven.wagon.StreamWagon.get(StreamWagon.java:68)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:369)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:282)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:244)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:124)\n\t... 23 more\nCaused by: java.net.ConnectException: Connection refused: connect\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n\tat java.net.Socket.connect(Socket.java:507)\n\tat java.net.Socket.connect(Socket.java:457)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:365)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:477)\n\tat sun.net.www.http.HttpClient.<init>(HttpClient.java:214)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:287)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:299)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:792)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:744)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:669)\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:913)\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:85)\n\t... 28 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 16 seconds\n[INFO] Finished at: Mon May 08 10:48:34 CEST 2006\n[INFO] Final Memory: 9M/16M\n[INFO] ------------------------------------------------------------------------"
    ],
    [
        "MNG-2420",
        "MNG-4290",
        "exclusion on dependency seems to act global on POM In my POM I added \"xerces:xercesImpl:2.8.0\" as compile dependency what depends on \"xml-apis:xml-apis:1.3.03\".\nSince I also have \"commons-betwixt:commons-betwixt:0.7\", \"commons-configuration:commons-configuration:1.2\", and \"ant:ant:1.6.5\" as dependencies that also depend on \"xml-apis\" but in different versions I came into trouble.\nSince one of theses \"xml-apis\" dependencies has a higher version number (but is the JAR of an earlier version) maven does not decide for \"1.3.03\" which is correct behaviour for maven. Anyways I got\nNoClassDefFoundError: org/w3c/dom/DOMError\nwhen I run my tests with XmlUnit.\n\nNow here comes the problem:\nI added the following XML snipplet to all dependencies that depend on xml-apis except for xercesImpl.\n <exclusion>\n  <artifactId>xml-apis</artifactId>\n  <groupId>xml-apis</groupId>\n</exclusion>\n\nThis caused maven NOT to include the dependency on \"xml-apis\" at all.\n\nThis was hard to track because the \"org/w3c/dom/DOMError\" did not occure on evey machine involved in the project.\nI figured out that the ones having no trouble used jdk1.5 that has this code included inside (JAXP 1.3).\nWith jdk1.4.2 this bug was reproducable on any operating system.\nNow it comes even harder:\nI added\n<dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>1.3.03</version>\n</dependency>\n\nas toplevel dependency to the POM and still maven did NOT include this dependency when running the test.\nThe funny thing is that \"mvn eclipse:eclipse\" produced the right dependency in my IDE.\nAnyways in the dependency report on the site it was missing.\n\nI additionally had to remove all the exclusion tags to make it work again.\n\nTo me it looks like the handling of the <exclusion> tag is broken, \nmeaning that it does NOT work as I (!) expected.\nI hope that this behaviour is NOT intendet.\n\nBest Regards J\u00f6rg",
        "Update guide-http-settings to reflect the fact that sun-based http has been restored as the default for the http/s wagons. "
    ],
    [
        "MNG-3654",
        "MNG-482",
        "[regression] unable to build ServiceMix 3 - IndexOutOfBoundsException in mergeDeterministicBuildElements in https://svn.apache.org/repos/asf/servicemix/smx3/trunk, run mvn compile.\n\nResult (before build begins):\n\njava.lang.IndexOutOfBoundsException: Index: 3, Size: 3\n\tat java.util.ArrayList.RangeCheck(ArrayList.java:546)\n\tat java.util.ArrayList.get(ArrayList.java:321)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.mergeDeterministicBuildElements(DefaultMavenProjectBuilder.java:1112)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.processProjectLogic(DefaultMavenProjectBuilder.java:998)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:879)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMavenProjectBuilder.java:507)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:199)\n\tat org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:576)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:459)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:532)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:532)\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:363)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:290)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:127)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:302)\n\n",
        "add a keyed artifact lookup on the plugin see MNG-455 for the original suggestions"
    ],
    [
        "MNG-2112",
        "MNG-5903",
        "2.0.3 messes up plugin parameters from CLI From the dev list:\nI noticed something awhile ago where the expression was being hidden from the qdox parser when specified as the last attribute in that line, but I thought it had always been there. It's even filed in jira, but I thought it could wait (again, b/c I assumed it had always been there). \nCan you verify that this is the case, and that for this mojo, command-line specification of this parameter works in 2.0.2?\n\nThanks,\n\nJohn\n\nThis is a test case that takes 2 values. Build and install the mojo then run by doing mvn some:mojo -Dvalue=xxx -Dvalue2=yyy\nYou can see that the second value isn't being picked up.",
        "Option in profiles to exclude modules from reactor Sometimes it is useful to exclude modules from a reactor build.\r\nOne reason for this can be: Don't generate Javadoc for a testing module.\r\n\r\nSince Maven 3.2.1 it is possible to exclude modules with command line options, eg. mvn -pl !integration-tests\r\nSee MNG-5230 \"Command line option to exclude modules from reactor\". In this ticket enabling module exclusion for profiles was discussed, but apparently not implemented.\r\n\r\nI'm currently using the -pl command line option on our build server to exclude two projects of a multi module build from Javadoc generation. But I would much prefer to keep this logic in the pom.xml. Something like this:\r\n\r\n<profile>\r\n<id>javadoc</id>\r\n<modules>\r\n<module>!integration-tests</module>\r\n</modules>\r\n</profile>\r\n"
    ],
    [
        "MNG-5293",
        "MNG-5953",
        "Maven 3.0.4 crashes when \"-Djava.net.useSystemProxies=true\" added. I have localized the issue: it's a Maven issue.\nMaven, started with flag \"-Djava.net.useSystemProxies=true\" crashes because it somehow use libdbus in openSUSE 12.1 x64 in wrong way.\n\nHere is a console output:\ndenixx@denixxwork:~/NetBeansProjects/FinMonitor_server_boevoy_20120517_Qualifier> /home/denixx/soft/apache-maven-3.0.4/bin/mvn -Djava.net.useSystemProxies=true clean install\n[INFO] Scanning for projects...\n[WARNING] \n[WARNING] Some problems were encountered while building the effective model for com.pb:finmonitor:war:0.0.1-SNAPSHOT\n[WARNING] 'dependencies.dependency.systemPath' for com.enterprisedt:edtftp:jar should not point at files within the project directory, ${basedir}/src/main/webapp/WEB-INF/lib/edtftpj.jar will be unresolvable by dependent projects @ line 53, column 25\n[WARNING] 'dependencies.dependency.systemPath' for com.sun:jna:jar should not point at files within the project directory, ${basedir}/src/main/webapp/WEB-INF/lib/jna.jar will be unresolvable by dependent projects @ line 61, column 25\n[WARNING] \n[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.\n[WARNING] \n[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.\n[WARNING] \n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building FinMonitor 0.0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ finmonitor ---\n[INFO] \n[INFO] --- maven-resources-plugin:2.5:resources (default-resources) @ finmonitor ---\nDownloading: http://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.jar\nDownloading: http://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.jar\nDownloading: http://repo.maven.apache.org/maven2/junit/junit/3.8.1/junit-3.8.1.jar\n#\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x00007f2d14766727, pid=9618, tid=139831727105792\n#\n# JRE version: 6.0_32-b05\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (20.7-b02 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  [libdbus-1.so.3+0x8727]  double+0x67\n#\n\n(process:9618): GConf-WARNING **: Client failed to connect to the D-BUS daemon:\nFailed to connect to socket abstract: Connection refused\nGConf Error: No D-BUS daemon running\n\n# An error report file with more information is saved as:\n# /home/denixx/NetBeansProjects/FinMonitor_server_boevoy_20120517_Qualifier/hs_err_pid9618.log\n#\n# If you would like to submit a bug report, please visit:\n#   http://java.sun.com/webapps/bugreport/crash.jsp\n#\n\u00d0\u0090\u00d0\u00b2\u00d0\u00b0\u00d1\u0080\u00d0\u00b8\u00d0\u00b9\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 \u00d0\u00be\u00d1\u0081\u00d1\u0082\u00d0\u00b0\u00d0\u00bd\u00d0\u00be\u00d0\u00b2 (crash)\n\n-=-=-\nAnother one:\ndenixx@denixxwork:~/NetBeansProjects/FinMonitor_server_boevoy_20120517_Qualifier> /home/denixx/soft/apache-maven-3.0.4/bin/mvn -Djava.net.useSystemProxies=true clean install\n[INFO] Scanning for projects...\n[WARNING] \n[WARNING] Some problems were encountered while building the effective model for com.pb:finmonitor:war:0.0.1-SNAPSHOT\n[WARNING] 'dependencies.dependency.systemPath' for com.enterprisedt:edtftp:jar should not point at files within the project directory, ${basedir}/src/main/webapp/WEB-INF/lib/edtftpj.jar will be unresolvable by dependent projects @ line 53, column 25\n[WARNING] 'dependencies.dependency.systemPath' for com.sun:jna:jar should not point at files within the project directory, ${basedir}/src/main/webapp/WEB-INF/lib/jna.jar will be unresolvable by dependent projects @ line 61, column 25\n[WARNING] \n[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.\n[WARNING] \n[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.\n[WARNING] \n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building FinMonitor 0.0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ finmonitor ---\n[INFO] \n[INFO] --- maven-resources-plugin:2.5:resources (default-resources) @ finmonitor ---\nDownloading: http://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.jar\nDownloading: http://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.jar\nDownloading: http://repo.maven.apache.org/maven2/junit/junit/3.8.1/junit-3.8.1.jar\n#\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x00007fdb7e0338e9, pid=9918, tid=140580702963456\n#\n# JRE version: 6.0_32-b05\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (20.7-b02 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  [libdbus-1.so.3+0x2a8e9]  double+0x1609\n#\n# An error report file with more information is saved as:\n# /home/denixx/NetBeansProjects/FinMonitor_server_boevoy_20120517_Qualifier/hs_err_pid9918.log\n#\n# If you would like to submit a bug report, please visit:\n#   http://java.sun.com/webapps/bugreport/crash.jsp\n# The crash happened outside the Java Virtual Machine in native code.\n# See problematic frame for where to report the bug.\n#\n\u00d0\u0090\u00d0\u00b2\u00d0\u00b0\u00d1\u0080\u00d0\u00b8\u00d0\u00b9\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 \u00d0\u00be\u00d1\u0081\u00d1\u0082\u00d0\u00b0\u00d0\u00bd\u00d0\u00be\u00d0\u00b2",
        "build failed Standart maven 'mvn clean build' execution failed.\r\n\r\nProject uses 'net.flexmojos.oss:flexmojos-maven-plugin:7.0.1' build plugin with custom packaging types.\r\n\r\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T19:41:47+03:00)\r\nMaven home: c:\\java\\apache-maven-3.3.9\r\nJava version: 1.8.0_66, vendor: Oracle Corporation\r\nJava home: c:\\java\\jdk1.8.0_66\\jre\r\nDefault locale: en_US, platform encoding: Cp1251\r\nOS name: \"windows 8.1\", version: \"6.3\", arch: \"amd64\", family: \"dos\"\r\n[DEBUG] Created new class realm maven.api\r\n[DEBUG] Importing foreign packages into class realm maven.api\r\n[DEBUG]   Imported: javax.enterprise.inject.* < plexus.core\r\n[DEBUG]   Imported: javax.enterprise.util.* < plexus.core\r\n[DEBUG]   Imported: javax.inject.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.artifact < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.classrealm < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.cli < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.configuration < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.exception < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution.scope < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.model < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.monitor < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.plugin < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.profiles < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.project < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.reporting < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.rtinfo < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.settings < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.toolchain < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.usability < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authentication < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authorization < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.events < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.observers < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.proxy < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.resource < plexus.core\r\n[DEBUG]   Imported: org.codehaus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.* < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.component < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.configuration < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.container < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.context < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.logging < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.personality < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.Xpp3Dom < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParser < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParserException < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlSerializer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.* < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.artifact < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.collection < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.deployment < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.graph < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.installation < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.internal.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.metadata < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.repository < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.resolution < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.spi < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.transfer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.version < plexus.core\r\n[DEBUG]   Imported: org.slf4j.* < plexus.core\r\n[DEBUG]   Imported: org.slf4j.helpers.* < plexus.core\r\n[DEBUG]   Imported: org.slf4j.spi.* < plexus.core\r\n[DEBUG] Populating class realm maven.api\r\n[INFO] Error stacktraces are turned on.\r\n[DEBUG] Reading global settings from c:\\java\\apache-maven-3.3.9\\conf\\settings.xml\r\n[DEBUG] Reading user settings from C:\\Users\\fedin\\.m2\\settings.xml\r\n[DEBUG] Reading global toolchains from c:\\java\\apache-maven-3.3.9\\conf\\toolchains.xml\r\n[DEBUG] Reading user toolchains from C:\\Users\\fedin\\.m2\\toolchains.xml\r\n[DEBUG] Using local repository at C:\\Users\\fedin\\.m2\\repository\r\n[DEBUG] Using manager EnhancedLocalRepositoryManager with priority 10.0 for C:\\Users\\fedin\\.m2\\repository\r\n[INFO] Scanning for projects...\r\n[DEBUG] Extension realms for project ru.era.ms:ms-parent:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:commons:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:java:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:commons-core:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api-core:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api-settings:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api-logs:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api-dictionaries:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api-orgstructure:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api-users:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-api-news:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-core:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-settings:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-logs:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-dictionaries:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-orgstructure:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-users:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-news:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-realm:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-ojdbc-base:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-core:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-dictionaries:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-settings:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-logs:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-orgstructure:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-users:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-news:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-realm:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:dao-pgjdbc-base:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:commons-logs:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:mail:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:amf-commons:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:web-base:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:graniteds-helper:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:smev-kernel-wsi:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:xslt:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:context-events-logger:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:security-util:jar:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:web:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:era-realm-theme-brown:war:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging war from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:era-realm-theme-green:war:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging war from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:era-realm-theme-blue:war:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging war from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:check-browser:war:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging war from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:flex-wrapper:war:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging war from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:era-realm-web:war:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging war from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Extension realms for project ru.era.commons:flex:pom:001.00.044.2-SNAPSHOT: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[WARNING] The POM for org.apache.flex:compiler:pom:4.12.1.20140427 is missing, no dependency information available\r\n[WARNING] The POM for org.apache.flex.compiler:mxmlc:jar:4.12.1.20140427 is missing, no dependency information available\r\n[WARNING] The POM for org.apache.flex.compiler:digest:jar:4.12.1.20140427 is missing, no dependency information available\r\n[WARNING] The POM for org.apache.flex.compiler:optimizer:jar:4.12.1.20140427 is missing, no dependency information available\r\n[WARNING] The POM for org.apache.flex.compiler:asdoc:jar:4.12.1.20140427 is missing, no dependency information available\r\n[WARNING] The POM for org.apache.flex.compiler:swcdepends:jar:4.12.1.20140427 is missing, no dependency information available\r\n[DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=2, ConflictMarker.markTime=1, ConflictMarker.nodeCount=415, ConflictIdSorter.graphTime=2, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=161, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=17, ConflictResolver.conflictItemCount=320, DefaultDependencyCollector.collectTime=713, DefaultDependencyCollector.transformTime=24}\r\n[DEBUG] net.flexmojos.oss:flexmojos-maven-plugin:jar:7.0.1:\r\n[DEBUG]    com.adobe.flash.framework:playerglobal:swc:18.0:runtime\r\n[DEBUG]    org.apache.flex:compiler:pom:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:asc:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:asdoc:jar:4.14.1.20150325:compile\r\n[DEBUG]       org.apache.flex.compiler:batik-all-flex:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:compc:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:copylocale:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:digest:jar:4.14.1.20150325:compile\r\n[DEBUG]       org.apache.flex.compiler:fcsh:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:fdb:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:flex-compiler-oem:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:flex-messaging-common:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:flex-tool-api:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:fxgutils:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc:jar:4.14.1.20150325:compile\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_da:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_de:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_es:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_fi:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_fr:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_it:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_ja:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_ko:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_nb:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_nl:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_pt:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_ru:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_sv:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_zh_CN:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:mxmlc_zh_TW:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:optimizer:jar:4.14.1.20150325:compile\r\n[DEBUG]       org.apache.flex.compiler:swcdepends:jar:4.14.1.20150325:compile\r\n[DEBUG]       org.apache.flex.compiler:swfdump:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:swfutils:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:velocity-dep-1.4-flex:jar:4.14.1.20150325:runtime\r\n[DEBUG]       commons-collections:commons-collections:jar:3.0:compile\r\n[DEBUG]       commons-discovery:commons-discovery:jar:0.2:runtime\r\n[DEBUG]       commons-logging:commons-logging:jar:1.0.4:compile\r\n[DEBUG]       net.java.dev.javacc:javacc:jar:5.0:runtime\r\n[DEBUG]       net.sourceforge.saxon:saxon:jar:9.1.0.8:runtime\r\n[DEBUG]       org.apache.flex.compiler:xalan:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:xercesImpl:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:xercesPatch:jar:4.14.1.20150325:runtime\r\n[DEBUG]       xml-apis:xml-apis-ext:jar:1.3.04:runtime\r\n[DEBUG]       xml-apis:xml-apis:jar:1.3.04:compile\r\n[DEBUG]       org.apache.flex.compiler:afe:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:aglj40:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:flex-fontkit:jar:4.14.1.20150325:runtime\r\n[DEBUG]       org.apache.flex.compiler:rideau:jar:4.14.1.20150325:runtime\r\n[DEBUG]    org.graniteds:granite-core:jar:2.3.2.GA:runtime\r\n[DEBUG]    org.graniteds:granite-generator-share:jar:2.3.2.GA:runtime\r\n[DEBUG]    org.graniteds:granite-generator:jar:2.3.2.GA:runtime\r\n[DEBUG]       org.codehaus.groovy:groovy-all:jar:1.6.0:compile\r\n[DEBUG]          junit:junit:jar:3.8.2:compile\r\n[DEBUG]          org.apache.ant:ant:jar:1.7.1:compile\r\n[DEBUG]          org.apache.ant:ant-launcher:jar:1.7.1:compile\r\n[DEBUG]          jline:jline:jar:0.9.94:compile\r\n[DEBUG]       javax.persistence:persistence-api:jar:1.0:compile\r\n[DEBUG]       javax.jdo:jdo2-api:jar:2.3-20090302111651:compile\r\n[DEBUG]       antlr:antlr:jar:2.7.7:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-generator-graniteds-2.2.0:jar:7.0.1:runtime\r\n[DEBUG]       javax.transaction:jta:jar:1.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-threadlocaltoolkit-wrapper:jar:7.0.1:compile\r\n[DEBUG]    org.apache.maven:maven-plugin-api:jar:3.0.4:compile\r\n[DEBUG]       org.apache.maven:maven-model:jar:3.0.4:compile\r\n[DEBUG]       org.apache.maven:maven-artifact:jar:3.0.4:compile\r\n[DEBUG]       org.sonatype.sisu:sisu-inject-plexus:jar:2.3.0:compile\r\n[DEBUG]          org.sonatype.sisu:sisu-inject-bean:jar:2.3.0:compile\r\n[DEBUG]             org.sonatype.sisu:sisu-guice:jar:no_aop:3.1.0:compile\r\n[DEBUG]                org.sonatype.sisu:sisu-guava:jar:0.9.9:compile\r\n[DEBUG]    org.apache.maven:maven-core:jar:3.0.4:compile\r\n[DEBUG]       org.apache.maven:maven-settings:jar:3.0.4:compile\r\n[DEBUG]       org.apache.maven:maven-settings-builder:jar:3.0.4:compile\r\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:3.0.4:compile\r\n[DEBUG]       org.apache.maven:maven-model-builder:jar:3.0.4:compile\r\n[DEBUG]       org.apache.maven:maven-aether-provider:jar:3.0.4:compile\r\n[DEBUG]          org.sonatype.aether:aether-spi:jar:1.13.1:compile\r\n[DEBUG]       org.sonatype.aether:aether-impl:jar:1.13.1:compile\r\n[DEBUG]       org.sonatype.aether:aether-api:jar:1.13.1:compile\r\n[DEBUG]       org.sonatype.aether:aether-util:jar:1.13.1:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-interpolation:jar:1.14:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:2.0.6:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-classworlds:jar:2.4:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile\r\n[DEBUG]       org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile\r\n[DEBUG]          org.sonatype.plexus:plexus-cipher:jar:1.4:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-flex-compiler:jar:7.0.1:compile\r\n[DEBUG]       net.flexmojos.oss:flexmojos-generator-internal-compiler-iface:jar:7.0.1:compile\r\n[DEBUG]          org.apache.ws.jaxme:jaxmejs:jar:0.5.2:compile\r\n[DEBUG]       org.sonatype.sisu.inject:guice-plexus-shim:jar:2.1.1:compile\r\n[DEBUG]          javax.inject:javax.inject:jar:1:compile\r\n[DEBUG]          org.sonatype.sisu:sisu-guice:jar:2.9.4:compile\r\n[DEBUG]             aopalliance:aopalliance:jar:1.0:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-bean-reflect:jar:2.1.1:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-bean-inject:jar:2.1.1:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-bean-locators:jar:2.1.1:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-bean-binders:jar:2.1.1:compile\r\n[DEBUG]             org.sonatype.sisu.inject:guice-bean-scanners:jar:2.1.1:compile\r\n[DEBUG]             org.sonatype.sisu.inject:guice-bean-converters:jar:2.1.1:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-plexus-metadata:jar:2.1.1:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-plexus-converters:jar:2.1.1:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-plexus-locators:jar:2.1.1:compile\r\n[DEBUG]          org.sonatype.sisu.inject:guice-plexus-binders:jar:2.1.1:compile\r\n[DEBUG]             org.sonatype.sisu.inject:guice-plexus-scanners:jar:2.1.1:compile\r\n[DEBUG]       org.hamcrest:hamcrest-library:jar:1.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-configurator:jar:7.0.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-generator-api:jar:7.0.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-generator-graniteds-2.3.2:jar:7.0.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-generator-constraints:jar:7.0.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-coverage-reporter:jar:7.0.1:compile\r\n[DEBUG]       net.sourceforge.cobertura:cobertura:jar:1.9.4.1:compile\r\n[DEBUG]          asm:asm:jar:3.0:compile\r\n[DEBUG]          asm:asm-tree:jar:3.0:compile\r\n[DEBUG]          log4j:log4j:jar:1.2.9:compile\r\n[DEBUG]       emma:emma:jar:2.0.5312:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-generator-mojo:jar:7.0.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-util:jar:7.0.1:compile\r\n[DEBUG]    net.flexmojos.oss:flexmojos-tester:jar:7.0.1:compile\r\n[DEBUG]    dom4j:dom4j:jar:1.6.1:compile\r\n[DEBUG]    org.apache.velocity:velocity:jar:1.5:compile\r\n[DEBUG]       oro:oro:jar:2.0.8:compile\r\n[DEBUG]    jaxen:jaxen:jar:1.1:compile\r\n[DEBUG]       jdom:jdom:jar:1.0:compile\r\n[DEBUG]       xerces:xercesImpl:jar:2.6.2:compile\r\n[DEBUG]       xom:xom:jar:1.0:compile\r\n[DEBUG]          xerces:xmlParserAPIs:jar:2.6.2:compile\r\n[DEBUG]          xalan:xalan:jar:2.6.0:compile\r\n[DEBUG]          com.ibm.icu:icu4j:jar:2.6.1:compile\r\n[DEBUG]    org.apache.maven.reporting:maven-reporting-api:jar:3.0:compile\r\n[DEBUG]       org.apache.maven.doxia:doxia-sink-api:jar:1.0:compile\r\n[DEBUG]    commons-lang:commons-lang:jar:2.4:compile\r\n[DEBUG]    commons-io:commons-io:jar:1.4:compile\r\n[DEBUG]    commons-httpclient:commons-httpclient:jar:3.1:compile\r\n[DEBUG]       commons-codec:commons-codec:jar:1.3:compile\r\n[DEBUG]    org.apache.maven.plugins:maven-source-plugin:jar:2.1.1:compile\r\n[DEBUG]       org.apache.maven:maven-archiver:jar:2.4:compile\r\n[DEBUG]    com.uwyn:jhighlight:jar:1.0:compile\r\n[DEBUG]       javax.servlet:servlet-api:jar:2.3:compile\r\n[DEBUG]    org.aspectj:aspectjrt:jar:1.6.12:compile\r\n[DEBUG]    eu.cedarsoft.utils:zip:jar:1.1:compile\r\n[DEBUG]       eu.cedarsoft:guice-annotations:jar:1.0:compile\r\n[DEBUG]       com.intellij:annotations:jar:6.0.3:compile\r\n[DEBUG]    net.sf.saxon:saxon-dom:jar:9.0:compile\r\n[DEBUG]    com.googlecode.lambdaj:lambdaj:jar:2.1:compile\r\n[DEBUG]       org.objenesis:objenesis:jar:1.2:compile\r\n[DEBUG]       cglib:cglib-nodep:jar:2.2:compile\r\n[DEBUG]    org.mockito:mockito-core:jar:1.8.5:compile\r\n[DEBUG]       org.hamcrest:hamcrest-core:jar:1.1:compile\r\n[DEBUG]    org.codehaus.plexus:plexus-archiver:jar:1.2:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-io:jar:1.0.1:compile\r\n[DEBUG]    com.googlecode.apparat:apparat-core:jar:1.0-RC9:compile\r\n[DEBUG]       com.googlecode.apparat:apparat-matryoshka-quiet:pom:1.0-RC9:compile\r\n[DEBUG]          com.googlecode.apparat:apparat-lzma-decoder:swc:1.0-RC9:compile\r\n[DEBUG]       com.googlecode.apparat:apparat-matryoshka-preloader:pom:1.0-RC9:compile\r\n[DEBUG]       com.googlecode.apparat:apparat-log:jar:1.0-RC9:compile\r\n[DEBUG]       com.googlecode.apparat:apparat-lzma-encoder:jar:1.0-RC9:compile\r\n[DEBUG]       org.scala-lang:scala-library:jar:2.8.1:compile\r\n[DEBUG]    com.googlecode.apparat:apparat-maven-plugin:jar:1.0-RC9:compile\r\n[DEBUG] Created new class realm extension>net.flexmojos.oss:flexmojos-maven-plugin:7.0.1\r\n[DEBUG] Importing foreign packages into class realm extension>net.flexmojos.oss:flexmojos-maven-plugin:7.0.1\r\n[DEBUG]   Imported:  < maven.api\r\n[DEBUG] Populating class realm extension>net.flexmojos.oss:flexmojos-maven-plugin:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-maven-plugin:jar:7.0.1\r\n[DEBUG]   Included: com.adobe.flash.framework:playerglobal:swc:18.0\r\n[DEBUG]   Included: org.apache.flex:compiler:pom:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:asc:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:asdoc:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:batik-all-flex:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:compc:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:copylocale:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:digest:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:fcsh:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:fdb:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:flex-compiler-oem:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:flex-messaging-common:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:flex-tool-api:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:fxgutils:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_da:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_de:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_es:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_fi:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_fr:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_it:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_ja:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_ko:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_nb:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_nl:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_pt:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_ru:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_sv:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_zh_CN:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:mxmlc_zh_TW:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:optimizer:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:swcdepends:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:swfdump:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:swfutils:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:velocity-dep-1.4-flex:jar:4.14.1.20150325\r\n[DEBUG]   Included: commons-collections:commons-collections:jar:3.0\r\n[DEBUG]   Included: commons-discovery:commons-discovery:jar:0.2\r\n[DEBUG]   Included: commons-logging:commons-logging:jar:1.0.4\r\n[DEBUG]   Included: net.java.dev.javacc:javacc:jar:5.0\r\n[DEBUG]   Included: net.sourceforge.saxon:saxon:jar:9.1.0.8\r\n[DEBUG]   Included: org.apache.flex.compiler:xalan:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:xercesImpl:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:xercesPatch:jar:4.14.1.20150325\r\n[DEBUG]   Included: xml-apis:xml-apis-ext:jar:1.3.04\r\n[DEBUG]   Included: xml-apis:xml-apis:jar:1.3.04\r\n[DEBUG]   Included: org.apache.flex.compiler:afe:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:aglj40:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:flex-fontkit:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.apache.flex.compiler:rideau:jar:4.14.1.20150325\r\n[DEBUG]   Included: org.graniteds:granite-core:jar:2.3.2.GA\r\n[DEBUG]   Included: org.graniteds:granite-generator-share:jar:2.3.2.GA\r\n[DEBUG]   Included: org.graniteds:granite-generator:jar:2.3.2.GA\r\n[DEBUG]   Included: org.codehaus.groovy:groovy-all:jar:1.6.0\r\n[DEBUG]   Included: junit:junit:jar:3.8.2\r\n[DEBUG]   Included: org.apache.ant:ant:jar:1.7.1\r\n[DEBUG]   Included: org.apache.ant:ant-launcher:jar:1.7.1\r\n[DEBUG]   Included: jline:jline:jar:0.9.94\r\n[DEBUG]   Included: javax.persistence:persistence-api:jar:1.0\r\n[DEBUG]   Included: javax.jdo:jdo2-api:jar:2.3-20090302111651\r\n[DEBUG]   Included: antlr:antlr:jar:2.7.7\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-generator-graniteds-2.2.0:jar:7.0.1\r\n[DEBUG]   Included: javax.transaction:jta:jar:1.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-threadlocaltoolkit-wrapper:jar:7.0.1\r\n[DEBUG]   Included: org.sonatype.sisu:sisu-inject-bean:jar:2.3.0\r\n[DEBUG]   Included: org.sonatype.sisu:sisu-guice:jar:no_aop:3.1.0\r\n[DEBUG]   Included: org.sonatype.sisu:sisu-guava:jar:0.9.9\r\n[DEBUG]   Included: org.sonatype.aether:aether-util:jar:1.13.1\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-interpolation:jar:1.14\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:2.0.6\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-component-annotations:jar:1.5.5\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-cipher:jar:1.4\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-flex-compiler:jar:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-generator-internal-compiler-iface:jar:7.0.1\r\n[DEBUG]   Included: org.apache.ws.jaxme:jaxmejs:jar:0.5.2\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-plexus-shim:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu:sisu-guice:jar:2.9.4\r\n[DEBUG]   Included: aopalliance:aopalliance:jar:1.0\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-bean-reflect:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-bean-inject:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-bean-locators:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-bean-binders:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-bean-scanners:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-bean-converters:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-plexus-metadata:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-plexus-converters:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-plexus-locators:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-plexus-binders:jar:2.1.1\r\n[DEBUG]   Included: org.sonatype.sisu.inject:guice-plexus-scanners:jar:2.1.1\r\n[DEBUG]   Included: org.hamcrest:hamcrest-library:jar:1.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-configurator:jar:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-generator-api:jar:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-generator-graniteds-2.3.2:jar:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-generator-constraints:jar:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-coverage-reporter:jar:7.0.1\r\n[DEBUG]   Included: net.sourceforge.cobertura:cobertura:jar:1.9.4.1\r\n[DEBUG]   Included: asm:asm:jar:3.0\r\n[DEBUG]   Included: asm:asm-tree:jar:3.0\r\n[DEBUG]   Included: log4j:log4j:jar:1.2.9\r\n[DEBUG]   Included: emma:emma:jar:2.0.5312\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-generator-mojo:jar:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-util:jar:7.0.1\r\n[DEBUG]   Included: net.flexmojos.oss:flexmojos-tester:jar:7.0.1\r\n[DEBUG]   Included: dom4j:dom4j:jar:1.6.1\r\n[DEBUG]   Included: org.apache.velocity:velocity:jar:1.5\r\n[DEBUG]   Included: oro:oro:jar:2.0.8\r\n[DEBUG]   Included: jaxen:jaxen:jar:1.1\r\n[DEBUG]   Included: jdom:jdom:jar:1.0\r\n[DEBUG]   Included: xerces:xercesImpl:jar:2.6.2\r\n[DEBUG]   Included: xom:xom:jar:1.0\r\n[DEBUG]   Included: xerces:xmlParserAPIs:jar:2.6.2\r\n[DEBUG]   Included: xalan:xalan:jar:2.6.0\r\n[DEBUG]   Included: com.ibm.icu:icu4j:jar:2.6.1\r\n[DEBUG]   Included: org.apache.maven.reporting:maven-reporting-api:jar:3.0\r\n[DEBUG]   Included: org.apache.maven.doxia:doxia-sink-api:jar:1.0\r\n[DEBUG]   Included: commons-lang:commons-lang:jar:2.4\r\n[DEBUG]   Included: commons-io:commons-io:jar:1.4\r\n[DEBUG]   Included: commons-httpclient:commons-httpclient:jar:3.1\r\n[DEBUG]   Included: commons-codec:commons-codec:jar:1.3\r\n[DEBUG]   Included: org.apache.maven.plugins:maven-source-plugin:jar:2.1.1\r\n[DEBUG]   Included: org.apache.maven:maven-archiver:jar:2.4\r\n[DEBUG]   Included: com.uwyn:jhighlight:jar:1.0\r\n[DEBUG]   Included: javax.servlet:servlet-api:jar:2.3\r\n[DEBUG]   Included: org.aspectj:aspectjrt:jar:1.6.12\r\n[DEBUG]   Included: eu.cedarsoft.utils:zip:jar:1.1\r\n[DEBUG]   Included: eu.cedarsoft:guice-annotations:jar:1.0\r\n[DEBUG]   Included: com.intellij:annotations:jar:6.0.3\r\n[DEBUG]   Included: net.sf.saxon:saxon-dom:jar:9.0\r\n[DEBUG]   Included: com.googlecode.lambdaj:lambdaj:jar:2.1\r\n[DEBUG]   Included: org.objenesis:objenesis:jar:1.2\r\n[DEBUG]   Included: cglib:cglib-nodep:jar:2.2\r\n[DEBUG]   Included: org.mockito:mockito-core:jar:1.8.5\r\n[DEBUG]   Included: org.hamcrest:hamcrest-core:jar:1.1\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-archiver:jar:1.2\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-io:jar:1.0.1\r\n[DEBUG]   Included: com.googlecode.apparat:apparat-core:jar:1.0-RC9\r\n[DEBUG]   Included: com.googlecode.apparat:apparat-matryoshka-quiet:pom:1.0-RC9\r\n[DEBUG]   Included: com.googlecode.apparat:apparat-lzma-decoder:swc:1.0-RC9\r\n[DEBUG]   Included: com.googlecode.apparat:apparat-matryoshka-preloader:pom:1.0-RC9\r\n[DEBUG]   Included: com.googlecode.apparat:apparat-log:jar:1.0-RC9\r\n[DEBUG]   Included: com.googlecode.apparat:apparat-lzma-encoder:jar:1.0-RC9\r\n[DEBUG]   Included: org.scala-lang:scala-library:jar:2.8.1\r\n[DEBUG]   Included: com.googlecode.apparat:apparat-maven-plugin:jar:1.0-RC9\r\n[DEBUG] Extension realms for project ru.era.commons:flex-assets:swc:001.00.044.2-SNAPSHOT: [ClassRealm[extension>net.flexmojos.oss:flexmojos-maven-plugin:7.0.1, parent: sun.misc.Launcher$AppClassLoader@4b67cf4d]]\r\n[DEBUG] Created new class realm project>ru.era.commons:flex-assets:001.00.044.2-SNAPSHOT\r\n[DEBUG] Populating class realm project>ru.era.commons:flex-assets:001.00.044.2-SNAPSHOT\r\n[DEBUG] Looking up lifecyle mappings for packaging swc from ClassRealm[project>ru.era.commons:flex-assets:001.00.044.2-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]\r\n[ERROR] Internal error: java.lang.ClassCastException: java.lang.String cannot be cast to org.apache.maven.lifecycle.mapping.LifecyclePhase -> [Help 1]\r\norg.apache.maven.InternalErrorException: Internal error: java.lang.ClassCastException: java.lang.String cannot be cast to org.apache.maven.lifecycle.mapping.LifecyclePhase\r\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:121)\r\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)\r\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)\r\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:199)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\r\nCaused by: java.lang.ClassCastException: java.lang.String cannot be cast to org.apache.maven.lifecycle.mapping.LifecyclePhase\r\n\tat org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer.getPluginsBoundByDefaultToAllLifecycles(DefaultLifecyclePluginAnalyzer.java:119)\r\n\tat org.apache.maven.model.plugin.DefaultLifecycleBindingsInjector.injectLifecycleBindings(DefaultLifecycleBindingsInjector.java:64)\r\n\tat org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:451)\r\n\tat org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:421)\r\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:620)\r\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:626)\r\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:626)\r\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:626)\r\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:411)\r\n\tat org.apache.maven.graph.DefaultGraphBuilder.collectProjects(DefaultGraphBuilder.java:419)\r\n\tat org.apache.maven.graph.DefaultGraphBuilder.getProjectsForMavenReactor(DefaultGraphBuilder.java:410)\r\n\tat org.apache.maven.graph.DefaultGraphBuilder.build(DefaultGraphBuilder.java:83)\r\n\tat org.apache.maven.DefaultMaven.buildGraph(DefaultMaven.java:491)\r\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:219)\r\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)\r\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)\r\n\t... 11 more\r\n[ERROR] \r\n[ERROR] \r\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\r\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/InternalErrorException\r\n"
    ],
    [
        "MNG-2868",
        "MNG-5280",
        "Replicate MNG-1577 on trunk I need to get patrick to rework the patch for MNG-1577 for trunk or take a swing at it myself.",
        "Inconsistent order of repositories and pluginRepositories from profiles in settings (regression Maven 3) Repositories and pluginRepositories defined in profiles in settings.xml are not order consistently. This is a regression compared to Maven 2.\n\nScenario:\n* Settings.xml defines two profiles, A and B (in this order).\n* Both profiles define a repository and a pluginRepository, A-repo/A-pluginrepo and B-repo/B-pluginrepo respectively.\n\nWhen checking the effective pom (help:effective-pom) the resulting list of repositories and pluginRepositories shows that they are not ordered consistently. The order is B-repo, A-repo and A-pluginrepo, B-pluginrepo respectively. With Maven 2.2.1 they are ordered consistently (and what I argue is correct): B-repo, A-repo and B-pluginrepo, A-pluginrepo."
    ],
    [
        "MNG-2623",
        "MNG-4658",
        "New LHS Menu Reformatted the left-hand side menu to help new and existing user navigation.\n\nhttp://www.propellors.net/maven/site/index.html\n",
        "Relax validation of repository ids and only warn upon conflict with \"local\" It turned that the validation error that was put in for MNG-4418 affects too many projects. So we're going to relax this to a warning and leave the error (or maybe even a smarter solution that avoid any metadata clashing) to a future release, thereby smoothing the upgrade path."
    ],
    [
        "MNG-5024",
        "MNG-2337",
        "Update default plugin versions Maven 3.0.2 currently defaults to surefire:2.7.1. Since then, surefire:2.7.2 has been released by Kristian and is the better default version.",
        "XSLT for converting Maven1 project.xml to Maven2 pom.xml Attached is an XSLT script that converts a Maven 1 project.xml to Maven 2 pom.xml.  Please update this page:\nhttp://maven.apache.org/guides/mini/guide-m1-m2.html\nto offer this useful script."
    ],
    [
        "MNG-4688",
        "MNG-3352",
        "Clover 3.0.2 plugin is not working with Maven 3 The clover build is returning the error:\n\n[ERROR] Failed to execute goal com.atlassian.maven.plugins:maven-clover2-plugin:3.0.2:clover (default-cli) on project co\nm.ccadllc.mediacipher: An error has occurred in Clover report generation. Could not resolve default-clover-report.xml. P\nlease try specifying this via the maven.clover.reportDescriptor property. Failed to load resource as file [/default-clov\ner-report.xml]: Could not find resource '/default-clover-report.xml'. -> [Help 1]\n\n\nHowever, this file is located inside the maven-clover2-plugin-3.0.2.jar.\n\nThis problem does not occur on maven 2.\n\nThe problem can be worked around by extracting the file to a local directory and setting -Dmaven.clover.reportDescriptor.",
        "install:install-file fails in plexus-tools/plexus-javadoc with NPE related to an ArtifactRepositoryLayout that cannot be found. "
    ],
    [
        "MNG-4175",
        "MNG-3473",
        "Dependency mediation - allow for different strategies Currently there is one strategy for handling artifact resolution conflicts: the nearest match wins. That means that the order of artifacts in your POM matters. For an example see attachment 1. Your main artifact A depends on B, C and D which in turn depend on E. However, B, C and D depend on different versions of E. If B is the first dependency in your POM, then A would have a dependency on version 1.0.0 of E (see attach 2). If you'd list D as your first dependency, you would end up with E 1.5.0.\n\n*simple work arounds*\nThere are a couple of simple solutions available:\n* List E in A's POM with the required version\n_this is more or less in conflict with transitive dependency management_\n* Change the order in A's POM to make sure D is the first artifact\n_which is quite a tedious and error prone task_\n\nIn large environments which heavily rely on component based architecture - and as such require advanced dependency mediation - these work around are not really applicable. You would like to have A's POM as clean as possible and make sure B, C and D get their dependencies by transitive dependency management.\n\n*Opt for alternate mediation*\nI think the _nearest wins_ scheme suits most users. However, in more complex en larger environments you'd probably need something more enhanced. My idea is to compare the versions of E, no matter the depth of E in your tree. Then use the _Default Version comparison_ definition described at [http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution]. Then do the following:\n* If there's a major version difference of E (2.x.y vs 1.u.v) -> I would say raise an error (not yet made up my mind about this)\n* If there's a minor version difference of E (1.5.x vs 1.0.y) -> Choose the highest one\n* If there's a revision (or bugfix) version difference of E (1.1.x vs 1.1.y) -> Choose the highest one\n\nMaybe this suits only me, but then still it would be nice to be able to implement this custom scheme. Currently this is not possible.",
        "site generation with 2.0.9 and plugin:report (2.4 ONLY) is broken Generating a site that works in 2.0.8 breaks in 2.0.9 with an exception: Caused by: java.lang.NoClassDefFoundError: org/apache/maven/doxia/module/site/manager/SiteModuleNotFoundException\n\nThere is already a committed IT for this. It may be related to issues with MPLUGIN-104, however in this case the 2.4 version of the plugin does work in 2.0.8 so we need to investigate it in the core as well."
    ],
    [
        "MNG-977",
        "MNG-5555",
        "remove need for plugin groups we could store the avilable plugin groups at the root of the repository and grab those instead",
        "@parameter expression=\"${mojoExecution.lifecyclePhase}\" does not work in 3.1.1 Maven-core:3.1.1\n{code:java}/**\n  * @parameter expression=\"${mojoExecution}\"\n*/\n@Parameter(defaultValue = \"${mojoExecution}\")\nprivate org.apache.maven.plugin.MojoExecution execution;\npublic org.apache.maven.plugin.MojoExecution getExecution(){ return execution; }\n/**\n * @parameter expression=\"${mojoExecution.lifecyclePhase}\"\n */\n@Parameter(defaultValue = \"${mojoExecution.lifecyclePhase}\")\nprivate String lifecyclePhase;\npublic org.apache.maven.model.Plugin plugin=new org.apache.maven.model.Plugin();\npublic String getLifecyclePhase()\n{\n\tif(lifecyclePhase==null)\n\t{\n\t\tplugin.setGroupId(\"org.apache.maven.plugins\");\n\t\tplugin.setArtifactId(\"maven-compiler-plugin\");\n\t\tplugin.setVersion(\"3.1\");\n\t\tString goal=\"compile\";\n\t\tString executionId=\"executionId\";\n\t\tSystem.out.println(\"CompilerMojoTestCase::getLifecyclePhase goal=\"+goal+\" executionId=\"+executionId);\n\t\torg.apache.maven.plugin.MojoExecution mojo=new org.apache.maven.plugin.MojoExecution((org.apache.maven.model.Plugin)plugin, goal, executionId );\n\t\tlifecyclePhase= mojo.getLifecyclePhase();\n\t}\n\treturn lifecyclePhase;\n}{code}\nproduces:\n{noformat}CompilerMojoTestCase::getLifecyclePhase goal=compile executionId=executionId\nCompilerMojoTestCase::testCompilerBasic LINE 143 getLifeyclePhase()=     null{noformat}\n\nI am using 3.1.1 jars top to botton\nwhy does lifecyclePhase always produce null?"
    ],
    [
        "MNG-1027",
        "MNG-3499",
        "Deployed manifest classpaths contain SNAPSHOT filenames When deploying a snapshot that includes the classpath in it's manifest, the SNAPSHOT.jar filenames are written into the manifest rather than the actual deployed <timestamp>.jar filenames.",
        "Checkstyle plugin doesn't work with Maven 2.1 Running \"mvn clean install\" with the following configuration fails:\n\n{code}\n  <build>\n    <plugins>\n...\n      <plugin>\n        <!-- Apply the Checkstyle configurations defined in the top level pom.xml file -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <dependencies>\n          <dependency>\n            <groupId>com.xpn.xwiki.platform</groupId>\n            <artifactId>xwiki-build-verifications</artifactId>\n            <version>1.1</version>\n          </dependency>\n        </dependencies>\n        <configuration>\n          <includes>\n              **/Api.java,\n              **/xmlrpc/ConfluenceRpcInterface,\n              **/xmlrpc/Attachment.java,\n              **/xmlrpc/SpaceSummary.java,\n              **/ViewAction.java,\n              **/ZipExplorer*.java,\n              **/FileUpload*.java,\n              **/PluginApi.java,\n              **/content/**/*.java,\n              **/XWikiMessageTool.java,\n              **/XWikiListFilter.java,\n              **/MyPersistentLoginManager.java\n          </includes>\n          <excludes>\n              **/RenamePageReplaceLinkHandler.java\n          </excludes>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n{code}\n\nI have the following in the top level pom:\n{code}\n  <build>\n    <pluginManagement>\n      <plugins>\n        <!-- Apply checkstyle rules and fail the build in case of errors. The checkstyle config\n             files are taken from the build-tools JAR module.-->\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-checkstyle-plugin</artifactId>\n          <dependencies>\n            <dependency>\n              <groupId>com.xpn.xwiki.platform</groupId>\n              <artifactId>xwiki-build-verifications</artifactId>\n            </dependency>\n          </dependencies>\n          <configuration>\n            <consoleOutput>true</consoleOutput>\n            <configLocation>checkstyle.xml</configLocation>\n            <headerLocation>checkstyle.license</headerLocation>\n          </configuration>\n          <executions>\n            <execution>\n              <goals>\n                <goal>check</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n...\n{code}\n\nThe error I get:\n\n{noformat}\n...\n[DEBUG] Mojo: check has config:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <includes>**/Api.java,\n              **/xmlrpc/ConfluenceRpcInterface,\n              **/xmlrpc/Attachment.java,\n              **/xmlrpc/SpaceSummary.java,\n              **/ViewAction.java,\n              **/ZipExplorer*.java,\n              **/FileUpload*.java,\n              **/PluginApi.java,\n              **/content/**/*.java,\n              **/XWikiMessageTool.java,\n              **/XWikiListFilter.java,\n              **/MyPersistentLoginManager.java</includes>\n  <excludes>**/RenamePageReplaceLinkHandler.java</excludes>\n  <consoleOutput>true</consoleOutput>\n  <configLocation>checkstyle.xml</configLocation>\n  <headerLocation>checkstyle.license</headerLocation>\n</configuration>\n[DEBUG] In verifyVersionedPlugin for: org.apache.maven.plugins:maven-checkstyle-plugin\n[DEBUG] maven-checkstyle-plugin: using locally installed snapshot\n[DEBUG] org.apache.maven.plugins:maven-checkstyle-plugin:maven-plugin:2.2-SNAPSHOT:runtime (selected for runtime)\n...\n[DEBUG] Looking up mojo org.apache.maven.plugins:maven-checkstyle-plugin:2.2-SNAPSHOT:check in realm org.apache.maven.plugins:maven-checkstyle-plugin - descRealmId=org.apache.maven.plugins:maven-checkstyle-plugin\n[DEBUG] Looked up - org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo@8c63a6 - ClassRealm[org.apache.maven.plugins:maven-checkstyle-plugin, parent: ClassRealm[plexus.core, parent: null]]\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-checkstyle-plugin:2.2-SNAPSHOT:check' -->\n[DEBUG]   (f) failOnViolation = true\n[DEBUG]   (f) outputFile = /Users/vmassol/dev/xwiki/trunks-devs/xwiki-platform-core/target/checkstyle-result.xml\n[DEBUG]   (f) outputFileFormat = xml\n[DEBUG]   (f) skip = false\n[DEBUG] -- end configuration --\n[INFO] [checkstyle:check]\n[INFO] Unable to perform checkstyle:check, unable to find checkstyle:checkstyle outputFile.\n...\n{noformat}\n\nThe strange thing is that if I run \"mvn checkstyle:checkstyle\" or \"mvn checkstyle:check\", it works fine...\n\nThanks"
    ],
    [
        "MNG-5348",
        "MNG-5345",
        "possibility for Interpolation just on runtime?! Is there a possibility in Maven, especially when using the release-plugin, to interpolate properties just in runtime so that the files stay originally without replaced variables!?\n",
        "command line option to get status of last build I would find it very useful to be able to quickly get the status of my last build (without having to dig out the log or look at the date of generated artifacts).\n\nSomething like \"mvn status\" that immediately gives me a quick glance at the project's health in my local workspace, as I don't want to and cannot rely on a CI server for this."
    ],
    [
        "MNG-1337",
        "MNG-5789",
        "Interpolation of POM values needs to be improved Currently there are a few problems with POM interpolation:\n\n1) Things like ${pom.organization.name} show with the ${pom.name}\n\n2) ${pom.build.directory} is always null\n\nI think using velocity like interpolation here would be better but performance might be an issue.",
        "README.txt in distro doesn't say Maven 3.3.1 requires JDK 1.7 README.txt needs to be updated to specify that Maven 3.3+ requires JDK 1.7"
    ],
    [
        "MNG-3435",
        "MNG-5757",
        "fix for MNG2277 has not been merged to trunk, causing an integration test failure ",
        "update aether to 1.0.2 "
    ],
    [
        "MNG-701",
        "MNG-2699",
        "extract pom conversion code to create a standalone tool useful for getting started on an m1 to m2 conversion tool",
        "2.1 mvn.bat is broken because classworlds was renamed (patch attached) No karma in core, only plugins so here's the patch. The line was looking for classworlds-* when it's now plexus-classworlds-*"
    ],
    [
        "MNG-3974",
        "MNG-3656",
        "New mirror syntax is not stopping on first match The first match of a pattern should be returned, but the last one is being found.\n\nExact matches should always supercede a pattern.",
        "Collect all version information in the top-level POM, and manage with a set of properties The impetus is to control the versions used from one simple location. We have had many proposals in the past, but in the short term a set of properties is easy to manipulate using execution request properties. This allows the collection in small, short span in the POM and will allow the easy swapping of versions for inter-component/library integration builds."
    ],
    [
        "MNG-2036",
        "MNG-5852",
        "The clean plugin requires dependent plugins defined in a project's pom.xml to be in the repository before it can perform a clean It appears that any plugins that are in my pom.xml need to be downloaded before clean can work, otherwise it fails with unsatisfied dependencies (for example, I can't clean our distribution until the rest of the plugins of our build are installed).",
        "\"mvn\" script invokes /bin/sh but requires /bin/bash functions The bin/mvn script uses the \"local\" command which is a shell builtin of bash and similar shells, but is not required for POSIX-compliance in sh.  When I attempt to run mvn on my Solaris system, I see the following output:\r\n\r\n$ ./mvn\r\n./mvn[200]: local: not found [No such file or directory]\r\n./mvn[201]: local: not found [No such file or directory]\r\n...\r\n\r\nLines 200 and 201 invoke \"local\" to make local variables to the function.  According to \"man bash\", this is a shell builtin.  However, bin/mvn is invoked as:\r\n\r\n#!/bin/sh\r\n\r\nOn most flavors of linux, this resolves to bash or dash which probably runs in a restricted environment after checking to see that its $0 is sh. But on Solaris's /bin/sh is actually ksh93 for backwards compatibility.\r\n\r\nSince \"local\" is not part of a POSIX-compliant /bin/sh, depending on it in a script that is invoked with /bin/sh is a bug.\r\n\r\n"
    ],
    [
        "MNG-3066",
        "MNG-2149",
        "Allow the specification of modules with project coordinates Currently, modules can only be specified by the parent POM as \"simple paths\", i.e., relative to the current project, like \"module-a\" and \"../module-a\". This explicit filesystem relation between parent project and modules can cause issues like CONTINUUM-1163.\n\nIt makes sense to allow modules to be specified with project coordinates, like:\n\n<module>\n  <artifactId>module-a</artifactId>\n  <groupId>com.mygroup</groupId>\n</module>\n\nThis way no explicit filesystem or SCM relation has to exist. The only requirement would be that the parent project is able to locate the specified artifact in one of its defined repositories (or repositories from settings.xml), and the artifact's POM contain an SCM section so that it can check out the code.\n\nFrom there, maven can decide what temporary space to check out and build the \"child\" project in, perhaps .m2-workspace or .m2-modules-temp in the user-home. Perhaps this also could be configured in settings.xml just like the local repository location.\n\nThe value of this would be:\n* Parent projects no longer have to exist \"one level above\" or relative to all of its modules in SCM and the checkout filesystem.\n* When SCM is organized such that not all of the module projects are in the same folder, project coordinates could be simpler than relative paths.\n* When not all of the projects are in the same SCM repos, then the current module scheme won't even work.\n* It would be nice to have the ability to create ad-hoc parent POMs just for the purpose of executing arbitrary group builds. The modules can't specify more than one parent, but there may be more than one grouping from the top-down perspective.\n** A good example is where a team has several groupIds that all of their projects are grouped into. Perhaps they don't want use parent POMs, or each group has unique configuration and so each has a different parent POM for its projects to inherit. Then, the group wants to run a global dashboard (dashboard-maven-plugin) report on all projects in all groups but not really use this new parent POM for inheritance or settings, only for the aggregation. They'd like this so that there is one place to go to observe the health of the team's projects.\n* Finally, some operating systems (to remained un-named because this is their defect...) have path limits of around 255 characters. Sometimes forcing modules to exist under or relative to their parent causes the checkouts for the group to surpass this limit. If there are projects already close to this limit, the path of the parent project can push paths of package directories and long class-names on over that limit.",
        "Why have aggregator projects? Can't we just add <module/> tags in normal pom.xml files and have them behave transitively? At the moment, we have to have an aggregator xml file with <packaging>pom</packaging> in order to build multiple modules.\n\nWhy can't my ss_base_applet module contain:\n<module>../ss_base_shared</module>\n\nThis would mean that whenever ss_base_applet was built, it built ss_base_shared too (taking into account the dependency definitions to work out the order).\n\nThere would, of course, need to be a command line switch to say (\"don't build sub modules\"). It already exists!\n-N,--non-recursive            Do not recurse into sub-projects\n\nHere's my current aggregator pom. I'd much prefer to define these transitively in the same way that I can define the dependencies transitively:\n    <modules>\n        <!-- Ensure that the parent pom is installed -->\n        <module>../SSBuild</module>\n        \n        <!-- Modules shared between all SalesStation instances -->\n        <module>../FET_S</module>\n        <module>../ss_base_shared</module>\n        <module>../ss_offering_shared</module>\n        <module>../ss_offering_lib</module>\n        <module>../ss_base_applet</module>\n        <module>../sales_station_lib</module>\n        <module>../sales_station_applet</module>\n        <module>../SS</module>\n        \n        <!-- CDS modules -->\n        <module>../cds_ss_shared</module>\n        <module>../cds_ss_applet</module>\n        <module>../cds_ss_lib</module>\n        <module>../CDSSS</module>\n        <module>../CDSSS-ear</module>\n        \n        <!-- EGB and Credit modules -->\n        <module>../gov_ss_base_shared</module>\n        <module>../gov_ss_base_applet</module>\n        <module>../egb_ss_lib</module>\n        <module>../credit_ss_lib</module>\n        <module>../ss_cats_lib</module>\n        <module>../ss_ecn_handler</module>\n        <module>../egb_ss_ecn_handler</module>\n        <module>../egb_ss_shared</module>\n        <module>../egb_ss_applet</module>\n        <module>../credit_ss_applet</module>\n        <module>../credit_ss_shared</module>\n        <module>../EgbSS</module>\n        <module>../EgbSS-ear</module>\n    </modules>"
    ],
    [
        "MNG-1417",
        "MNG-2686",
        "Relocated artifacts hide other versions that should be picked The output of mvn -X shows nothing about the servlet-api 2.4\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>test</groupId>\n  <version>1</version>\n  <artifactId>test</artifactId>\n  <dependencies>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>servletapi</groupId>\n            <artifactId>servletapi</artifactId>\n            <version>2.3</version>\n        </dependency>\n  </dependencies>\n</project>\n\n\nThis is other test that fails\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>test</groupId>\n  <version>1</version>\n  <artifactId>test</artifactId>\n  <dependencies>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-chain</groupId>\n            <artifactId>commons-chain</artifactId>\n            <version>1.0</version>\n        </dependency>\n  </dependencies>\n</project>",
        "POM dependency scope auto-downgrades from provided to test My project has a dependency on:\nXXX:YYY:jar:1.0-SNAPSHOT (selected for null)\nwith transitive dependency:\ncommons-logging:commons-logging:jar:1.1:test\nand again triggering a transitive dependency on:\njavax.servlet:servlet-api:jar:2.3:test (selected for test)\n\nLater on the project also has a dependency:\nAAA:BBB-container:pom:1.0-SNAPSHOT:provided (selected for provided)\nI use this to represent the dependencies provided by the J2EE container in which the application will be deployed.\nThis triggers via:\ntomcat:catalina:jar:5.5.15:provided (selected for provided)\nthe following funny thing:\njavax.servlet:servlet-api:jar:2.4:provided (removed - nearer found: 2.3)\n\nLeaving me without servlet-api for the compile scope."
    ],
    [
        "MNG-1365",
        "MNG-2334",
        "Document how to make a download link on your site An addition to the guide-site.apt document.",
        "When the embedder starts up for the first time and the user doesn't have maven installed the default directories should be created. When the embedder is used for the first time and the user doesn't have maven installed the embedder can sometimes fail because certain directories don't exist. If the embedder is executed things are fine, but if the embedder is used to read a project it will fail from a virgin state."
    ],
    [
        "MNG-2589",
        "MNG-3588",
        "Inherit transitive dependencies with runtime scope Transitive dependencies of scope \"compile\" should be inherited with scope \"runtime\" only. This would avoid unwanted usage of 3rd party packages and make explicit dependencies visible. It should be possible at least to run Maven in such a mode.",
        "${maven.repo.local} in settings.xml doesn't work. I can't use ${maven.repo.local} parameter inside settings.xml file. The parameter is simply ignored.\n\n<settings>\n    <localRepository>c:\\base_repo_location</localRepository>\n\n    <profiles>\n         <profile>\n            <id>my-profile</id>\n             <properties>\n                 <maven.repo.local>C:\\alternative_repo_location</maven.repo.local>\n             </properties>     \n          </profile>\n    </profiles>\n</settings>\n\nWhen I run \n\"mvn -P my-profile package\" \nall downloaded artifacts are stored under \"c:\\base_repo_location\" not \"C:\\alternative_repo_location\".\n\nWhen I run \n\"mvn -Dmaven.repo.local=C:\\alternative_repo_location package\" package\nartifacts are stored under \"C:\\alternative_repo_location\" as I expected.\n"
    ],
    [
        "MNG-314",
        "MNG-511",
        "dependency with type pom is included on the compile classpath need to make sure only compileable artifacts (JARs and EJBs at the moment) do this.",
        "only retrieve metadata to determine version in version manager, not resolve plugin artifact utilise the metadata source instead of a resolver."
    ],
    [
        "MNG-2796",
        "MNG-5530",
        "Yet another snapshot/timestamp version resolution problem In the geronimo openejb3 integration we've encountered yet another problem with broken version resolution.  It would be great if the maven team could fix these problems soon: I think that the geronimo and openejb developers have now spent several weeks trying to understand bizarre version resolution errors and trying to find workarounds for them.\n\nHere's what we think the relevant project details are.   Reproducing this problem requires deploying snapshots at different revision numbers so I don't really see how to provide a test project.\n\nopenejb project structure:\n\nbase openejb pom\n\nopenejb container pom, parent is openejb pom.  Snapshot deployed with a timestamped version 3.0-incubating-20070126.103431-21\n\nopenejb server pom, parent is openejb pom.  Snapshot deployed with a timestamped version 3.0-incubating-20070126.103431-20\n  server pom has a dependency on container pom, using this:\n\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.openejb</groupId>\n      <artifactId>container</artifactId>\n      <version>${pom.version}</version>\n      <type>pom</type>\n      <scope>compile</scope>\n    </dependency>\n  </dependencies>\n\n\nSubproject server/openejb-ejbd, parent pom is server.pom.  Snapshot deployed at 3.0-incubating-20070126.103431-20\n\nBoth container and server are pom-packaged projects, i.e. they have no code of their own.\n\nOpenejb builds and deploys fine by itself, and the timestamped versions are as indicated above.\n\ngeronimo-openejb module has a dependency\n\n        <dependency>\n            <groupId>org.apache.openejb</groupId>\n            <artifactId>openejb-ejbd</artifactId>\n        </dependency>\n\nwhose version is supplied in an ancestor dependencyManagement section:\n\n            <dependency>\n                <groupId>org.apache.openejb</groupId>\n                <artifactId>openejb-ejbd</artifactId>\n                <version>${openejbVersion}</version>\n            </dependency>\n\nwhere\n\n        <openejbVersion>3.0-incubating-SNAPSHOT</openejbVersion>\n\n\nWhen we build the geronimo-openejb module in geronimo the build breaks because the incorrect version of openejb container is resolved:\n\nThis appears to be the relevant section of the -X trace, note that after the incorrect non-resolution at -20 container is correctly resolved at -21 a few lines later:\n\n[DEBUG] openejb-client: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:server::3.0-incubating-SNAPSHOT for project: null:openejb-client:jar:3.0-incubating-20070126.103431-20 from the repository.\n[DEBUG] server: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:openejb::3.0-incubating-SNAPSHOT for project: null:server:pom:null from the repository.\n[DEBUG] openejb: resolved to version 3.0-incubating-20070126.103431-22 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache:apache::3 for project: org.apache.openejb:openejb:pom:3.0-incubating-SNAPSHOT from the repository.\n[DEBUG]     org.apache.openejb:openejb-client:jar:3.0-incubating-SNAPSHOT:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.specs:specs::1.2 for project: null:geronimo-ejb_3.0_spec:jar:1.0-M1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis.config:project-config::1.1 for project: org.apache.geronimo.specs:specs:pom:1.2 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis.config:config::1.1 for project: null:project-config:pom:null from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis:genesis::1.1 for project: org.apache.geronimo.genesis.config:config:pom:null from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::3 for project: org.apache.geronimo.genesis:genesis:pom:1.1 from the repository.\n[DEBUG]       org.apache.geronimo.specs:geronimo-ejb_3.0_spec:jar:1.0-M1:compile (removed - nearer found: 1.0)\n[DEBUG] Artifact not found - using stub model: System is offline.\n\n  org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20\n\n\n[DEBUG] Using defaults for missing POM org.apache.openejb:container:pom:3.0-incubating-SNAPSHOT:compile\n[DEBUG]       org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-ejb_3.0_spec:jar:1.0-M1:compile (removed - nearer found: 1.0)\n[DEBUG]     org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20:compile (selected for compile)\n[DEBUG] Skipping disabled repository tomcat-m2-repo\n[DEBUG] Skipping disabled repository apache-incubator\n[DEBUG] Skipping disabled repository codehaus\n[DEBUG] Skipping disabled repository central\n[DEBUG] openejb-core: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:container::3.0-incubating-SNAPSHOT for project: null:openejb-core:jar:3.0-incubating-20070126.103431-20 from the repository.\n[DEBUG] Skipping disabled repository tomcat-m2-repo\n[DEBUG] Skipping disabled repository apache-incubator\n[DEBUG] Skipping disabled repository codehaus\n[DEBUG] Skipping disabled repository central\n[DEBUG] container: resolved to version 3.0-incubating-20070126.103431-21 from repository apache.snapshots\n[\n\nThe error at the end of the build is:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nMissing:\n----------\n1) org.apache.openejb:container:pom:3.0-incubating-SNAPSHOT\n  Path to dependency: \n  \t1) org.apache.geronimo.modules:geronimo-openejb:jar:2.0-M2-SNAPSHOT\n  \t2) org.apache.openejb:openejb-ejbd:jar:3.0-incubating-SNAPSHOT\n  \t3) org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20\n\n----------\n1 required artifact is missing.\n\nfor artifact: \n  org.apache.geronimo.modules:geronimo-openejb:jar:2.0-M2-SNAPSHOT\n...\n...\n\nChanging the ${pom.version} to 3.0-incubating-SNAPSHOT fixes the issue as apparently does defining a property\n\n<version>3.0-incubating-SNAPSHOT</version> and replacing ${pom.version} with ${version}\n\n---------------------------------------\nThere are a lot of possibly related issues:\nMNG-2339\nMNG-2486\nMNG-2647\nMNG-2651\nMNG-2653\nMNG-2756\nMNG-2782\n\n",
        "mojo execution guice scope It'd be nice to have custom Guice scope (http://code.google.com/p/google-guice/wiki/Scopes) for each mojo execution. This would allow mojo execution configuration and related objects to be injected in regular JSR330 components."
    ],
    [
        "MNG-4952",
        "MNG-3652",
        "[regression] RELEASE field of repository metadata is not updated upon repeated deployments As reported by [Marcin Kuthan on the user list|http://www.mail-archive.com/users@maven.apache.org/msg115404.html], the g:a-level metadata's release field is not updated upon redeployments, i.e. the value is stuck at its initial value.",
        "set a user agent for Maven HTTP requests Apache Maven/2.1-SNAPSHOT"
    ],
    [
        "MNG-453",
        "MNG-5131",
        "Generic artifact handler for unkown types This patch adds GenericHandler and extends DefaultArtifactHandler to use it if no other handler for the given type is found.\n\nThe generic handler does not do much at the moment but allows to resolve unknown dependencies (instead of throwing an exception as it is the current behaviour).\n\nThis patch applies to revision 188727. ",
        "Wrong encoding for encrypted passwords The plexus-cipher-component has a bug that encodes the crypted passwords wrong.\n\nI has submited a patch for that component on github.\n\nhttps://github.com/sonatype/plexus-cipher/pull/1\n\nPlease include this fix if the new plexus-cipher is released.\n\nThanks."
    ],
    [
        "MNG-4470",
        "MNG-4600",
        "[regression] Proxies are ignored during artifact deployment {{mvn deploy}} won't pick the configured proxy when uploading the project artifact to the distribution repo.",
        "[regression] Optional flag from dependency management applied to dependencies The situation is quite complex to explain. I've a parent pom that defines dependencies in depMgmt. There's two projects in the multimodule project, the second depending on the first.\n\nExcerpt (parent/depMgmt):\n<dependency>\n  <groupId>ch.qos.logback</groupId>\n  <artifactId>logback-classic</artifactId>\n  <version>${logback.version}</version>\n  <scope>runtime</scope>\n<optional>true</optional>\n\nFirst child (redefines scope only):\n<dependency>\n <groupId>ch.qos.logback</groupId>\n <artifactId>logback-classic</artifactId>\n <scope>compile</scope>\n</dependency>\n\nSecond child:\n<dependency>\n <groupId>org.slf4j</groupId>\n <artifactId>slf4j-api</artifactId>\n</dependency>\n<dependency>\n <groupId>m3pb</groupId>\n <artifactId>subproject1</artifactId>\n <version>${project.version}</version>\n</dependency>\n\nWhen running with maven 2, it works. When ran with maven 3, it fails on the second project, with a NoClassDefFoundError on the logback jar.\n\nI seem to understand this is actually a bug in maven 2: as the depMgmt defines optional=true, it shouldn't have been working in maven2 without redeclaring the dependency in the second project. \n\nFrom my understanding:\n* With maven 2, the transivity is taken in account and gives logback through the subproject1 link (from the second)\n* With maven 3, this just doesn't work and this is the correct behaviour.\n\nPlease excuse my basic analysis. \nI'm attaching a test project to let see more precisely the problem.\n\nIf you need any help, please let me know.\n\nCheers\n--\u00a0\nBaptiste\n\n"
    ],
    [
        "MNG-4847",
        "MNG-5333",
        "The skin does not exist: Unable to determine the release version hi I have problem generating site when im using the command mvn site\n\nit performs all stagegs and when it came to site generation the message is shown :\n\nThe skin does not exist: Unable to determine the release version\n\nTry downloading the file manually from the project website.\n\nThen, install it using the command:\n    mvn install:install-file -DgroupId=org.apache.maven.skins -DartifactId=maven\n-default-skin \\\n        -Dversion=RELEASE -Dpackaging=jar -Dfile=/path/to/file\n\n\n  org.apache.maven.skins:maven-default-skin:jar:RELEASE\n\ndo u have an idea what is the problem ?\n\np.s the jar is registered in my local repository and in the remote repository \n\nthank u ",
        "Support expressions for plugin parameters Use-case:\nI want to give as input of my surefire-plugin\n<configuration>\n   <skip>${skipTests} || ${skipDownloadRuntimes}</skip>\n<configuration>\n\nThis won't work because the expressions are not evaluated. Boolean arguments in plugin are set to something like Boolean.parseBoolean, which is quite limited.\n\n\nInstead, we could think of introducing an expression language, such as Groovy, that would allow expressions as parameters for plugins.\nThen let's say skipTests=false and skipDownloadRuntimes=true, Maven would first replace \"${skipTests} || ${skipDownloadRuntimes}\" by \"false || true\" and then this evaluator would evaluate that to \"false\", and skip will receive the value \"false\".\n\nThis would for sure make maven less verbose in some cases."
    ],
    [
        "MNG-4915",
        "MNG-2778",
        "Versions in pom.xml are not checked for invalid characters It seems that the pom.xml is not checking if the version contains invalid characters. If I have following fragment inside pom:\n\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>>>3.5</version>\n</dependency>\n\nthen Maven is trying to download JUnit version >>3.5\n\n",
        "Allow access to the underlying plexus container from MavenEmbedder When embedding Maven into applications, it's often convenient to be able to look up components inside Maven from the applications.\nThis can be easily be done if MavenEmbedder lets me access PlexusContainer, like this:\n\n    /**\n     * Gets the {@link PlexusContainer} that hosts Maven.\n     */\n    public PlexusContainer getContainer() {\n        return embedder.getContainer();\n    }\n"
    ],
    [
        "MNG-3974",
        "MNG-3607",
        "New mirror syntax is not stopping on first match The first match of a pattern should be returned, but the last one is being found.\n\nExact matches should always supercede a pattern.",
        "Class loaders employed by Maven return invalid URLs to resources This is basically a Plexus thing because {{DefaultPlexusContainer}} from plexus-container-default:1.0-alpha-9-stable-1 is using {{File.toURL()}} instead of {{File.toURI().toURL()}} when populating the class realms from local JAR files (e.g. the resulting URLs return illegal characters like spaces).\n\nThe latest plexus-container-default seems to already use the proper methods so this issue is more or less a request to incorporate this fix into the 2.0.x branch. For instance, usage of Ant 1.7 is severly affected by this (MANTRUN-68)."
    ],
    [
        "MNG-298",
        "MNG-2901",
        "[surefire] Add support for passing system properties to JUnit tests Some tests require to get some properties to work. This patch adds support for passing system properties to JUnit tests. To use it:\n\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>1.0-alpha-1</version>\n        <configuration>\n          <systemProperties>\n            <property>\n              <name>myproperty</name>\n              <value>myvalue</value>\n            </property>\n          </systemProperties>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n",
        "Cannot have 2 modules as SNAPSHOT in same group id In my project I have base 2 modules : metadatafiles and core\n\nA third module called metadata depends on the 1st  2 as SNAPSHOT\n\nBug reproduction :\n\n1) deploy module 1\n2) deploy module 2\n3) attemt to compile module 3, it fails\n\nExpected result : successfull build since there are snapshots for the 2 modules in the repository\n\nIt seems that maven2 expects that there should be a most snapshot build for all the modules, it looks to me like an unwanted feature, that's why I submit it as a bug"
    ],
    [
        "MNG-515",
        "MNG-4759",
        "Add the possibility to define an i18n menu in site descriptor. ",
        "Allow --global-settings target arbitrary resources, e.g. scm:svn:http://svn.acme.com/infra/trunk/maven/settings.xml "
    ],
    [
        "MNG-230",
        "MNG-4000",
        "attempt to reintroduce the use of a single SNAPSHOT file locally we are now downloading timestamped versions and saving them under that version ID.\n\nthis would be of great benefits to IDEs so that the descriptor does not need to be updated whenever a new snapshot is resolved.\n\nthe reason this is not currently practical is that a POM is first resolved, and following that there is nothing to indicate that the JAR needs to be updated.\n\n",
        "[regression] Plugin executions without id are lost when multiple executions are defined Input POM:\n{code:xml}\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.its.plugins</groupId>\n      <artifactId>maven-it-plugin-log-file</artifactId>\n      <version>2.1-SNAPSHOT</version>\n      <configuration>\n        <logFile>target/exec.log</logFile>\n        <string>exec-/string>\n      </configuration>\n      <executions>\n        <execution>\n          <id>exec-1</id>\n          <phase>validate</phase>\n          <goals>\n            <goal>log-string</goal>\n          </goals>\n        </execution>\n        <execution>\n          <!-- NOTE: <id> deliberately omitted here! -->\n          <phase>validate</phase>\n          <goals>\n            <goal>log-string</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n{code}\nEffective POM:\n{code:xml}\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.its.plugins</groupId>\n      <artifactId>maven-it-plugin-log-file</artifactId>\n      <version>2.1-SNAPSHOT</version>\n      <configuration>\n        <logFile>target/exec.log</logFile>\n        <string>exec</string>\n      </configuration>\n      <executions>\n        <execution>\n          <id>exec-1</id>\n          <phase>validate</phase>\n          <goals>\n            <goal>log-string</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n{code}\nNote that the execution without {{<id>}} is missing."
    ],
    [
        "MNG-2823",
        "MNG-4669",
        "More control over what WARNING messages are displayed It would really be nice if there was more control over what WARNING messages that Maven spits out by default.  When building off of a clean repo, a bunch of {{[WARNING] Unable to get resource ...}} messages litter the console output... which really makes it hard to see what is actually going on.\n\nI'd like mvn to not show those by default, and have a flag to enable them if needed... kinda like the -W flag on gcc.\n\nIMO these WARNING messages are only useful about 5% of the time when strange dependency problems pop up... it would be better IMO if for the remaining 95% that mvn didn't complain so much about stuff that is not really a problem.\n",
        "Adjust the expected message string in MavenITmng2690MojoLoadingErrorsTest The current MavenITmng2690MojoLoadingErrorsTest expects the following message:\n\n  \"(?i).*required class was missing during (mojo )?configuration.*\"\n\nin the mvn output when executing a mojo with a field that has a missing class.\n\nThis pattern does not quite match the error when running with Guice, because Guice detects the missing class slightly earlier (before Maven configuration) while scanning the declared fields for @Inject annotations.\n\nThe following pattern matches both Plexus and Guice error messages:\n\n  \"(?i).*required class (i|wa)s missing( during (mojo )?configuration)?.*\"\n\nany chance the attached patch could be applied to the MavenITmng2690MojoLoadingErrorsTest?"
    ],
    [
        "MNG-378",
        "MNG-790",
        "only publish RELEASE.version.txt at release time currently, this is published with every deployment, including snapshots. This is probably not desirable, as it will cause people referencing that plugin repository to receive updates they do not want.\n\nOnly publish the file at release time (which might be for a snapshot, if desired)",
        "stack trace printed in log when pom not found on remote repo I have added some JARs and their POM to my local repository manually.\n\nWhen I run m2 (without -e nor -X), m2 tries to download their POMs from the Web to update them. When it fails, it prints out a stack trace which, I guess, should not be printed in the log except in debug mode.\n\nI attached an example of the stack trace."
    ],
    [
        "MNG-5770",
        "MNG-4135",
        "mvn can't find Oracle jdk8 on mac Line 85\n  export JAVA_HOME=/usr/libexec/java_home\n\nshould be changed to \n  export JAVA_HOME=`/usr/libexec/java_home`",
        "Maven 2.0.9 not handling two plugins with extensions In a multi-project environment using two extension plugins results in a file with wrong extension in the repository. \nIn my environment, I am using these two extension plugins from two different sub-projects. I am adding them here in the same POM to make the test case straightforward. \n\nHere is a simple pom that uses two plugins with extensions, maven-bundle-plugin and hk2-maven-plugin. \nWhen I remove the extensions element from maven bundle plugin, the jar with correct extension is installed into the repository.\nIf the extension element is added back, a file with wrong extension is installed in the repository. Here is the debug trace in that case.\n\n[DEBUG] Retrieving parent-POM: org.apache:apache::4 for project: org.apache.felix:felix:pom:1.0.2 from the repository.\n[DEBUG] Retrieving parent-POM: com.sun.enterprise:hk2-parent::0.3.52 for project: null:hk2-maven-plugin:maven-plugin:null from the repository.\n[DEBUG] Unable to find the lifecycle component in the extension\norg.codehaus.plexus.component.repository.exception.ComponentLookupException: Component descriptor cannot be found in the component repository: org.apache.maven.artifact.handler.ArtifactHandlerbundle.\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:323)\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:312)\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:440)\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookupMap(DefaultPlexusContainer.java:390)\n\tat org.apache.maven.plugin.DefaultPluginManager.getPluginComponents(DefaultPluginManager.java:1522)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.findArtifactTypeHandlers(DefaultLifecycleExecutor.java:1198)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.findExtensions(DefaultLifecycleExecutor.java:177)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Fuji container for GlassFish V3\n[INFO]    task-segment: [install]\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Unable to find the lifecycle component in the extension\norg.codehaus.plexus.component.repository.exception.ComponentLookupException: Component descriptor cannot be found in the component repository: org.apache.maven.lifecycle.mapping.LifecycleMappinghk2-jar.\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:323)\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:312)\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:440)\n\tat org.apache.maven.plugin.DefaultPluginManager.getPluginComponent(DefaultPluginManager.java:1511)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.findExtension(DefaultLifecycleExecutor.java:1163)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.findMappingsForLifecycle(DefaultLifecycleExecutor.java:1068)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindLifecycleForPackaging(DefaultLifecycleExecutor.java:1014)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:997)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:477)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[DEBUG] Unable to find the lifecycle component in the extension\norg.codehaus.plexus.component.reposi"
    ],
    [
        "MNG-5352",
        "MNG-4988",
        "Upgrade sisu to v2.3.1 To prepare for a future switch TO Eclipse Sisu, I think we should upgrade to the released v2.3.1 of Sonatype Sisu. According to info from Stuart McCulloch to the dev list:\n\"This is based on the tagged Eclipse/Sisu 0.0.0.M0 source, automatically fetched and repackaged back to the old namespace.\nThe goal of this release was to validate the initial contribution [to Eclipse], and provide a route to get (future) bugfixes to old Sisu clients.\"\n\nStuart has run the Maven core ITs against this version and verified.",
        "API to calculate execution plan without full mojo execution configuration m2e uses project execution plan to determine how to configure the project in eclipse workspace and what to do during workbench build. Not all mojo execution bound to execution plan are relevant for this (think enforcer or deploy plugin), so m2e needs an API to analyse execution plan and perform full configuration of interesting mojo execution only. \n\n\nOriginal m2e jira https://issues.sonatype.org/browse/MNGECLIPSE-2724\n\nProposed patch attached."
    ],
    [
        "MNG-5632",
        "MNG-5614",
        "Optional tag in dependencyManagement not inherited - disallow and/or document As explained in MNG-1630 adn MNG-4600, specifying\n\n{code}\n<optional>true</optional>\n{code}\n\nin dependencyManagement has no effect. \"optional\" only takes effect when specified directly in the \"dependencies\" section of the POM.\n\nHowever, this is not documented anywhere, and rather unexpected, because both version and scope can be set from dependencyManagement.\n\nIf the current behaviour is intentional, it should be documented. Ideally, Maven should also disallow the use of \"<optional>\" in dependencyManagement (or at least issue a warning).",
        "Continuous Delivery Friendly Versions not present in installed artifacts Consider a parent pom with these tags:\n...\n<version>${revision}</version>\n...\n<properties>\n        <revision>0-SNAPSHOT</revision>\n</properties>\n...\n\nIf I start the build with:\n  mvn install -Drevision=666\n\nThe revision gets replaced correctly at runtime (correct), but the placeholder remains in the installed artifact in the local repository (wrong).\n\nTo make matters worse, if you have a Maven Plugin child module with these tags in the pom:\n...\n<parent>\n        ...\n        <version>${revision}</version>\n</parent>\n...\n<packaging>maven-plugin</packaging>\n...\n<dependencies>\n        <dependency>\n            <groupId>${project.groupId}</groupId>\n            <artifactId>other-artifact</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n</dependencies>\n\nOnce the plugin gets used in yet another module, the resolution of other-artifact will fail at runtime with:\n Plugin ...:666 or one of its dependencies could not be resolved: Could not find artifact ...:other-artifact:jar:0-SNAPSHOT\n\nUntil this is fixed the functionality provided by MNG-5576 is virtually useless.\n\nBy speaking about the fix, why bother with replacing variables? Why bother with parent POMs? How about simply installing and deploying the effective POM? This would solve a whole range of problems at once. And at the end of the day, this will simplify many things, at the cost of slightly larger installed POMs."
    ],
    [
        "MNG-3943",
        "MNG-2041",
        "[regression] Inherited plugin executions are lost if child and parent specify different plugin versions Maven 3.x drops executions specified in the parent POM during inheritance if the child POM explicitly specifies a different plugin version than in the parent.",
        "Specifying a New Packaging / Creating a Custom Artifact Handler Hi all,\nI need to Specifying a New Packaging (I have read the section called Specifying a New Packaging [1]). This part is ok. But I have a trouble with the section called Creating a Custom Artifact Handler. I use this : <addedToClasspath>true</addedToClasspath>\n\nBut when I try javadoc:javadoc on an module with this new packaging. Mvn says : Not executing Javadoc as the project is not a Java classpath-capable package.\n\nI have try my own implementation of ArtifactHandler which simply extends org.apache.maven.artifact.handler.DefaultArtifactHandler.\nBut the same result.\n\nNote , I use the following hack (if not my file =\nartifactId-${version}-{packaging}) : this.getProject().getArtifact().setArtifactHandler( new my own implementation of ArtifactHandler ); getProject().getArtifact().setFile( artifactFile ); My own implementation of ArtifactHandler override : \n- getPackaging()\n- getExtension()\n- getType()\n- isAddedToClasspath() with return true.\n\nWhat's wrong ?? (an already existing issue ?)\n\nThanks in advance,\nOlivier"
    ],
    [
        "MNG-52",
        "MNG-2230",
        "The type for maven plugins should be changed to \"maven-plugin\" Currently the type for maven plugins is \"plugin\" which is far too generic and would most likely conflict with other applications using a plugin mechanism. A type of \"maven-plugin\" would be more appropriate.",
        "The \"How do I create documentation?\" part of the \"Maven Gettting Started Guide\" features an invalid example The guide gives earlier the following example of a simple project creation :\n\nmvn archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app\n\n\nAfterwards it gives the following example under \"How do I create documentation?\":\n\n\"To get you jump started with Maven's documentation system you can use the archetype mechanism to generate a site for you without your existing project using the following command:\n\nmvn archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-site\n\"\n\nWhen executed on the same top level where the first project is created, Maven 2 complains\n\nmy-app already exists - please run from a clean directory\n\n\nWhen executed in the my-app directory the generated directory is different from the one presented.\n\n\nA possible solution could be to replace the text under \"How do I create documentation?\" with (other artifactId and some other changes):\n\n\"\"\nTo get you jump started with Maven's documentation system you can use the archetype mechanism to generate a site for you without your existing project using the following command  :\n\nmvn archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app-site -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-site\n\nIf you take a look in your directory structure it should look like the following:\n\nmy-app-site\n|-- pom.xml\n`-- src\n    `-- site\n        |-- apt\n        |   |-- format.apt\n        |   `-- index.apt\n        |-- fml\n        |   `-- faq.fml\n        |-- fr\n        |   |-- apt\n        |   |   |-- format.apt\n        |   |   `-- index.apt\n        |   |-- fml\n        |   |   `-- faq.fml\n        |   `-- xdoc\n        |       `-- xdoc.xml\n        |-- site.xml\n        |-- site_fr.xml\n        `-- xdoc\n            `-- xdoc.xml \n\n\"\"\n\nBr,\n\nTimo Westk\u00e4mper."
    ],
    [
        "MNG-5141",
        "MNG-500",
        "Make MojoExecutor.ensureDependenciesAreResolved public In order to be able to honour @requiresDependencyResolution when executing mojos inside m2e jvm (during workspace build, for example) m2e needs access to MojoExecutor.ensureDependenciesAreResolved",
        "EJB client not included in installation When a dependency of type \"ejb-client\" is specified for a project, the project successfully builds, but the ejb-client JAR is not included in the installation.  (Example: WAR project will successfully build, but the ejb-client JAR is not found in /WEB-INF/lib once installed into the local repository."
    ],
    [
        "MNG-4851",
        "MNG-3104",
        "MavenProject.getDependencyArtifacts() returns null when executed from custom lifecycle When executing a plugin mojo, there seems to be a case when the call to MavenProject.getDependencyArtifacts() returns null when executed from a mojo that forks a custom lifecycle execution.  The method works fine when the mojo is invoked directly or from pom.  Compare the two cases in the included sample plugin...\n\nmvn test:maven-testbug-plugin:testbug1 \n\nmvn test:maven-testbug-plugin:testbug2\n\nExecuting the first will result in the dependencies being printed.  Executing the second results in a null pointer exception.  But all the second really does is call the first, unless I'm misunderstanding something...",
        "can not get results when i use maven eclipse plugins i use the artifactory  as the cach repository, i have defined a Private-internal-repository and a Ibiblio-cache-repository in the artifactory .\nthen i deploy a private jar like 'aaa.jar'  to the Private-internal-repository .\nbut when i open the repository search window and type 'aaa' in the query textfield , i can not see any results\n\nthen  i  edit  the pom.xml and add this :\n    <dependency>\n      <groupId>aaa</groupId>\n      <artifactId>aaa</artifactId>\n      <version>0.92</version>\n    </dependency>\nwhen i save this file , the maven eclipse  plugins can import the aaa.jar  automatically.\nnow i try to search 'aaa' in the query textfield again , there is a result.\n\n"
    ],
    [
        "MNG-2377",
        "MNG-1214",
        "maven-metadata not re-read after failure A bug in deploy (not setting filePermissions correctly on deploy) caused the maven-metadata...xml and the artifacts/poms\nto be unreadable.\n\nWhen building a project with a dep on a SNAPSHOT artifact on the faulty remote repository, the maven-metadata can not be read.\nMaven creates a maven-metadata...xml with the following content (sample):\n\n{noformat}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><metadata>\n  <groupId>com.neonics.container</groupId>\n  <artifactId>bundle-factory-maven</artifactId>\n  <version>1.0-SNAPSHOT</version>\n</metadata>\n{noformat}\n\nAfter fixing the permissions I restart the build, but the metadata file is not re-read, resulting in Maven thinking\n1.0-SNAPSHOT is the actual version and trying to get  ...artifact/1.0-SNAPSHOT/artifact-1.0-SNAPSHOT.pom\nwhich does not exist.\n\nTouching the files on the remote repo doesn't help either.\n\nOnly when running with -U the metadata file is retrieved (another solution is to purge files from\nthe local repository).\n\nI think Maven should not create the metadata file if it can't be retrieved AND if the non-timestamped\nSNAPSHOT version doesn't exist.\n\nI can see why the placeholder metadata files reduces future requests for this file,\nbut that's only useful if there _are_ future requests. There are indeed repeated requests for the pom\nand artifact, even though they also don't exist. I think that only when the artifact 1.0-SNAPSHOT exists\nand the metadata file doesn't, it's safe to put a placeholder metadata file in the local repository.\n\n\n\n",
        "Build Maven2 on free java SDK It would make maven2 more \"GNU Classpath\" friendly if there is less flexibility in maven 2 bootstraping ode.\nFor example in maven-mboot2/src/main/java/compile/JavacCompiler.java, the class \"com.sun.tools.javac.Main\" is hardcoded. This result in a NullPointerException when trying to build maven2 with GCJ."
    ],
    [
        "MNG-1676",
        "MNG-4129",
        "finalName not taken into account in install Hi,\n\nwhen I set <finalName/> in my pom.xml, the install plugin does not take this name into account.\n\nJust for testing I added <finalName>test.jar</finalName> to the pom.xml of a custom plugin of mine. When doing 'mvn install', I get this:\n\n[INFO] Installing Y:\\wimd_test_vob\\modules\\maven-plugins\\maven-nmake-plugin\\target\\test.jar.jar to C:\\Documents and Settings\\WIMD\\.m2\\repository\\com\\barcoview\\mavenplugin\\maven-nmake-plugin\\1.0-SNAPSHOT\\maven-nmake-plugin-1.0-SNAPSHOT.jar\n\nI was hoping it would install to the directory it does, but as test.jar.\n\nregards,\n\nWim",
        "Execution's inherited is not working as expected. I have following mentioned in my POM, but 'assemble-static-gh-pages' gets executed in the child POMs anyway. I see that its supposed to working as of - MNG-3286 but it ain't so. The build process in my project (http://github.com/imyousuf/smart-dao/tree) is incomplete just because of it.\n{code:xml}\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>${assembly.version}</version>\n    <inherited>false</inherited>\n    <executions>\n        <!-- Assembly execution for aggregating gh-pages -->\n        <execution>\n            <id>assemble-static-gh-pages</id>\n            <phase>compile</phase>\n            <inherited>false</inherited>\n            <goals>\n                <goal>single</goal>\n            </goals>\n            <configuration>\n                <descriptors>\n                    <descriptor>src/main/assembly/assemble-gh-pages.xml</descriptor>\n                </descriptors>\n            </configuration>\n        </execution>\n        <!-- Filter README -->\n        <execution>\n            <id>assemble-readme</id>\n            <phase>process-resources</phase>\n            <inherited>true</inherited>\n            <goals>\n                <goal>single</goal>\n            </goals>\n            <configuration>\n                <descriptors>\n                    <descriptor>src/main/assembly/assemble-readme.xml</descriptor>\n                </descriptors>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n{code}"
    ],
    [
        "MNG-5426",
        "MNG-2349",
        "plugin configuration using alias is ignored for array types In our pom.xml, we are configuration a plugin using the alias rather than the plugin parameter name.  The configuration we are using is something like:\n\n<configuration>\n    <models>\n        <model>\n            <groupId>com.ibm.mmi.models</groupId>\n            <artifactId>mmi_compiled_archive</artifactId>\n            <version>${project.version}</version>\n        </model>\n    </models>\n</configuration>\n\nThis is configuring the following plugin parameter in our Mojo:\n\n    /**\n     * \n     * @parameter alias=\"models\"\n     * @required\n     */\n    private Model[] models_;\n\n\nWhen we run our build it fails with:\n\n\n[INFO] One or more required plugin parameters are invalid/missing for 'xmeta-installer:deploy-models'\n\n[0] Inside the definition for plugin 'xmeta-installer-plugin' specify the following:\n\n<configuration>\n  ...\n  <models_>VALUE</models_>\n</configuration>\n\n-OR-\n\n<configuration>\n  ...\n  <models>VALUE</models>\n</configuration>\n\nThis happens despite the fact that the \"models\" configuration element is present.\n\nI spent some time in a debugger trying to figure out what was going on.  I stepped through the logic in DefaultPluginManager.mergeMojoConfiguration and DefaultPluginManager.buildTopDownMergedConfiguration.  What I see is that \nin \"fromPom\" maven is implicitly adding an <models_/> tag to the configuration in the pom.xml and treating that as the dominant configuration.  The logic is merging this tag with the real <models/> tag in the plugin configuration, using that as the \"recessive\" value.  The merge logic only looks at the child elements in the dominant configuration.  In this case, there are none, so the merged configuration does not have the configuraition that was put into the pom.xml.\n\nHere is what I see in the debugger:\n\npomConfig [ at DefaultPluginManager:1199 ]\n\n<configuration>\n\n <models>\n  <model>\n   <groupId>com.ibm.mmi.models</groupId>\n   <artifactId>mmi_compiled_archive</artifactId>\n   <version>9.2-SNAPSHOT</version>\n  </model>\n </models>\n\n <models_/>\n</configuration>\n\n\ndominant parameter seen in buildTopDownMergedConfiguration:\n\n<models_>\n</models_>\n\nrecessive parameter seen in buildTopDownMergedConfiguration:\n\n<models>\n <model>\n  <groupId>com.ibm.mmi.models</groupId>\n  <artifactId>mmi_compiled_archive</artifactId>\n  <version>9.2-SNAPSHOT</version>\n </model>\n</models>\n\nresult of buildTopDownMergedConfiguration:\n\n<models_>\n</models_>\n\n",
        "dependency management, report-plugins and deploy-site When I run\n\nmvn -e clean site site-deploy\n\nfor the root pom, maven throws a NullPointerException.\n\nIf I remove the javadoc report plugin declaration, the site is deployed.\nOr if I keep the javadoc report plugin declaration, but remove the dependency management declaration, the site is deployed.\n\nThis happens for some report plugins, not all. Checkstyle, for instance, works fine.\n\nmyproject.zip contains the project structure and the project definition."
    ],
    [
        "MNG-5647",
        "MNG-977",
        "${maven.build.timestamp} uses incorrect ISO datetime separator Separator must be {{T}} and not {{-}} if we predefine ISO 8601 datetime format. Additionally, {{Z}} should be added to denote UTC time zone.",
        "remove need for plugin groups we could store the avilable plugin groups at the root of the repository and grab those instead"
    ],
    [
        "MNG-5535",
        "MNG-1424",
        "support sparse build h2. background\n\nI have maven project structure of around 220 projects in a big maven hierarchy, to build some I don't need to build all of them but only some which are really required via dependency reachout\n\nfor example\n{code}\nroot\n|\n|---a\n|   |---a1 (needs b1)\n|\n|---b\n|   |---b1 (needs b2)\n|   |---b2 (needs nothing)\n|\n|---c\n{code}\n\nIn My case I am using assembly plugin to create fat jar of a1 which includes a1,b1,b2 and some other third party jars\n\nwhat I have to do now is \n\nclean install on b1, b2\nclean install -Ppackage on a (artifact)\n\n(or else I can go with the costlier approach where I let full project tree build first and then let it package )\n\npackage profile is configured to generate far jar packing b1, b2 & some third party jars inside\n\nthis is just a minimal example\n\nIt would be great if maven could detect b1 & b2 (in this case) and installs them first before packaging a1\n\n\nThanks!\nJigar",
        "Specifying <version> for a plugin in <pluginManagement> does not force Maven to use this version I had the problem when I wanted to use the final release of the surefire plugin. I put the following in my root POM:\n\n      <build>\n            ...\n            <pluginManagement>\n                  <plugins>\n                        ...\n                        <plugin>\n                              <groupId>org.apache.maven.plugins</groupId>\n                              <artifactId>maven-surefire-plugin</artifactId>\n                              <version>2.0</version>\n                        </plugin>\n                  </plugins>\n            </pluginManagement>\n      </build>\n\n, but Maven still used version 2.0-beta-4 (and therefore did not try to download version 2.0).\n"
    ],
    [
        "MNG-4769",
        "MNG-2990",
        "Regression: <enabled> flag for central cannot be overriden In Maven 2 I can disable central and other project repositories by declaring a repository with the same id in settings.xml and declaring <enabled>false</enabled> for both releases and snapshots. For example, in Maven 2, the following settings.xml will disable maven central for the current user:\n{code}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings>\n  <activeProfiles>\n    <activeProfile>DEFAULT</activeProfile>\n  </activeProfiles>\n  <profiles>\n    <profile>\n      <id>DEFAULT</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <name>Maven Repository Switchboard</name>\n          <url>http://foo.bar.com</url>\n          <releases>\n            <enabled>false</enabled>\n          </releases>\n          <snapshots>\n            <enabled>false</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <name>Maven Repository Switchboard</name>\n          <url>http://foo.bar.com</url>\n          <releases>\n            <enabled>false</enabled>\n          </releases>\n          <snapshots>\n            <enabled>false</enabled>\n          </snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n</settings>\n{code}\n\nThis no longer works in maven 3. With the above in my settings.xml, Maven 3 still searches for artifacts in central:\n{code}\nApache Maven 3.0-beta-2 (r983206; 2010-08-07 07:00:51-0400)\nJava version: 1.6.0_20\nJava home: /usr/lib/jvm/java-1.6.0-sun-1.6.0.20.x86_64/jre\nDefault locale: en_US, platform encoding: ISO-8859-1\nOS name: \"linux\" version: \"2.6.18-194.8.1.el5\" arch: \"amd64\" Family: \"unix\"\n[INFO] Error stacktraces are turned on.\n[DEBUG] Reading user settings from /users/foo/.m2/settings.xml\n[DEBUG] Reading global settings from /users/foo/maven3/conf/settings.xml\n[DEBUG] Using local repository at /users/foo/.m2/repository\n[INFO] Scanning for projects...\n[DEBUG] Determining update check for <removed>:maven-plugin:1.1.3.9:runtime (/users/foo/.m2/repository/<removed>/1.1.3.9/<removed>-1.1.3.9.jar) from central (http://foo.bar.com)\n[DEBUG] Searching for http://foo.bar.com in resolution tracking file.\n[DEBUG] Skipped unreadable resolution tracking file /users/foo/.m2/repository/<removed>/1.1.3.9/<removed>-1.1.3.9.maven-plugin.lastUpdated\n[DEBUG] Trying repository central for resolution of <removed>:maven-plugin:1.1.3.9 from <removed>/1.1.3.9/<removed>-1.1.3.9.jar\nDownloading: http://foo.bar.com/<removed>/1.1.3.9/<removed>-1.1.3.9.jar\n\n{code}\n\nThis is extremely helpful in our situation. Only being able to change the url of central is not enough, we would like to totally disable it.",
        "M2_HOME is incorrect when launched from another process This is just an idea to solve the following:  I believe echo'ing ~dp0 when launching maven.bat from ant exec produces the ant.bat processes ~0; not the maven bat  files ~0 -since createProc API is used the processes command is the first argument.\n\nI think you may get around this by putting a new \"finder file\" .bat along side mvn.bat . Since mvn.bat and find_m2.bat are both on the path I can \"discover\" where M2_HOME is from the %PATH%.\n\nWithin mvn.bat\nif  \"%m2_home%\" == \"\"(\n   if \"%OS%\"==\"Windows_NT\" (call find_m2.bat)\n) \nWithin find_m2.bat:\n@echo off\nsetlocal\nset  _WHERE_IS_M2=%~dp0\nset M2_LOCAL_HOME=%__WHERE_IS_M2:\\bin=%\n@REM echo %M2_LOCAL_HOME%\nendlocal & set M2_HOME=%M2_LOCAL_HOME%\n"
    ],
    [
        "MNG-389",
        "MNG-5922",
        "site:site Exception I've build a skeleton project with \n\nm2 archetype:create -DgroupId=org.maven.m2 -DartifactId=Maven2\n\nThen ran site:site for the generated project.\n\nResult:\n$ m2 site:site\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Building Maven Quick Start\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] maven-jar-plugin: resolved to version 2.0-alpha-2 from local repository\n[INFO] maven-site-plugin: resolved to version 2.0-alpha-1 from local repository\n[INFO] [site:site]\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] BUILD ERROR\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error during site generation\n        at org.apache.maven.doxia.DoxiaMojo.execute(DoxiaMojo.java:181)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPlugi\nnManager.java:415)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.processGoals(Defa\nultLifecycleExecutor.java:169)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLi\nfecycleExecutor.java:90)\n        at org.apache.maven.DefaultMaven.processProject(DefaultMaven.java:253)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:167)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:246)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:303)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:243)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:416)\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:363)\nCaused by: java.lang.NullPointerException\n        at org.codehaus.plexus.util.StringUtils.interpolate(StringUtils.java:206\n5)\n        at org.apache.maven.doxia.DoxiaMojo.getSiteDescriptor(DoxiaMojo.java:283\n)\n        at org.apache.maven.doxia.DoxiaMojo.execute(DoxiaMojo.java:176)\n        ... 14 more",
        "Upgrade plexus-utils to 3.0.22 to support combine.id as configuration attribute for Map merging "
    ],
    [
        "MNG-650",
        "MNG-1718",
        "Javadoc plugin generates an almost empty apidocs/index.html Using the trunk build (rev. 225332), I launched site:site with maven-javadoc-plugin in my pom. The generated page apidocs/index.html is almost empty, i.e. it contains only the left menu. If I retry and watch what happens, I see that index.html is first created by Javadoc, but is then replaced by the \"Maven\" index.html.",
        "deploy to scp repository hangs forever After upgrading from alpha-3 to beta-1, deploy to my scp repository hangs forever (alpha-3 works fine with identical settings).\n\nA thread on maven-users concering this issue starts at\nhttp://marc.theaimsgroup.com/?l=turbine-maven-user&m=112721905414020&w=2\n\nHere's a  thread dump taken while deploy hangs:\n\n----\n[INFO] [deploy:deploy]\n[INFO] Retrieving previous build number from internal\nFull thread dump Java HotSpot(TM) Client VM (1.4.2-54 mixed mode):\n\n\"Connect thread maven.example.com session\" prio=5 tid=0x005651b0 nid=0x1e20000 runnable [f0c89000..f0c89ac0]\n        at java.net.SocketInputStream.socketRead0(Native Method)\n        at java.net.SocketInputStream.read(SocketInputStream.java:129)\n        at com.jcraft.jsch.IO.getByte(Unknown Source)\n        at com.jcraft.jsch.Session.read(Unknown Source)\n        at com.jcraft.jsch.Session.run(Unknown Source)\n        at java.lang.Thread.run(Thread.java:552)\n\n\"Signal Dispatcher\" daemon prio=10 tid=0x00508210 nid=0x1823a00 waiting on condition [0..0]\n\n\"Finalizer\" daemon prio=8 tid=0x00506ca0 nid=0x1810800 in Object.wait() [f0a04000..f0a04ac0]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x657178d0> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:111)\n        - locked <0x657178d0> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:127)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)\n\n\"Reference Handler\" daemon prio=10 tid=0x00506970 nid=0x1803e00 in Object.wait() [f0983000..f0983ac0]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x65717938> (a java.lang.ref.Reference$Lock)\n        at java.lang.Object.wait(Object.java:429)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:115)\n        - locked <0x65717938> (a java.lang.ref.Reference$Lock)\n\n\"main\" prio=5 tid=0x00500e30 nid=0x1804600 in Object.wait() [f07fe000..f08002c8]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x650a5f08> (a com.jcraft.jsch.Channel$MyPipedInputStream)\n        at java.io.PipedInputStream.read(PipedInputStream.java:229)\n        - locked <0x650a5f08> (a com.jcraft.jsch.Channel$MyPipedInputStream)\n        at org.apache.maven.wagon.providers.ssh.ScpWagon.checkAck(ScpWagon.java:614)\n        at org.apache.maven.wagon.providers.ssh.ScpWagon.get(ScpWagon.java:407)\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:325)\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifactMetadata(DefaultWagonManager.java:256)\n        at org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager.resolveAlways(DefaultRepositoryMetadataManager.java:198)\n        at org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager.resolveAlways(DefaultRepositoryMetadataManager.java:183)\n        at org.apache.maven.artifact.transform.SnapshotTransformation.resolveLatestSnapshotBuildNumber(SnapshotTransformation.java:130)\n        at org.apache.maven.artifact.transform.SnapshotTransformation.transformForDeployment(SnapshotTransformation.java:75)\n        at org.apache.maven.artifact.transform.DefaultArtifactTransformationManager.transformForDeployment(DefaultArtifactTransformationManager.java:58)\n        at org.apache.maven.artifact.deployer.DefaultArtifactDeployer.deploy(DefaultArtifactDeployer.java:62)\n        at org.apache.maven.artifact.deployer.DefaultArtifactDeployer.deploy(DefaultArtifactDeployer.java:53)\n        at org.apache.maven.plugin.deploy.DeployMojo.execute(DeployMojo.java:142)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:357)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:479)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:452)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:438)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:131)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:186)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:302)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\n\"VM Thread\" prio=5 tid=0x005061f0 nid=0x1804e00 runnable\n\n\"VM Periodic Task Thread\" prio=10 tid=0x00508150 nid=0x1823600 waiting on condition\n\"Exception Catcher Thread\" prio=10 tid=0x00500f90 nid=0x1804a00 runnable\n----"
    ],
    [
        "MNG-4948",
        "MNG-4766",
        "Use the presence of SNAPSHOT to activate profile I would like to have a profile be activated not by the version # but by the presence of SNAPSHOT.\n\nThe current version # spec does not appear to allow for this (unless I'm reading it wrong, always a possibility).\n",
        "optional dependencies Optional dependencies are (a group of) transitive dependencies that must be enabled to be resolved. \n\nUse case:\nI have a big Swing util & component library that uses all kinds of 3rd party libraries. These libraries are not required in each project, so all these dependencies are set to \"provided\". If I want a project to use the component, I must include some version of the correct 3rd party libraries libraries and hope that version is compatible with the one specified as provided. Would it be practical to be able to enable a certain dependency group on the lib's dependencies.\n\nSo for example in a project using the swing lib (typing square brackets because pointy ones may cause problems):\n[dependency] \n    [groupId]...[/groupId] \n    [artifactId]BigSwingLib[/artifactId] \n    [version]1.0[/version]\n    [resolve]jpa[/resolve]\n    [resolve]substance[/resolve]\n[/dependency] \n\nThe last two lines may cause multiple \"optional\" dependencies to be resolved; e.g. \"jpa\" would include jpa-api-1.0.jar and eclipselink-1.2.jar, \"substance\" would include substance-6.0.jar and trident-1.1.jar.\n\nNaturally in the big swing pom these dependencies should be marked with scope=\"optional\" and group=\"jpa\" (group is a comma separated list of id's)\n"
    ],
    [
        "MNG-544",
        "MNG-2207",
        "Another Doc Patch: Small Change in APT Reference and Note on Plugins index.xml Here is yet another small doc patch to APT and the plug-ins index page.",
        "Infinite Recursion when POM element has value with substring that is self-referencing  This is an issue reported on the users list. I'm recording it here for tracking purposes.\n\nSample:\n\n{code:xml}\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>some.group</groupId>\n  <artifactId>some-artifact</artifactId>\n  <version>1</version>\n\n  <scm>\n    <connection>${project.scm.connection}/some/other/path</connection>\n  </scm>\n</project>\n{code}"
    ],
    [
        "MNG-2819",
        "MNG-5771",
        "Prevent extension scanner from looping infinitely when projects are in a flattened structure When you have a directory structure like this:\n\nMNGECLIPSE-256pom/\n  pom.xml\nMNGECLIPSE-256utility/\n  pom.xml\nMNGECLIPSE-256web/\n  pom.xml\n\nWhere the parent POM does something like:\n\n<modules>                        \n  <module>../MNGECLIPSE-256web</module>                       \n  <module>../MNGECLIPSE-256utility</module>\n</modules>\n\nThe extension scanner loops infinitely. Found while testing the Eclipse Integration where it is common for users to put projects in a flattened structure as only later versions of eclipse understand a nested structure.",
        "improved user-configurable core extensions mechanism As of version 3.2.5 maven provides two mechanisms to contribute additional components to maven core runtime. It is possible to add component jars to {{$M2_HOME/lib/ext directory}}. It is also possible to specify component jars using {{-Dmaven.ext.class.path}} command line parameter. Neither of the mechanisms is user friendly. In both cases, the user is expected to manually locate and download all required jar file. In both cases, this has to be done on all systems where the extensions are needed. In both cases, all extra jars are loaded into single classloader so all extensions must agree of the same set of dependencies.\n\nThis jira is to track changes needed to make it possible to configure core extensions in terms of groupId/artifactId/version and share set of required extensions across multiple systems.\n\nMore specifically, \n\n* introduce new {{$\\{maven.projectBasedir\\}/.mvn/extensions.xml}} descriptor to specify list of extensions. Initially, the descriptor will only allow specification of extension groupId/artifactId/version, but can be extended to support dependency includes/excludes mechanism and configuration parameters later\n{code:xml}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<extensions>\n  <extension>\n    <groupId>...</groupId>\n    <artifactId>...</artifactId>\n    <version>...</version>\n  </extension>\n  <extension>...</extension>\n  ...\n</extensions>\n{code}\n* change maven to read and load core extensions in separate class realms as part of plexus container setup.\n* provide mechanism for extensions to declare exported artifacts and packages using {{META-INF/maven/extension.xml}} descriptor."
    ],
    [
        "MNG-4879",
        "MNG-3751",
        "CLONE -Multiple Executions of Plugin at Difference Inhertiance levels causes plugin executions to run multiple times Can occur in a variety of ways, but the attached test case shows a parent pom defining an antrun-execution, and then a child specifying another execution with a different id.  Both executions run twice when running from the child.\n\nI believe this is the same as Kenney Westerhof's comment: http://jira.codehaus.org/browse/MNG-2054#action_62477",
        "Multi-module project is non-deterministic in evaluating reactor artifacts defined as dependencies unless they are installed in the local repository Summary: Multi-module project is non-deterministic in evaluating reactor artifacts defined as dependencies unless they are installed in the local repository\n\nI cannot build either a leaf project (sub1-module1) or the master project (master) until I 'mvn install' the sub-modules (sub<N>-module<M>).\n\nI believe that dependency modules found only in the reactor should be added to:\n\n[DEBUG]   (f) classpathElements = [/Users/evanchsa/src/maven-test/subproject1/sub1-module1/target/classes] \n\n\n\nDetailed setup:\n\nI have a multi-module project that is laid out in the following POM inheritance (this is not the filesystem layout):\n\nmaster\n + sub1-master\n    - sub1-module1\n    - sub1-module2\n + sub2-master\n    - sub2-module1\n    - sub2-module2\n\nSub-modules are type \"jar\" and 1 \"war\" and there are dependencies within the sub-modules as follows (using mvn dependency:tree):\n\n1. sub1-module1\n     - Depends on no other modules\n\n2. sub1-module2\n\n     - test-group:sub1-module2:jar:0.0.1\n       \\- test-group:sub1-module1:jar:0.0.1:compile\n\n3. sub2-module1\n\n     - test-group:sub2-module1:jar:0.0.1\n       \\- test-group:sub1-module2:jar:0.0.1:compile\n          \\- test-group:sub1-module1:jar:0.0.1:compile\n\n4. sub2-module2 (this is the WAR)\n\n     - test-group:sub2-module2:jar:0.0.1\n       \\- test-group:sub2-module1:jar:0.0.1:compile\n          \\- test-group:sub1-module2:jar:0.0.1:compile\n             \\- test-group:sub1-module1:jar:0.0.1:compile\n\n\nProject filesystem layout:\n\n build/master/pom.xml\n subproject1/sub1-master/pom.xml\n subproject1/sub1-module1/pom.xml\n subproject1/sub1-module2/pom.xml\n subproject2/sub2-master/pom.xml\n subproject2/sub2-module1/pom.xml\n subproject2/sub2-module2/pom.xml\n\n"
    ],
    [
        "MNG-2968",
        "MNG-5674",
        "Forbid dots in artifactId artifactIds with dots are potential trouble. They prevent using groupId.artifactId as identifier and later parse it back",
        "Connection - Time out By run an mvn clean install or mvn compile on a project with dependencies defined on a local server, the connection hangs up and and don't gives feedback. \nIf I try to put some error on the setting.xml (by setting username and password) and I will become back the correct error (auth failure). \nI tried with -X to have more information but nothing. Then I installed an older version (3.0.4) without changing anything and the download of the dependencies worked.  \n\nI have the same behaviour in the current version 3.2.2"
    ],
    [
        "MNG-3385",
        "MNG-3158",
        "PluginManagement does not work for report-plugins {code:xml} <build>\n   ...\n    </pluginManagement>\n       <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-pmd-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n   ...\n  </build>\n  <reporting>\n    <plugins>  \n       <plugin>\n         <artifactId>maven-pmd-plugin</artifactId>\n       </plugin>\n    </plugins>\n  </reporting>  {code}\n\nmvn site ... use pmd-2.4-SNAPSHOT instead of the defined 2.2 ... why?",
        "IT 108 success remains sporadic I get occasionally failures on this due to timing issues."
    ],
    [
        "MNG-980",
        "MNG-4737",
        "Provide control over precedence of org.apache.maven.plugins group in search path settings.xml has a <pluginGroups> section to list additional groupIds to search for top level m2 plugin goals.\n\nBy default, \"org.apache.maven.plugins\" is not required to be present in this list, and always wins if there is a collision.\n\n<pluginGroups> that explicitly list \"org.apache.maven.plugins\" should be able to control this default behavior, so that a different plugin groupId can always win in the case of a collision.\n\nFor example, in settings.xml:\n\n<pluginGroups>\n  <pluginGroup>org.example.maven.plugins</pluginGroup>\n  <pluginGroup>org.apache.maven.plugins</pluginGroup>\n</pluginGroups>\n\nThis would allow \"org.example.maven.plugins\" to always win in the case of a collision, whereas:\n\n<pluginGroups>\n  <pluginGroup>org.example.maven.plugins</pluginGroup>\n</pluginGroups>\n\nwould still allow \"org.apache.maven.plugins\" to always win, as it does today.",
        "remove dependency on backport-util-concurrent now that Maven 2.2 requires Java 5 "
    ],
    [
        "MNG-3726",
        "MNG-5504",
        "Extend POM model to support declaration of IRC channels The POM is already capable of holding mailing list infos so I wonder whether it should support IRC, too. Not sure if this is really sensible or maybe too exotic or seldom.\n\nIn more detail, the required POM snippet might look like this:\n{code:xml}\n<ircChannels>\n  <ircChannel>\n    <name>Maven Talk</name>\n    <channel>#maven</channel>\n    <server>irc://irc.codehaus.org/</server>\n    <web>http://irc.codehaus.org/</web>\n    <logs>http://dev.rectang.com/logs/codehaus/%23maven/</logs>\n  </ircChannel>\n</ircChannels>\n{code}\n\nThe Maven Project Info Reports Plugin should then be able to pick that up and integrate it nicely into the site, maybe like illustrated by the [Mojo Site|http://mojo.codehaus.org/irc.html].",
        "Don't add checksums on gpg signature files Similar to MINSTALL-48, don't create checksums when deploying a gpg signature file along with the artifact.\n\nCurrently we end up with filename.asc, filename.asc.md5 and filename.asc.sha1 in the remote repository, and only filename.asc is necessary.\n"
    ],
    [
        "MNG-2782",
        "MNG-3109",
        "Version property in dependencies is not expanded correctly The Spring poms, for example spring-beans, version 2.0.2 use the following dependencies:\n<dependency>\n  <groupId>${project.groupId}</groupId> \n  <artifactId>spring-core</artifactId> \n  <version>${project.version}</version> \n</dependency>\nWhich means, they are using variables in the poms. In some cases, these variables are resolved correctly, but in some cases however they are not, causing problems.\n\nImho, it would be better to resolve variables for released poms to avoid any problems (or if variables are allowed, this is a maven bug then)",
        "version ranges can include snapshots {code}\n<version>[1.1.0,)</version>\n{code}\n\nThis version range can resolve to the latest dev SNAPSHOT which causes the release plugin to fail due to a SNAPSHOT dependency.  The release plugin should check that the original version specification includes a non-SNAPSHOT version (1.1.0) and so can be released without harm."
    ],
    [
        "MNG-3265",
        "MNG-5559",
        "maven-model Extension.equals causes NPE when any field is uninitialized The equals(Object) method of Extension does not check for null values before calling String.equals().",
        "upgrade to last wagon 2.6 Release Notes - Maven Wagon - Version 2.5\n\n** Bug\n    * [WAGON-381] - Both Maven 2 and 3 fail to retrieve a <dependency> that is larger than Integer.MAX_VALUE\n    * [WAGON-384] - Maven fails to download artifacts larger than 2 GB\n    * [WAGON-394] - upgrade commons-logging to 1.1.2\n    * [WAGON-395] - intermittent \"ProtocolException: The server failed to respond with a valid HTTP response\"\n    * [WAGON-399] - Fix for SFTP on windows machine\n\n** Improvement\n    * [WAGON-388] - remove wagon-http-shared4 dependency on httpclient\n\n\nRelease Notes - Maven Wagon - Version 2.6\n\n** Improvement\n    * [WAGON-401] - Access Denied due to missing User-Agent\n    * [WAGON-402] - Upgrade Apache HttpClient based wagon provider to HttpClient 4.3\n    * [WAGON-403] - SSH agent support for wagon-ssh\n"
    ],
    [
        "MNG-2117",
        "MNG-2222",
        "Update doap file descriptor ",
        "dependency to dependency without source code fails - project1\n- project2 (dep project1)\n- project3 (dep project2)\n- parent pom (module project1,project2,project3)\n\nmvn compile\n\nbuild project1\nbuild project2\n\n[INFO] [compiler:compile]\n[INFO] Nothing to compile - all classes are up to date\n\nbuild project3\n\n[INFO] Failed to resolve artifact.\n\nin project2 no target created\n\n-------------------------------\n\nWorkaround\n\nput Noop.java into source so it will build some sources"
    ],
    [
        "MNG-5424",
        "MNG-3125",
        "Direction invocation goal can be invoked in a pom Since maven 3 (at least 3.0.4 and 3.1.0)\nA mojo annotated as directionInvocation to true can be invoked in a pom.\n\nthe plugin.ml is well generated but at runtime no error occurs if goal is executed form a pom.\n",
        "XML Schema for maven-metadata.xml "
    ],
    [
        "MNG-59",
        "MNG-5791",
        "write an m1 component write a component that runs an m1 instance.\n\nAn m1 component could be called upon to run an m1 build whenever it is encountered (v3 POM) or by a compat. flag on the command line. The m1 component just pulls down the m1 POM (eg maven-1.0.pom - not the project's pom), reads the deps (we'd need the v3 reader working \nhere), pulls them down using existing m2 stuff, then creates a forehead classloader manually, and fires up a new MavenSession (bypassing the CLI stuff).\n\nI think I'd code that up fairly quickly, and then we have a way to run m1 stuff from m2, but not necessarily integrate it (just give a better way to migrate, and avoids a multiple install dilemma). It may even be possible to mix builds in a reactor by detecting the POM version. \nSome properties could be shared from m2 to override the defaults in m1 so they coexist nicely.",
        "slf4-api dissapears from classpath with 3.3.1 I have a plugin where I fetch the classpath from the current thread's classloader: https://github.com/gatling/gatling-maven/blob/gatling-maven-parent-2.1.2/gatling-maven-plugin/src/main/java/io/gatling/mojo/GatlingMojo.java#L256\n\nslf4j-api is in the project's compile scope:\n[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ gatling-sample21\n...\n[INFO] |  |  +- org.slf4j:slf4j-api:jar:1.7.10:compile\n...\n\nUntil maven 3.2.5 included, the slf4j-api is indeed in the current thread's classloader:\nuri=/Users/slandelle/.m2/repository/org/slf4j/slf4j-api/1.7.10/slf4j-api-1.7.10.jar\n\nBut it's missing when running when 3.3.1. I checked that the parent Classloader is null. \n\nThis happens ONLY with slf4j-api! All the other project dependencies jars are properly passed.\n\nPlease advise."
    ],
    [
        "MNG-4985",
        "MNG-2330",
        "Transitive dependencies with classifiers not resolved correctly Tested against maven 3.0.1, and the latest 3.0.2. I don't know whether this works for 2.2.1.\nThe project described below is attached to this issue.\n\nI have a multi-module project that has modules: A, B, and C. B depends on A, C depends on B and transitively on A.\nAdditionally, there is a web archive that depends on B and C directly and transitively on A:\n\nI have 2 profiles: dev and qa. They define a single property named 'classifier' - and this property is used in maven jar and war plugins:\n\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>2.3.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n    </configuration>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-war-plugin</artifactId>\n    <version>2.1.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n        <failOnMissingWebXml>false</failOnMissingWebXml>\n    </configuration>\n</plugin>\n\nThus, depending on the profile, different version of the application is build and installed / deployed (actually not in this demo, as I don't declare any repository to deploy to).\n\nSupposing none of the modules in any of the profiles has been built, go on and try to build the project with -Pqa turned on. Parent pom is correctly deployed, A is correctly deployed, and so is B. The problem is with module C which has a transitive dependency on A, and somehow it doesn't take the classifier into account:\n\n[ERROR] Failed to execute goal on project C: Could not resolve dependencies for project test:C:jar:0.0.1-SNAPSHOT: Could not find artifact test:A:jar:*dev*:0.0.1-SNAPSHOT -> [Help 1]\n\nWhen I first build everything using the dev profile (which is turned on by default), the build of the qa profile goes Ok. But, when I go to C and invoke 'mvn dependency:tree', I see:\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ C ---\n[INFO] test:C:jar:0.0.1-SNAPSHOT\n[INFO] \\- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO]    \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n\nAs can be seen, the transitive dependency used an invalid classifier.\n\nHowever, I can't use the workaround that I build dev and then qa, as in my current project we have a web module that packages these jars inside WEB-INF/lib - and the transitive dependencies are packaged with invalid qualifiers. Please check out the jars that are packages within WEB-INF/lib of the generated war file - it packages a qa jar only for the direct dependency. Here is the output of 'mvn dependency:tree -Pqa':\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ web ---\n[INFO] test:web:war:0.0.1-SNAPSHOT\n[INFO] +- test:C:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:B:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] +- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] \\- org.apache.geronimo.specs:geronimo-servlet_3.0_spec:jar:1.0:provided\n\nIt gets even worse - there is also a direct dependency on B, so when the -Pqa switch is used, both B-qa.jar and B-dev.jar end up in the war file - dev is the transitive dep, qa the direct one.\nFor us this means disaster - mixing of jars from other profiles means the jars use different JMS resources, different JDBC pools and so on. Supposing B is a JPA module, we end up with the same persistence unit twice, with the same name, but using different pools (one for devs, one for qa).\n\nSetting at critical as I don't know any workaround.\n\nIf I am doing something wrong, this means I don't understand profiles and classifiers correctly. In this case, please be generous and point me to the right resources.",
        "Unable to execute eclipse:eclipse goal with embedded maven While trying to use an embedded maven within Eclipse to access the Archetype logic I get a probem with resolution of the plugins.\n\nI have attached in the text file the following:\n\nA dump of the logging\nThe helper that is calling the embedded maven\nThe POM.xml that was generated in the first step (the archetype)"
    ],
    [
        "MNG-4891",
        "MNG-4050",
        "Improve robustness of snapshot dependency resolution in case a remote repo accidently uses the id \"local\" This is a follow-up to MNG-4418. The model/settings validation that has been put in place to avoid metadata corruption of the local repo by a remote repo that misuses the same id doesn't help when plugins create repository instances on their own as with the {{maven-deploy-plugin}} in combination with its {{altDeploymentRepository}} parameter.\n\nUsing such a setup, the JGit folks ended up with builds that weren't able to resolve local snapshots that had just been installed seconds before. We need to improve the diagnostic output to more easily detect this kind of metadata corruption and gracefully recover from it.",
        "Bootstrap fails since the commons-parent pom has empty repo URL Bootstrap fails since the commons-parent pom has empty repository URL. "
    ],
    [
        "MNG-2494",
        "MNG-5587",
        "Plugin development guide should have link to test harness plugin It's quite hard to find the URL for the test harness plugin (http://maven.apache.org/shared/maven-plugin-testing-harness).  Could someone put a link in the main plugin API guide (http://maven.apache.org/guides/plugin/guide-java-plugin-development.html)?",
        "When the build fails emit any errors without the user having to specify -e or -X "
    ],
    [
        "MNG-3621",
        "MNG-1827",
        "site url inheritance broken for UNC paths I have a parent POM that is inherited by multiple projects that specifies site wide default settings. \n(e.g)\nParent\\pom.xml <--- this is the pom containing the site configuration\nParent\\CheckStyleConfig\\pom.xml\n\nPart of this is the site deploy \n\n<distributionManagement>\n<site>\n<id>nds-uk.site</id>\n<url>file://///scg-nas.uk.nds.com/maven_sites/${project.groupId}/${project.artifactId}/${project.version}</url>\n</site>\n</distributionManagement>\n\nrunning site:deploy on the sub procject results in it using a corrupted version of the url.\n\nbuild output attached.\n\nNotice the corruption of the original parent  file:///// (2 slashes are removed so it tries to deploy to local HDD)\n\nparent (OK 5 slashes) file://///scg-nas.uk.nds.com/maven_sites/com.nds.cab.scg/common-parent/1.0.0.0-SNAPSHOT - Session: Opened \nchild (bad 3 slashes) file:///scg-nas.uk.nds.com/maven_sites/com.nds.cab.scg/common-checkstyle/1.0.0.0-SNAPSHOT/common-checkstyle - Session: Opened \n\n\n",
        "mvn cli bash script  doesn't work  in mingw mvn does not work if it is lunched from the bash that comes in the msys migwn environment.\n"
    ],
    [
        "MNG-350",
        "MNG-1465",
        "unable to bootstrap: update in dependcy lost  ArtifactRepository  <-> Repository  I failed to bootstrap during compile:\nResolved version: 1.0-alpha-3-20050422.075233-11\nDownloading http://repo1.maven.org/maven2/org/apache/maven/wagon/wagon-provider-api/1.0-alpha-3-SNAPSHOT/wagon-provider-\napi-1.0-alpha-3-20050422.075233-11.jar\nCompiling sources ...\nCompiling 49 source files to C:\\org\\apache\\m2test\\m2\\maven-artifact\\target\\classes\nC:\\org\\apache\\m2test\\m2\\maven-artifact\\src\\main\\java\\org\\apache\\maven\\artifact\\repository\\ArtifactRepository.java:71: ca\nnnot find symbolRepository\nsymbol  : constructor (java.lang.String,java.lang.String,org.apache.maven.wagon.authentication.AuthenticationI\nnfo)\nlocation: class org.apache.maven.wagon.repository.Repository\n        super( id, url, authInfo );\n        ^\nC:\\org\\apache\\m2test\\m2\\maven-artifact\\src\\main\\java\\org\\apache\\maven\\artifact\\deployer\\DefaultArtifactDeployer.java:70:\n cannot find symbol\nsymbol  : method getAuthenticationInfo()\nlocation: class org.apache.maven.artifact.repository.ArtifactRepository\n        if ( deploymentRepository.getAuthenticationInfo() == null )\n                                 ^\n2 errors\nFailure executing javac, but could not parse the error:\n\n\nException in thread \"main\" java.lang.Exception: Compilation error.\n        at MBoot.compile(MBoot.java:905)\n        at MBoot.buildProject(MBoot.java:563)\n        at MBoot.run(MBoot.java:314)\n        at MBoot.main(MBoot.java:116)\nRebuilding maven2 plugins\n\nCaused by: Changes introduced to Repository constructor were lost/not in the wagon-provider-\napi-1.0-alpha-3-20050422.075233-11.jar",
        "Maven not able to find setter for MavenProjectHelper property This might really be a plexus issue (I don't know enough about the code to know for sure).\n\nI have a Mojo class with a field of type MavenProjectHelper.  For all other field, I've followed the pattern of using a private member field with a prefix of \"m_\", then using the property parameter to indicate a setter method for that field that Maven should use.  This seems to work find for most of my properties, but the one that takes a MavenProjectHelper won't work that way.  For some reason, it looks for a field of that name and not a setter method for that property.\n\nHere's the field definition and the setter method:\n    /**\n     * @parameter expression=\"${component.org.apache.maven.project.MavenProjectHelper}\" property=\"projectHelper\"\n     */\n    private MavenProjectHelper m_projectHelper;\n\n    /**\n     * Sets the project helper.\n     * \n     * @param projectHelper  the project helper to use.\n     */\n    public void setProjectHelper(MavenProjectHelper projectHelper)\n    {\n        this.m_projectHelper = projectHelper;\n    }\n\nAnd the error I get back when attempting to use the Mojo looks like this:\n[INFO] Internal error in the plugin manager executing goal 'no.fast.buildprocess:docextractor:1.0-SNAPSHOT:configdocjar': Unable to find the mojo 'no.fast.buildprocess:docextractor:1.0-SNAPSHOT:configdocjar' in the plugin 'no.fast.buildprocess:docextractor'\nComponent Composition failed. No field of name: 'projectHelper' exists in component: role: 'null', implementation: 'no.fast.buildprocess.ConfigdocJarMojo'\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Internal error in the plugin manager executing goal 'no.fast.buildprocess:docextractor:1.0-SNAPSHOT:configdocjar': Unable to find the mojo 'no.fast.buildprocess:docextractor:1.0-SNAPSHOT:configdocjar' in the plugin 'no.fast.buildprocess:docextractor'\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:523)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:482)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:452)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:301)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:268)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:137)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.PluginManagerException: Unable to find the mojo 'no.fast.buildprocess:docextractor:1.0-SNAPSHOT:configdocjar' in the plugin 'no.fast.buildprocess:docextractor'\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:533)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:390)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:519)\n        ... 16 more\nCaused by: org.codehaus.plexus.component.repository.exception.ComponentLookupException: Unable to lookup component 'org.apache.maven.plugin.Mojono.fast.buildprocess:docextractor:1.0-SNAPSHOT:configdocjar', it could not be started\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:335)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:436)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:524)\n        ... 18 more\nCaused by: org.codehaus.plexus.component.repository.exception.ComponentLifecycleException: Error starting component\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.startComponentLifecycle(AbstractComponentManager.java:109)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.createComponentInstance(AbstractComponentManager.java:95)\n        at org.codehaus.plexus.component.manager.PerLookupComponentManager.getComponent(PerLookupComponentManager.java:48)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:327)\n        ... 20 more\nCaused by: org.codehaus.plexus.personality.plexus.lifecycle.phase.PhaseExecutionException: Error composing component\n        at org.codehaus.plexus.personality.plexus.lifecycle.phase.CompositionPhase.execute(CompositionPhase.java:33)\n        at org.codehaus.plexus.lifecycle.AbstractLifecycleHandler.start(AbstractLifecycleHandler.java:101)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.startComponentLifecycle(AbstractComponentManager.java:105)\n        ... 23 more\nCaused by: org.codehaus.plexus.component.composition.CompositionException: Component Composition failed. No field of name: 'projectHelper' exists in component: role: 'null', implementation: 'no.fast.buildprocess.ConfigdocJarMojo'\n        at org.codehaus.plexus.component.composition.FieldComponentComposer.getFieldByName(FieldComponentComposer.java:224)\n        at org.codehaus.plexus.component.composition.FieldComponentComposer.findMatchingField(FieldComponentComposer.java:171)\n        at org.codehaus.plexus.component.composition.FieldComponentComposer.assembleComponent(FieldComponentComposer.java:62)\n        at org.codehaus.plexus.component.composition.DefaultComponentComposerManager.assembleComponent(DefaultComponentComposerManager.java:68)\n        at org.codehaus.plexus.DefaultPlexusContainer.composeComponent(DefaultPlexusContainer.java:1476)\n        at org.codehaus.plexus.personality.plexus.lifecycle.phase.CompositionPhase.execute(CompositionPhase.java:29)\n        ... 25 more"
    ],
    [
        "MNG-891",
        "MNG-3301",
        "Javadoc fails to include libraries I am writing a simple extension to log4j that consists of a new class which extends Level to add more values.  I have zipped up the project (the pom and a single source file) and attached them.\n\nThe project compiles fine.  When I try to generate the JavaDoc for the project, JavaDoc fails to include the log4j library in the classpath which causes it to fail.",
        "is there any problems with proxy i tried every thing with settings.xml i dont why it happening like this we have to fix this issue org.apache.maven.lifecycle.LifecycleExecutionException: Missing:\n----------\n1) org.apache.maven.wagon:wagon-webdav:jar:1.0-beta-2\n\n  Try downloading the file manually from the project website.\n\n  Then, install it using the command: \n      mvn install:install-file -DgroupId=org.apache.maven.wagon -DartifactId=wagon-webdav \\\n          -Dversion=1.0-beta-2 -Dpackaging=jar -Dfile=/path/to/file\nAlternatively, if you host your own repository you can deploy the file there:       mvn deploy:deploy-file -DgroupId=org.apache.maven.wagon -DartifactId=wagon-webdav \\\n          -Dversion=1.0-beta-2 -Dpackaging=jar -Dfile=/path/to/file \\\n           -Durl=[url] -DrepositoryId=[id]\n\n  Path to dependency: \n        1) com.intralinks.qa:qc-super-pom:pom:1.2-SNAPSHOT\n        2) org.apache.maven.wagon:wagon-webdav:jar:1.0-beta-2\n\n"
    ],
    [
        "MNG-3479",
        "MNG-2705",
        "Maven Embedder incorrectly resolves properties in multiprojects and incorrectly resolves dependency management for POM dependencies Maven Embedder incorrectly resolves properties in multiprojects and incorrectly resolves dependency management for POM dependencies\n\nThis was first noticed using IntelliJ embedder - see JIRA's are\n* http://www.jetbrains.net/jira/browse/IDEA-17318 - Parent POM properties are not working in child POM's\n* http://www.jetbrains.net/jira/browse/IDEA-17320 - Dependency Management section is not cascading correctly\n\nThe first issue prevents maven embedder from parsing a child POM that uses a parent POM to set the version of an artifact, if the parent POM using properties to set the version.\n\nThe second issue shows even if you set the version explicitly the parent POM's dependency management section does not cascade in embedder (but it does in maven) correctly for POM type dependencies.\n\nI have written a unit test (attached) to embedder to test for this. But am unsure how to fix.",
        "add jar sources in repository for snapshot builds When using IDE like eclipse, it would be great to have dependecies sources (optionnaly) added to repository.\n\nThis way eclipse plugin (and others) could generate a .classpath file that set \"source attachement\" and allow code and javadoc consult, debuging and inherited methods implementation with original parameters names."
    ],
    [
        "MNG-2250",
        "MNG-1070",
        "fix misspelled and added missing words in getting started guide and philosphy of maven Reading through the Maven Getting Started Guide and the Philisophy of Maven I found a few places were words seemd to be missing and other places where words were misspelled. This patch should fix those.",
        "Determine how settings and plugin registry will be used from the embeder. "
    ],
    [
        "MNG-5561",
        "MNG-3947",
        "Plugin relocation loses configuration Hi,\n\nApplying a relocation on a plugin seems to loose its configuration. \nIn the following sample, I relocated \"nuxeo-distribution-tools\" to \"ant-assembly-maven-plugin\" and the missing configured parameter is \"buildFile\". The relocation itself went well but the execution fails because of a missing parameter.\n\n{code:title=~/.m2/repository/org/nuxeo/build/nuxeo-distribution-tools/2.0-SNAPSHOT/nuxeo-distribution-tools-2.0-SNAPSHOT.pom}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.nuxeo.build</groupId>\n  <artifactId>nuxeo-distribution-tools</artifactId>\n  <version>2.0-SNAPSHOT</version>\n  <packaging>maven-plugin</packaging>\n  <name>Nuxeo Distribution Build</name>\n  <description>Assemble Nuxeo distributions</description>\n  <distributionManagement>\n    <relocation>\n      <artifactId>ant-assembly-maven-plugin</artifactId>\n    </relocation>\n  </distributionManagement>\n</project>{code}\n\n{code:title=executed POM extract}\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.nuxeo.build</groupId>\n        <!-- With relocation -->\n        <artifactId>nuxeo-distribution-tools</artifactId>\n        <!-- Without relocation -->\n        <!-- <artifactId>ant-assembly-maven-plugin</artifactId> -->\n        <executions>\n          <execution>\n            <id>assemble</id>\n            <phase>package</phase>\n            <configuration>\n              <!-- The missing parameter in case of relocation -->\n              <buildFile>src/main/assemble/assembly.xml</buildFile>\n            </configuration>\n            <goals>\n              <goal>build</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n{code}\n\nHere is the diff between an \"mvn package -X\" with nuxeo-distribution-tools (ie: with relocation; line starting with \"<\") and another one with ant-assembly-maven-plugin (ie: without relocation; line starting with \">\"):\n{noformat}< [DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=1, ConflictMarker.markTime=0, ConflictMarker.nodeCount=72, ConflictIdSorter.graphTime=0, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=34, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=1, ConflictResolver.conflictItemCount=71, DefaultDependencyCollector.collectTime=10, DefaultDependencyCollector.transformTime=2}\n> [DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=1, ConflictMarker.markTime=0, ConflictMarker.nodeCount=72, ConflictIdSorter.graphTime=0, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=34, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=2, ConflictResolver.conflictItemCount=71, DefaultDependencyCollector.collectTime=65, DefaultDependencyCollector.transformTime=3}\n---\n< [DEBUG] Created new class realm plugin>org.nuxeo.build:nuxeo-distribution-tools:2.0-SNAPSHOT\n< [DEBUG] Importing foreign packages into class realm plugin>org.nuxeo.build:nuxeo-distribution-tools:2.0-SNAPSHOT\n> [DEBUG] Created new class realm plugin>org.nuxeo.build:ant-assembly-maven-plugin:2.0-SNAPSHOT\n> [DEBUG] Importing foreign packages into class realm plugin>org.nuxeo.build:ant-assembly-maven-plugin:2.0-SNAPSHOT\n---\n< [DEBUG] Populating class realm plugin>org.nuxeo.build:nuxeo-distribution-tools:2.0-SNAPSHOT\n> [DEBUG] Populating class realm plugin>org.nuxeo.build:ant-assembly-maven-plugin:2.0-SNAPSHOT\n---\n< [DEBUG] Configuring mojo org.nuxeo.build:ant-assembly-maven-plugin:2.0-SNAPSHOT:build from plugin realm ClassRealm[plugin>org.nuxeo.build:nuxeo-distribution-tools:2.0-SNAPSHOT, parent: sun.misc.Launcher$AppClassLoader@591ce4fe]\n> [DEBUG] Configuring mojo org.nuxeo.build:ant-assembly-maven-plugin:2.0-SNAPSHOT:build from plugin realm ClassRealm[plugin>org.nuxeo.build:ant-assembly-maven-plugin:2.0-SNAPSHOT, parent: sun.misc.Launcher$AppClassLoader@77fe0d66]\n---\n> [DEBUG]   (f) buildFile = /home/julien/ws-ssd/nuxeo/nuxeo-distribution/nuxeo-distribution-resources/src/main/assemble/assembly.xml{noformat}\n\nThe last line highlights the missing parameter.\n\nIndeed, it seems that in case of a relocation, all the \"Parameter\" Mojo fields take their default value (or none) whereas the \"Component\" fields are still properly injected.",
        "[regression] Configuration of plugin execution with id \"default\" pollutes configuration of standalone plugin execution from CLI Something like\n{code:xml}\n<execution>\n  <id>default</id>\n  <configuration>\n    <foo>bar</foo>\n  </configuration>\n</execution>\n{code}\naffects the configuration of standalone goal executions from the CLI, e.g. {{prefix:goal}} will pick up {{foo=bar}} from the configuration for the POM execution. In contrast, Maven 2.x configures CLI goals only from {{<plugin>/<configuration>}} and never from {{<execution>/<configuration>}}."
    ],
    [
        "MNG-196",
        "MNG-5856",
        "implement v2 repository in maven-artifact Allow maven-artifact to be configured to use the following repository layout:\nhttp://docs.codehaus.org/pages/viewpage.action?pageId=22230\n\nIt must also be able to handle the old format as well.\n\nFor now, how the layout is selected can be hardcoded - in the future the layout can be stored in the repository as metadata and cached.",
        "property profile activation fails for non-uppercase env.someThing I have three profiles. The first, no-ci, is activeByDefault. The other two are bamboo activated by property env.bamboo_buildNumber and jenkins activated by eng.BUILD_NUMBER.  The jenkins profile activates as expected, but bamboo will not activate in either git bash or cmd. Docs suggest Maven normalizes the property name to all uppercase on Windows, but this is apparently not happening. I have tried all-upper, -lower, and mixed case.\r\n\r\nI am using the profiles to configure m-jar-p manifest entries to include build names and numbers, as if they're all in the main configuration, the manifest will include empty keys for whichever build system wasn't used, which might be another bug. Archiver docs suggest missing properties are ignored, but that apparently doesn't extend to unset environment variables."
    ],
    [
        "MNG-4818",
        "MNG-3523",
        "NPE in legacy.DefaultWagonManager.getArtifact 1. mvn archetype:create (with your favorite -DgroupId etc)\n2. add some non-local dependency to the pom (I used commons-jexl:2.0.1)\n3. mvn idea:idea\n4. kaboom\n\nThe problem is that the Logger is declared as @Requirement but it is evidently not being provided (any path leading to a logging statement yields the NPE)\n\nI regret that I don't know enough plexus-voodoo to even create a TestCase for this.",
        "Bad error message if plugin.xml is missing/corrupt Take the JAR of the maven-resources-plugin, delete the file META-INF/maven/plugin.xml and run maven. You'll get this error:\n\njava.lang.IllegalStateException: The PluginDescriptor for the plugin Plugin\n[org.apache.maven.plugins:maven-resources-plugin] was not found.\n"
    ],
    [
        "MNG-4445",
        "MNG-716",
        "Depency/module injection from profiles (.m2/settings.xml) For one project we need to be able to inject dependencies from profiles defined and activated in .m2/settings.xml, into EAR and WAR maven module. It allows to have generic EAR/WAR sources and artifact customized according profiles, so that some dynamic and specific stuff are plugged in and found at deploy/run time.\n\nWe have codec a solution as a Maven plugin (maybe not the better solution but at least work for us) :\n* Download url : http://www.nozicaa.com/maven/artifact/maven-profiledep-plugin-1.0-SNAPSHOT.jar\n* Documentation url : http://www.nozicaa.com/maven/doc/maven-profiledep-plugin/\n\nIt maybe useful for other people.",
        "Bootstrap fails with Exception in thread \"main\" java.lang.OutOfMemoryError: unable to create new native thread. When kicking off \"sh ./m2-bootstrap-all.sh\" the following error occurs.\nDeleting the following directories does not help\n/home/joakim/java/maven-*\n/home/joakim/.m2/repository\n\nThis occurs consistently, and in the same spot, with the same stack trace.\nSetting the MAVEN_OPTS to \"-Xmx512m -Xss100m\" makes no difference in the process.\n\nWhen inspecting the contents of classworlds-1.1-alpha-1.pom it always downloads it successfully, and is identical (via diff and md5sum check) to what's on the www.ibiblio.org/maven2/ repo.\n\n-----------------------------------------------------------------------\n Building mboot ... \n-----------------------------------------------------------------------\n-----------------------------------------------------------------------\n Building maven2 components ... \n-----------------------------------------------------------------------\nMaven installation directory: /home/joakim/java/maven-2.0-SNAPSHOT\nUsing the following for your local repository: /home/joakim/.m2/repository\nUsing the following for your remote repository: [http://repo1.maven.org/maven2, http://snapshots.maven.codehaus.org/maven2/]\nInstalling POM: /home/joakim/.m2/repository/org/apache/maven/maven/2.0-beta-1-SNAPSHOT/maven-2.0-beta-1-SNAPSHOT.pom\nInstalling POM: /home/joakim/.m2/repository/org/apache/maven/plugins/maven-plugin-parent/2.0-beta-1-SNAPSHOT/maven-plugin-parent-2.0-beta-1-SNAPSHOT.pom\nInstalling POM: /home/joakim/.m2/repository/org/apache/maven/maven-plugin-tools/2.0-beta-1-SNAPSHOT/maven-plugin-tools-2.0-beta-1-SNAPSHOT.pom\nInstalling POM: /home/joakim/.m2/repository/org/apache/maven/maven-script/2.0-beta-1-SNAPSHOT/maven-script-2.0-beta-1-SNAPSHOT.pom\nInstalling POM: /home/joakim/.m2/repository/org/apache/maven/reporting/maven-reporting/2.0-beta-1-SNAPSHOT/maven-reporting-2.0-beta-1-SNAPSHOT.pom\nDownloading http://repo1.maven.org/maven2/classworlds/classworlds/1.1-alpha-1/classworlds-1.1-alpha-1.pom\nException in thread \"main\" java.lang.OutOfMemoryError: unable to create new native thread\n        at java.lang.Thread.start(Native Method)\n        at sun.net.www.http.KeepAliveCache$1.run(KeepAliveCache.java:89)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at sun.net.www.http.KeepAliveCache.put(KeepAliveCache.java:75)\n        at sun.net.www.http.HttpClient.putInKeepAliveCache(HttpClient.java:382)\n        at sun.net.www.http.HttpClient.finished(HttpClient.java:370)\n        at sun.net.www.http.KeepAliveStream.close(KeepAliveStream.java:72)\n        at sun.net.www.MeteredStream.justRead(MeteredStream.java:66)\n        at sun.net.www.MeteredStream.read(MeteredStream.java:107)\n        at java.io.FilterInputStream.read(FilterInputStream.java:111)\n        at java.io.FilterInputStream.read(FilterInputStream.java:90)\n        at download.HttpUtils.getFile(HttpUtils.java:279)\n        at download.HttpUtils.getFile(HttpUtils.java:155)\n        at download.HttpUtils.getFile(HttpUtils.java:104)\n        at download.ArtifactDownloader.getRemoteArtifact(ArtifactDownloader.java:189)\n        at download.ArtifactDownloader.downloadDependencies(ArtifactDownloader.java:91)\n        at model.ModelReader.retrievePom(ModelReader.java:477)\n        at model.ModelReader.resolveDependencies(ModelReader.java:412)\n        at model.ModelReader.endElement(ModelReader.java:384)\n        at org.apache.crimson.parser.Parser2.maybeElement(Parser2.java:1720)\n        at org.apache.crimson.parser.Parser2.parseInternal(Parser2.java:667)\n        at org.apache.crimson.parser.Parser2.parse(Parser2.java:337)\n        at org.apache.crimson.parser.XMLReaderImpl.parse(XMLReaderImpl.java:448)\n        at javax.xml.parsers.SAXParser.parse(SAXParser.java:345)\n        at util.AbstractReader.parse(AbstractReader.java:63)\n        at MBoot.run(MBoot.java:309)\n        at MBoot.main(MBoot.java:120)\n\n"
    ],
    [
        "MNG-3511",
        "MNG-2624",
        "Review fix for MNG-2166 As requested by Brett in MNG-3276, here a new issue. My relevant comment over at the other issue:\n\nI still consider the output from Maven quite unhelpful in this case. Please consider that Maven is just a tool/utility for developers and hence not everybody out there will spend time to get through the documentation. Some peoply simply want to \"use\" Maven, not understand how it works.\n\nThe Ant scripts that I am trying to replace in our organization all provided some help about the current project and the available targets using the echo task when the default target was executed. This allowed newbies to quickly figure out how to perform build steps without ever reading the Ant manual. Surely, once you know Maven's lifecycle you never need such help targets but especially old Ant geeks need some easy way of migrating into Maven land.\n\nThe attached patch should provide the following console output:\n{noformat}\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO]\n\nYou must specify at least one goal or lifecycle phase to perform build steps.\nThe following list illustrates some commonly used build commands:\n\n  mvn clean\n    Deletes any build output (e.g. class files or JARs).\n  mvn test\n    Runs the unit tests for the project.\n  mvn install\n    Copies the project artifacts into your local repository.\n  mvn deploy\n    Copies the project artifacts into the remote repository.\n  mvn site\n    Creates project documentation (e.g. reports or Javadoc).\n\nPlease see\nhttp://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\nfor a complete description of available lifecycle phases.\n\nUse \"mvn -?\" to show general usage information about Maven's command line.\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Mon Oct 22 20:48:42 EDT 2007\n[INFO] Final Memory: 1M/4M\n[INFO] ------------------------------------------------------------------------\n{noformat}\n\nThis output is intended to show further comon use-cases than just \"install\". Besides, the user is pointed to a concrete URL with helpful information for his actual need (personally, I consider pointing people at home pages as helpful as telling to use Google... information should be found, not searched)",
        "clear separation of generated things and source things it would be beneficial for:\n * source code management\n * backup\n * space management\n\nif there would be a possibility to set one location where generated/built things go, maybe even as a \"company rule\" like \"output directory = /var/tmp.\n\ncurrently it is a finding/grepping/deleting/ignorefile editing to reach this.\n\nif this is already possible a better hint in the documentation might be appropriate.\n"
    ],
    [
        "MNG-4794",
        "MNG-4463",
        "'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester This error doesn't show up on Windows with maven 3 beta-3, Java 1.6.0_21 !!!\nThis error also doesn't show up with maven 3 beta-2 on Linux and Windows, both Java 1.6.0_21.\n\nI switched from maven 3 beta-2 to beta-3 and got this error. \nI deleted the complete .m2/repository/ but nothing changed.\n\nOnly on Linux with maven 3 beta-3 I can reproduce this error:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install (default-install) on project nivadis: Execution default-install of goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install failed: Unable to load the mojo 'install' in the plugin 'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester\n-----------------------------------------------------\nrealm =    plugin>org.apache.maven.plugins:maven-install-plugin:2.3.1\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nurls[0] = file:/home/vbs/.m2/repository/org/apache/maven/plugins/maven-install-plugin/2.3.1/maven-install-plugin-2.3.1.jar\nurls[1] = file:/home/vbs/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nNumber of foreign imports: 4\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlSerializer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParserException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParser from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.Xpp3Dom from realm ClassRealm[plexus.core, parent: null]]\n\nrealm =    maven.api\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nNumber of foreign imports: 21\nimport: Entry[import org.sonatype.aether from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.personality from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.logging from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.lifecycle from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.context from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.container from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.configuration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.component from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusConstants from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.MutablePlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DuplicateChildContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultPlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.apache.maven from realm ClassRealm[plexus.core, parent: null]]\n\n-----------------------------------------------------\n-> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException\n",
        "Version ranges cannot be used for artifacts with 'import' scope Version ranges cannot be used for artifacts with {{import}} scope. If a version range is used for such an artifact, Maven cannot find it. Looking at the console output shows that it takes the version range as the version, without resolving it:\n\n{noformat}Downloading: http://some-repo/group/artifact/[1.0.0,2.0.0)/artifact-[1.0.0,2.0.0).pom{noformat}\n\nThis is the POM snippet:\n{code:xml}\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>group</groupId>\n      <artifactId>artifact</artifactId>\n      <version>[1.0.0,2.0.0)</version>\n      <!-- Using e.g. <version>1.1.0</version> does work! -->\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n{code}\n"
    ],
    [
        "MNG-492",
        "MNG-320",
        "Fix mmld taglib discovery strategy for Ant compatibility \nQuote from John Casey on dev list (20 Jun 05):\n\nThe short answer is that there is currently a bug in the m2 integration\nof marmalade. Last night I figured out that the taglib discovery\nstrategy used for the Ant compatibility mode is not configured when m2\nattempts to execute a marmalade-mojo. This means that the Ant\nfunctionality will never be recognized.\n\nI'm going to try to get a stop-gap fix in place for the next release of\nm2 that will fix this shortcoming. Once that's done, you should be able to:\n\n1. declare the ant namespace using <mojo xmlns:ant=\"ant:ant\">\n\n2. add a project dependency on:\n\n    <dependency>\n      <groupId>marmalade</groupId>\n      <artifactId>marmalade-compat-ant</artifactId>\n      <version>1.0-alpha-3</version>\n    </dependency>\n\n",
        ".svn files get copied in the generated WAR file when using \"m2 install\" on a war project the .svn files that are in src/main/webapp get copied."
    ],
    [
        "MNG-1118",
        "MNG-4359",
        "mavenEmbedder.readProjectWithDependencies improvements Currently mavenEmbedder.readProjectWithDependencies return instance of MavenProject. So, collection of artifacts in this instance (including transient dependencies) does not have information where those artifacts had been declared. It would be useful for an IDE to be able to get this information somehow (e.g. getArtifactMap(), which could return map of artifacts to list of pom files).",
        "[regression] Locally reachable parent POMs outside of reactor are not found during dependency resolution For a project structure like\n{noformat}\ntop-parent\n  reactor-parent (inherits from top-parent)\n    mod-a (inherits from reactor-parent)\n    mod-b (inherits from reactor-parent, depends on mod-a)\n{noformat}\nwhere none of the projects resides in the local repo and an invocation of \"mvn package\" on reactor-parent (not top-parent), the class paths for mod-b will be missing all dependencies of mod-a because the project building request for mod-a on behalf of the metadata source will fail to resolve the top-parent despite it being locally reachable via {{<relativePath>}} from reactor-parent."
    ],
    [
        "MNG-5639",
        "MNG-197",
        "Support resolution of Import Scope POMs from Repo that contains a ${parameter} Running mvn help:effective-pom on the attached POM:\n\n{noformat}[ERROR]   The project com.ming:maven-failing-import-pom-example:1.0.0-SNAPSHOT (C:\\wip\\scratch-dev\\maven-import-dependency-management\\pom.xml) has 1 error\n[ERROR]     Non-resolvable import POM: Could not transfer artifact org.springframework:spring-framework-bom:pom:4.0.0.R2 from/to spring-milestones (${spring.url}): No connector available to access repository spring-milestones (${spring.url}) of type default using the available factories WagonRepositoryConnectorFactory @ line 20, column 25 -> Help 2]{noformat}\n\nmvn help:effective-pom -Prepo-will-succeed works as expected.\n\n\n\nNote that prior to attempting the failing resolution, the full project POM model has successfully been resolved. So the correct value for the property is known and could in theory be substituted into the repository URL before the failing import pom resolve attempt.\n\n\nWill create a Github pull request with one possible solution to this - it includes a JUnit test case.\n\n\nNote: agreed this is a contrived example. To try and give an idea of the actual use case - several development streams are setup with individual sandboxed Nexus repository holding specific version of several shared components. The repository configuration uses the pattern $\\{nexus.baseurl}/content/groups/$\\{stream.name} with the properties set in settings.xml file. \n\nOne workaround would be to create profiles for every work stream that explicitly list the full repository URL, even then the above feature would be nice to allow the $\\{nexus.baseurl} to avoid repeating that part.",
        "repository conversion tool we need a way to covert repository/ibiblio-v1 into a new layout, as specified by:\nhttp://docs.codehaus.org/pages/viewpage.action?pageId=22230\n\nIt should be able to process files on the way with pluggable processors/validators and produce a small report.\n\nBasic validators:\n- check for a missing POM\n- check for an invalid format POM\n- check for missing/incorrect MD5, and create\n\nThese would also need to be able to run on an existing repository as part of the same tool without doing a conversion.\n\nOther validators will be filed separately, but are probably not needed for v1.\n\nThe repository converter will also need to ensure that it can convert v3 poms to v4.\n\n"
    ],
    [
        "MNG-5277",
        "MNG-557",
        "best practices: The Maven Way Harvest the ideas in http://maven.40175.n5.nabble.com/The-Maven-Way-td5646634.html\n\nThere are some good ideas about what is needed to document the current best philosophies (i.e. convention) about how software should be built.\nAnd this *has* changed over time.",
        "Add --settings to be able to control the settings.xml file the m2 cli uses "
    ],
    [
        "MNG-5939",
        "MNG-2321",
        "Problem doing release when sources are generate as well If I specified that sources should be generated with jar-no-fork goal https://maven.apache.org/plugins/maven-source-plugin/jar-no-fork-mojo.html .\r\n\r\nWhen doing a release with maven-release-plugin it will build the source again when useReleaseProfile is true (use the release profile that adds sources and javadocs to the released artifact http://maven.apache.org/maven-release/maven-release-plugin/perform-mojo.html#useReleaseProfile).\r\n\r\nThe outcome is that it will run with both jar and jar-no-fork and generate and deploy 2 -sources.jar artifacts, with same version. That makes the release build fails.\r\n \r\nThe same behavior could be reproduced when running both jar and jar-no-fork goal between maven 3.2.1. and maven 3.3.9.\r\n\r\n----\r\nPlease find the logs for maven 3.2.1 and 3.3.9 in the foo.bar.zip\r\nWith maven 3.3.9 it uploads it 2 times :\r\nUploaded: http://127.0.0.1:8081/nexus/content/repositories/releases/foo/bar/0.0.1/bar-0.0.1-sources.jar (722 B at 15.3 KB/sec)\r\nUploading: http://127.0.0.1:8081/nexus/content/repositories/releases/foo/bar/0.0.1/bar-0.0.1-sources.jar\r\n722/722 B",
        "[maven-model-converter] Don't include the plugin configuration element if it is empty When translating a V3 pom to V4, a plugin without configuration in V3 will have an empty configuration element in the V4 pom. The attached patch fixes this."
    ],
    [
        "MNG-2601",
        "MNG-2797",
        "mvn -U does NOT update/download the latest SNAPSHOT version I stumbled on this issue (again) with a new snapshot release of Apache's XMLRPC library (3.1-SNAPSHOT).\nFor background information see here: http://www.nabble.com/3.1-SNAPHOT-tf2411158.html\n\nThe bug is that mvn -U doesn't download the new 3.1-SNAPSHOT version when there is one. I had (actually we as in our team) manually have to delete the existing 3.1-SNAPSHOT in my local repository.\nThe xmlrpc library consists of three modules (common, server and client) this problems applies to all three but I've make an example using the server modules.\n\nIt can be found here: http://people.apache.org/maven-snapshot-repository/org/apache/xmlrpc/xmlrpc-server/3.1-SNAPSHOT/\n\nThe SNAPSHOTs generated does not use uniqueVersion (and filenames are hence not created with a timestamp). Is that necessary for mvn -U to work?\n\nIf that is the case then\n\n 1) this needs to be documented better. It is NOT how one expects it to work. As a user I don't care how the SNAPSHOT was deployed - just that it is there.\n 2) one should be able to force mvn to RE-download all SNAPSHOT (don't check for update or anything just download). perhaps mvn -F (force redownload of snapshots)",
        "Instance variables are null when extending a mojo Hi gyus, \n\nfirst of all I want to be execused if this is not the right place to post this. Now on the problem: I am trying to make my own mojo and for the purpose I extend an exisitng mojo (for example SurefirePlugin). So my mojo is something like this:\n\npublic class MyTestMojo extends AbstractMojo \n{\n    /**\n     * This is the mojo's \"main\" method.\n     * \n     * @throws MojoExecutionException in case of error\n     * @throws MojoFailureException in case of error\n     */\n    public void execute() throws MojoExecutionException, MojoFailureException \n    {\n        super.execute();\n    }\n}\n\nAfter building my mojo as maven plugin and trying to run it, I get the following stack-trace. \n\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:355)\n        at org.apache.cactus.integration.m2.CactusTestMojo.execute(CactusTestMojo.java:53)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:412)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:488)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:458)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nAnd I see on the line 355 of the maven-surefire-plugin (ver.2.2) it stays:\n        else if ( !testClassesDirectory.exists() )\nand after debugging it, I see that testClassesDirectory is always null !!!\nIt is really surpising to me, as testClassesDirectory is initialized with the following lines:\n    /**\n     * The directory containing generated test classes of the project being tested.\n     *\n     * @parameter expression=\"${project.build.testOutputDirectory}\"\n     * @required\n     */\n    private File testClassesDirectory;\n\nOK, I want to hear what do you think?\n"
    ],
    [
        "MNG-4397",
        "MNG-4319",
        "-Dnetbeans.execution=true breaks reaktor builds on windows When building our multimodule project with the netbeans.execution property set (Just like the netbeans plugin run maven) none of the modules get installed in the local repository.\n\n\nProject structure is something like this with dependencies from project2 on project1 etc.\n\nroot\n-- multi1\n---- project1 (jar)\n---- project2 (ejb)\n-- multi2\n---- project3 (nbm)\n---- project4 (nbm)\n---- project5 (nbm-application)\n\n\nCommandline from root of our top project to build all modules in the tree: 'mvn install -Dnetbeans.execution=true'\n\n\nIn the output the modules that are not installed the part with \n[INFO] [install:install {execution: default-install}]\n[INFO] Installing ...\n\n\nis not even present for each project built. \n\n\nIf one of the leaf projects is built with netbeans.execution=true it gets installed as expected.\n\nThe problem does not appear on OsX or linux with the same project.",
        "Property expansion does not work for goals in plugin executions I am using a (global) property to control the goal(s) of the Assembly Plugin to be executed:\n{code:xml}\n<goals>\n  <goal>${build.assembly.goal}</goal>\n</goals>\n{code}\nThe property is pre-defined in my (parent) POM and may be overwritten using the {{-D}} option on the command line or (for convenience) using a profile. This is (was) a very convenient way to switch from ZIP (goal {{single}}) to directory (goal {{directory-single}}) packaging during development of programm packages.\n\nWhen I tried to upgrade from Maven 2.0.10 to Maven 2.2.1 I noticed that this doesn't work any more. I also tried intermediate versions and it seems that 2.0.10 was the last version where it works.\n"
    ],
    [
        "MNG-27",
        "MNG-2008",
        "There seem to be two plugin:install plugins The descriptors probably just need to be fixed.",
        "document clean and site lifecycles "
    ],
    [
        "MNG-2352",
        "MNG-149",
        "Upgrade to plexus-container-default-alpha-10 This is required for MNG-2201 in particular.",
        "Write an ejb mojo - Use Plexus Archiver\n- Add all features present in m1 plugin (ejb:ejb, ejb:ejb-client)"
    ],
    [
        "MNG-5135",
        "MNG-1527",
        "Regression: in some cases aggregator mojo is unable to resolve dependencies with custom packaging As described in SONAR-2626 : aggregator mojo, which requires dependency resolution (like \"sonar:sonar\" or \"javadoc:aggregate-jar\") is unable to resolve dependencies, when executed from command-line and build extension with custom packaging declared in sub-module, but not in parent. Declaration of extension in parent allows to workaround problem as well as downgrade to Maven 2.2.1 and execution of \"mvn validate sonar:sonar\".",
        "NPE in groupID-less POMs I have a parent POM which defines a group ID and is parsed+deployed OK.\n\nI also have a child POM which extends the parent POM. When running the following on the child POM, I get:\n\narik@corleon:~/projects/corleon-site/trunk$ mvn release:prepare -Dusername=arikkfir\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'release'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Corleon\n[INFO]    task-segment: [release:prepare] (aggregator-style)\n[INFO] ----------------------------------------------------------------------------\n[INFO] [release:prepare]\n[INFO] What tag name should be used?\nRELEASE-1.0\n[INFO] Verifying there are no local modifications ...\n[INFO] Checking lineage for snapshots ...\n[INFO] Checking dependencies for snapshots ...\n[INFO] Checking plugins for snapshots ...\n[INFO] What is the release version for 'org.corleon:corleon'? [1.0]\n\n[INFO] Checking in modified POMs\n[INFO] Tagging release with the label RELEASE-1.0.\n[INFO] What is the new development version for 'org.corleon:corleon'? [1.1-SNAPSHOT]\n\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] groupId was null\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException: groupId was null\n        at org.apache.maven.artifact.ArtifactUtils.versionlessKey(ArtifactUtils.java:47)\n        at org.apache.maven.plugins.release.helpers.ProjectScmRewriter.restoreScmInfo(ProjectScmRewriter.java:51)\n        at org.apache.maven.plugins.release.PrepareReleaseMojo.execute(PrepareReleaseMojo.java:259)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:399)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:519)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:482)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:452)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:301)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:214)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:137)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:316)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:113)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 28 seconds\n[INFO] Finished at: Sat Nov 12 02:33:49 IST 2005\n[INFO] Final Memory: 3M/6M\n[INFO] ----------------------------------------------------------------------------\n\nWhen I add the groupId to the child POM it works ok.\n\nSeems to me that the group ID should be inherited from the parent POM as well, no?"
    ],
    [
        "MNG-574",
        "MNG-5328",
        "Add version info to plugins.xml and cache that in plugin-registry.xml By caching that information locally, maven only has to check one url to see if a plugin is up-to-date, rather than open a\nconnection for each plugin encountered.",
        "maven plugin annotation requiresDependencyResolution maven plugin need to use current project classpath, i tried  add dependency node under plugin in the {{pom.xml}}. it works fine, but once i tried the following:\n\n{code}\n/**\n * @goal generateDL\n * @threadSafe\n * @requiresDependencyResolution test\n * @execute phase=\"compile\"\n * \n */\npublic class GenerateDlMojo extends AbstractMojo  {\n{code}\n\nthe current project classpath wasn't added to classloader. Would you please help me to resolve this issue?\n\n   "
    ],
    [
        "MNG-4759",
        "MNG-5657",
        "Allow --global-settings target arbitrary resources, e.g. scm:svn:http://svn.acme.com/infra/trunk/maven/settings.xml ",
        "distributionManagement moved it to settings.xml but out of the pom I would suggest to remove the distributionManagement out of the pom. It could be part of the settings.xml file\n\nAs far as i remember there are plans to move the site distribution already out of the pom...\nWDYT?"
    ],
    [
        "MNG-3560",
        "MNG-5037",
        "unable to use plugins that exist in multiple repositories I created two test cases using maven-2.0.9\n\nA. Here's the settings for my first test case which builds successfully using mvn site or mvn site -up\n\n1. Created two remote repository\n     - sandbox has maven-project-info-reports-plugin 2.0.1\n     - corporate has maven-project-info-reports-plugin 2.0\n\n2. No maven-project-info-reports-plugin in my local repository\n\n3. Access to central repository is disabled\n\n4. The order in my settings.xml for the plugin repositories is sandbox first before corporate\n<pluginRepository>\n<id>sandbox</id>\n<url>http://localhost:9091/repository/sandbox</url>\n</pluginRepository>\n<pluginRepository>\n<id>corporate</id>\n<url>http://localhost:9091/repository/corporate</url>\n</pluginRepository>\n\nResult:\n\n    * downloaded maven-project-info-reports-plugin 2.0 pom in corporate\n    * check maven-project-info-reports-plugin 2.0 jar in sandbox\n    * downloaded maven-project-info-reports-plugin 2.0 jar in corporate\n\n{code}\nmarica@kamejin:~/projects/testproject$ mvn site -up\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building testproject\n[INFO]    task-segment: [site]\n[INFO] ------------------------------------------------------------------------\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from sandbox\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from corporate\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from central\n[WARNING] repository metadata for: 'artifact org.apache.maven.plugins:maven-project-info-reports-plugin' could not be retrieved from repository: central due to an error: Error transferring file\n[INFO] Repository 'central' will be blacklisted\nDownloading: http://localhost:9091/repository/corporate/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.pom\n5K downloaded\nDownloading: http://localhost:9091/repository/sandbox/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\nDownloading: http://localhost:9091/repository/corporate/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\n[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.\n[INFO] Setting property: velocimacro.messages.on => 'false'.\n[INFO] Setting property: resource.loader => 'classpath'.\n[INFO] Setting property: resource.manager.logwhenfound => 'false'.\n[INFO] [site:site]\n[INFO] Generating \"Source Repository\" report.\n[INFO] Generating \"Issue Tracking\" report.\n[INFO] Generating \"About\" report.\n[INFO] Generating \"Project License\" report.\n[INFO] Generating \"Project Summary\" report.\n[INFO] Generating \"Dependencies\" report.\n[INFO] Generating \"Continuous Integration\" report.\n[INFO] Generating \"Project Team\" report.\n[INFO] Generating \"Mailing Lists\" report.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n{code}\n\n\nB. Here's the settings for my second test case which replicate this issue\n\n1. Created two remote repository\n     - sandbox has maven-project-info-reports-plugin 2.0.1\n     - corporate has maven-project-info-reports-plugin 2.0\n\n2. No maven-project-info-reports-plugin in my local repository\n\n3. Access to central repository is disabled\n\n4. The order in my settings.xml for the plugin repositories is corporate first before sandbox\n<pluginRepository>\n<id>corporate</id>\n<url>http://localhost:9091/repository/corporate</url>\n</pluginRepository>\n<pluginRepository>\n<id>sandbox</id>\n<url>http://localhost:9091/repository/sandbox</url>\n</pluginRepository>\n\nResult:\n\n    * downloaded maven-project-info-reports-plugin 2.0 pom in sandbox which it did not find and never tries to check the corporate where the pom could be found\n    * downloaded maven-project-info-reports-plugin 2.0 jar in corporate\n\n{code}\nmarica@kamejin:~/projects/testproject$ mvn site -up\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building testproject\n[INFO]    task-segment: [site]\n[INFO] ------------------------------------------------------------------------\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from corporate\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from sandbox\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from central\n[WARNING] repository metadata for: 'artifact org.apache.maven.plugins:maven-project-info-reports-plugin' could not be retrieved from repository: central due to an error: Error transferring file\n[INFO] Repository 'central' will be blacklisted\nDownloading: http://localhost:9091/repository/sandbox/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.pom\nDownloading: http://localhost:9091/repository/corporate/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\n-----------------------------------------------------\nthis realm = app0.child-container[org.apache.maven.plugins:maven-project-info-reports-plugin]\nurls[0] = file:/home/marica/.m2/repository/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\nurls[1] = file:/home/marica/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nNumber of imports: 6\nimport: org.codehaus.classworlds.Entry@4891bb28\nimport: org.codehaus.classworlds.Entry@f8e44ca4\nimport: org.codehaus.classworlds.Entry@c51bc9e7\nimport: org.codehaus.classworlds.Entry@bece5185\nimport: org.codehaus.classworlds.Entry@3fee8e37\nimport: org.codehaus.classworlds.Entry@3fee19d8\n\n\nthis realm = plexus.core\nurls[0] = file:/opt/maven-2.0.8/lib/maven-2.0.8-uber.jar\nNumber of imports: 6\nimport: org.codehaus.classworlds.Entry@4891bb28\nimport: org.codehaus.classworlds.Entry@f8e44ca4\nimport: org.codehaus.classworlds.Entry@c51bc9e7\nimport: org.codehaus.classworlds.Entry@bece5185\nimport: org.codehaus.classworlds.Entry@3fee8e37\nimport: org.codehaus.classworlds.Entry@3fee19d8\n-----------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error getting reports from the plugin 'org.apache.maven.plugins:maven-project-info-reports-plugin': Unable to find the mojo 'org.apache.maven.plugins:maven-project-info-reports-plugin:2.0:scm' in the plugin 'org.apache.maven.plugins:maven-project-info-reports-plugin'\norg/apache/maven/reporting/AbstractMavenReport\n{code}",
        "Download only snapshot artefacts in local repo and not timestamped jars Since Maven 3 the local repository contains timestamped jars.\nWith Maven 2 because of the option uniqueVersion to false the local repo is not full of timestamped jars. The support for this option has been removed in mvn 3 which I understand for the upload in the remote repo. But for the local repo it should be possible to only download the snapshots...\n\nSee thread: http://maven.40175.n5.nabble.com/Issue-with-mvn3-timestamp-snapshots-being-downloaded-in-local-repository-td3408008.html"
    ],
    [
        "MNG-1984",
        "MNG-1220",
        "document optional dependencies and dependency exclusions assemble questions and problems from the users list, and create documentation for managing bad POM dependency data using optional dependencies and dependency exclusions.\n\nDocument in depth how these two features work, and how they impact users of POMs (even if the exclusion is in a transitive dependency).",
        "NPE in DiagnosisUtils org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique() throws an NPE if the exception message is null [line 89: if ( rootMsg != null &&  error.getMessage().indexOf( rootMsg ) < 0 )]\n\nThe attached patch simply adds the error.getMessage() != null check"
    ],
    [
        "MNG-2032",
        "MNG-153",
        "Bug in dependency exclusions processing (ArtifactFilter's) I thing, I found an error in dependency exclusions calculations.\nFor pom dependencies:\n\n  <dependencies>\n    <dependency>\n      <groupId>struts</groupId>\n      <artifactId>struts</artifactId>\n      <version>1.2.8</version>\n      <exclusions>\n        <exclusion>\n          <groupId>javax.servlet</groupId>\n          <artifactId>servlet-api</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>jfree</groupId>\n      <artifactId>jfreechart</artifactId>\n      <version>1.0.0</version>\n      <exclusions>\n        <exclusion>\n          <groupId>gnujaxp</groupId>\n          <artifactId>gnujaxp</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n\nin method MavenMetadataSource.createArtifacts the two above dependencies are processed and ArtifactFilters are applied. The first dependency (struts) gets ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ) - this is OK, but\nthe second dependency (jfreechart) gets wrong filter - AndArtifactFilter which concatenates ExcludesArtifactFilter( \"gnujaxp:gnujaxp\" ) with ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ). This second ExcludesArtifactFilter comes from the first dependency (struts). Method parameter \"dependencyFilter\" is overridden when processing the first dependency and read when processing the second one. The fix should be simple.\n\n",
        "allow goals to be added to the lifecycle goals such as source generation need to be able to be added to the lifecycle based on the execution of the plugin containing them.\n\nThe rules:\n- @phase specifier in a mojo will add that mojo to the given phase\n- must pre-process the list of goals to be executed so all plugins can\n  be loaded and phases updated (and so on)\n\nmore rules in following issues."
    ],
    [
        "MNG-337",
        "MNG-2612",
        "separate out maven-project this is becoming a nuisance as many things require the project builder, but get all of maven-core (eg, the ant tasks, and some mojos).\n\nTime to separate it out...",
        "antrun's exec task breaks in 2.0.5-SNAPSHOT I have no problem run the below pom in 2.0.4, but in 2.0.5-SNAPSHOT.  \nmvn package throws this\n\n[INFO] Error executing ant tasks\n\nEmbedded error: Execute failed: java.io.IOException: CreateProcess: mvn.bat --he\nlp error=5\n\nHere is the pom\n\n--------------------------------------------\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.codehaus.mojo.pde</groupId>\n  <artifactId>m2eclipse</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <name>AntRun break in 2.0.5-SNAPSHOT Build</name>\n  \n  <build>\n    <plugins>\n  \n      <plugin>\n        <artifactId>maven-antrun-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>build</id>\n            <phase>compile</phase>\n            <goals>\n              <goal>run</goal>\n            </goals>\n            <configuration>\n              <tasks>\n                <exec executable=\"mvn.bat\">\n                  <arg line=\"--help\" />\n                </exec>\n              </tasks>\n            </configuration>\n          </execution>    \n        </executions>\n      </plugin>\n      \n    </plugins>\n  </build>\n  \n</project>\n\n\n\n\n-------------------------------------------"
    ],
    [
        "MNG-4362",
        "MNG-1191",
        "improve documentation \"Guide to uploading artifacts to the Central Repository\" needs to specify some requirements for multi-module Maven projects.\n\nMany of the project's POM configurations are inherited by the modules of the project.\nIt is unspecified by this guide, whether the modules POMs also need to specify those settings explicitly or not, in case the developers' intention is to release those on Central.\n\nAs of \"Last Published: 2009-09-09\" this information is missing from this guide.",
        "need to correctly distinguish between maven internal errors and user errors currently don't know much about the exception that occurred and whether it should be autoreported as a \"crash\", or if it is user error, or user environment."
    ],
    [
        "MNG-2971",
        "MNG-1278",
        "Variables are not replaced into installed pom file Variables are not replaced into installed pom file.\nHere is a sample pom file\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.xxx.root</groupId>\n\t<artifactId>root</artifactId>\n\t<packaging>pom</packaging>\n\t<version>${prop.version}</version>\n\t<name>My Project</name>\n        ...\n\t<properties>\n\t\t<prop.version>3.0.20</prop.version>\n\t</properties>\n\n</project>\n{code}\nThe installed pom is into $\\{localRepository}/com/xxx/root/root/3.0.20/root-3.0.20.pom\nis the same as the project pom file but the version referenced into the installed pom file is $\\{prop.version} instead of 3.0.20\nwhich creates problem to artifacts depending of this one.\n\nThanks in advance",
        "Broken Links on Getting Started page Many links on the Getting Started page (http://maven.apache.org/guides/getting-started/index.html) are broken.\n\nFor instance, the Introduction to Archetypes page is linked as http://maven.apache.org/guides/getting-started/introduction-to-archetypes.html, but the page exits at http://maven.apache.org/guides/introduction/introduction-to-archetypes.html"
    ],
    [
        "MNG-2861",
        "MNG-5020",
        "NullPointerException in DefaultArtifactCollector for relocated resolvedArtifacts with different version ranges and available versions. In a remoteRepository that I am populating I have a project.  Previously I was deploying artifacts with an old groupId and then decided to switch to having a new more descriptive groupId.  For the old groupId I have deployed versions 1.0 and 1.1.  For the new groupId I have deployed 1.2 and 2.0.  I deployed a relocation POM to the old groupId for the 1.2 version.  I also updated the metadata.xml files to include 1.2 as an available version.  This way projects using version ranges [1,2) will be able to pick up the newest version.  So in the repository I now have:\n\noldgroupId:project:1.0\noldgroupId:project:1.1\noldgroupId:project:1.2 - redirecting to newgroupId:project:1.2\nnewgroupId:project:1.2\nnewgroupId:project:2.0\n\nThe oldgroupId's metadata lists the available versions as [1.0,1.1,1.2].  The newgroupId's metadata lists the available versions has [1,2].\n\nI have 3 additional projects A, B, C.  A depends on B and C.  B depends on oldgroupId:project:[1,2).  Project B has also finished development and been released so we are avoiding rereleasing it for the groupId change.   C depends on newgroupId:project:[2,3).  When I try to build project A, Maven dies and gives me the following stack trace.\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\njava.lang.NullPointerException\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:168)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:305)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:305)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:70)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:284)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:272)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:243)\n\tat org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1142)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:374)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:330)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:123)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nSince the key for common dependency is the same it tries to resolve the dependency by restricting the version ranges of the current and previous resolved artifacts.  It restricts the previous version to the range of to be [2,3).  However since the only available versions are [1.0,1.1,1.2] it cannot find and match and on line 168 it calls toString() on the returned match which is null.\n\nI realize that the repository setup might not be completely correct, however this is still an issue since Maven crashes without giving any appropriate message or warning to the cause.\n",
        "JAVA_HOME auto discovery When JAVA_HOME is not set (but java command is in the PATH) then bin/mvn script  prints warning message \"Warning: JAVA_HOME environment variable is not set.\" \nI don't want to explicitly set JAVA_HOME variable because I manage my JDK instances by update-java-alternatives in Ubuntu. It switches system wide JDK, but does not set the JAVA_HOME variable. If I would set JAVA_HOME manually then any changes made by update-java-alternatives would not be reflected in JAVA_HOME which is obviously incorrect.\n\nHowever mvn script can be improved, so that it can guess JAVA_HOME. Actually Groovy startup script does it very well, so I moved auto-discovery code from groovy script to mvn and attach patch here"
    ],
    [
        "MNG-2282",
        "MNG-4163",
        "If a repo is down, maven stops the buid instead of trying other repos In this case, the artifact is available at http://www.ibiblio.org/maven2/activemq/jmdns/1.0-RC2/ and the build always fail until the artifact is downloaded manually.\nSee the following build output:\n\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.4\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settings\\gnodet\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\java-bin\\maven-2.0.4\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT of project: null:servicemix-core:jar:null in relative path: ../pom.xml\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: null:servicemix-core:jar:null\n[DEBUG] Searching for parent-POM: org.apache:apache::1 of project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT in relative path: ../pom.xml\n[DEBUG] Parent-POM: org.apache:apache::1 not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building ServiceMix :: Core\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-resources-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-resources-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-compiler-plugin: resolved to version 2.0.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-compiler-plugin:maven-plugin:2.0.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-surefire-plugin: resolved to version 2.1.3 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-surefire-plugin:maven-plugin:2.1.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-jar-plugin: resolved to version 2.0 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-jar-plugin:maven-plugin:2.0 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-install-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-install-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0.1 for project: null:maven-one-plugin:maven-plugin:1.0 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:maven-xbean-plugin:maven-plugin:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG] org.apache.xbean:maven-xbean-plugin:maven-plugin:2.3:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-archiver:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-archiver:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-project:jar:2.0 from the repository.\n[DEBUG]     org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]         junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-model:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact-manager:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-repository-metadata:jar:2.0 from the repository.\n[DEBUG]         org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-profile:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.2:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: null:plexus-utils:jar:1.1 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   qdox:qdox:jar:1.5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-spring:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:runtime (selected for runtime)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:runtime (selected for runtime)\n[DEBUG]     org.springframework:spring:jar:1.2.4:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-plugin-api:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-components::1.1.4 for project: null:plexus-archiver:jar:1.0-alpha-5 from the repository.\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: org.codehaus.plexus:plexus-components:pom:1.1.4 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (removed - nearer found: 1.0-alpha-5)\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.xbean:maven-xbean-plugin:2.3:mapping' -->\n[DEBUG]   (f) namespace = http://servicemix.apache.org/config/1.0\n[DEBUG]   (f) outputDir = c:\\java\\servicemix\\servicemix-core\\target\\xbean\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) propertyEditorPaths = org.apache.xbean.spring.context.impl\n[DEBUG]   (f) schema = c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd\n[DEBUG]   (f) srcDir = c:\\java\\servicemix\\servicemix-core\\src\\main\\java\n[DEBUG] -- end configuration --\n[INFO] [xbean:mapping {execution: default}]\n[DEBUG]  ======= XBeanMojo settings =======\n[DEBUG] namespace[http://servicemix.apache.org/config/1.0]\n[DEBUG] srcDir[c:\\java\\servicemix\\servicemix-core\\src\\main\\java]\n[DEBUG] schema[c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd]\n[DEBUG] outputDir[c:\\java\\servicemix\\servicemix-core\\target\\xbean]\n[DEBUG] propertyEditorPaths[org.apache.xbean.spring.context.impl]\n[INFO] Generating META-INF properties file: c:\\java\\servicemix\\servicemix-core\\target\\xbean\\META-INF\\services\\org\\apache\\xbean\\spring\\http\\servicemix.apache.org\\config\\1.0 for namespace: http://servicemix.apache.org/config/1.0\n[INFO] Generating HTML documentation file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd.html for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] Generating XSD file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] ...done.\n[DEBUG] org.apache.maven.plugins:maven-resources-plugin:maven-plugin:2.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]   commons-io:commons-io:jar:1.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-resources-plugin:2.1:resources' -->\n[DEBUG]   (f) filters = []\n[DEBUG]   (f) outputDirectory = c:\\java\\servicemix\\servicemix-core\\target\\classes\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) resources = [org.apache.maven.model.Resource@f07355, org.apache.maven.model.Resource@23f1bb, org.apache.maven.model.Resource@1d33a6b]\n[DEBUG] -- end configuration --\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[DEBUG] org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT (selected for null)\n[DEBUG]   org.apache.servicemix.dependencies:jencks:jar:1.1.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-jacc_1.0_spec:jar:1.0:compile (selected for compile)\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from central\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: central\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from servicemix-m2-repo\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: servicemix-m2-repo\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from apache.snapshots\n[DEBUG] activemq-ra: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-ra/4.0-SNAPSHOT/activemq-ra-4.0-20060508.005319-6.pom\n1/1K\n1K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-ra:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.pom\n149/149b\n149b downloaded\n[DEBUG]   Artifact resolved\n[DEBUG]     activemq:jmdns:jar:1.0-RC2:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n4/9K\n8/9K\n9/9K\n9K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]     incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (selected for compile)\n[DEBUG]       org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]       incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.springframework:spring-full::1.2.6 for project: null:spring:jar:1.2.6 from the repository.\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.6 for project: null:spring-full:pom:null from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   junit:junit:jar:3.8.1:compile (selected for compile)\n[DEBUG]   log4j:log4j:jar:1.2.12:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.5:compile (selected for compile)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG] activemq-core: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (removed - nearer found: 4.0-SNAPSHOT)\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]     incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG]   org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]   commons-lang:commons-lang:jar:2.1:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   lingo:lingo:jar:1.0:compile (selected for compile)\n[DEBUG]     concurrent:concurrent:jar:1.3.4:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     aopalliance:aopalliance:jar:1.0:compile (selected for compile)\n[DEBUG]     xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG] While downloading springframework:spring:1.2.5\n  This artifact has been relocated to org.springframework:spring:1.2.5.\n\n\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.5 for project: null:spring:jar:1.2.5 from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.5:compile (removed - nearer found: 1.2.6)\n[DEBUG]     mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG]   backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]   jaxen:jaxen:jar:1.1-beta-8:compile (selected for compile)\n[DEBUG]     xerces:xercesImpl:jar:2.6.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   stax-utils:stax-utils:jar:snapshot-20060502:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-connector:jar:1.0:compile (selected for compile)\n[DEBUG]   commons-collections:commons-collections:jar:3.1:compile (selected for compile)\n[DEBUG]   xmlbeans:xbean:jar:2.1.0:compile (selected for compile)\n[DEBUG]   hsqldb:hsqldb:jar:1.7.3.3:test (selected for test)\n[DEBUG]   lucene:lucene:jar:1.4.3:compile (selected for compile)\n[DEBUG]   mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG] servicemix-jbi: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT for project: null:servicemix-jbi:jar:3.0-20060507.131217-6 from the repository.\n[DEBUG] servicemix: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[DEBUG]   org.apache.servicemix:servicemix-jbi:jar:3.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-activation_1.0.2_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-qname_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   easymock:easymock:jar:1.2_Java1.3:test (selected for test)\n[DEBUG]   xerces:xercesImpl:jar:2.6.2:compile (removed - nearer found: 2.7.1)\n[DEBUG]   xerces:xercesImpl:jar:2.7.1:compile (selected for compile)\n[DEBUG]   xml-apis:xml-apis:jar:1.3.02:compile (selected for compile)\n[DEBUG]   wsdl4j:wsdl4j:jar:1.5.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-server:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-server:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-kernel:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]     org.apache.xbean:xbean-kernel:jar:2.3:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.0_01_pd:compile (removed - nearer found: 2.1)\n[DEBUG]     org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]       org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-transaction:jar:1.0:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-management_1.0_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   xalan:xalan:jar:2.7.0:compile (selected for compile)\n[DEBUG] While downloading xml-apis:xml-apis:2.0.2\n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]   mx4j:mx4j-remote:jar:3.0.1:compile (selected for compile)\n[DEBUG]   commons-betwixt:commons-betwixt:jar:0.7:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.2:compile (removed - nearer found: 1.0.4)\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]     commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]     commons-digester:commons-digester:jar:1.6:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]       commons-collections:commons-collections:jar:2.1:compile (removed - nearer found: 3.1)\n[DEBUG]   stax:stax-api:jar:1.0:compile (selected for compile)\n[DEBUG]   xmlbeans:xmlpublic:jar:2.1.0:compile (selected for compile)\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]     commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]   woodstox:wstx-asl:jar:2.0.3:compile (selected for compile)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] Trying repository codehaus-snapshot\nDownloading: http://snapshots.maven.codehaus.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2)\n[DEBUG] Trying repository maven-csharp\nDownloading: http://localhost/repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\nCaused by I/O exception: Connection refused: connect\n\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:551)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:475)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:454)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:140)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:233)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n\tat org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1117)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:366)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n\t... 16 more\nCaused by: org.apache.maven.wagon.TransferFailedException: Error transferring file\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:99)\n\tat org.apache.maven.wagon.StreamWagon.get(StreamWagon.java:68)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:369)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:282)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:244)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:124)\n\t... 23 more\nCaused by: java.net.ConnectException: Connection refused: connect\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n\tat java.net.Socket.connect(Socket.java:507)\n\tat java.net.Socket.connect(Socket.java:457)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:365)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:477)\n\tat sun.net.www.http.HttpClient.<init>(HttpClient.java:214)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:287)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:299)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:792)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:744)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:669)\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:913)\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:85)\n\t... 28 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 16 seconds\n[INFO] Finished at: Mon May 08 10:48:34 CEST 2006\n[INFO] Final Memory: 9M/16M\n[INFO] ------------------------------------------------------------------------",
        "Deprecate all methods in MavenProject that relate to reporting. "
    ],
    [
        "MNG-4200",
        "MNG-3305",
        "Build fails on system without svn client I did a checkout (using TortoiseSVN) from https://svn.apache.org/repos/asf/maven/components/branches/maven-2.1.x/, on my system which doesn't have the command line svn client installed, causing the build to fail as in the attached build.log.\n\nThis is caused by this issue: MOJO-936 in buildnumber-maven-plugin.  The remedy is to modify maven-core/pom.xml and any other POMs where the plugin is used by upgrading the version of that plugin and adding the <revisionOnScmFailure/> element like so:\n\n{code:xml}\n<plugin>\n  <groupId>org.codehaus.mojo</groupId>\n  <artifactId>buildnumber-maven-plugin</artifactId>\n  <version>1.0-beta-3</version>\n  <executions>\n    <execution>\n      <phase>generate-resources</phase>\n      <goals>\n        <goal>create</goal>\n      </goals>\n    </execution>\n  </executions>\n  <configuration>\n    <doCheck>false</doCheck>\n    <doUpdate>false</doUpdate>\n    <revisionOnScmFailure>0</revisionOnScmFailure>\n    <format>NON-CANONICAL_{0,date,yyyy-MM-dd_HH-mm}_{1}</format>\n    <items>\n      <item>timestamp</item>\n      <item>${user.name}</item>\n    </items>\n  </configuration>\n</plugin>\n{code}\n----\n",
        "Maven should provide an option to log build's outpu to file using cmd line option Today, only option to get maven's build output to a file is using redirection like \">\" or \"tee\".\nWhile running maven from CruiseControl, it is not optional to do it.\n\nCould be (very) nice to have a -logfile option to specify log file for the build output.\nFor example running mvn -logfile mylog.txt clean install will print to console and to mylog.txt\nThis is similar to the -logfile supported by Ant."
    ],
    [
        "MNG-5835",
        "MNG-3353",
        "Maven-Plugin's getLog() ignores -Dorg.slf4j.simpleLogger.defaultLogLevel=warn Hi,\r\nsince Maven should supports slf4j-Logging combined with the SLF4J Simple implementation from Maven 3.1.0 onward (http://maven.apache.org/maven-logging.html).\r\nI'm kind of wondering why the default getLog() called from a Plugin ignores the Environment-Variable ``-Dorg.slf4j.simpleLogger.defaultLogLevel=warn``\r\n\r\nI'm currently using:\r\nApache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T22:58:10+02:00)\r\nMaven home: /usr/share/maven-3.2.3\r\nJava version: 1.7.0_80, vendor: Oracle Corporation\r\nJava home: /usr/lib/jvm/java-7-oracle/jre\r\nDefault locale: de_DE, platform encoding: UTF-8\r\nOS name: \"linux\", version: \"3.16.0-33-generic\", arch: \"amd64\", family: \"unix\"\r\n\r\nTested with different Maven-Versions and different maven-plugin-api Versions, still no success.\r\nAny help is highly appreciated.\r\nThanks,\r\n\r\n\r\nPS: Hopefully I can attach my Example-Project which can be executed by using:\r\nmvn clean install && mvn clean package -Pdemo -Dorg.slf4j.simpleLogger.defaultLogLevel=warn\r\n\r\n",
        "Give a warning if a snapshot version of dependency has been removed. If a project has dependencies on snapshot versions of other projects, it would be helpful if maven could give some kind of warning when the snapshot version is removed.\nFor example project a depends on B-SNAPSHOT\n\nA -> B-SNAPSHOT\n\nIf project B is released, and the snapshot version is removed from the snapshot repository, the next time project A checks for updates (based on the update policy) maven should give a warning that the jar is no longer in the repository where it was downloaded from.\n\nThis would help in keeping dependencies up to date."
    ],
    [
        "MNG-2914",
        "MNG-226",
        "order of elements in ClassPathElement is not as in pom.xml The order of dependencies in classPathElements is not same as the order specified in pom.xml.\n\nI have tried running on Maven 2.0.5/Maven 2.0.6 but it does not work. Have tested on both Linux/Windows.",
        "need to be able to dynamically register providers for wagon and scm currently, only what is a dependency on the using plugin, or in maven2/lib is used. Need to be able to add these on the fly - perhaps this is a plexus artifact container thing that can register certain roles with groupID/artifactId patterns so a hint of \"file\" can always go and get wagon-file?\n\n"
    ],
    [
        "MNG-841",
        "MNG-1220",
        "Support customization of default excludes Our company uses a home-grown version control system that has it's own per-directory admin subdirectory, similar in purpose to the administration subdirectories used by other version control systems, eg. CVS, .svn, etc.\n\nThese directories are excluded from processing by default in Maven2, and we would like to add our custom admin subdirectory to the default exclusion list.\n\nRecommended solution from Maven Users Mailing List:\n\nBrett Porter wrote:\n# What you really need is to be able to configure it in a root POM shared by all projects, I think.\n\nHopefully, any such entry in pom.xml would not completely replace the default excludes list, but merely entend the built-in definition.",
        "NPE in DiagnosisUtils org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique() throws an NPE if the exception message is null [line 89: if ( rootMsg != null &&  error.getMessage().indexOf( rootMsg ) < 0 )]\n\nThe attached patch simply adds the error.getMessage() != null check"
    ],
    [
        "MNG-2166",
        "MNG-5371",
        "Provide the help listing as default when no arguments are provided When just writing \"mvn\" with no arguments on the command line I get a message such as this: \n>mvn\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] You must specify at least one goal. Try 'install'\n[INFO] ----------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Mar 22 09:15:04 CET 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n\nMany new users to maven or any other such tools are used to getting at least some basic info of what is expected. How about just displaying the listing that shows up when a user writes \"mvn -h\" as default when no arguments are privided? This is also a feature that most other similar products have.  I also would suggest printing a URL for where they can get basic information for how to use maven.\n",
        "configure artifact-handlers in maven-artifact instead of maven-core doing this configuration in maven-artifact instead of maven-core will permit to use it in maven-aether-provider (which depends on maven-artifact but not maven-core)"
    ],
    [
        "MNG-834",
        "MNG-2999",
        "handle repository permissions it would be nice to have a way to set the directory/file permission and group to the remote repositories.\nthe wagon api already supports those permisions and the implementation almost handle them ( WAGONSSH-8 WAGONSSH-9).\n\nA way to declare this permissions is missing . I was thinking to change the pom schma to allow something like:\n    <repository>\n           <id>ssh-test</id>\n           <name>a test for wagon-ssh</name>\n           <url>sftp://localhost/tmp/m2/</url>\n           <layout>default</layout>\n           <permission>\n              <directoryMode>770</directoryMode>\n              <fileMode>770</fileMode>\n              <group>users</group>\n           </permission>\n    </repository>\n\nbut it can be also set it up in the plugin configuration.\n\nI am willing to code it (i want the feature to be able to set up a private repository over ssh), but i need a senior decision for the way to configure it.\n\nJuan.",
        "Receiving a 403 response from a mirror server should attempt other mirrors Trying to download asm:asm:3.0:jar from several of the central mirrors fails with a 403, but it would work if it attempted download from the main site.\n\nI'm not sure whether this is an issue caused by the fact that the mirrors aren't true mirrors, or that Maven should attempt other mirrors if one of them fails with a 403 (or perhaps also 404) error."
    ],
    [
        "MNG-4013",
        "MNG-396",
        "DuplicateArtifactAttachmentException On Building Test Jar I see this problem when building nexus-proxy. This is due to maven-jar-plugin\n\nCaused by: org.apache.maven.project.DuplicateArtifactAttachmentException: Duplicate artifact attachment detected. (project: org.sonatype.nexus:nexus-proxy:jar:1.3.0-SNAPSHOT; illegal attachment: org.sonatype.nexus:nexus-proxy:jar:tests:1.3.0-SNAPSHOT)\n\tat org.apache.maven.project.MavenProject.addAttachedArtifact(MavenProject.java:1440)\n\tat org.apache.maven.project.DefaultMavenProjectHelper.attachArtifact(DefaultMavenProjectHelper.java:102)\n\tat org.apache.maven.project.DefaultMavenProjectHelper.attachArtifact(DefaultMavenProjectHelper.java:70)\n\tat org.apache.maven.plugin.jar.AbstractJarMojo.execute(AbstractJarMojo.java:179)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:629)",
        "attempt to create a shared and internal classloader for Maven currently, all plugins inherit everything in the Maven classloader hierachy, and we must filter those out so they end up with those versions.\n\nWe should minimise this, by separating the classloaders:\n\nboot - classworlds\n |\n v\ncore - plexus\n |\n v\nshared - anything that is passed from Maven's core to plugins (Eg project, plugin api, report api, ...)\n |  \n +-> individual plugin classloader\n |\n +-> Maven internal classloader - add wagon, etc.\n\nThis allows invididual plugins to use newer or incompatible versions of JARs that Maven itself uses."
    ],
    [
        "MNG-53",
        "MNG-2187",
        "The model reader/writer used inside DefaultMavenProjectBuilder need to be components Currently the model reader/writer being used are the ones generated by Modello but we need a small wrapper around these to make them components  so that we can use the standard plexus component assembly to pull in the version of reader/writer we want to use. This will come into play when we start reading/writing different versions of the model.",
        "Improve error message when the pom is encoded in the wrong charset When the pom is encoded in a charset different than the one declared in the xml header (UTF8 by default) and containing an special char (\u00f3 or something like that), under Sun's JDK there's no error but under IBM JDK it crashes with\nsun.io.MalformedInputException\n\nIt'd be good if we could check first the encoding or capture the exception and show an error message instead.\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\n\nReason: Failed to build model from file '/home/demo/plexus-compiler/pom.xml'.\nError: 'null'\n\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Failed to build model from file '/home/demo/plexus-compiler/pom.xml'.\nError: 'null'\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)\n        at java.lang.reflect.Method.invoke(Method.java:391)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Failed to build model from file '/home/demo/plexus-compiler/pom.xml'.\nError: 'null'\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.java:1103)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFile(DefaultMavenProjectBuilder.java:289)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:274)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n        ... 12 more\nCaused by: sun.io.MalformedInputException\n        at sun.io.ByteToCharUTF8.convert(ByteToCharUTF8.java(Compiled Code))\n        at sun.nio.cs.StreamDecoder$ConverterSD.convertInto(StreamDecoder.java(Inlined Compiled Code))\n        at sun.nio.cs.StreamDecoder$ConverterSD.implRead(StreamDecoder.java(Compiled Code))\n        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java(Compiled Code))\n        at java.io.InputStreamReader.read(InputStreamReader.java:208)\n        at java.io.Reader.read(Reader.java:113)\n        at org.codehaus.plexus.util.IOUtil.copy(IOUtil.java:212)\n        at org.codehaus.plexus.util.IOUtil.copy(IOUtil.java:200)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.java:1117)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.java:1094)\n        ... 17 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Wed Mar 29 04:25:41 PST 2006\n[INFO] Final Memory: 2M/5M\n[INFO] ----------------------------------------------------------------------------\n\n\n"
    ],
    [
        "MNG-5954",
        "MNG-5849",
        "Remove outdated maven-embedder/src/main/resources/META-INF/MANIFEST.MF File is outdated and not used anymore. Remove it.",
        "maven can not be found when current directory is drive/root at least on windows 7 64bit when your current directory is drive/root on windows , mvn -version does not work. but if you are at any directory inside of drive/root, it works."
    ],
    [
        "MNG-1661",
        "MNG-2449",
        "Generated javadoc report is empty Run mvn site\nThe javadoc link comes up with an empty page.\nA demo application where this happens is attached \n\nThe problem occurs in Maven 2.0 and the 2.0.1 SNAPSHOT (snapshot from November 20, 2005).",
        "Eclipse launch configurations for bootstrap code While looking at some problems in the bootstrap process, I created a few eclipse launch files. Maybe we could include them, so the next developer has an easier start.\n\nThe two patches contain three launch files and the following readme:\n\nEclipse Launch Configurations\n-----------------------------\n\nThis directory contains Eclipse launch configurations for debugging the\nMaven 2 bootstrap process.\n\nTo use these configurations, you have to the following:\n\n1. \tDefine the variable m2dev_repo with the location of your development\n\trepository, e.g. \"~/.m2dev/repository\". You can do this in \n\tWindow->Preferences->Run/Debug->String substitution.\n\n2. \tDefine the variable m2dev_prefix with the location of your development\n\tmaven installation, e.g. \"~/bin\".\n\n3.\tChange the Eclipse output directory to something other than\n\t\"target/classes\" (e.g. \"output/classes\"), because bootstrapping cleans\n\tout \"target\", leaving you with no class files to debug...\n\t\nTo debug the bootstrap phases, run the launch configs in the following order:\n\n1. \tbootstrap-mini install\n2. \tbootstrap-mini package\n3. \tbootstrap-installer (in module bootstrap-installer)\n"
    ],
    [
        "MNG-3601",
        "MNG-5755",
        "Question about maven profiles.xml I have a question about profiles.xml\ni have there 1 or more profiles.\nExample:\n---------------------------------------------------------\n<profiles>\n\t<profile>\n\t\t<id>localhost</id>\n\t\t<activation>\n\t\t\t<activeByDefault>false</activeByDefault>\n\t\t</activation>\n\t\t<properties>\n\t\t\t<env>localhost</env>\n\t\t\t<code>localhost</code>\n\t\t\t<integration>ok</integration>\n\t\t</properties>\n\t</profile>\n\t<profile>\n\t\t<id>localhost2</id>\n\t\t<activation>\n\t\t\t<activeByDefault>false</activeByDefault>\n\t\t</activation>\n\t\t<properties>\n\t\t\t<env>localhost2</env>\n\t\t\t<code>localhost2</code>\n\t\t</properties>\n\t</profile>\n</profiles>\n---------------------------------------------------------\nAnd in pom.xml have profile witch start with:\n---------------------------------------------------------\n<profile>\n<id>whls</id>\n<activation>\n<property>\n<name>integration</name>\n<value>ok</value>\n</property>\n</activation>\n<build>\n<plugins>\n......\n---------------------------------------------------------\nI know that the activation is phase of lifecycle and it should not get the variables from profiles.xml but maybe there is a way to get them from there?\nThanks and sorry for my bad english :)",
        "Access toolchains without maven-toolchain-plugin The original idea of toolchains was to have the same tool being used by different plugins within the same project.\nThis seems like a good approach, but there are several cases where you want more control over the tool to choose, for instance:\n* the maven-compiler-plugin should use the lowest (preferably matching) jdk version to ensure proper bytecode for the classes\n* the maven-surefire-plugin might need a higher version due to requirements of the testing frameworks\n* some code-generators require a more recent JDK compared to the code they're actually producing.\n* the look-and-feel of javadoc has changed per JDK. If you like the latest, you should be able to use it.\n* In case of the maven-invoker-plugin you should be able to test all combinations of JDK and Maven as runtime environment."
    ],
    [
        "MNG-3612",
        "MNG-2896",
        "property in settings.xml not interpolated when resolving parent POM from remote repository The objective was to use a property in the settings.xml within a profile. This property represents the remote repository host/port number. This is so that multiple entries of the host/port in the settings.xml profiles do not need to be edited when the host/port value changes.\n\nWhen working in a project whose parent POM is not installed in the local repository, download of the parent POM from the remote repository fails. If the host/port literal value is substituted in the repository element contained in the settings.xml profile, the download succeeds.\n\nIf the parent POM is installed in the local repository resolution succeeds (of course we don't need the remote repository in this case unless trying to update the SNAPSHOT).\n\nAttached example files. \n1 - settings.xml file used in ~/.m2/\n2 - pom.xml for base-pom\n3 - pom.xml for child\n\n\nTo reproduce this problem:\n\n1) deploy parent POM to remote repository (I use Artifactory which has an upload utility, so I didn't need to install parent POM in the local repository)\n2) verify that parent POM is not in the local repository\n3) try a 'mvn clean' or similar command in the child project - this operation fails (see below)\n4) If the literal host/port value is put into the settings.xml repository element instead of ${repo-host}, the operation will succeed\n\n[INFO] Scanning for projects...\n[INFO] snapshot com.foo:base-pom:1-SNAPSHOT: checking for updates from central\n[WARNING] repository metadata for: 'snapshot com.foo:base-pom:1-SNAPSHOT' could not be retrieved \nfrom repository: central due to an error: Error transferring file\n[INFO] Repository 'central' will be blacklisted\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nGroupId: com.foo\nArtifactId: base-pom\nVersion: 1-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  com.foo:base-pom:pom:1-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Cannot find parent: com.foo:base-pom for project:\ncom.bar:child:jar:0.0.1-SNAPSHOT for project com.bar:child:jar:0.0.1-SNAPSHOT\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:378)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:292)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Cannot find parent: com.foo:base-pom f\nor project: com.bar:child:jar:0.0.1-SNAPSHOT for project com.bar:child:jar:0.0.1-SNAPSHOT\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(DefaultMavenProjectBu\nilder.java:1370)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuil\nder.java:821)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMa\nvenProjectBuilder.java:506)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java\n:198)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:583)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:461)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        ... 11 more\nCaused by: org.apache.maven.project.ProjectBuildingException: POM 'com.foo:base-pom' not found in re\npository: Unable to download the artifact from any repository\n\n  com.foo:base-pom:pom:1-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n for project com.foo:base-pom\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenP\nrojectBuilder.java:603)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(DefaultMavenProjectBu\nilder.java:1366)\n        ... 17 more\nCaused by: org.apache.maven.artifact.resolver.ArtifactNotFoundException: Unable to download the arti\nfact from any repository\n\n  com.foo:base-pom:pom:1-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolve\nr.java:212)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolve\nr.java:74)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenP\nrojectBuilder.java:556)\n        ... 18 more\nCaused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to download the artifact fro\nm any repository\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.jav\na:331)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolve\nr.java:200)\n        ... 20 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3 seconds\n[INFO] Finished at: Tue Jun 03 07:57:24 PDT 2008\n[INFO] Final Memory: 8M/35M\n[INFO] ------------------------------------------------------------------------\n",
        "${basedir} used in a repository url does not work for parent pom lookup I use something like this to store locally the dependencies.\n-----\n    <repository>\n      <id>parent-james-stage-m1</id>\n      <name>James stage repository</name>\n      <url>file://${basedir}/stage</url>\n      <layout>legacy</layout>\n      <releases>\n        <enabled>true</enabled>\n        <checksumPolicy>ignore</checksumPolicy>\n      </releases>\n      <snapshots>\n        <enabled>true</enabled>\n        <checksumPolicy>ignore</checksumPolicy>\n      </snapshots>\n    </repository>\n----\n\nEverything works fine but the parent resolution: my main pom.xml has a parent and it is not looked up in this repository.\nWell, it is lookedup, but ${basedir} is not expanded and this way the lookup does not work.\n\nIf I replace the ${basedir} with my full path everything works fine, but I cannot obviously do that as the local repository is part of the svn tree (by our choice to not use remote repositories).\n\n\nFurthermore: is there a variable to be used instead of ${basedir} that always reference to its own pom.xml folder? I ask this because I have multiple modules inside this project and I had to add another repository to this pom using file://${basedir}/../stage (notice the ..) so that submodules will use the same repository for the lookups, but this sound like an hack.\n"
    ],
    [
        "MNG-3010",
        "MNG-1676",
        "Problem parsing version ranges My pom includes the following dependency:\n \n{code:xml}<dependency>\n  <groupId>it.unimaticaspa.unique</groupId>\n  <artifactId>unilet-core</artifactId>\n  <version>[5.0.9.0,5.0.10.0)</version>\n  <type>jar</type>\n</dependency>{code}\n\nWhen i try to build the project i get the following stacktrace:\n\n{noformat}[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:552)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.artifact.InvalidDependencyVersionException: Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:331)\n        at org.apache.maven.project.MavenProject.createArtifacts(MavenProject.java:1558)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1236)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:397)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n        ... 16 more\nCaused by: org.apache.maven.artifact.versioning.InvalidVersionSpecificationException: Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.artifact.versioning.VersionRange.parseRestriction(VersionRange.java:210)\n        at org.apache.maven.artifact.versioning.VersionRange.createFromVersionSpec(VersionRange.java:125)\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:327)\n        ... 20 more{noformat}\n\nIt seems that versions are compared as strings, because the problem only comes out comparing versions with different numbers of digits (such as  5.0.9.0 and 5.0.10.0). While comparing 5.0.8.0 with 5.0.9.0 everything is fine. ",
        "finalName not taken into account in install Hi,\n\nwhen I set <finalName/> in my pom.xml, the install plugin does not take this name into account.\n\nJust for testing I added <finalName>test.jar</finalName> to the pom.xml of a custom plugin of mine. When doing 'mvn install', I get this:\n\n[INFO] Installing Y:\\wimd_test_vob\\modules\\maven-plugins\\maven-nmake-plugin\\target\\test.jar.jar to C:\\Documents and Settings\\WIMD\\.m2\\repository\\com\\barcoview\\mavenplugin\\maven-nmake-plugin\\1.0-SNAPSHOT\\maven-nmake-plugin-1.0-SNAPSHOT.jar\n\nI was hoping it would install to the directory it does, but as test.jar.\n\nregards,\n\nWim"
    ],
    [
        "MNG-2957",
        "MNG-5934",
        "attached artifact is not included in classpath when a sub-project depended on it is compiled in multi-project I have a mult-project. It contains two sub-project A and B, and A has an attached artifact A.jar (main artifact is A.zip).\nIn addition, B depends on A.jar in compile scope. When I build this mult-project like 'mvn install', it fails because\nA.jar is not included in the classpath for compiling B.\n\nThe reason is that, as for A.jar, org.apache.maven.project.MavenProject#replaceWithActiveArtifact() returns a copied Artifact\nof the AttachedArtifact object created by org.apache.maven.projectMavenProjectHelper#attachArtifact() and\nthe value of its scope property is null. So this Artifact is ignored in MavenProject#getCompileClasspathElements().\n\nIn MavenProject#replaceWithActiveArtifact(), the scope property's value of a copied Artifact from attached should be the\nsame as one's value of pluginArtifact.\n",
        "String handling issues identified by PMD The code linting tool [PMD|http://pmd.sourceforge.net/pmd-5.2.0/] identified numerous places where Maven's string handling is inefficient. I've prepared a set of patches that should help speed things up.\r\n\r\nThe command I used was `pmd -d . -R java-strings`"
    ],
    [
        "MNG-4650",
        "MNG-2967",
        "BAD signature ZIP file's signature has problem.\n--------------------------------------------------------------------\n\nC:\\DOCUME~1\\bomber\\MYDOCU~1\\&#45796;&#50868;&#47196;&#46300;>gpg --verify apache-maven-2.2.1-bin.zip.asc\n\ngpg: Signature made 08/07/09 04:18:49 using DSA key ID 34A72A7F\ngpg: Can't check signature: public key not found\n\nC:\\DOCUME~1\\bomber\\MYDOCU~1\\&#45796;&#50868;&#47196;&#46300;>gpg --keyserver hkp://pgp.mit.edu --recv-ke\nys 34A72A7F\ngpg: requesting key 34A72A7F from hkp server pgp.mit.edu\ngpg: key 34A72A7F: public key \"John Dennis Casey <jdcasey@commonjava.org>\" impor\nted\ngpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\ngpg: Total number processed: 1\ngpg:               imported: 1\n\nC:\\DOCUME~1\\bomber\\MYDOCU~1\\&#45796;&#50868;&#47196;&#46300;>gpg --verify apache-maven-2.2.1-bin.zip.asc\n\ngpg: Signature made 08/07/09 04:18:49 using DSA key ID 34A72A7F\ngpg: BAD signature from \"John Dennis Casey <jdcasey@commonjava.org>\"\n\nC:\\DOCUME~1\\bomber\\MYDOCU~1\\&#45796;&#50868;&#47196;&#46300;>",
        "Uber embedder contains wrong manifest Seems that shade puts a manifest from a random jar instead of the one from the project jar."
    ],
    [
        "MNG-4952",
        "MNG-3232",
        "[regression] RELEASE field of repository metadata is not updated upon repeated deployments As reported by [Marcin Kuthan on the user list|http://www.mail-archive.com/users@maven.apache.org/msg115404.html], the g:a-level metadata's release field is not updated upon redeployments, i.e. the value is stuck at its initial value.",
        "Main project pom.xml calls another project pom.xml capability is missing In ant if you have created another project in Ant from ant you can call <ant antfile=\"OtherBuild.xml\">\nand the main target from OtherBuild.xml task will execute\n\nThere is no capability (from what I have seen) for maven to call another project (pom.xml) from\nyour main pom.xml\n\nThis is not a plugin that is being called but a separate working project (pom.xml)\n\nThank You\n"
    ],
    [
        "MNG-2797",
        "MNG-97",
        "Instance variables are null when extending a mojo Hi gyus, \n\nfirst of all I want to be execused if this is not the right place to post this. Now on the problem: I am trying to make my own mojo and for the purpose I extend an exisitng mojo (for example SurefirePlugin). So my mojo is something like this:\n\npublic class MyTestMojo extends AbstractMojo \n{\n    /**\n     * This is the mojo's \"main\" method.\n     * \n     * @throws MojoExecutionException in case of error\n     * @throws MojoFailureException in case of error\n     */\n    public void execute() throws MojoExecutionException, MojoFailureException \n    {\n        super.execute();\n    }\n}\n\nAfter building my mojo as maven plugin and trying to run it, I get the following stack-trace. \n\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:355)\n        at org.apache.cactus.integration.m2.CactusTestMojo.execute(CactusTestMojo.java:53)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:412)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:488)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:458)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nAnd I see on the line 355 of the maven-surefire-plugin (ver.2.2) it stays:\n        else if ( !testClassesDirectory.exists() )\nand after debugging it, I see that testClassesDirectory is always null !!!\nIt is really surpising to me, as testClassesDirectory is initialized with the following lines:\n    /**\n     * The directory containing generated test classes of the project being tested.\n     *\n     * @parameter expression=\"${project.build.testOutputDirectory}\"\n     * @required\n     */\n    private File testClassesDirectory;\n\nOK, I want to hear what do you think?\n",
        "NullPointerException in reactor if there are no POMs found to reproduce run m2 -r from a project where there are no subprojects."
    ],
    [
        "MNG-2446",
        "MNG-5891",
        "parent Pom  properties not resolved for module dependencies root-project --> root-pom.xml   with <version>${my.version}</version>\n|------->proj1 <parent><version>${my.version}</version></parent>\n|------->proj2 <parent><version>${my.version}</version></parent>\n|               |\n|               |->proj1 dependency\n|------->proj3 <parent><version>${my.version}</version></parent>\n\nif I compile from the root-project directory, all compile fine.\n\nif I compile from the proj2 directory, maven2 resolve proj2-${my.version}\nresolve proj1-${my.version}\nbut tries to resolve the parent version root-project-${my.version} but this is not resolved.\n\n\n",
        "Log file command line option description contains an extra word Help for logfile command line option prints the following.   \r\n\r\n{{Log file to where all build output will go.}}\r\n\r\nShould probably drop {{to}}\r\n"
    ],
    [
        "MNG-3987",
        "MNG-3150",
        "No attempts to connect to remote repositories under Sun JDK 1.6.0.06 (i386 and x86_64)  While using Sun jdk1.6.0_06-x86_64 as JAVA_HOME, remote dependencies are not downloaded.  Wireshark network analysis shows no TCP requests sent out of port 80.  Using jdk1.6.0_11-x86_64 resolves the issue.\n\nSteps to duplicate (on the reporter's local environment)\n\n1) Clean local M2 repo (ie. ~/.m2/repository)\n2) Set JAVA_HOME to jdk1.6.0_06-x86_64\n3) Attempt \"mvn install\"..Observe dependency resolution problems as artifacts and POMs cannot be downloaded.  Maven reports as not found.  The URLs noted in the trace are accessible via wget or browser.\n4) Set JAVA_HOME to jdk1.6.0_11-x86_64\n5) Attempt \"mvn install\" Dependencies will be downloaded.",
        "Command line -f option should propagate to module poms. I have a multi module project where I would like to have parrallel builds.  The default pom.xml build would be using jdk1.5 or jdk6, and the parrallel build pom would be for creating retro compiled jdk14 artifacts.  So the pom for this build would be \"pom-jdk14.xml\".  I've explored other options such as using a classifier for the retro translated artifact, and using profiles to choose between jdk1.5 and jdk1.4 builds.  But both of these have problems that I can't get around without a lot of difficulty.\n\nUsing two separate poms works great for me for a single module project, but for a multi module project, I have no way to tell the modules to pick up a different pom.xml file.\n\nSo for my multi module build I would like to be able to say\nmvn -f pom-jdk14.xml install\n\nAnd each module should then look for it's own pom-jdk14.xml.  This could be made into the default behaviour of the \"-f\" option, or a new option could be introduced like \"-fg\" to use the other pom file globally across all the module.\n\n"
    ],
    [
        "MNG-5100",
        "MNG-5424",
        "Hints for setting mem options of maven&plug-ins (for parallel builds) (I enabled parallel builds of maven3 for my project in CI server, it was running quite nicely giving me much faster builds for a multi-module build. But... it brought our CI server on it's knees, other projects suffered from this and the CI build server admin bashed me to get back to serial build :D... oh, he's such a nice guy :D...)\n\nI did some googling around and found out that in Linux, forking new processes may be extremely slow in case the parent that forks, has a great memory print. Well, in the past I had (of course) optimized my build for maven2 by throwing it more (some? no,no... _lots_ of) memory with MAVEN_OPTS by setting both Xms and Xms to the same huge value, not forgetting the MaxPermSize and PermSize. I suppose this, together with the linux forking \"feature\", might cause the extreme cpu load? And of course the CI server process itself has an even bigger memory print, times ten or something, fortunately I suppose it's not doing so much forking...\n\nI suppose the memory tuning should/could be done quite differently when using parallel build feature because the mem is then used in the forked processes which are smaller? So in parallel build I might set those mem options pretty low, I guess? And also I could be setting \"-client\"-mode manually -because otherwise jvm would think it should be running in server mode (due to running in server HW. Actually I don't quite understand why jvm anyway decides based on HW whether it should be running in server or client mode - there's no such relation -not every jvm running on server HW is really a server process...)\n\nIs there anything that we could be improve in maven/maven documentation in this respect?",
        "Direction invocation goal can be invoked in a pom Since maven 3 (at least 3.0.4 and 3.1.0)\nA mojo annotated as directionInvocation to true can be invoked in a pom.\n\nthe plugin.ml is well generated but at runtime no error occurs if goal is executed form a pom.\n"
    ],
    [
        "MNG-4471",
        "MNG-4179",
        "Profile activation fails if <file> contains variables  See the attached testcase.\n\nThe profile is not activated when <file> has variables in it:\n<file><exists>${env.M2_HOME}/bin/mvn</exists></file>\n\nBut when the path is absolute, it works:\n<file><exists>/my/maven/home/bin/mvn</exists></file>\n",
        "[regression] Artifact download hangs upon transfer failure There's still a hole in the parallel artifact resolution we introduced in MNG-3379 for a scenario like this:\n- request to resolve multiple artifacts from the same groupId (i.e. all of these artifacts will be resolved by the same thread)\n- any but the last artifact of the group fails to resolve\n\nUpon error, the existing code will not try to resolve other artifacts in the same group, thereby never decrementing the countdown latch which guards the execution of the main thread."
    ],
    [
        "MNG-1301",
        "MNG-5406",
        "Document test inclusions and exclusions using the surefire plugin ",
        "don't expose core's slf4j-api by default, add a plugin-descriptor option to expose Plugins written until now didn't expect slf4j-api exposition from core: exposing it can cause problems.\nThen we need to avoid slf4j-api exposition by default for them, but add an option in plugin-descriptor to enable\n\nFuture plugin-tools will generate a plugin descriptor with this option defined to effectivemely choose to benefit from core'slf4j or not"
    ],
    [
        "MNG-2974",
        "MNG-5868",
        "Unable to resolve & download snapshot versions from CLI When I try to use a snapshot released version of a plugin on the command line interface maven doesn't resolve these and download them from registered the plugin repositories. When using non snapshot versions it is not a problem to resolve and download them.  When I add the plugin (a snapshot version) to a POM and run it it does download it.  So the problem does not lie with the repo which is registered in the settings.xml in a profile which is active.  The problem just seems to lie with the resolving and dowloading part of the process.   Cause after the snapshot plugin is download using the POM way it does find the plugin when running it from the CLI.\n\nI first discovered this bug when trying to use the Maven install plugin.  Here are commands used in the process.  Reproding this way of use I got the same result when requesting other snapshot version of plugins that were not in the repository.\n\nCommand used to load snapshot version from the CLI (this gives the error you find below)\nmvn org.apache.maven.plugins:maven-install-plugin:2.2-SNAPSHOT:install-file (... + correct plugin params ) \n\nCommand used to load a specific released version from the CLI\nmvn org.apache.maven.plugins:maven-install-plugin:2.1:install-file (... + correct plugin params ) \n\nCommand used to load a the top released version from the CLI\nmvn org.apache.maven.plugins:maven-install-plugin:install-file (... + correct plugin params ) \n\nSettings.xml File\n{code:xml}\n<profile>\n  <id>apachesnapshots</id>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>ddddd</id>\n      <url>http://people.apache.org/repo/m2-snapshot-repository/</url>\n      <releases>\n        <enabled>false</enabled>\n      </releases>\n      <snapshots>\n        <enabled>true</enabled>\n        <updatePolicy>allways</updatePolicy>\n        <checksumPolicy>ignore</checksumPolicy>\n      </snapshots>\n    </pluginRepository>\n  </pluginRepositories>\n</profile>{code}\n\nHope I gave you enough information to fix this error.  It's not major but does hinder me at this point cause now I have to manually place this plugin in everyone of my developers local repo.",
        "Adding serval times the same artifact via MavenProjectHelper (attachArtifact) does not produce a failure  During the check of an issue MSHADE-195 i stumbled over several things...\r\n\r\nIf you take a look here and the log output excerpt:\r\n\r\n{noformat}\r\nINFO] Minimized 2341 -> 1293\r\n[INFO] Minimized 3282 -> 2234\r\n[INFO] Replacing original artifact with shaded artifact.\r\n[INFO] Replacing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT.jar with /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-shaded.jar\r\n[INFO] Replacing original source artifact with shaded source artifact.\r\n[INFO] Replacing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-sources.jar with /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-shaded-sources.jar\r\n[INFO] Dependency-reduced POM written at: /Users/kama/ws-git/apache/mshade/mshade-195/dependency-reduced-pom.xml\r\n[INFO]\r\n[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ MSHADE-195-example ---\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT.jar to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT.jar\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/dependency-reduced-pom.xml to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT.pom\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-sources.jar to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT-sources.jar\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-sources.jar to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT-sources.jar\r\n[INFO] \r\n{noformat}\r\n\r\nInstall plugin tries to install two identical artifacts which will work for maven-install-plugin but would fail a deploy to repository manager (for releases) etc.\r\n\r\nSo after diving into the problem i found the following code in maven-core (MavenProject.java):\r\n\r\n{code:java}\r\n    /**\r\n     * Add or replace an artifact. This method is now deprecated. Use the @{MavenProjectHelper} to attach artifacts to a\r\n     * project. In spite of the 'throws' declaration on this API, this method has never thrown an exception since Maven\r\n     * 3.0.x. Historically, it logged and ignored a second addition of the same g/a/v/c/t. Now it replaces the file for\r\n     * the artifact, so that plugins (e.g. shade) can change the pathname of the file for a particular set of\r\n     * coordinates.\r\n     *\r\n     * @param artifact the artifact to add or replace.\r\n     * @throws DuplicateArtifactAttachmentException\r\n     */\r\n    public void addAttachedArtifact( Artifact artifact )\r\n        throws DuplicateArtifactAttachmentException\r\n    {\r\n        getAttachedArtifacts().add( artifact );\r\n    }\r\n\r\n    public List<Artifact> getAttachedArtifacts()\r\n    {\r\n        if ( attachedArtifacts == null )\r\n        {\r\n            attachedArtifacts = new ArrayList<>();\r\n        }\r\n        return attachedArtifacts;\r\n    }\r\n{code}\r\nSo taking a look into MavenProjectHelper.java and the implementation (DefaultMavenProjectHelper.java).\r\n\r\n{code:java}\r\n    /**\r\n     * Add an attached artifact or replace the file for an existing artifact.\r\n     *\r\n     * @see MavenProject#addAttachedArtifact(org.apache.maven.artifact.Artifact)\r\n     * @param project project reference.\r\n     * @param artifact artifact to add or replace.\r\n     */\r\n    public void attachArtifact( MavenProject project, Artifact artifact )\r\n    {\r\n        project.addAttachedArtifact( artifact );\r\n    }\r\n{code}\r\n\r\nwhich means that there is not check if an artifacts is already attached.\r\n\r\n"
    ],
    [
        "MNG-2523",
        "MNG-4507",
        "OS name activation does not work for Mac OS X Using something like:\n\n  <profiles>\n    <profile>\n      <id>macosx</id>\n      <activation>\n        <os>\n          <name>mac os x</name>\n        </os>\n      </activation>\n      <properties>\n        <osName>Mac OS X</osName>\n      </properties>\n    </profile>\n </profiles>\n\nDoes not work on Mac OS X. The profile is never activated.",
        "missing IT for site urls The fix for MNG-3244 created MNG-3254. There weren't any ITs for this so it wasn't noticed."
    ],
    [
        "MNG-5302",
        "MNG-807",
        "Include thread number in output messages When doing a parallel build the log messages are mixed up making it hard to determine what module a message comes from. If the thread number is included in the log message it would make it easier to see what is going on, especially when the debug flag is used.",
        "Serious problem in repository This bug must have been reported by somebody else, but I can't find, so here's my report :\n\nIt looks like to me that most (90%) of dependencies don't get downloaded correctly because of some problems on the maven2 repositories.\n\nfor example, look at activemq 3.1. there are lots of dependencies with a version of the form ${cglib_full_version}\nwhich lead to  failure...\nAdditionally, ${pom.currentVersion } does not work.. Each time, I have to correct to pom.version\n\nWhat is going on exactly ? It's been weeks and the same problem happen again and again, with many many software avaialble from the repository\n"
    ],
    [
        "MNG-4026",
        "MNG-1183",
        "[regression] Order of project class path does not match POM order during reactor build [r742799|http://svn.eu.apache.org/viewvc/maven/components/branches/maven-2.1.x/maven-project/src/main/java/org/apache/maven/project/MavenProject.java?view=diff&r1=742798&r2=742799&pathrev=742799] uses a {{HashSet}} for the dependencies and as such shuffles the class path. The ordering is only destroyed if dependeny resolution happens more than once for a project, i.e. a single plugin execution will not exhibit the issue.",
        "Make core integration tests aware of user local directory thanks to settings file If one uses -s mysettings.xml file as allowed by MNG-1179, the m2-bootstrapper build will not propagate that information to the IT Verifier.\nThen a different repository will be used. Patch attached."
    ],
    [
        "MNG-621",
        "MNG-2706",
        "Support of custom context-root for ear plugin Need to add a  way to specifiy a custom context root for a war module if the application.xml is automatically generated. Currently it takes the artifactId without the version part (e.g. my-module-1.0.0-SNAPSHOT.war has a context root of /my-module)",
        "Add JDK version to <prerequisites> Currently the only prerequsite one can specify is <maven/> according to http://maven.apache.org/ref/2.0.4/maven-model/maven.html#class_prerequisites\n\nIt would be nice to be able to say that a project requires a certain version of JDK, like, say, 1.5 or 1.6."
    ],
    [
        "MNG-4472",
        "MNG-4190",
        "[regression] Circular self-referential POM causes network access If I were to specify a project with itself as a parent, Maven 2.2.1 gives this response:\n{code}\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: org.apache.maven.its.mng:test\n\nReason: Parent element is a duplicate of the current project  for project org.apache.maven.its.mng:test\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Parent element is a duplicate of the current project  for project org.apache.maven.its.mng:test\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:404)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:272)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)\n        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Parent element is a duplicate of the current project  for project org.apache.maven.its.mng:test\n{code}\n\nMaven 3 doesn't detect this circularity *immediately*; it tries to download the parent by going through my remote repositories. The end result is still a failure since it can't find itself, but it's a regression since the network is accessed for this use case.\n\n{code}\n[INFO] Scanning for projects...\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/its/mng/test/0.1/test-0.1.pom\n[ERROR] The build could not read 1 project -> [Help 1]\n[ERROR]   The project org.apache.maven.its.mng:test:0.1 (D:\\patches\\MNG-4472\\pom.xml) has 2 errors\n[ERROR]     The parent element cannot have the same ID as the project.\n[ERROR]     Non-resolvable parent POM org.apache.maven.its.mng:test:0.1 for org.apache.maven.its.mng:test:0.1: Failed to resolve POM for org.apache.maven.its.mng:test:0.1 due to Missing:\n----------\n1) org.apache.maven.its.mng:test:pom:0.1\n----------\n1 required artifact is missing.\n\nfor artifact:\n  org.apache.maven.its.mng:test:pom:0.1\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2, releases=true, snapshots=false)\n    -> [Help 2]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException\n[ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException\n{code}\n",
        "same remote repo is referecned multiple times If the same remote repository is referenced multiple times (i.e. in settings, in project hierarchy and in project itself) it will appear multiple times in MavenProject.remoteArtifactRepositories. The problem becomes obvious when settings.xml contains mirrorOf=*, in which case project is expected to have single remoteArtifactRepository but it has multiple. The same applies to pluginArtifactRepositories."
    ],
    [
        "MNG-2161",
        "MNG-4735",
        "[maven-embedder-refactor] values from settings.xml never used The CommonMavenObjectFactory create Settings object based on the parameters like settings locations, that fine, but also takes the offline state and usage of plugin regisry as parameters. However these values are also defined in the settings.xml file. 1. It turns into a Chicken-Egg problem, because I need the settings parsed to know the value (if user doens't specify on command line). 2. Or I can go with some defaults + user command line input.. Then the settings values are never used.\n\npatch containing alternate method included. Old one kept. Should be also exposed via the MavenEmbedder class o the outside.",
        "File-based profile activation behaves differently in Maven 3 I have a project with parent and child poms. The child pom has a profile that is activated by file existence. When running a multimodule build in the directory of the parent pom, the profile fails to activate when it should. Under Maven 2, the profile activates as expected. Example poms that demonstrate the problem are below. Put the first pom in the root of the project. Put the second pom in a subdirectory named \"child\". Then, in the project root, run \"mvn antrun:run\". With Maven 2, the output will be \"profile property value\". Under Maven 3, it will be \"default property value\".\n\nNote that the problem is unrelated to the antrun plugin. I'm just using it to demonstrate the behavior.\n\n{code:title=pom.xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.foo</groupId>\n    <artifactId>parent</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <modules>\n        <module>child</module>\n    </modules>\n</project>\n{code}\n\n{code:title=child/pom.xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <artifactId>child</artifactId>\n    <packaging>jar</packaging>\n    <parent>\n        <groupId>com.foo</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <properties>\n        <test.property>default property value</test.property>\n    </properties>\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-antrun-plugin</artifactId>\n                <version>1.3</version>\n                <executions>\n                    <execution>\n                        <id>default-cli</id>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                        <configuration>\n                            <tasks>\n                                <echo message=\"Property value: [${test.property}]\"/>\n                            </tasks>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n    <profiles>\n        <profile>\n            <id>change-property-value</id>\n            <activation>\n                <file>\n                    <exists>child/pom.xml</exists>\n                </file>\n            </activation>\n            <properties>\n                <test.property>profile property value</test.property>\n            </properties>\n        </profile>\n    </profiles>\n</project>\n{code}\n"
    ],
    [
        "MNG-4972",
        "MNG-5409",
        "NPE in DefaultConverterLookup.findConverterForType() $ mvn --version\nApache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)\nJava version: 1.6.0_22\nJava home: /usr/lib/jvm/java-6-sun-1.6.0.22/jre\nDefault locale: en_US, platform encoding: ANSI_X3.4-1968\nOS name: \"linux\" version: \"2.6.24-28-server\" arch: \"i386\" Family: \"unix\"\n\n\n\nSteps to reproduce:\n\n1) Check out Hibernate Core 3.3.2\n2) Download the attached settings-hbn.xml and change the <localRepository> to some empty dir\n2) cd src/core\n3) mvn -s settings-hbn.xml clean install  (no profile)\n4) When I run this for the first time (empty repo), I've got the exception below.\n\n...\nDownloading: http://uk.maven.org/maven2/commons-httpclient/commons-httpclient/2.0.2/commons-httpclient-2.0.2.jar\nDownloading: http://uk.maven.org/maven2/jdom/jdom/1.0/jdom-1.0.jar\nDownloading: http://uk.maven.org/maven2/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nDownloading: http://uk.maven.org/maven2/de/zeigermann/xml/xml-im-exporter/1.1/xml-im-exporter-1.1.jar\nDownloading: http://uk.maven.org/maven2/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar\n\n\n\nDownloading: http://uk.maven.org/maven2/slide/slide-webdavlib/2.1/slide-webdavlib-2.1.jar\nDownloading: http://uk.maven.org/maven2/org/apache/maven/wagon/wagon-webdav/1.0-beta-2/wagon-webdav-1.0-beta-2.jar\n\n\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Hibernate Core Parent POM\n[INFO]    task-segment: [clean, install]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup.findConverterForType(DefaultConverterLookup.java:115)\n        at org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup.lookupConverterForType(DefaultConverterLookup.java:92)\n        at org.codehaus.plexus.component.configurator.converters.composite.CollectionConverter.fromConfiguration(CollectionConverter.java:175)\n        at org.codehaus.plexus.component.configurator.converters.ComponentValueSetter.configure(ComponentValueSetter.java:247)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:137)\n        at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:56)\n        at org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:54)\n        at org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:47)\n        at org.codehaus.plexus.personality.plexus.lifecycle.phase.AutoConfigurePhase.execute(AutoConfigurePhase.java:39)\n        at org.codehaus.plexus.lifecycle.AbstractLifecycleHandler.start(AbstractLifecycleHandler.java:101)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.startComponentLifecycle(AbstractComponentManager.java:105)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.createComponentInstance(AbstractComponentManager.java:95)\n        at org.codehaus.plexus.component.manager.ClassicSingletonComponentManager.getComponent(ClassicSingletonComponentManager.java:92)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:331)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:440)\n        at org.apache.maven.execution.MavenSession.lookup(MavenSession.java:138)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.findMappingsForLifecycle(DefaultLifecycleExecutor.java:1358)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindLifecycleForPackaging(DefaultLifecycleExecutor.java:1292)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:1275)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)\n        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n",
        "Support deployment in offline modefor 'file' protocol Please refer to MDEPLOY-90.\n\nThe deploy plugin is a useful way to pack all project artifacts into maven repository structure. It is required for example when you package an application for package manager, so you need the artifacts as maven repository locally so it can be packaged.\n\nI see no sense in limiting deploy plugin in case of repository is at file:// protocol, as file:// is not offline.\n\nPlease support this, or allow another mechanism to create locally maven repository of project artifacts.\n\nMethods I tried: create repository using assembly - but binaries cannot be digested, create repository using dependency plugin - but I need to explicitly build the project in unique structure and explicitly specify dependencies.\n\nThe deploy plugin is the right way to do this, it is just the offline limitation inhibit the use of it.\n\nSo patch is simple for deploy plugin... HOWEVER the plugin is a complete void, as the whole deployment implementation is done internally in sources that are not provided by the standard apache maven download.\n\nAnyway, found this[1], the meaning is that unless the whole maven implementation will skip offline check if protocol is \"file\", it cannot be done.\n\nFor the record, with the patch:\n\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8-SNAPSHOT:deploy (default-deploy) on project XXX: The repository system is in offline mode, deployment impossible\nat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)\nat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\nat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\nat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\nat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\nat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\nat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)\nat org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)\nat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:141)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:601)\nat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\nat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\nat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\nat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: org.apache.maven.plugin.MojoExecutionException: The repository system is in offline mode, deployment impossible\nat org.apache.maven.plugin.deploy.DeployMojo.execute(DeployMojo.java:189)\nat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)\nat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n... 19 more\nCaused by: org.apache.maven.artifact.deployer.ArtifactDeploymentException: The repository system is in offline mode, deployment impossible\nat org.apache.maven.artifact.deployer.DefaultArtifactDeployer.deploy(DefaultArtifactDeployer.java:141)\nat org.apache.maven.plugin.deploy.AbstractDeployMojo.deploy(AbstractDeployMojo.java:165)\nat org.apache.maven.plugin.deploy.DeployMojo.execute(DeployMojo.java:153)\n... 21 more\nCaused by: org.sonatype.aether.deployment.DeploymentException: The repository system is in offline mode, deployment impossible\nat org.sonatype.aether.impl.internal.DefaultDeployer.deploy(DefaultDeployer.java:204)\nat org.sonatype.aether.impl.internal.DefaultRepositorySystem.deploy(DefaultRepositorySystem.java:443)\nat org.apache.maven.artifact.deployer.DefaultArtifactDeployer.deploy(DefaultArtifactDeployer.java:137)\n... 23 more\n\n[1] http://grepcode.com/file/repo1.maven.org/maven2/org.sonatype.aether/aether-impl/1.0/org/sonatype/aether/impl/internal/DefaultDeployer.java#116"
    ],
    [
        "MNG-3368",
        "MNG-3831",
        "Printing version (-v argument) should not stop lifecycle execution I wanted to always print the Maven version when I build, but unfortunately Maven immediately quits after outputting the version. This option should not quit when a lifecycle is also specified. Example: mvn -v install",
        "[regression] Expressions without project/pom prefix are no longer interpolated with model values Maven 2.x interpolates an expression like {{${name}}} to the value of {{${project.name}}}. While this aliasing is a questionable design, it was opted to retain it in Maven 3.x (c.f. [commit comment on r704423|http://www.nabble.com/RE%3A-svn-commit%3A-r704423----maven-components-trunk-maven-project-src-main-java-org-apache-maven-project-builder-PomClassicTransformer.java-p19975207.html])."
    ],
    [
        "MNG-3895",
        "MNG-1725",
        "Have Maven 3.x building on the grid before releasing ",
        "Find a reusable/consistent way to insulate Mojos from 'does not implement Log' in commons-logging I've had to add a runtime dependency on log4j to the checkstyle plugin to allow it to work, since there are classloader issues with using the Jdk14Logger provider. We will continue to have these issues until we find a way to resolve this consistently for all plugins. Possibly some sort of shared-code utility or something..."
    ],
    [
        "MNG-5658",
        "MNG-608",
        "Syntax error in bin/mvn on Solaris SPARC The latest addition to bin/mvn breaks mvn running on Solaris.\nSyntax error in line 86.\nThe Bourne shell /bin/sh does not understand this syntax with the brackets.\n           if [[ -z \"$JAVA_HOME\" && -x /usr/libexec/java_home ]] ; then\n             #\n             # Apple JDKs\n             #\n             export JAVA_HOME=$(/usr/libexec/java_home)\n           fi\n           ;;\nchanging the line with the assignment to\n             export JAVA_HOME=/usr/libexec/java_home\nlike the lines before makes it running again.\n",
        "plugin prefix lookups should only be used for CLI invoked goals this is a potential reproducibility problem. Because the plugin prefix lookup relies on per-user settings, it should only apply to goals run from the command line. However, goals invoked from the lifecycle mappings, for example, also use prefixes - they should be restricted to those plugins in the POM in that case."
    ],
    [
        "MNG-3967",
        "MNG-5694",
        "Design First deliverable shall\n\n* be designed as part of a more complex provisioning system\n** provide  APIs to be later used by that system\n* implement *Delta Management* requirements from [MNG-3966]\n\n\nWhen started with a pointer to a maven instance, it shall:\n\n* find *maven-distribution-xx.jar* in ./lib to use for *current version*\n* retrieve all existing versions of the \"same family\" (a'la 3.0.xx) for *org.apache.maven:maven-distribution:3.0.xx*\n* let user supply a version to up / down grade to\n* calculate, using Mercury APIs\n** runtime scoped classpath for \"current\" pom.xml\n** runtime scoped classpath for selected version's pom.xml\n** retrieve the binary diff to local repo\n* make ./lib reflect the \"new\" runtime classpath\n** remove replaced binaries\n** copy in missing binaries\n\n",
        "Maven shade plugin transformers are not overrideable in child pom. When you configure the maven-shade-plugin with a list of transformers in a root pom, but override the <transformers> section of the maven-shade-plugin in a child pom, the last defined transformer gets all of the parameters of the previous transformers in the list, potentially making mvn install/package unusable.\n\nConcrete case (see also attached zip example) : in the root pom.xml I put the following build configuration with a shade plugin and some transformers :\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>1.5</version>\n            <configuration>\n               <outputFile>test-deploy.jar</outputFile>\n               <transformers>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                     <resource>META-INF/spring.handlers</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n                     <file>${project.build.directory}/generated-resources/versions/META-INF/${project.groupId}/${project.artifactId}.version</file>\n                     <resource>META-INF/assembly.version</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                     <mainClass>${mainClass}</mainClass>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n               </transformers>\n            </configuration>\n         </plugin>\n      </plugins>\n   </build>\n\nif in a child pom.xml, I now put the exact same transformers (useless override, I know, but sometimes you need to add one in a sub project) :\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <executions>\n               <execution>\n                  <phase>package</phase>\n                  <goals>\n                     <goal>shade</goal>\n                  </goals>\n               </execution>\n            </executions>\n            <configuration>\n               <transformers>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                     <resource>META-INF/spring.handlers</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n                     <file>${project.build.directory}/generated-resources/versions/META-INF/${project.groupId}/${project.artifactId}.version</file>\n                     <resource>META-INF/assembly.version</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                     <mainClass>${mainClass}</mainClass>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n               </transformers>\n            </configuration>\n         </plugin>\n      </plugins>\n   </build>\n\nthe 'mvn install' or 'mvn package' will fail with the following message :\n\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to configure plugin parameters for: org.apache.maven.plugins:maven-shade-plugin:1.5\n\n\n\nCause: Cannot find setter nor field in org.apache.maven.plugins.shade.resource.ServicesResourceTransformer for 'resource'\n[INFO] ------------------------------------------------------------------------\n\nThis is because if you check the effective pom with 'mvn help:effective-pom' you will see that the last transformer also gets the resource, file and mainClass parameters of the transformers defined above, while it's not supposed to:\n\n<transformers>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n    <resource>META-INF/spring.handlers</resource>\n  </transformer>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n    <file>D:\\dev\\issue\\child\\target/generated-resources/versions/META-INF/mvn.transformers.issue.example/child.version</file>\n    <resource>META-INF/assembly.version</resource>\n  </transformer>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n    <mainClass>${mainClass}</mainClass>\n  </transformer>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\">\n    <resource>META-INF/spring.handlers</resource>\n    <file>D:\\dev\\issue\\child\\target/generated-resources/versions/META-INF/mvn.transformers.issue.example/child.version</file>\n    <mainClass>${mainClass}</mainClass>\n  </transformer>\n</transformers>\n\nI put this issue in the POM/Bootstrap & Build category because it looks like a general xml 'aggregation' issue (title could maybe be generalized).\n\nNote: this is issue is not present with Maven 3.3.2! But if you do need to use 2.2.1 in your corporate environment, the only solution is to write a dummy transformer yourself that accepts the unwanted parameters to put at the end of the transformers list."
    ],
    [
        "MNG-294",
        "MNG-2834",
        "installation-wide configuration similar (identical?) to settings.xml - we need something that can be added to a Maven installation.",
        "\"from the specified remote repositories\" message incorrect I am getting this message on a not found dependency:\n\nfrom the specified remote repositories:\n  ggg-dev (http://mvn.ggg.be/maven2/dev),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  ggg-deploy (http://mvn.ggg.be/maven2/deploy),\n  snapshots (http://snapshots.maven.codehaus.org/maven2),\n  central (http://repo1.maven.org/maven2)\n\nBut that dependency (commons-collections:commons-collections:jar:2.0) is in ibiblio.\nHowever, we don't use ibiblio, because we configured our repositories like this:\n\n<repositories>\n  <repository>\n    <id>central</id>\n    <name>ggg deploy repository</name>\n    <url>http://mvn.ggg.be/maven2/deploy</url>\n    <releases>\n      <enabled>true</enabled>\n    </releases>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </repository>\n  <repository>\n    <id>ggg-dev</id>\n    <name>ggg dev repository</name>\n    <url>http://mvn.ggg.be/maven2/dev</url>\n    <releases>\n      <enabled>false</enabled>\n    </releases>\n    <snapshots>\n      <enabled>true</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n<pluginRepositories>\n  <pluginRepository>\n    <id>ggg-deploy</id><!-- Not \"central\" -->\n    <name>ggg deploy repository</name>\n    <url>http://mvn.schaubroeck.be/maven2/deploy</url>\n    <releases>\n      <enabled>true</enabled>\n    </releases>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </pluginRepository>\n  <pluginRepository>\n    <id>ggg-dev</id>\n    <name>Schaubroeck dev repository</name>\n    <url>http://mvn.schaubroeck.be/maven2/dev</url>\n    <releases>\n      <enabled>false</enabled>\n    </releases>\n    <snapshots>\n      <enabled>true</enabled>\n    </snapshots>\n  </pluginRepository>\n</pluginRepositories>\n\n\n\nSo the following lines of \"from the specified remote repositories\" are incorrect:\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  snapshots (http://snapshots.maven.codehaus.org/maven2),\n  central (http://repo1.maven.org/maven2)\n\nPS: especially those snapshots in there scared me... I deleted my entire repo, verified that we do not include snapshot repo's and still they show up in that list."
    ],
    [
        "MNG-389",
        "MNG-5112",
        "site:site Exception I've build a skeleton project with \n\nm2 archetype:create -DgroupId=org.maven.m2 -DartifactId=Maven2\n\nThen ran site:site for the generated project.\n\nResult:\n$ m2 site:site\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Building Maven Quick Start\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] maven-jar-plugin: resolved to version 2.0-alpha-2 from local repository\n[INFO] maven-site-plugin: resolved to version 2.0-alpha-1 from local repository\n[INFO] [site:site]\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] BUILD ERROR\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error during site generation\n        at org.apache.maven.doxia.DoxiaMojo.execute(DoxiaMojo.java:181)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPlugi\nnManager.java:415)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.processGoals(Defa\nultLifecycleExecutor.java:169)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLi\nfecycleExecutor.java:90)\n        at org.apache.maven.DefaultMaven.processProject(DefaultMaven.java:253)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:167)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:246)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:303)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:243)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:416)\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:363)\nCaused by: java.lang.NullPointerException\n        at org.codehaus.plexus.util.StringUtils.interpolate(StringUtils.java:206\n5)\n        at org.apache.maven.doxia.DoxiaMojo.getSiteDescriptor(DoxiaMojo.java:283\n)\n        at org.apache.maven.doxia.DoxiaMojo.execute(DoxiaMojo.java:176)\n        ... 14 more",
        "Issue MNG-4147 re-current in maven 3.0.3 The reported issue MNG-4147 'very long passwords cause LightweightHTTP wagon to line-wrap the Base64-encoded Authorization header' which is apparently fixed in Maven 2.2.0 appears to have re-occurred in maven 3.0.3.\n\nMy understanding that the original issue was never actually fixed but rather a work-around was provided which allowed users to switch wagon providers. \n\nMaven 3.0.3 doesn't appear to allow the switching of providers which means that the default lightweighthttp provider is used. Given that the bug still exists in the lightweight provider we appear to be back to square one.\n\nIs there still a way to switch providers? After several hours of searching I was unable to find a way to switch in 3.x."
    ],
    [
        "MNG-741",
        "MNG-4956",
        "new method: addResource( String directory, String includes, String excludes ) on MavenProject in the sablecc plugin I have a case of *.dat files getting created that need to get jared up with the actual project so I needed to add them as a resource to the project...since the plugin developers should have to have a minimal exposure to internals of maven I added this method to MavenProject as a convience method...also means I have one less dependency that the plugin itself needs to reference...whichever one model is a part of.",
        "Cygwin mvn script modifies CLASSPATH environment variable When running in Cygwin, the apache-maven-3.0/bin/mvn script actually changed the user env CLASSPATH to an invalid Java classpath value, which is unexpected! To repeat this, try the following on Cygwin:\n\nCreate this simple pom.xml in an project:\n\n{code:xml}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>deng</groupId>\n  <artifactId>mvn-examples</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-antrun-plugin</artifactId>\n        <version>1.6</version>\n        <configuration>\n          <target>\n            <echo message=\"Maven env.CLASSPATH: ${env.CLASSPATH}\" />\n          </target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n{code}\n\n{code}\n$ /apps/apache-maven-3.0/bin/mvn -v\nApache Maven 3.0 (r1004208; 2010-10-04 07:50:56-0400)\nJava version: 1.6.0_19\nJava home: C:\\apps\\jdk1.6.0_19\\jre\nDefault locale: en_US, platform encoding: Cp1252\nOS name: \"windows xp\" version: \"5.1\" arch: \"x86\" Family: \"windows\"\n\n$ export CLASSPATH=\"C:\\\\my-classes;C:\\\\my-lib\\app.jar\"\n\n$ echo $CLASSPATH\nC:\\my-classes;C:\\my-lib\\app.jar\n\n$ /apps/apache-maven-3.0/bin/mvn antrun:run\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building mvn-examples 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-antrun-plugin:1.6:run (default-cli) @ mvn-examples ---\n[INFO] Executing tasks\n\nmain:\n     [echo] Maven env.CLASSPATH: /cygdrive/c/my-classes:/cygdrive/c/my-lib/app.jar\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 0.843s\n[INFO] Finished at: Wed Dec 29 23:37:41 EST 2010\n[INFO] Final Memory: 2M/15M\n[INFO] ------------------------------------------------------------------------\n{code}\n\nNOTE 1: The CLASSPATH value has been modified with cygwin path prefix, which become an invalid Java classpath value!\nNOTE 2: If I use mvn.bat in cygwin shell, it will work as expected. So this only affect the mvn shell script only.\nNOTE 3: This only affect the variable \"CLASSPATH\", b/c if I use JAVA_CLASSPATH, the value didn't change."
    ],
    [
        "MNG-4188",
        "MNG-2776",
        "Add a 'finally' phase. When Maven executes a lifecycle, it does not execute any phases succeeding a failing phase. It would be great if Maven supports a 'finally' phase, which is guaranteed to run regardless of the state of the lifecycle just like a Java 'finally' block. The use case I would need such a phase for is the following:\n\n{code}\n<profile>\n      <id>sourceforge-shell</id>\n      <activation>\n        <activeByDefault>false</activeByDefault>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-antrun-plugin</artifactId>\n            <dependencies>\n              <dependency>\n                <groupId>org.apache.ant</groupId>\n                <artifactId>ant-jsch</artifactId>\n                <version>1.7.1</version>\n              </dependency>\n            </dependencies>\n            <executions>\n              <execution>\n                <id>create-sourceforge-shell</id>\n                <phase>validate</phase>\n                <goals>\n                  <goal>run</goal>\n                </goals>\n                <configuration>\n                  <tasks>\n                    <sshexec host=\"shell.sourceforge.net\" username=\"${sf.username},${sf.project}\" password=\"${sf.password}\" command=\"create\" timeout=\"300000\" />\n                  </tasks>\n                </configuration>\n              </execution>\n              <execution>\n                <id>create-sourceforge-shell-site</id>\n                <phase>pre-site</phase>\n                <goals>\n                  <goal>run</goal>\n                </goals>\n                <configuration>\n                  <tasks>\n                    <sshexec host=\"shell.sourceforge.net\" username=\"${sf.username},${sf.project}\" password=\"${sf.password}\" command=\"create\" timeout=\"300000\" />\n                  </tasks>\n                </configuration>\n              </execution>\n              <execution>\n                <id>shutdown-sourceforge-shell</id>\n                <phase>deploy</phase>\n                <goals>\n                  <goal>run</goal>\n                </goals>\n                <configuration>\n                  <tasks>\n                    <sshexec host=\"shell.sourceforge.net\" username=\"${sf.username},${sf.project}\" password=\"${sf.password}\" command=\"shutdown\" timeout=\"300000\" />\n                    <echo message=\"Sleeping for 1 minute waiting for shutdown of shell.\" />\n                    <sleep minutes=\"1\" />\n                  </tasks>\n                </configuration>\n              </execution>\n              <execution>\n                <id>shutdown-sourceforge-shell-site</id>\n                <phase>site-deploy</phase>\n                <goals>\n                  <goal>run</goal>\n                </goals>\n                <configuration>\n                  <tasks>\n                    <sshexec host=\"shell.sourceforge.net\" username=\"${sf.username},${sf.project}\" password=\"${sf.password}\" command=\"shutdown\" timeout=\"300000\" />\n                    <echo message=\"Sleeping for 1 minute waiting for shutdown of shell.\" />\n                    <sleep minutes=\"1\" />\n                  </tasks>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n{code}\n\nI am currently using this profile when deploying to sourceforge. The problem is, that the shell won't get shutdown, whenever a build fails. It needs to get shutdown, so that a build for another SF project can succeed. In the example above, the two executions 'shutdown-sourceforge-shell' and 'shutdown-sourceforge-shell-site'  could be bound to a 'finally' phase and could shutdown the shell regardless of the outcome of the build.\n",
        "Upgrade the dependency on modello-maven-plugin to a more recent version Upgrade the dependency on modello-maven-plugin in maven-model to alpha-13 (or alpha-14 if that is released). This  would bring in a couple of nice features for the generated documentation."
    ],
    [
        "MNG-3319",
        "MNG-5285",
        "Reactor cannot detect artifact with exist in project and has test-jar type and test scope The fix  for MNG-2277 has resolved a lot of problems, first of all for release procedure.\nBut we will still has the problem with detecting artifact like this. \n\n        <dependency>\n            <groupId>agillic.models</groupId>\n            <artifactId>agillic-processmodel</artifactId>\n            <version>${project.version}</version>\n            <type>test-jar</type>\n            <scope>test</scope>\n        </dependency>\n",
        "New profile activation based on SNAPSHOT qualifier Although writing a ProfileActivator will do, I think this should be built into Maven. We only want to activate a plugin when the artifact is a SNAPSHOT. It's an additional build check that we don't need when releasing. "
    ],
    [
        "MNG-4206",
        "MNG-1367",
        "Prefer RELEASE over LATEST when resolving plugin versions In 3.x, we will reverse the order in which a plugin version is resolved from the repo metadata. The last release version will be preferred over the latest version so that users don't automagically get development plugins unless they explicitly request them. Just think of the confusion the IT core plugin stubs caused to users. ",
        "Guide to creating report plugin Show people how to make reports."
    ],
    [
        "MNG-4244",
        "MNG-2438",
        "Allow to select project for make-like reactor by artifact id Right now, the make-like reactor mode accepts either a relative path or groupId:artifactId to denote the projects to build. As a matter of convenience, selecting projects by only artifact id would reduce the clumsiness of the CLI.\n",
        "search for metadata in legacy repositories causes wrong repository source to be used for artifact resolution legacy repositories store all version metadata in a single file under the /poms/ subdirectory of the artifactId dir. This means that snapshot resolution will result in the legacy repository being marked as the source for the artifact, regardless of whether that metadata file contains the snapshot is actually in that repository's metadata file or not. This is because the metadata manager (and metadata class itself, possibly) assumes that all metadata files resolved for a particular artifact/snapshot are relevant to that snapshot...when the legacy repo's metadata is merged into the rest of the in-progress metadata, changes are detected, and the legacy repo is adopted as the source for the latest artifact information, regardless of whether it actually contains information about that snapshot or not."
    ],
    [
        "MNG-2741",
        "MNG-3448",
        "[regression] Meaningless error message: \"Error transferring file\" When an attempt is made to resolve dependencies, the following error is encountered:\n\n[INFO] artifact org.apache.maven.plugins:maven-resources-plugin: checking for updates from codehaus-mojo-snapshot-plugins\n[WARNING] repository metadata for: 'artifact org.apache.maven.plugins:maven-resources-plugin' could not be retrieved from repository: codehaus-mojo-snapshot-plugins due to an error: Error transferring file\n[INFO] Repository 'codehaus-mojo-snapshot-plugins' will be blacklisted\n\nWithout further information, debugging this problem is impractical.\n\nInformation needed in the error message:\n\n- Whether or not a proxy is being used, and if so, which one. (Symptoms in this case indicate no proxy is being used, yet a proxy is configured - no way to tell whether its a config problem or a proxy problem)\n\n- Whether the server and/or proxy server gave an error code (4xx, 5xx), or whether there was no response at all.\n",
        "Infinite Loop When Using project.version in Modules Build I have the following setup:\n\norg.example.pom/pom.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project\n        xmlns=\"http://maven.apache.org/POM/4.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n>\n        <modelVersion>4.0.0</modelVersion>\n        <groupId>org.example</groupId>\n        <artifactId>pom</artifactId>\n        <packaging>pom</packaging>\n        <version>1</version>\n        <name>POM</name>\n        <properties>\n                <webapp.version>${project.version}</webapp.version>\n        </properties>\n</project>\n\nand org.example.jar/pom.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project\n        xmlns=\"http://maven.apache.org/POM/4.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n>\n        <modelVersion>4.0.0</modelVersion>\n        <parent>\n                <groupId>org.example</groupId>\n                <artifactId>pom</artifactId>\n                <version>1</version>\n                <relativePath>../org.example.pom/pom.xml</relativePath>\n        </parent>\n        <groupId>org.example</groupId>\n        <artifactId>jar</artifactId>\n        <packaging>jar</packaging>\n        <version>${webapp.version}</version>\n        <name>JAR</name>\n</project>\n\nRunning \"mvn clean\" in org.example.jar yields just\n\n[INFO] Scanning for projects...\n\nand then Maven hangs. Replacing \"${project.version}\" with a simple \"0.1\" allows things to work properly.\n\nMy environment:\nMaven version: 2.0.8\nJava version: 1.5.0_14\nOS name: \"linux\" version: \"2.6.24-gentoo-r2\" arch: \"i386\" Family: \"unix\""
    ],
    [
        "MNG-2790",
        "MNG-2721",
        "lastUpdated timestamp in local repository metadata not updated on install if it already exists while this was always the case, it went unnoticed because the file timestamp was relied upon instead of the metadata timestamp (Which is now used in consideration, and is causing snapshots to be used from the remote repository even if it has been built locally)",
        "Determine a standard way to pass proxy information into the embedder Right now proxy setting code is cut and pasted between the embedder and DefaultMaven. It should happen from the embedder."
    ],
    [
        "MNG-4325",
        "MNG-4398",
        "[regression] Lifecycle overlay configuration of aggregator mojos is not properly processed when forking reactor See the attached log from the IT for MNG-1073 and note that the forked mojo uses the same output directory for all three modules of the reactor, i.e. the expression {{project.build.directory}} from the lifecycle overlay configuration was not properly processed.",
        "Provide an extension point to track artifact additions to the local repository Integrators like M2Eclipe would like to get notified of updates to the local repository in order to update auxiliary data structures like indexes."
    ],
    [
        "MNG-1249",
        "MNG-306",
        "External Javadoc report apidocs/index.html is overwritten MNG-650 is happening again",
        "the example for add bin to path is not correct It's trivial but :\nIn the page http://maven.apache.org/maven2/download.html for the Installation Instructions section for windows and unix, the definition of the PATH is invalide. It is :\n\"C:\\Program Files\\Apache Software Foundation\\maven-2.0-alpha-1\";%PATH%\ninstead of :\n\"C:\\Program Files\\Apache Software Foundation\\maven-2.0-alpha-1\\bin\";%PATH%\nThe bin directory is ommit. (Same remarque on unix)\n\nCan add a path now I maybe do it later\n\nNicolas,"
    ],
    [
        "MNG-4708",
        "MNG-4458",
        "I am not able to add name space prefixes to pom.xml consider following pom.xml, I am not able to run package goal on this pom.xml\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<abc:project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:abc=\"http://maven.apache.org/POM/4.0.0\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>mavenproj</groupId>\n  <artifactId>mavenproj</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>2.0.2</version>\n      </plugin>\n    </plugins>\n  </build>\n  <parent>\n    <groupId>AppPOM</groupId>\n    <artifactId>AppPOM</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n</abc:project>\n",
        "checksumPolicy always gets ignored I have many checksum errors on my builds. But the builds runs successfully. So I want to ignore the checksum errors to save time. But setting of checksumPolicy to ignore doesn't take any effect."
    ],
    [
        "MNG-985",
        "MNG-1201",
        "plugin goals referenced in build/pluginManagment unexpectedly executed during lifecycle Goals referenced in <build><pluginManagement> plugins are executed during the lifecycle - this is unexpected.\n\nSee the attached pom.xml as an example.\n\nRunning \"m2 install\" on this pom causes the \"war\" plugin to execute the \"war\" goal during the packaging phase of the lifecycle.\n\nNote that the goal should not execute because it is inside the <pluginManagement> section.",
        "maven2 archetype plugin's maven-archetype-mojo points to snapshot maven2 archetype plugin's maven-archetype-mojo points to snapshot:\n\n<dependency>\n  <groupId>org.apache.maven</groupId>\n  <artifactId>maven-plugin-api</artifactId>\n  <version>2.0-beta-1-SNAPSHOT</version>\n</dependency>\n\nThis should just point to 2.0-beta-1"
    ],
    [
        "MNG-177",
        "MNG-3173",
        "supersedes/obsoletes Ability to map superseded ids.\n\neg plexus-container-default supersedes plexus-container-api",
        "It should be possible to declare transitive dependency exclusions independent of any of the immediately declared dependencies There are situations in projects with many dependencies where  a transitive dependency that is desired to be excluded is pulled in by several of the immediate dependencies. In these situations it can be awkward and clumsy to have to add and maintain this particular exclusion in each immediate dependency that introduces it. \n\nThere should be a way to list exclusions independent of a specific immediate dependency, so that they take effect for all of them wherever the specified artifacts might be introduced transitively."
    ],
    [
        "MNG-3696",
        "MNG-2990",
        "Add explicit transitive dependencies in dependencyManagement section of pom.xml Transitive dependencies cause lots of headaches and require a fair amount of manual intervention to fix conflicts. It is common to see a pom with the following scenario:\n\n<dependencyManagement>\n\t<dependencies>\n\t\t<!-- Must manually include com.other.common when using com.sample.foo -->\n\t\t<dependency>\n\t\t\t<groupId>com.sample</groupId>\n\t\t\t<artifactId>foo</artifactId>\n\t\t\t<version>1</version>\n\t\t\t<exclusions>\n\t\t\t\t<!-- com.sample.foo includes old version 1 of com.other.common -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.other</groupId>\n\t\t\t\t\t<artifactId>common</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\t\n\t\t<dependency>\n\t\t\t<groupId>com.other</groupId>\n\t\t\t<artifactId>common</artifactId>\n\t\t\t<version>2</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.sample</groupId>\n\t\t\t<artifactId>bar</artifactId>\n\t\t\t<version>3</version>\n\t\t\t<!-- com.sample.foo includes version 2 of com.other.common -->\n\t\t</dependency>\n\t</dependencies>\n</dependencyManagement>\n\nThis is problematic because descendant poms must manually include the com.other.common dependency when including the com.sample.foo dependency. The word around is creating separate pom projects to manage the dependencies, but this doesn't do a great job of expressing intent, leads to a proliferation of projects, and makes dependency management more difficult since it's scattered over multiple poms. \n\nIdeally users should be allowed to specify inclusions in the dependency management section of the pom e.g. something like:\n\n<dependencyManagement>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.sample</groupId>\n\t\t\t<artifactId>foo</artifactId>\n\t\t\t<version>1</version>\n\t\t\t<!-- com.sample.foo includes old version 1 of com.other.common -->\n\t\t\t<exclusions>\t\t\t\t\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.other</groupId>\n\t\t\t\t\t<artifactId>common</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t\t<inclusions>\n\t\t\t\t<inclusion>\n\t\t\t\t\t<groupId>com.other</groupId>\n\t\t\t\t\t<artifactId>common</artifactId>\n\t\t\t\t\t<version>2</version>\n\t\t\t\t</inclusion>\n\t\t\t</inclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.sample</groupId>\n\t\t\t<artifactId>bar</artifactId>\n\t\t\t<version>3</version>\n\t\t\t<!-- com.sample.foo includes version 2 of com.other.common -->\n\t\t</dependency>\n\t</dependencies>\n</dependencyManagement>\n \n\n",
        "M2_HOME is incorrect when launched from another process This is just an idea to solve the following:  I believe echo'ing ~dp0 when launching maven.bat from ant exec produces the ant.bat processes ~0; not the maven bat  files ~0 -since createProc API is used the processes command is the first argument.\n\nI think you may get around this by putting a new \"finder file\" .bat along side mvn.bat . Since mvn.bat and find_m2.bat are both on the path I can \"discover\" where M2_HOME is from the %PATH%.\n\nWithin mvn.bat\nif  \"%m2_home%\" == \"\"(\n   if \"%OS%\"==\"Windows_NT\" (call find_m2.bat)\n) \nWithin find_m2.bat:\n@echo off\nsetlocal\nset  _WHERE_IS_M2=%~dp0\nset M2_LOCAL_HOME=%__WHERE_IS_M2:\\bin=%\n@REM echo %M2_LOCAL_HOME%\nendlocal & set M2_HOME=%M2_LOCAL_HOME%\n"
    ],
    [
        "MNG-4410",
        "MNG-4062",
        "[regression] Maven execution does not end after showing usage help Running {{mvn --help}} does not stop Maven 3.x from trying to build the current project. ",
        "Evaluate possibility to cache parents during multi module build From a breakpoint in {{DefaultMavenProjectBuilder.build(File, ProjectBuilderConfiguration)}} it seems that the parent of a multi-module project is rebuild for each child in the reactor. Given the likelihood of the modules in the reactor having the same parent, it could be a good opportunity for optimization to cache the parents (or projects in general)."
    ],
    [
        "MNG-3175",
        "MNG-5235",
        "Take another pass over the exceptions that can occur during execution and project handling The problems that can occur during execution and project handing:\n\n- POM parsing errors\n- missing metadata\n- error retrieving metadata\n- version range violations\n- circular dependency violations\n- missing artifacts\n- error retrieving artifacts\n\nI have most of this handled in the ArtifactResolutionResult, but the ProjectBuildingResult and the MavenExecutionResult need some work to make sure that everything is passed through correctly. This is of the utmost important for embedding because it means from the UI that integrators can give users exact details as to problems that occur. Milos has really gone a long way to work around the fact we don't do this.",
        "Profiles not activated according to property values I am trying to activate profiles according to properties defined in the pom.xml. Unfortunately, the profiles are never activated, no matter what value is set for the defined property. I double-checked my pom.xml with existing documentation.\n\nThe attached example contains two profiles who echo the property value. These are never displayed in the output. However, documentation says a profile should be invoked if the activation section property values are met.\n\nThere is also something unclear in the existing documentation. Is it possible to enable multiple profiles with properties in a single run or is only one profile selected at most in a single run?\n\n "
    ],
    [
        "MNG-4952",
        "MNG-3739",
        "[regression] RELEASE field of repository metadata is not updated upon repeated deployments As reported by [Marcin Kuthan on the user list|http://www.mail-archive.com/users@maven.apache.org/msg115404.html], the g:a-level metadata's release field is not updated upon redeployments, i.e. the value is stuck at its initial value.",
        "Perform multiple web requests simultaneously. Maven's dependency downloading is horribly slow.\n\nIt appears to only make one request at a time; often to slow mirrors which take seconds to respond.\n\nThis is not so much of an issue when you use a local repository to keep and manage your dependencies; though it becomes one again once you leave the network of that repository and try to access it over the internet.\n\nMaven should make multiple (5 or so; configurable perhaps) requests simultaneously so that while several are establishing connection, others are at least already using the available bandwidth.  And should mirrors be capped; other artifacts can already be downloaded from other mirrors to make optimal use of the bandwidth.  Currently only a fraction of the bandwidth capacity is used; causing an initial build of a large project without a local repository available to take *for* *ever*.  The project I'm working on; I need to make sure to reserve a day at least should I want to build the code with a client."
    ],
    [
        "MNG-4666",
        "MNG-407",
        "[regression] Plugins depending on plexus:plexus-container-default get broken runtime classpath The fix that was put in for MNG-4553 causes {{plexus:plexus-container-default}} to be erroneously included in the plugin runtime classpath. This in turn causes type conflicts between the container used by Maven core and the plugin. Possible error scenario: [Mojo not being contextualized|http://www.mail-archive.com/dev@maven.apache.org/msg84576.html].",
        "Need a way to turn off transient fetching of libraries We need a way to turn off transient retrieval of stuff in the ant tasks. If, for example, I ask for commons-logging-1.04, the runtime pulls down everything ever used in it \n[artifact:dependencies] Downloading: commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.pom\n[artifact:dependencies] Transferring 7K\n[artifact:dependencies] Downloading: commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.pom.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.pom\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.pom.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: junit/junit/3.7/junit-3.7.pom\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: junit/junit/3.7/junit-3.7.pom.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: log4j/log4j/1.2.6/log4j-1.2.6.pom\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: log4j/log4j/1.2.6/log4j-1.2.6.pom.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: logkit/logkit/1.0.1/logkit-1.0.1.pom\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: logkit/logkit/1.0.1/logkit-1.0.1.pom.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: logkit/logkit/1.0.1/logkit-1.0.1.jar\n[artifact:dependencies] Transferring 70K\n[artifact:dependencies] Downloading: logkit/logkit/1.0.1/logkit-1.0.1.jar.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: log4j/log4j/1.2.6/log4j-1.2.6.jar\n[artifact:dependencies] Transferring 342K\n[artifact:dependencies] Downloading: log4j/log4j/1.2.6/log4j-1.2.6.jar.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: junit/junit/3.7/junit-3.7.jar\n[artifact:dependencies] Transferring 114K\n[artifact:dependencies] Downloading: junit/junit/3.7/junit-3.7.jar.md5\n[artifact:dependencies] Transferring 0K\n[artifact:dependencies] Downloading: avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.jar\n[artifact:dependencies] Transferring 62K\n[artifact:dependencies] Downloading: avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.jar.md5\n[artifact:dependencies] Transferring 0K\n\nAs a consequence, the classpath is then set up wrong. And if we copy the contents of that path (e.g. into the lib dir of a WAR, we end up with conflicting JAR files).\n\nAnother example, if if declare a dependency on jaxen-1.1beta6. That was built against dom4j-1-5.2. That doesnt have an entry in the maven2 repository, so the build fails. Yet all jaxen needs is a JAXP parser, for which xerces works perfectly well. \n\nI've looked at the scope attribute, and it seems that transience is certainly noted as a problem, but I'm not sure that works. What I really need is a transient=on/off attribute, so I can run with transience off when I am being 100% explicit about all my dependencies."
    ],
    [
        "MNG-2442",
        "MNG-4459",
        "allow queries into what is the lifecycle of a project composed of. allow queries into what is the lifecycle of a project composed of.\nadditionally would be nice to have an idea what is the default plugin in the lifecycle and what is the additional one defined in the pom. \nideally with versions or info about local availability (but that can be probably retrieved separately from client code later)",
        "[regression] Effective settings as visible to plugins contain plain text passwords When we introduced MNG-553, the passwords were only decrypted at the transport layer and the {{Settings}} instance kept in memory was kept encrypted. E.g. to save plugins from accidentally dumping the plain text passwords on the console or such.\n\nThis does currently not hold for 3.0-alpha-4 as {{org.apache.maven.plugin:maven-help-plugin:2.0:effective-settings}} shows."
    ],
    [
        "MNG-2287",
        "MNG-5734",
        "No reports are generated when executing the plugins on CLI instead of \"mvn site\" Currently, doing project-info-reports:<any goal> does not generate a report.",
        "Empty module entry should fail instead of just producing a WARNING If you define a list of modules within a multi module build like this:\n{code:xml}\n  <modules>\n   ...\n    <module>assembly</module>\n    <module>shade</module>\n    <module></module>\n  </modules>\n{code}\nThe above will produce a WARNING which should be changed into failing the whole build cause it simply a wrong definition of a module in the list..."
    ],
    [
        "MNG-3160",
        "MNG-122",
        "Several integration tests have been disabled [INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\nMissing:\n----------\n1) org.apache.maven.its.it0126:model:test-jar:tests:1.0-SNAPSHOT\n  Try downloading the file manually from the project website.\n  Then, install it using the command: \n      mvn install:install-file -DgroupId=org.apache.maven.its.it0126 -DartifactId=model \\\n          -Dversion=1.0-SNAPSHOT -Dclassifier=tests -Dpackaging=test-jar -Dfile=/path/to/file\nAlternatively, if you host your own repository you can deploy the file there: \n      mvn deploy:deploy-file -DgroupId=org.apache.maven.its.it0126 -DartifactId=model \\\n          -Dversion=1.0-SNAPSHOT -Dclassifier=tests -Dpackaging=test-jar -Dfile=/path/to/file \\\n           -Durl=[url] -DrepositoryId=[id]\n  Path to dependency: \n        1) org.apache.maven.its.it0126:client:jar:1.0-SNAPSHOT\n        2) org.apache.maven.its.it0126:model:test-jar:tests:1.0-SNAPSHOT\n----------\n1 required artifact is missing.\nfor artifact: \n  org.apache.maven.its.it0126:client:jar:1.0-SNAPSHOT\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n",
        "clean up of exception handling, error reporting and logging we need to get rid of the traces for non-fatal errors, and give something user friendly.\n\nThe traces for fatal errors need to be more descriptive."
    ],
    [
        "MNG-4244",
        "MNG-3312",
        "Allow to select project for make-like reactor by artifact id Right now, the make-like reactor mode accepts either a relative path or groupId:artifactId to denote the projects to build. As a matter of convenience, selecting projects by only artifact id would reduce the clumsiness of the CLI.\n",
        "Maven creates empty plugin metadata during offline mode, causing successive online builds to fail Cd to any Maven project that's lying around, then do this:\n{noformat}\nrm -rf ~/.m2/repository/org/apache/maven/plugins/maven-clean-plugin\nmvn -o clean\n{noformat}\nThis fails, as expected, because the maven-clean-plugin doesn't exist locally. Now try this:\n{noformat}\nmvn clean\n{noformat}\nEven though now Maven is online, it still fails with the same error. No download is attempted (unless I add -U.)\n\nThis is because even in the offline mode, Maven creates ~/.m2/repository/org/apache/maven/plugins/maven-clean-plugin and put empty repository metadata. This causes the later online Maven build to believe that the repository was checked and no plugin was found there.\n\nMaven shouldn't create an empty repository metadata in the local repository if In the offline mode."
    ],
    [
        "MNG-916",
        "MNG-5053",
        "RELEASE gets selected as a version if the metadata fails while searching for the released version, the string RELEASE is stored in the local metadata as the selected version. This should never happen, and it results in looking for the text string RELEASE instead of resolving a version.",
        "Remove obsolete debugger arguments {{-Xnoagent -Djava.compiler=NONE}} are long obsolete options for debugging. See: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4516835"
    ],
    [
        "MNG-4060",
        "MNG-3718",
        "Remove support for profiles.xml As per [r748226|http://svn.eu.apache.org/viewvc?view=rev&revision=748226] support for {{profiles.xml}} will be dropped. Tracking this here as a user visible change for the release history.",
        "Build timestamp interpolator gives hours in AM/PM instead of 24-hour time switching \"yyyyMMdd-hhmm\" to \"yyyyMMdd-HHmm\"\n\nsomehow I can't keep those two straight..."
    ],
    [
        "MNG-1902",
        "MNG-1353",
        "track attempted downloads and only re-attempt on certain intervals currently, because files are not stored locally when not found, files are always looked for.\n\nOTOH, we don't want to store incorrect info, especially if it is permanent (ie, not a snapshot).\n\nWe should track in the local repo metadata files that were not found and when, and check again on intervals. This should be part of the resolver so the site plugin (site descriptors), poms and more all benefit.",
        "Allow creating POJO config classes anywhere without requiring the plugin user to specify an implementation element This is really important for several reasons:\n\n* I don't like to clutter my main plugin package with POJO classes. For the Cargo m2 plugin I have 7-8 POJO classes and I'd like to move them to a different package\n* I need to reuse existing POJOs from another jar and it's just too stupid to have to duplicate all the code or write wrapper classes with only getter/setters.\n\nI think the best solution would be to accept @implementation javadoc tags that would map a parameter to an implementation. This would need to work not only for Mojo classes but also for POJO classes being used for configuration.\n\n\n"
    ],
    [
        "MNG-5693",
        "MNG-2729",
        "Change logging of MojoExceptions to console If a plugin fails for any reason, a general message is logged with a reference to a wiki page, which never contains the real reason why the plugin failed.\nFor new users this is very confusing. Even when we teach them to read, and they finally see a link, it's quite frustrating for them that they still don't know what happened.\n{{MojoExecutionException}} and {{MojoFailureException}} should never refer to a wikipage anymore.\nPlugin writers should get more control over the message written to the console.\n",
        "Use request.getBaseDirectory() inside DefaultMaven and not the user.dir System property "
    ],
    [
        "MNG-3529",
        "MNG-5733",
        "mvn -Da=\" \" throws an excepltion Doing,\n\nmvn -Da=\" \"\n\nthrows,\n\n---------------------------------------------------\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n        at java.lang.AbstractStringBuilder.setLength(AbstractStringBuilder.java:146)\n        at java.lang.StringBuffer.setLength(StringBuffer.java:154)\n        at org.apache.maven.cli.MavenCli$CLIManager.cleanArgs(MavenCli.java:793)\n        at org.apache.maven.cli.MavenCli$CLIManager.parse(MavenCli.java:746)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:100)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n",
        "Repositories from settings.xml are ignored for plugin dependencies Maven ignores repositories declared in settings.xml when resolves dependencies for plugins"
    ],
    [
        "MNG-1351",
        "MNG-4823",
        "Improve error handling and message I don't know yet what the problem is but the stack trace doesn't help me in solving it. It would be nice to display a more indicative error message:\n\nC:\\dev\\cargo\\trunk\\samples\\extensions\\maven2>mvn org.codehaus.cargo.maven2:cargo-maven2-plugin:start -X\n+ Error stacktraces are turned on.\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settings\\Vincent Massol\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\apps\\maven2\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: org.codehaus.cargo.samples.maven2:cargo-samples-\nmaven2:war:null\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: org.codehaus.cargo.samples:cargo-samples-extensi\nons:pom:null\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: org.codehaus.cargo.samples:cargo-samples:pom:nul\nl\n[DEBUG] cargo-maven2-plugin: resolved to version 0.7-SNAPSHOT from local repository\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-maven2-plugin: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.maven2:cargo-maven2-plugin:maven-plugin:0.7-SNAP\nSHOT\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG] cargo-maven2-plugin: using locally installed snapshot\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Cargo Sample for the Maven2 plugin\n[INFO]    task-segment: [org.codehaus.cargo.maven2:cargo-maven2-plugin:start]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] cargo-maven2-plugin: using locally installed snapshot\n[DEBUG] org.codehaus.cargo.maven2:cargo-maven2-plugin:maven-plugin:0.7-SNAPSHOT (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-generic: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-generic:jar:0.7-SNAPSHOT\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]   org.codehaus.cargo.core:cargo-core-generic:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]     ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-container: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-container:jar:0.7-SNAPSHOT\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]     org.codehaus.cargo.core:cargo-core-container:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]       ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-module: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-module:jar:0.7-SNAPSHOT\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]       org.codehaus.cargo.core:cargo-core-module:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]         ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-util: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-util:jar:0.7-SNAPSHOT\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]         org.codehaus.cargo.core:cargo-core-util:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]           ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]         xml-apis:xml-apis:jar:2.0.2 (selected for runtime)\n[DEBUG]         xerces:xercesImpl:jar:2.6.2 (selected for runtime)\n[DEBUG]       geronimo-spec:geronimo-spec-j2ee-deployment:jar:1.1-rc4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: null:maven-project:jar:2.0\n[DEBUG]   org.apache.maven:maven-project:jar:2.0 (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2 (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-artifact:jar:2.0\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-model:jar:2.0\n[DEBUG]     org.apache.maven:maven-model:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-artifact-manager:jar:2.0\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8 (selected for runtime)\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-repository-metadata:jar:2.0\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0 (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5 (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: null:maven-profile:jar:2.0\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8 (selected for runtime)\n[DEBUG]       org.apache.maven:maven-model:jar:2.0 (selected for runtime)\n[DEBUG]   org.codehaus.cargo.core:cargo-core-container:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]     ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]     org.codehaus.cargo.core:cargo-core-module:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]       ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]       org.codehaus.cargo.core:cargo-core-util:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]         ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]       xml-apis:xml-apis:jar:2.0.2 (selected for runtime)\n[DEBUG]       xerces:xercesImpl:jar:2.6.2 (selected for runtime)\n[DEBUG]     geronimo-spec:geronimo-spec-j2ee-deployment:jar:1.1-rc4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-plugin-api:jar:2.0\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0 (selected for runtime)\n[DEBUG] cargo-core-container: using locally installed snapshot\n[DEBUG] cargo-core-generic: using locally installed snapshot\n[DEBUG] cargo-core-util: using locally installed snapshot\n[DEBUG] cargo-core-module: using locally installed snapshot\n[DEBUG] Configuring mojo 'org.codehaus.cargo.maven2:cargo-maven2-plugin:0.7-SNAPSHOT:start' -->\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n---------------------------------------------------\nconstituent[0]: file:/c:/apps/maven2/lib/commons-cli-1.0.jar\nconstituent[1]: file:/c:/apps/maven2/lib/doxia-sink-api-1.0-alpha-6-20051021.114601-1.jar\nconstituent[2]: file:/c:/apps/maven2/lib/jsch-0.1.23.jar\nconstituent[3]: file:/c:/apps/maven2/lib/junit-3.8.1.jar\nconstituent[4]: file:/c:/apps/maven2/lib/maven-artifact-2.0.1-SNAPSHOT.jar\nconstituent[5]: file:/c:/apps/maven2/lib/maven-artifact-manager-2.0.1-SNAPSHOT.jar\nconstituent[6]: file:/c:/apps/maven2/lib/maven-core-2.0.1-SNAPSHOT.jar\nconstituent[7]: file:/c:/apps/maven2/lib/maven-error-diagnostics-2.0.1-SNAPSHOT.jar\nconstituent[8]: file:/c:/apps/maven2/lib/maven-model-2.0.1-SNAPSHOT.jar\nconstituent[9]: file:/c:/apps/maven2/lib/maven-monitor-2.0.1-SNAPSHOT.jar\nconstituent[10]: file:/c:/apps/maven2/lib/maven-plugin-api-2.0.1-SNAPSHOT.jar\nconstituent[11]: file:/c:/apps/maven2/lib/maven-plugin-descriptor-2.0.1-SNAPSHOT.jar\nconstituent[12]: file:/c:/apps/maven2/lib/maven-plugin-parameter-documenter-2.0.1-SNAPSHOT.jar\nconstituent[13]: file:/c:/apps/maven2/lib/maven-plugin-registry-2.0.1-SNAPSHOT.jar\nconstituent[14]: file:/c:/apps/maven2/lib/maven-profile-2.0.1-SNAPSHOT.jar\nconstituent[15]: file:/c:/apps/maven2/lib/maven-project-2.0.1-SNAPSHOT.jar\nconstituent[16]: file:/c:/apps/maven2/lib/maven-reporting-api-2.0.1-SNAPSHOT.jar\nconstituent[17]: file:/c:/apps/maven2/lib/maven-repository-metadata-2.0.1-SNAPSHOT.jar\nconstituent[18]: file:/c:/apps/maven2/lib/maven-settings-2.0.1-SNAPSHOT.jar\nconstituent[19]: file:/c:/apps/maven2/lib/plexus-interactivity-api-1.0-alpha-4.jar\nconstituent[20]: file:/c:/apps/maven2/lib/wagon-file-1.0-alpha-5.jar\nconstituent[21]: file:/c:/apps/maven2/lib/wagon-http-lightweight-1.0-alpha-5.jar\nconstituent[22]: file:/c:/apps/maven2/lib/wagon-provider-api-1.0-alpha-5.jar\nconstituent[23]: file:/c:/apps/maven2/lib/wagon-ssh-1.0-alpha-5.jar\n---------------------------------------------------\njava.lang.NullPointerException\n        at java.util.regex.Matcher.getTextLength(Matcher.java:758)\n        at java.util.regex.Matcher.find(Matcher.java:414)\n        at org.apache.maven.plugin.PluginConfigurationException.addParameterUsageInfo(PluginConfigurationException.java:92)\n        at org.apache.maven.plugin.PluginConfigurationException.buildConfigurationDiagnosticMessage(PluginConfigurationException.j\nava:272)\n        at org.apache.maven.usability.PluginConfigurationDiagnoser.diagnose(PluginConfigurationDiagnoser.java:49)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:699)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:646)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:121)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nC:\\dev\\cargo\\trunk\\samples\\extensions\\maven2>\n\n",
        "Surefire output lost if tests fail in a multi-module build I'm filing this here as it only affects Maven 3, and I'm not sure which solution is preferable, but expect this to be moved to SUREFIRE.\n\nIn a multi-module project, especially with a large number of modules, the reactor summary will scroll the surefire results out of the window. See also: http://java.dzone.com/articles/upgrading-maven-3\n\nOne option is to repeat just the \"Failed tests\" part in the exception. This would require a change in Surefire. I similarly just added this advice to https://cwiki.apache.org/confluence/display/MAVEN/Maven+3.x+Compatibility+Notes#Maven3.xCompatibilityNotes-ErrorReporting\n\nHowever, if others think it might be better to adjust the output (eg, by only showing failed reactor modules, or making the summary optional) that's another possibility. I think given parallel builds and fail-at-end reactor options it's best to pursue the former, though."
    ],
    [
        "MNG-4922",
        "MNG-5085",
        "ExecutionEvent give on the exception encountered (when having mojoFailed) It could be usefull for having the exception details in ExecutionListener impls to have something like (to not wait the end of the maven execution) :\n{code}\nExecutionEvent.getException().\n{code}\ncould be done with \nMojoExecution.getException()\nwill need some stuff for projectFailed\nbut at least could be interesting for mojo executions.\nWDYT ?",
        "Add a CLI option to ignore missing modules Using SVN for a rather big project, we tend to use SVN sparse checkouts, i.e. we do not checkout the whole project. Example:\n\nFull Project (as in Repository):\nParent\n  pom.xml (contains A and B as modules)\n  --> A\n     pom.xml\n  --> B\n     pom.xml\n\nNow, do a checkout (svn co xxx --depth children; svn update --set-depth inifity A)\n\nWorking Copy:\nParent\n  pom.xml (contains A and B as modules)\n  --> A\n     pom.xml\n  --> B (no pom!!, since we only did a sparse checkout)\n\nNow, this setup is not buildable, since maven complains (rightfully) about a missing pom for B. \n\nWhat I propose is an option to change this behaviour with a command-line option (-imm, --ignore-missing-modules) that would simply ignore missing modules during pom resolution.\n\n\n"
    ],
    [
        "MNG-2713",
        "MNG-4315",
        "Maven debug output should show the lifecycle mapping debugging errors in this is not fun. The lifecyle mapping should be displayed in debug mode before starting build for a project",
        "Arbitrary command line environment variables no longer pass to POM Up through Maven v2.0.9 we used to be able to specify arbitrary command line variables such as:\n\nmvn clean install -DsvnRevNumber=xx\n\nAnd that variable was available in a POM with:\n\n${env.svnRevNumber}\n\nAt v2.1.0 this stopped working and still seems to be that way in v2.2.1.\n\nThough this may not have been the original intent, it was a useful feature to get dynamic information into the POM and passed to a custom mojo."
    ],
    [
        "MNG-2661",
        "MNG-2323",
        "add an achetype index, and add the webtide webapp archetypes we need a list of archetypes like the plugins list.\n\nAlso, there is a list of some nice looking archetypes over here to add: http://www.webtide.com/resources.jsp",
        "Locked SNAPSHOT version ignored We use for our tip revision (head revision of a branch) a snapshot version in the form of:\n\n_major.minor-SNAPSHOT_\n\nIf we make a (maintenance) release, we create a version like:\n\n_major.minor.revision_\n\nWe manage our dependencies in a dependencyManagement section of a super POM, where we define always the last released version of an artifact. A dependency of an artifact that is always declared without explicit version unless it makes usage of an unreleased version, then the child POM will be changed from\n\n{code:xml}\n<dependency>\n  <groupId>group</group>\n  <artifactId>artifact</artifactId>\n<dependency>\n{code}\n\nto \n\n{code:xml}\n<dependency>\n  <groupId>group</group>\n  <artifactId>artifact</artifactId>\n  <version>major.minor-SNAPSHOT</version>\n<dependency>\n{code}\n\nUnfortunately this does not work, Maven still prefers the released version. Here in the example 2.0.0 instead of 2.0.-SNAPSHOT (snippet):\n\n{noformat}\n[INFO] [eclipse:eclipse]\n[DEBUG] com.elsagsolutions.projects.components:es_logging:jar:1.0-SNAPSHOT (selected for null)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0-SNAPSHOT:test (applying version: 2.0.0;applying scope: test)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0.0:test (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (applying version: 2.1_3;)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (selected for test)\n{noformat}\n\nBut it gets worse. Even if we try to lock the version in the child POM, it does not work; the locked version is happily ignored:\n\n{code:xml}\n<dependency>\n  <groupId>group</group>\n  <artifactId>artifact</artifactId>\n  <version>[major.minor-SNAPSHOT]</version>\n<dependency>\n{code}\n\nOutput from the example:\n\n{noformat}\n[INFO] [eclipse:eclipse]\n[DEBUG] com.elsagsolutions.projects.components:es_logging:jar:1.0-SNAPSHOT (selected for null)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0-SNAPSHOT:test (setting version to: 2.0-SNAPSHOT from range: [2.0-SNAPSHOT,2.0-SNAPSHOT])\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0-SNAPSHOT:test (applying version: 2.0.0;applying scope: test)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0.0:test (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (applying version: 2.1_3;)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (selected for test)\n{noformat}\n\nFirst problem is, that 2.0.x is treated as nearer as 2.0-SNAPSHOT. This is IMHO wrong. The algorithm should look, at which point in the version numbering the SNAPSHOT part starts and ignore the further numbers in the version of released artifacts. Additionally the locked version must be honored in any case."
    ],
    [
        "MNG-5852",
        "MNG-4246",
        "\"mvn\" script invokes /bin/sh but requires /bin/bash functions The bin/mvn script uses the \"local\" command which is a shell builtin of bash and similar shells, but is not required for POSIX-compliance in sh.  When I attempt to run mvn on my Solaris system, I see the following output:\r\n\r\n$ ./mvn\r\n./mvn[200]: local: not found [No such file or directory]\r\n./mvn[201]: local: not found [No such file or directory]\r\n...\r\n\r\nLines 200 and 201 invoke \"local\" to make local variables to the function.  According to \"man bash\", this is a shell builtin.  However, bin/mvn is invoked as:\r\n\r\n#!/bin/sh\r\n\r\nOn most flavors of linux, this resolves to bash or dash which probably runs in a restricted environment after checking to see that its $0 is sh. But on Solaris's /bin/sh is actually ksh93 for backwards compatibility.\r\n\r\nSince \"local\" is not part of a POSIX-compliant /bin/sh, depending on it in a script that is invoked with /bin/sh is a bug.\r\n\r\n",
        "plugin resolution failures during pom-less execution (like archetype:generate) With Maven 3.0-SNAPSHOT rev 795227 pom-less execution only works if plugin and all its dependencies are present in local repository. If any of the jars is not available locally, execution fails with MultipleArtifactsNotFoundException. Attached patch appears to solve the problem."
    ],
    [
        "MNG-2175",
        "MNG-4121",
        "Require an schema to be specified in the configuration block of a plugin Require an schema to be specified in the configuration block of a plugin.  e.g.\n\n<plugins>\n  <plugin>\n    <configuration xmlns=\"http://maven.apache.org/plugins/maven-eclipse-plugin/2.0/\">\n\nThis will ensure that all configuration data is valid for the plugin.  It allows pom authors to use the XML editors' autocomplete function as well.",
        "Make path to toolschains.xml configurable Right now, the path to the toolchains.xml is hard-coded to ~/.m2/toolchains.xml. To improve flexibility and to enable integration testing, we need a way to confgure the location of the toolchains.xml."
    ],
    [
        "MNG-4210",
        "MNG-3861",
        "Remove log4j configuration warning Running {{mvn help:active-profiles -U}} on a (minimal) POM delivers\n{noformat}\n[INFO] artifact org.apache.maven.plugins:maven-help-plugin: checking for updates from central\nlog4j:WARN No appenders could be found for logger (hidden.org.apache.commons.httpclient.params.DefaultHttpParams).\nlog4j:WARN Please initialize the log4j system properly.\n{noformat}\n\nWe probably need to ship with a log4j.properties to silence this harmless noise.",
        "Publish specification on POM construction "
    ],
    [
        "MNG-1356",
        "MNG-2894",
        "Java system properties should be interpolated in pom.xml Here's a use case where I'd need ${java.io.tmp.dir} interpolated in my pom.xml:\n\nSome plugins output things. Some of those things can be transient and putting them in ${basedir]/target is fine. However there are other cases where you want to be sure that what is generated stays even after a clean. This is the case for the cargo plugin which can automatically download containers. It wouldn't be nice that the downloaded containers be wiped out on a clean. I'd like to leave it to the user to decide where to put them and one location that would be fine is ${java.io.tmp.dir} (this is the one I want to use in the cargo plugin's functional tests).\n\n",
        "Make sure that if a plugin does not specify the use of plexus-utils that once is fed in to protect against plugins that use plexus-utils but don't declare it. "
    ],
    [
        "MNG-4220",
        "MNG-4710",
        "When building a module - display it's <groupId>:<artifactId> rather than just a <name> When building a module - Maven logs the following message:\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Building maven-find-plugin\n[INFO]    task-segment: [clean, install]\n[INFO] ------------------------------------------------------------------------\n\nThe corresponding line in org.apache.maven.lifecycle.DefaultLifecycleExecutor:executeTaskSegments()  is following:\n\ngetLogger().info(\"Building \" + rootProject.getName());\n\nHow about the following:\n\ngetLogger().info(\"Building \" + rootProject.getGroupId() + \":\" + rootProject.getArtifactId());\n\nI'd prefer an exact  <groupId>:<artifactId> rather than just a <name>\n\n\n\n",
        "Command line option to use dependency repositories Currently Maven allows dependency POMs to introduce repositories into the build.  It would be better if this behaviour was turned off by default.  Instead Maven could provide a command line option to enable dependencies to add repositories to the build."
    ],
    [
        "MNG-5196",
        "MNG-3964",
        "using hot deploy of geronimo 2x I would like to use the cargo plugin to deploy my war file using the hot deployment directory of Geronimo. As far as I can see this is not supported at the moment.",
        "Specify execution id container rules "
    ],
    [
        "MNG-1997",
        "MNG-914",
        "document xsd support for pom and settings in guides Your favorite IDE probably supports xsd schema's for pom.xml and settings.xml editing.\nYet very few have the defined the xsd in those files because they don't know about it.\n\nThe guides should note that pom.xml files best start with:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\nWhy isn't it http://maven.apache.org/xsd/maven-v4_0_0.xsd (notice the xsd subdirectory) btw?\n\nand the settings.xml starts with:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/???/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/???/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\nOf course, replace the ??? with something (I did \"settings\" but I ahve no idea if that's ok).",
        "time at end doesn't include time needed to load projects this is particularly noticable when downloading pom files such as parents."
    ],
    [
        "MNG-2586",
        "MNG-2603",
        "Site deployment doesn't work with file://\\\\shareddir <distributionManagement>\n <repository>\n  <id>repo</id>\n  <name>Repo</name>\n  <url>file://\\\\vsrigel\\maven-proxy</url>\n </repository>\n <site>\n  <id>intranet</id>\n  <name>Intranet</name>\n  <url>file://\\\\podjp\\classes\\sitesdev</url> <!-- \\\\podjp\\classes is a shared dir-->\n </site>\n</distributionManagement>\n\nSite deployment doesn't seem to work for me with this url. When I try mvn site:deploy, i get nothing in the url destination, although I get the following output in my dos command :\n[INFO] [site:deploy]\nfile://\\\\podjp\\classes\\sitesdev/test-common - Session: Opened\nfile://\\\\podjp\\classes\\sitesdev/test-common - Session: Disconnecting\nfile://\\\\podjp\\classes\\sitesdev/test-common - Session: Disconnected\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n\nPlease note that if I use <url>file://c:/classes/sitesdev</url>, it does work.",
        "Reactor project sorting broken for plugins it0042 demonstrates this. The plugin is put at the end of the reactor list (because it's last in <modules>).\nIt0092 is basically the same test, but the plugin is listed first, so this one works.\n\nIf you move the <module>test-plugin</module> to the top of the modules in it0042, the build succeeds (with mvn clean install, after rm -rf ~/.m2/repository/test/)."
    ],
    [
        "MNG-4794",
        "MNG-2678",
        "'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester This error doesn't show up on Windows with maven 3 beta-3, Java 1.6.0_21 !!!\nThis error also doesn't show up with maven 3 beta-2 on Linux and Windows, both Java 1.6.0_21.\n\nI switched from maven 3 beta-2 to beta-3 and got this error. \nI deleted the complete .m2/repository/ but nothing changed.\n\nOnly on Linux with maven 3 beta-3 I can reproduce this error:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install (default-install) on project nivadis: Execution default-install of goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install failed: Unable to load the mojo 'install' in the plugin 'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester\n-----------------------------------------------------\nrealm =    plugin>org.apache.maven.plugins:maven-install-plugin:2.3.1\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nurls[0] = file:/home/vbs/.m2/repository/org/apache/maven/plugins/maven-install-plugin/2.3.1/maven-install-plugin-2.3.1.jar\nurls[1] = file:/home/vbs/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nNumber of foreign imports: 4\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlSerializer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParserException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParser from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.Xpp3Dom from realm ClassRealm[plexus.core, parent: null]]\n\nrealm =    maven.api\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nNumber of foreign imports: 21\nimport: Entry[import org.sonatype.aether from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.personality from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.logging from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.lifecycle from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.context from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.container from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.configuration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.component from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusConstants from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.MutablePlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DuplicateChildContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultPlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.apache.maven from realm ClassRealm[plexus.core, parent: null]]\n\n-----------------------------------------------------\n-> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException\n",
        "Update maven embedder/core to use latest plexus and plexus-classworlds This patch updates maven embedder and related core components to use the latest plexus default-container and the classworlds now shipping inside the plexus project"
    ],
    [
        "MNG-3269",
        "MNG-3069",
        "Different builds for ejb-client optional with parent When trying to package a  j2ee project's ejb-client artifact in the ear /lib directory the war plugin's optional attribute is ignored if building from the parent app project. If you build from the parent project you get the ejb-client packaged in the web-inf/lib directory. If you build the ejb, war, and ear independently you get the ejb-client packaged in the ear /lib directory. It seems when run from the parent project the dependency/artifact doesn't have the optional attribute set.\n\nPerhaps this is b/c the artifact is a project artifact that was attached from the ejb plugin it is not resolved as optional when the dependency is resolved from the war project.\n\n\nAttaching Geronimo's mytime sample with modifications to reproduce the behavior.",
        "Parameters not passed to second execution of the same plugin. If a plugin is loaded twice consecutively, parameters are not passed the second time.\n\nFor a (really) minimal case,\nsvn co http://katlas.math.toronto.edu/svn/arxivwiki/trunk/bug/\nand \"mvn package\".\n\nWith mvn -version\nMaven version: 2.0.7\nJava version: 1.6.0_01\nOS name: \"windows xp\" version: \"5.1\" arch: \"x86\"\n\nI see\n==================================\n[INFO] [configuration-bug:plugin-configuration-bug {execution: plugin-configurat\nion-bug 1}]\nString parameter: execution #1\nFile parameter: C:\\scott\\projects\\svn-checkouts\\arxivwiki\\trunk\\bug\\demo\\file1.t\nxt\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] One or more required plugin parameters are invalid/missing for 'configura\ntion-bug:plugin-configuration-bug'\n\n[0] inside the definition for plugin: 'plugin-configuration-bug-plugin'specify t\nhe following:\n\n<configuration>\n  ...\n  <sp>VALUE</sp>\n</configuration>.\n=======================================\n\nCuriously, when running \"mvn install\" within eclipse, with exactly the same project, everything works just fine!"
    ],
    [
        "MNG-2005",
        "MNG-5235",
        "ArtifactCollector fails without looking into other repositories My pom references 2 pluginRepositories (the snapshots codehaus one and the corporate one). \n\nThe keytool-maven-plugin is deployed as 0.3-SNAPSHOT on the snapshots\nrepository and I've built  a newer version (0.4-SNAPSHOT)\ndeployed in my internal repository, but it's not picked up.\n\nIt looks like it found the plugin on snapshots, but not with the\nrequested version and failed instead of looking further.\n\nSounds like an issue in the DefaultArtifactCollector. Will try to investigate further...\n\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nCouldn't find a version in [0.3-SNAPSHOT] to match range [0.3,)\n  org.codehaus.mojo:keytool-maven-plugin:jar:null\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2/),\n  embedded (file://${basedir}/tmp/m2repos),\n  myrepo (http://myrepository/)\n\n\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Couldn't find a version in [0.3-SNAPSHOT] to match range [0.3,)\n  org.codehaus.mojo:keytool-maven-plugin:jar:null\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2/),\n  embedded (file://${basedir}/tmp/m2repos),\n  myrepo (http://myrepository/)\n\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:548)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:472)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:451)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:303)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:270)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:139)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.artifact.versioning.OverConstrainedVersionException: Couldn't find a version in [0.3-SNAPSHOT] to match range [0.3,)\n  org.codehaus.mojo:keytool-maven-plugin:jar:null\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2/),\n  embedded (file://${basedir}/tmp/m2repos),\n  myrepo (http://myrepository/)\n\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:266)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:67)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:223)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n        at org.apache.maven.plugin.DefaultPluginManager.ensurePluginContainerIsComplete(DefaultPluginManager.java:611)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:522)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:393)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:531)\n        ... 16 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 15 seconds\n[INFO] Finished at: Tue Jan 24 14:39:00 CET 2006\n[INFO] Final Memory: 7M/13M\n",
        "Profiles not activated according to property values I am trying to activate profiles according to properties defined in the pom.xml. Unfortunately, the profiles are never activated, no matter what value is set for the defined property. I double-checked my pom.xml with existing documentation.\n\nThe attached example contains two profiles who echo the property value. These are never displayed in the output. However, documentation says a profile should be invoked if the activation section property values are met.\n\nThere is also something unclear in the existing documentation. Is it possible to enable multiple profiles with properties in a single run or is only one profile selected at most in a single run?\n\n "
    ],
    [
        "MNG-5060",
        "MNG-1751",
        "Fails to resolve plugin dependencies in Maven 3.0.x For some projects, Maven 3.x fails to resolve/download plugin dependencies, whereas Maven 2.x worked fine. Could be an aether bug. The artifact when resolving in aether has \"remoteRepositories\" : size:0 \n\nThe situation appears to be that it it downloads it from central, adds in _maven.repositories as\n\n#NOTE: This is an internal implementation file, its format can be changed without prior notice.\n#Thu Apr 07 20:42:04 NZST 2011\neasyb-core-1.1.jar>central=\neasyb-core-1.1.pom>central=\n\nand then proceeds to only look for\n\neasyb-core-1-1.pom>=\n\n(i.e. local only repository) which isn't there.\n\nAn example of this problem can be reproduced by building the following project from github: https://github.com/wakaleo/thucydides/tree/maven-3.0.x-bug-example \n\nJust run mvn install. With Maven 2.2.1 it works fine. With Maven 3.0.x you get the following:\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2:05.397s\n[INFO] Finished at: Thu Apr 07 23:08:55 NZST 2011\n[INFO] Final Memory: 23M/81M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Missing:\n[ERROR] ----------\n[ERROR] 1) org.easyb:easyb-core:jar:1.1\n[ERROR] \n[ERROR] Try downloading the file manually from the project website.\n[ERROR] \n[ERROR] Then, install it using the command:\n[ERROR] mvn install:install-file -DgroupId=org.easyb -DartifactId=easyb-core -Dversion=1.1 -Dpackaging=jar -Dfile=/path/to/file\n[ERROR] \n[ERROR] Alternatively, if you host your own repository you can deploy the file there:\n[ERROR] mvn deploy:deploy-file -DgroupId=org.easyb -DartifactId=easyb-core -Dversion=1.1 -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]\n[ERROR] \n[ERROR] Path to dependency:\n[ERROR] 1) org.easyb:maven-easyb-plugin:jar:1.1\n[ERROR] 2) org.easyb:easyb-core:jar:1.1\n[ERROR] \n[ERROR] ----------\n[ERROR] 1 required artifact is missing.\n[ERROR] \n[ERROR] for artifact:\n[ERROR] org.easyb:maven-easyb-plugin:jar:1.1\n[ERROR] \n[ERROR] from the specified remote repositories:\n[ERROR] (none)\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MultipleArtifactsNotFoundException\n\nIt does this despite the fact that the dependency in question is (a) on central, (b) in the local repository, or (c) both. If you try to install it manually, it fails with a message saying that there is already a JAR file there.",
        "merging metadata doesn't fail when timestamp is in the future on deploying, the timestamp got set to the future (set to GMT - Guelph Mean Time instead of the expected Grenwich :)\n\nsubsequent attempts to deploy reported success, but did not update the metadata.\n\nThe fact that we might suffer clock skew is probably a separate issue to consider, that might be reoslved through passing deployments via repoman."
    ],
    [
        "MNG-2938",
        "MNG-4968",
        "Build error is ignored at the end of the build On a build error you get \"BUILD ERROR\" and then \"BUILD SUCCESSFUL\"\n\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to construct build plan for: org.apache.maven.its.it0020:maven-it-it0020:maven-plugin:1.0-SNAPSHOT (  task-segment: [clean:clean, install, \n\n...\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Apr 05 16:27:47 PDT 2007\n[INFO] Final Memory: 6M/11M\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Apr 05 16:27:47 PDT 2007\n[INFO] Final Memory: 6M/11M\n[INFO] ------------------------------------------------------------------------\n",
        "<skip> option for a plugin Would be nice to have a standard {{<skip>}} option for all plugins:\n\n{noformat}\n[...]\n<build>\n  <plugins>\n    <plugin>\n      <artifactId>...</artifactId>\n      <groupId>...</groupId>\n      <skip>true/false</skip> <!-- FALSE by default -->\n    </plugin>\n  </plugins>\n</build>\n{noformat}\n\nMost of plugins now implement this configuration option. Why can't we implement it just once and enable it automatically in all plugins?"
    ],
    [
        "MNG-4388",
        "MNG-5269",
        "Allow inspection of dependency tree We currently lack proper support in the core to easily inspect the dependency tree of a project. The existing artifact collector hands back a set of artifacts, allowing reconstruction of the dependency tree only via events.\n\nFor better dependency reporting and analysis and more flexibility with regard to future extensions, we should look into\n- clear separation of conflict resolution, i.e. allow inspection of the dependency tree before and after conflicts have been resolved\n- customizable scope handling, i..e. consider use cases where plugins might want to traverse dependencies deeper than usually done for classpaths or need to handle custom scopes like in Flex Mojos",
        "settings.xml's password overridden when downloading dependencies I wrote a plugin that access the Settings object. That object is instantiated by maven, and contains the merge of all settings available (M2_HOME/conf/settings.xml, ~/.m2/settings.xml and \"-s settings.xml\").\nwith my plugin, I look after my corporate encoded passwords, decode them, and update the Settings object with the decoded value.\nI linked my plugin with initialize, generate-resources and process-resources phases. My debug shows me that at the very first phase (initialize), the Settings object is well updated (password decrypted using our corporate tool), and the two next phases show the correctly updated Settings object - having the passwords decrypted.\n\nHowever, when maven goes for downloading dependencies, it fails because maven takes the encrypted version of the password. IMHO, I think that maven reads again the settings.xml file, whether it should use the Settings object."
    ],
    [
        "MNG-1742",
        "MNG-4032",
        "Not detecting changes in the installed jars. I have installed my components jar to remote repository. If someone has change the repository then and user is using the same version of the component. Although the component jar has been changed but user is not getting the new component jar in the repository as he is having the same version jar in his/her local repository.\n\nThere is no way to recognise the latest changes..........",
        "Test jar dependency not available for for main classes in multi module builds I have a module layout like this:\n{noformat}\nroot -+- first\n      +- second\n{noformat}\nI have the test-jar plugin enabled, thus a *-tests.jar is built for each module.  In the second module, I have defined a dependency to first's tests jar:\n{noformat}\n       <dependency>\n          <groupId>me</groupId>\n          <artifactId>first</artifactId>\n          <classifier>tests</classifier>\n          <version>1.0-SNAPSHOT</version>\n          <scope>compile</scope>\n       </dependency>\n{noformat}\n\nAnd here's the problem:  A class in the second main folder imports a class from the first test folder.   If I build the second module separately it builds like it should.  But if I build both modules from the root module I get a compilation failure:\n{noformat}\n/.../root/second/src/main/java/me/SecondMain.java:[3,10] cannot find symbol\nsymbol  : class FirstTest\nlocation: package me\n{noformat}\nA class in second's test folder also includes me.FirstTest, and it always compiles.  The scope somehow seems to be overridden when doing multi module builds.\n"
    ],
    [
        "MNG-524",
        "MNG-3591",
        "[regression] non o.a.m.plugins grouped plugins not discovered from POM when executed from command line I broke this by removing the resolution of all plugins in the pom for every goal to avoid the unnecessary dependency resolution.\n\nIf you run \"modello:xdoc\" on the command line in maven-model, it doesn't know to try the modello plugin in the POM. I think that the prefix to ID lookup as part of another bug will fix this.\n\nWorkaround: fully qualified goal name (org.codehaus.modello:modello-maven-plugin:1.0-alpha-3:xdoc)\n\nPlease add an integration test also.",
        "disable <pluginRepositories/> warning <pluginRepositories/> warning is very confusing for users who are using mvn 2.0.x and 2.1 at the same time (i.e. IDE users). So it would be a good ide to disable it at least until 2.1 is released."
    ],
    [
        "MNG-5498",
        "MNG-3686",
        "LinkageError with Maven Plugin using Aether 1.13.1 \nFull description here: \nhttp://stackoverflow.com/questions/17837651/verifyerror-with-maven-plugin-using-aether",
        "[regression] Can't build Wagon webdav provider Wagon trunk r680097 fails to build in the webdav module when built with mvn -Dmaven.test.skip=true from the top level due to:\n\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/commons/httpclient/methods/RequestEntity\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\n\tat java.lang.Class.privateGetDeclaredConstructors(Class.java:2357)\n\tat java.lang.Class.getConstructors(Class.java:1446)\n\tat com.thoughtworks.qdox.JavaDocBuilder.createBinaryClass(JavaDocBuilder.java:183)\n\tat com.thoughtworks.qdox.JavaDocBuilder.getClassByName(JavaDocBuilder.java:119)\n\tat com.thoughtworks.qdox.model.ClassLibrary.getClassByName(ClassLibrary.java:37)\n\tat com.thoughtworks.qdox.model.Type.getJavaClass(Type.java:98)\n\tat com.thoughtworks.qdox.model.JavaClass.getSuperJavaClass(JavaClass.java:86)\n\tat org.codehaus.plexus.cdc.gleaner.QDoxComponentGleaner.findRequirements(QDoxComponentGleaner.java:343)\n\tat org.codehaus.plexus.cdc.gleaner.QDoxComponentGleaner.glean(QDoxComponentGleaner.java:193)\n\tat org.codehaus.plexus.maven.plugin.SourceComponentDescriptorExtractor.extract(SourceComponentDescriptorExtractor.java:100)\n\tat org.codehaus.plexus.maven.plugin.SourceComponentDescriptorExtractor.extract(SourceComponentDescriptorExtractor.java:74)\n\tat org.codehaus.plexus.maven.plugin.AbstractDescriptorMojo.generateDescriptor(AbstractDescriptorMojo.java:131)\n\tat org.codehaus.plexus.maven.plugin.PlexusDescriptorMojo.execute(PlexusDescriptorMojo.java:60)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:638)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:521)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentForProject(DefaultLifecycleExecutor.java:288)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:214)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:172)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:223)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:303)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody2(MavenEmbedder.java:904)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody3$advice(MavenEmbedder.java:303)\n\tat org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:176)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\n\n"
    ],
    [
        "MNG-5904",
        "MNG-1140",
        "Remove the whole Ant Build We should remove the whole Ant build cause we have a large number of Maven versions which could be used to start building Maven itself.\r\nSo i don't see any usefulness in it anymore.",
        "document how other common directory layouts could be used within/migrated to m2 "
    ],
    [
        "MNG-3786",
        "MNG-4420",
        "Aborting build truncates repository.xml I aborted a build with Ctrl-C. When I tried to build again I got an error about a premature end of file on ~/.m2/repository.xml. Sure enough, the file had been truncated to a single line:\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n\nDeleting the file and rebuilding solved the problem.",
        "It should be possible to define your mirrors section inside a profile At the moment, the settings.xml is the only place you can specify a mirror at the top-level. It should be possible to have profiles in your settings.xml where you could specify different mirrors.\n\nConsider the following scenario:\nYour company has two repositories. The first one contains artifacts for internal development use only (sources of third-party artifacts, their javadocs, etc). The second one is used only for releases and is accessed by externals/partners. Yes, you can always create profiles and have the respective repository sections in there. However it's a lot easier to have this handled by Nexus where all these repositories have been added and just have two wildcard mirrors (according to the profile) - one for internal use and one for external."
    ],
    [
        "MNG-859",
        "MNG-3373",
        "Maven compiler plugin documentation Add java doc and apt doc for an overview",
        "Maven 2 says host in unavailable while in browser I can download from that repository I am using the offical Glassfish repository on java.net.\n\nMaven tells me that it cannot resolve one of the references pointing into that repository. The stack trace tells me that the host is not available (see below).\n\nIn fact, when I go to that same URL in the browser, it downloads the artifact without any problem!\n\nAlso that worked for weeks and now is broken, but my POM didn't change!\n\nSo I assume a bug in WAGON.\n\nHere is the POM excerpt, below the POM is the stack trace.\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>glassfish-repository.dev.java.net</id>\n\t\t\t<name>Java.net Repository for Glassfish</name>\n\t\t\t<url>http://download.java.net/maven/glassfish</url>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>javax.resource</groupId>\n\t\t\t<artifactId>connector-api</artifactId>\n\t\t\t<version>1.5</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t</dependencies>\n\norg.apache.maven.lifecycle.LifecycleExecutionException: Unable to get dependency\n information: Unable to read the metadata file for artifact 'javax.resource:conn\nector-api:jar': Cannot find parent: org.glassfish.api:api for project: javax.res\nource:connector-api:jar:1.5 for project javax.resource:connector-api:jar:1.5\n  javax.resource:connector-api:jar:1.5\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  glassfish-repository.dev.java.net (http://download.java.net/maven/glassfish)\nPath to dependency:\n        1) net.sourceforge.rafc:rafc:jar:1.1.1\n...\nCaused by: java.net.UnknownHostException: download.java.net\n        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:177)\n        at java.net.Socket.connect(Socket.java:519)\n        at java.net.Socket.connect(Socket.java:469)\n        at sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n        at sun.net.www.http.HttpClient.openServer(HttpClient.java:394)\n        at sun.net.www.http.HttpClient.openServer(HttpClient.java:529)\n        at sun.net.www.http.HttpClient.<init>(HttpClient.java:233)\n        at sun.net.www.http.HttpClient.New(HttpClient.java:306)\n        at sun.net.www.http.HttpClient.New(HttpClient.java:323)\n        at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLC\nonnection.java:788)\n        at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConne\nction.java:729)\n        at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection\n.java:654)\n        at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLCon\nnection.java:977)\n        at org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputD\nata(LightweightHttpWagon.java:83)\n        ... 33 more"
    ],
    [
        "MNG-2650",
        "MNG-2856",
        "Classifiers are not powerful enough to adress the problem of generating different flavours of an artifact Today, Maven only offers a single classifier to adress the problem of generating different flavours of an artifact such as dev and prod versions of an EAR, but most of the time, this is not enough, you have a prod version which is distributed, a prod version which is not, a dev version which is distributed and a dev version which is not ...\n\nWith current classifiers, you can only put one classifier on an artifact, so if the artifact is already marked with a 'prod' classifier, you cannot add a 'distributed' one.\n\nVincent Massol already submitted an idea in MNG-2596 which would address that limitation by adding support for multiple classifiers on a single artifact. In MNG-2649, I propose an alternative solution (which is not necessarily incompatible btw) by adding support for a list of properties to artifacts.\n\nRegards,\n\nC\u00e9dric Vidal\n\nPS: I submitted two different issues to separate the problem from the solution (MNG-2649) ;)\n",
        "Maven Archetype Plugin Changes PNG images When the maven archetype serializes 123.png, it changes the file, making it unreadable.\n\nHere's the log info:\n\n[WARNING]\norg.apache.velocity.runtime.exception.ReferenceException:\nreference : template =\narchetype-resources/src/main/resources/images/123.png\n[line 9,column 50] : $I is not a valid reference.\n[WARNING]\norg.apache.velocity.runtime.exception.ReferenceException:\nreference : template =\narchetype-resources/src/main/resources/images/123.png\n[line 11,column 115] : $I is not a valid reference.\n\nMaybe there needs to be a binary resources tag in the archetype descriptor, so that the maven archetype simply copies binary resources, without attempting to evaluate template parameters.\n"
    ],
    [
        "MNG-4190",
        "MNG-5090",
        "same remote repo is referecned multiple times If the same remote repository is referenced multiple times (i.e. in settings, in project hierarchy and in project itself) it will appear multiple times in MavenProject.remoteArtifactRepositories. The problem becomes obvious when settings.xml contains mirrorOf=*, in which case project is expected to have single remoteArtifactRepository but it has multiple. The same applies to pluginArtifactRepositories.",
        "Maven End Users should be able to control the execution order of plugins without creating a custom Lifecycle and Package Type As [confirmed by Benjamin Bentmann|http://mail-archives.apache.org/mod_mbox/maven-dev/201105.mbox/%3C4DC87D9E.5010506@udo.edu%3E], Maven end users are currently limited in the control they have over the execution order of plugins bound to the same build phase unless they author their own custom Lifecycle and use a custom Package Type.\n\nWhile Maven is intended to be declarative rather than procedural and to do most of its work based on sensible defaults, it is a basic requirement of any build system to allow the end user to control the order in which actions occur and to do so with a minimum of effort.\n\nIt should be possible to configure a plugin, simply and entirely within the POM, such that it will execute before, or even between, plugins defined by the lifecycle mappings."
    ],
    [
        "MNG-4293",
        "MNG-3960",
        "Extend Mojo API to allow resolution of both compile and runtime dependencies Right now, only {{@requiresDependencyResolution compile|runtime|test}} is supported. However, {{runtime}} is no superset of {{compile}} but plugins occasionally need both scopes. To better support those use cases, a new resolution scope {{compile+runtime}} will be introduced. See also [\\[DISCUSS\\] Extend Mojo API to allow for resolution of multiple dependency scopes|http://markmail.org/message/2z4vlqhxm6qb4owk]",
        "cannot build projects which use plexus-maven-plugin with 3.0-alpha-1 When building projects with mvn 3.0-alpha-1 which plexus-maven-plugin (release project in mvn svn, some plugins maven-changes-plugin, continuum, archiva), I have the following exception (java.lang.ClassNotFoundException) :\n{code}\nException in thread \"main\" java.lang.NoClassDefFoundError\n        at org.codehaus.plexus.cdc.gleaner.QDoxComponentGleaner.class$(QDoxComponentGleaner.java:231)\n        at org.codehaus.plexus.cdc.gleaner.QDoxComponentGleaner.<clinit>(QDoxComponentGleaner.java:230)\n        at org.codehaus.plexus.maven.plugin.SourceComponentDescriptorExtractor.extract(SourceComponentDescriptorExtractor.java:57)\n        at org.codehaus.plexus.maven.plugin.AbstractDescriptorMojo.generateDescriptor(AbstractDescriptorMojo.java:131)\n        at org.codehaus.plexus.maven.plugin.PlexusDescriptorMojo.execute(PlexusDescriptorMojo.java:60)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:631)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:492)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentForProject(DefaultLifecycleExecutor.java:259)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:201)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:164)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:207)\n        at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:846)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:160)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\nCaused by: java.lang.ClassNotFoundException: org.codehaus.plexus.personality.plexus.lifecycle.phase.Suspendable\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadRealmClass(ClassRealm.java:174)\n        at org.codehaus.plexus.classworlds.strategy.DefaultStrategy.loadClass(DefaultStrategy.java:67)\n        at org.codehaus.plexus.classworlds.strategy.ForeignStrategy.loadClass(ForeignStrategy.java:39)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:207)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:201)\n        at org.codehaus.plexus.classworlds.strategy.DefaultStrategy.loadClass(DefaultStrategy.java:73)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:207)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:201)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:164)\n        ... 22 more\n\n{code}"
    ],
    [
        "MNG-4362",
        "MNG-3917",
        "improve documentation \"Guide to uploading artifacts to the Central Repository\" needs to specify some requirements for multi-module Maven projects.\n\nMany of the project's POM configurations are inherited by the modules of the project.\nIt is unspecified by this guide, whether the modules POMs also need to specify those settings explicitly or not, in case the developers' intention is to release those on Central.\n\nAs of \"Last Published: 2009-09-09\" this information is missing from this guide.",
        "Complete the POM construction tests which will be the validation for the specification "
    ],
    [
        "MNG-4685",
        "MNG-2934",
        "When executing mvn --version, Maven displays Java version incorrectly I suppose, Maven detects Java version upon the folder name of Java home, and it is not always correct.\nMy Java home is \"C:\\Program Files\\Java\\jdk1.6.0_15\". My Java developer kit is updated automatically. Its version is 1.6.0_20 now. When I run command \"java -version\", I get the following output:\n\n-----\nD:\\>java -version\njava version \"1.6.0_20\"\nJava(TM) SE Runtime Environment (build 1.6.0_20-b02)\nJava HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)\n-----\n\nWhen I run the command \"mvn --version\", I expect output like\n\n-----\nD:\\>mvn --version\nApache Maven <some values...>\nJava version: 1.6.0_20\nJava home: C:\\Program Files\\Java\\jdk1.6.0_15\\jre\n<other output...>\n-----\n\nInstead, the output is as follows:\n\n-----\nD:\\>mvn --version\nApache Maven 2.2.1 (r801777; 2009-08-06 22:16:01+0300)\nJava version: 1.6.0_15\nJava home: C:\\Program Files\\Java\\jdk1.6.0_15\\jre\nDefault locale: uk_UA, platform encoding: Cp1251\nOS name: \"windows xp\" version: \"5.1\" arch: \"x86\" Family: \"windows\"\n-----\n\nSo, the procedure of how Maven defines Java version must be corrected.",
        "Cannot Deploy Using Webdav due to DependencyManagement The webdav wagon requires commons-httpclient-2.0.2.jar.  If I have a dependencyManagement section that specifies commons-httpclient 3.0.1, then deployment fails.\nThe resulting output is:\n[duncans@J9LAPHP-18811 webdavtest]$ mvn deploy\n[INFO] Scanning for projects...\n[INFO] artifact org.apache.maven.wagon:wagon-webdav: checking for updates from ce-releases\n-----------------------------------------------------\nthis realm = app0.child-container[extensions]\nurls[0] = file:/home/duncans/.m2/repository/de/zeigermann/xml/xml-im-exporter/1.1/xml-im-exporter-1.1.jar\nurls[1] = file:/home/duncans/.m2/repository/jdom/jdom/1.0/jdom-1.0.jar\nurls[2] = file:/home/duncans/.m2/repository/org/apache/maven/wagon/wagon-webdav/1.0-beta-2/wagon-webdav-1.0-beta-2.jar\nurls[3] = file:/home/duncans/.m2/repository/commons-codec/commons-codec/1.2/commons-codec-1.2.jar\nurls[4] = file:/home/duncans/.m2/repository/slide/slide-webdavlib/2.1/slide-webdavlib-2.1.jar\nurls[5] = file:/home/duncans/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nurls[6] = file:/home/duncans/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar\nurls[7] = file:/home/duncans/.m2/repository/commons-httpclient/commons-httpclient/3.0.1/commons-httpclient-3.0.1.jar\nurls[8] = file:/home/duncans/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar\nNumber of imports: 0\nthis realm = plexus.core\nurls[0] = file:/home/duncans/apps/maven/lib/maven-core-2.0.6-uber.jar\nNumber of imports: 0\n-----------------------------------------------------\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Unnamed - test:webdavtest:pom:1.0-SNAPSHOT\n[INFO]    task-segment: [deploy]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [site:attach-descriptor]\n[INFO] [install:install]\n[INFO] Installing /home/duncans/tmp/webdavtest/pom.xml to /home/duncans/.m2/repository/test/webdavtest/1.0-SNAPSHOT/webdavtest-1.0-SNAPSHOT.pom\n[INFO] [deploy:deploy]\naltDeploymentRepository = null\n[INFO] Retrieving previous build number from snapshots\n[WARNING] repository metadata for: 'snapshot test:webdavtest:1.0-SNAPSHOT' could not be retrieved from repository: snapshots due to an error: Unsupported Protocol: 'dav': Cannot find wagon which supports the requested protocol: dav\n[INFO] Repository 'snapshots' will be blacklisted\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error deploying artifact: Unsupported Protocol: 'dav': Cannot find wagon which supports the requested protocol: dav\nComponent descriptor cannot be found in the component repository: org.apache.maven.wagon.Wagondav.\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Thu Apr 05 13:49:52 EDT 2007\n[INFO] Final Memory: 6M/10M\n[INFO] ------------------------------------------------------------------------"
    ],
    [
        "MNG-4215",
        "MNG-2749",
        "Review and fix hashCode/equals methods of ArtifactRepository implementations DefaultMavenMetadataCache relies on proper hashCode/equals of ArtifactRepository and quick checks that at least some implementations do not honour hashCode/equals contract (for example, DelegatingLocalArtifactRepository and ReactorArtifactRepository).",
        "extensions stopped working in 2.0.5-SNAPSHOT We're testing our build with the latest 2.0.5-SNAPSHOT. We use the checkstyle config described here http://people.apache.org/%7Eoching/maven-checkstyle-plugin/examples/multi-module-config.html\nand it works perfectly in 2.0.4. Switching to 2.0.5 causes this to not be available on the classpath anymore."
    ],
    [
        "MNG-4737",
        "MNG-2048",
        "remove dependency on backport-util-concurrent now that Maven 2.2 requires Java 5 ",
        "Quote args in mvn script The mvn script as distributed does not handle quoted args such as:\n\nm2 -Dgreeting=\"huh bah\" hello:sayhi\n\nYou get the error:\n\nInvalid task 'bah': you must specify a valid lifecycle phase, or a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal\n\nHere is a fix for the mvn script:\n\n*** mvn\t2006/02/07 15:58:33\t1.1\n--- mvn\t2006/02/07 15:58:38\n***************\n*** 134,138 ****\n    -classpath \"${M2_HOME}\"/core/boot/classworlds-*.jar \\\n    \"-Dclassworlds.conf=${M2_HOME}/bin/m2.conf\" \\\n    \"-Dmaven.home=${M2_HOME}\"  \\\n!   ${CLASSWORLDS_LAUNCHER} $@\n  \n--- 134,138 ----\n    -classpath \"${M2_HOME}\"/core/boot/classworlds-*.jar \\\n    \"-Dclassworlds.conf=${M2_HOME}/bin/m2.conf\" \\\n    \"-Dmaven.home=${M2_HOME}\"  \\\n!   ${CLASSWORLDS_LAUNCHER} \"$@\""
    ],
    [
        "MNG-3892",
        "MNG-5382",
        "[regression] Deployment of attached release artifacts fails Just to formally track the issue Igor pointed out at MARTIFACT-6.\n{noformat}\n[WARNING] The artifact org.apache.maven.its.mng388X:test:1.0 has already been deployed. Not deploying again.\n[...]\nCaused by: org.apache.maven.artifact.deployer.ArtifactDeploymentException:\n  The artifact org.apache.maven.its.mng388X:test:jar:1.0 was already deployed to repository maven-core-it\n        at org.apache.maven.artifact.deployer.DefaultArtifactDeployer.deploy(DefaultArtifactDeployer.java:132)\n{noformat}\n",
        "Add an IT for @Inject used in plugins "
    ],
    [
        "MNG-3188",
        "MNG-5188",
        "Prevent Maven from update from remote repo I have installed plugins manually which aren't available at the remote repository.\nEverytime I process an build maven checks for updates for this at the remote repo.\nI want to prevent maven to do this.\nHow could I do this?",
        "Test scope dependency incorrectly promoted to compile scope I'm having a strange issue where a module with three dependencies has an unexpected transitive dependency on JUnit with compile scope (where test scope would be expected).\n\nI've isolated this problem in a small example project which is attached. \n\nMy module2 depends on \n\n1) module1\n2) test-deps\n3) module1:test-jar\n\nmodule1 depends on Apache OpenJPA which has a compile scope transitive dependency on JUnit (not really needed, I think, but that's the way it was released). module1 also has a test scope dependency on JUnit for its own JUnit tests.\n\nAs I don't want a compile scope dependency on JUnit in my module2, I use an <exclude> for JUnit.\n\ntest-deps has POM packaging, it simply collects the test dependencies I normally need in all modules of my project. test-deps uses the default compile scope for each dependency (junit and spring-test in this example). module2 has a test scope dependency on test-deps, so by Maven transitive scope resolution, the junit dependency is propagated to module2 with test scope.\n\nSince some of the module2 JUnit tests are derived from base classes in module 1, module2 depends on the test-jar of module1 with scope test.\n\nThus, none of the three dependencies should cause a compile scope dependency on junit, but the combination of the three seems to have some fatal effect.\n\nThis looks like a bug in Maven's dependency scope resolution.\n\nTo reproduce, unpack the attachment, cd to junit-transitive, run mvn -X clean install and look at the compile classpath for module2 in the log."
    ],
    [
        "MNG-3390",
        "MNG-2906",
        "Plugin resolution/download fails for plugins previously not downloaded if pom is unavailable Plugin download fail when running a plugin goal of a plugin previously not used.\n\nI have successfully reproduced this problem using both eclipse and help plugin, so I assume it is not plugin related.\n\nScenario 1:\n1. Delete (rename) ~/.m2/repository forcing everything to be downloaded from scratch\n2. Change to a folder containing a pom.xml\n3. Run mvn help:describe -Dplugin=versions\n - will work\n4. Change to a folder not containing a pom.xml\n - will work\n\nScenario 2:\n1. Remove (rename) your ~/.m2/repository\n2. Change to a directory not containing a pom.xml file\n3. Run mvn help:describe -Dplugin=help\n - will not work, the help plugin can not be found!\n - repository metadata for: 'org.apache.maven.plugins' could not be retrieved from repository: central due to an error: Error transferring file\n - central blacklisted\n4. Change to a folder containing a pom.xml file\n5. Run mvn help:describe -Dplugin=help\n - will not work!\n - the error is permanent, maven seems to cache failed attempts and will not try again until repos timeout has passed, or -U is supplied...\n5. Run mvn help:describe -Dplugin=help -U\n - will work\n6. Change to a folder not containing a pom.xml\n7. Run  (omitting -U) mvn help:describe -Dplugin=help\n - will work\n\nThe above scenarios will work correspondingly running e.g. mvn eclipse:add-maven-repo -Declipse.workspace=.\n\nMy problem is that my company use an installation guide used by many developers executing the latter command as part of their initial development environment set up, and often they have not yet been using the eclipse plugin prior submitting the command since their environment is completely new...\n\nI do not know how to categorize the issue, nor prioritizing it, but it is for sure an annoyance for unexperienced maven users, particularily since maven, after the first failing attempt, will not try to download the plugin again...",
        "version ranges don't work after a day has passed dependency A has a range dependency on B\nmy project has a dependency on A (not directly on B)\nI build my project with a fresh clean repo (i.e. rm -rf ~/.m2/repository)\nB's latest is downloaded as expected\nthe next morning I rebuild my project and I get error messages that no suitable version can be found;\n\nNo versions are present in the repository for the artifact with a range [1.02b,) com.lowagie:itext-null.jar\n\nthe particulars are jfreereports depending on [1.02b,) of lowagie."
    ],
    [
        "MNG-2321",
        "MNG-4657",
        "[maven-model-converter] Don't include the plugin configuration element if it is empty When translating a V3 pom to V4, a plugin without configuration in V3 will have an empty configuration element in the V4 pom. The attached patch fixes this.",
        "SettingsUtils.copySettings does not perform a deep copy The org.apache.maven.settings.SettingsUtils.copySettings method only creates a new Settings instance and then copies all its attributes by reference, including lists such as profiles or proxies. Hence, modifying the copy can produce unexpected side effects on the original object.\n\nExpected behavior is that a deep copy is returned, or documentation should mention this behaviour. Maybe make it implement Clonable ?"
    ],
    [
        "MNG-506",
        "MNG-3490",
        "Plugin registry prompt does not read from stdin on cygwin M2, when finding new plugin versions, will prompt about wheter to install these.\n\nWhen running m2 in cygwin, however, providing an answer (Y for instance) \njust displays the text on screen - nothing happens. The jre has to be killed\nto stop m2.\n\nversion.DefaultPluginVersionManager uses a plexus InputHandler. So actually it's\na bug in plexus, but it affects m2 (there might be an alternate approach to the InputHandler..)\n\nIn the mean time i'll check whether it's due to \\n\\r issues.\n",
        "Foo 2.0 obsoletes Bar 1.0 I would like to be able to say, in a high-level POM:\n\n\"Whenever Foo.jar is in a dependency tree in version 2.0 or above, Bar.jar version 1.0 or below should not also be in that same dependency tree.\"\n\nBackground:\n\n* There once was Foo, version 1.0.\n* Then came along the Bar extension, also version 1.0, to be used alongside Foo 1.0.\n* Later, a new version 2.0 of Foo was released, that included the Bar functionality (also updated); so Foo 2.0 made Bar 1.0 obsolete.\n\nPresently, Maven will happily provide Bar 1.0 alongside with Foo 2.0, thus ushering us into JAR hell. It is then up to JAR lottery which of Bar 1.0 or Foo 2.0's Bar we actually get.\n\nWhat I want is a way to fix this in my own top-level POM, in dependency management.\n\"If I have Foo 2.0, never even think of including Bar 1.0 also.\"\n\nPresent workaround:\n* Analyze all low-level POMs.\n* Most use Foo 1.0, leave those alone. (Unfortunately, Foo 2.0 is not without issues.)\n* Find the few that do use Foo 2.0.\n* Figure out all transitive dependencies of such a POM that pull in Bar 1.0.\n* Apply <exclude> to those.\n\nRegards, and thank you for providing fine software,\n\nAndreas"
    ],
    [
        "MNG-599",
        "MNG-4832",
        "organization name in pom is not used in site generation : 2002-2005, Apache Software Foundation is always put in page. in pom.xml :\nIf no <organization> tag \nor if this :\n\t<organization>\n\t\t<name>Your Organization</name>\n\t\t<url>http://www.someorganization.biz/</url>\n\t\t<logo>http://www.someorganization.biz/logo.gif|jpg|...</logo>\n\t</organization>\n\t<inceptionYear>2005</inceptionYear>\n\nthe copyright in the web site is always : 2002-2005, Apache Software Foundation\n\nnote : for M2 / version : 2.0-beta-1-SNAPSHOT of the site plugin",
        "Maven 3 Regression: Missing constructor of org.codehaus.plexus.component.configurator.converters.special.ClassRealmConverter I reported MNG-4811 and it was fixed for 3.0-RC2 but introduced a new error.  The source for com.espn.maven.plugins.espnservice.IncludeProjectDependenciesComponentConfigurator is attached to MNG-4811.  The exception I'm seeing is below:\n\n\nCaused by: java.lang.NoSuchMethodError: org.codehaus.plexus.component.configurator.converters.special.ClassRealmConverter.<init>(Lorg/codehaus/classworlds/ClassRealm;)V\n\tat com.espn.maven.plugins.espnservice.IncludeProjectDependenciesComponentConfigurator.configureComponent(IncludeProjectDependenciesComponentConfigurator.java:43)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:90)\n\tat org.apache.maven.plugin.internal.DefaultMavenPluginManager.populatePluginFields(DefaultMavenPluginManager.java:505)\n\t... 22 more\n"
    ],
    [
        "MNG-2085",
        "MNG-1577",
        "POM documentation for repository structure looks out of date The POM documentation, at http://maven.apache.org/maven-model/maven.htm, is out of date w.r.t the structure of the remote repository.\n\n     \n              This element describes all of the dependencies associated with a\n              project.  Each dependency is described by a\n              <code>dependency</code> element, which is then described by\n              additional elements (described below).\n            \n            \n              These dependencies are used to construct a classpath for your \n              project during the build process.\n            \n            \n              Maven can automatically download these dependencies from a \n              <a href=\"/user-guide.html#Remote%20Repository%20Layout\">remote repository</a>.\n            \n            <p>\n\n              The filename that Maven downloads from the repository is \n              <code>artifactId-version.jar</code> where <code>artifactId</code> \n              corresponds to the <code>artifactId</code> element and \n              <code>version</code> corresponds to the <code>version</code> element.\n            </p>\n\n            <p>\n              When Maven goes looking for a dependency in the remote repository, \n              it uses the dependency element to construct the URL to download \n              from. This URL is defined as:\n            </p>\n            <div class=\"source\">\n              <pre>${repo}/${groupId}/${type}s/${artifactId}-${version}.${type}</pre>\n            </div>\n            <p>\n              Where\n            </p>\n\n            <dl>\n              <dt>repo</dt>\n              <dd>\n                is the remote repository URL specified by \n                <code>${maven.repo.remote}</code>\n              </dd>\n              \n              <dt>groupId</dt>\n              <dd>is taken from the dependency element</dd>\n\n              \n              <dt>type</dt>\n              <dd>is taken from the dependency element</dd>\n              \n              <dt>artifactId</dt>\n              <dd>is taken from the dependency element</dd>\n              \n              <dt>version</dt>\n              <dd>is taken from the dependency element</dd>\n            </dl>\n\n\nFor Maven 2, this looks very different. Looks like the docs were copied from Maven 1?",
        "dependencyManagement does not work for transitive dependencies The dependencyManagement does not work for transient dependencies. The specified version is ignored.\n\nUse case:\nMain POM defines commons-digester-1.6 and commons-beanutils-1.7.0, A-SNAPSHOT and B-SNAPSHOT\nProject A is child of Main and depends directly on commons-beanutils (version inherited from Main)\nProject B is child of Main and depends directly on commons-digester (version inherited from Main)\nProject C is child of Main and depends directly on A & B (versions inherited from Main)\n\nA is compiled and tests are run using commons-beanutils-1.7.0\nB is compiled and tests are run using commons-digester-1.6 and commons-beanutils-1.6, since digester is dependend on this\nC is compiled and tests are run using commons-beanutils-1.7.0\n\nIntegration tests of B did not verify, that B is behaving as expected in this scenario. B might fail with 1.7.0 and it is not even recognized.\n\nIf I add beanutils also as direct dependency to B, it works fine, but then are transitive dependency useless. It should be possible to define at least in the dependencyManagement, that the versions of transient dependencies also defined in the dependencyManagement have priority.\n\n- J\u00f6rg"
    ],
    [
        "MNG-5693",
        "MNG-3014",
        "Change logging of MojoExceptions to console If a plugin fails for any reason, a general message is logged with a reference to a wiki page, which never contains the real reason why the plugin failed.\nFor new users this is very confusing. Even when we teach them to read, and they finally see a link, it's quite frustrating for them that they still don't know what happened.\n{{MojoExecutionException}} and {{MojoFailureException}} should never refer to a wikipage anymore.\nPlugin writers should get more control over the message written to the console.\n",
        " java.lang.NoClassDefFoundError: com/bea/wlw/filesystem/IFileFilter getting this error while running \"APPC\"  Hello --\n\nI'm building my application using weblogic9.2 and am up to the part where weblogic.appc ant task kicks in. I get the following error message:\n\n[<May 29, 2007 7:29:29 AM CDT> <Info> <HTTP> <BEA-101047> <[ComplianceChecker] Check\ning servlet-mapping for servlet name : \"ImageViewer\".>\n[jspc]  -webapp specified, searching . for JSPs\njava.lang.NoClassDefFoundError: com/bea/wlw/filesystem/IFileFilter\n        at weblogic.servlet.jsp.jspc20.runBodyInternal(jspc20.java:420)\n        at weblogic.servlet.jsp.jspc20.runJspc(jspc20.java:195)\n        at weblogic.servlet.jsp.JspcInvoker.compile(JspcInvoker.java:239)\n        at weblogic.application.compiler.AppcUtils.compileWAR(AppcUtils.java:353)\n        at weblogic.application.compiler.WARCompiler.compile(WARCompiler.java:78)\n        at weblogic.application.compiler.flow.AppCompilerFlow.compileInput(AppCompi\nlerFlow.java:118)\n        at weblogic.application.compiler.flow.AppCompilerFlow.compile(AppCompilerFl\now.java:43)\n        at weblogic.application.compiler.FlowDriver$FlowStateChange.next(FlowDriver\n.java:69)\n        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriv\ner.java:26)\n        at weblogic.application.compiler.FlowDriver.nextState(FlowDriver.java:36)\n        at weblogic.application.compiler.FlowDriver.run(FlowDriver.java:26)\n        at weblogic.application.compiler.Appc.runBody(Appc.java:163)\n        at weblogic.utils.compiler.Tool.run(Tool.java:158)\n        at weblogic.utils.compiler.Tool.run(Tool.java:115)\n        at weblogic.application.compiler.Appc.main(Appc.java:174)\n        at weblogic.appc.main(appc.java:14)\n        at org.codehaus.mojo.weblogic.AppcMojo.execute(AppcMojo.java:129)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginMa\nnager.java:412)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Default\nLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifec\nycle(DefaultLifecycleExecutor.java:475)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultL\nifecycleExecutor.java:454)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandle\nFailures(DefaultLifecycleExecutor.java:306)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(\nDefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifec\nycleExecutor.java:140)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.jav\na:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessor\nImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[ERROR] Exception encountered during APPC processing\njava.lang.NoClassDefFoundError: com/bea/wlw/filesystem/IFileFilter\n        at weblogic.servlet.jsp.jspc20.runBodyInternal(jspc20.java:420)\n        at weblogic.servlet.jsp.jspc20.runJspc(jspc20.java:195)\n        at weblogic.servlet.jsp.JspcInvoker.compile(JspcInvoker.java:239)\n        at weblogic.application.compiler.AppcUtils.compileWAR(AppcUtils.java:353)\n        at weblogic.application.compiler.WARCompiler.compile(WARCompiler.java:78)\n        at weblogic.application.compiler.flow.AppCompilerFlow.compileInput(AppCompi\nlerFlow.java:118)\n        at weblogic.application.compiler.flow.AppCompilerFlow.compile(AppCompilerFl\now.java:43)\n        at weblogic.application.compiler.FlowDriver$FlowStateChange.next(FlowDriver\n.java:69)\n        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriv\ner.java:26)\n        at weblogic.application.compiler.FlowDriver.nextState(FlowDriver.java:36)\n        at weblogic.application.compiler.FlowDriver.run(FlowDriver.java:26)\n        at weblogic.application.compiler.Appc.runBody(Appc.java:163)\n        at weblogic.utils.compiler.Tool.run(Tool.java:158)\n        at weblogic.utils.compiler.Tool.run(Tool.java:115)\n        at weblogic.application.compiler.Appc.main(Appc.java:174)\n        at weblogic.appc.main(appc.java:14)\n        at org.codehaus.mojo.weblogic.AppcMojo.execute(AppcMojo.java:129)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginMa\nnager.java:412)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Default\nLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifec\nycle(DefaultLifecycleExecutor.java:475)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultL\nifecycleExecutor.java:454)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandle\nFailures(DefaultLifecycleExecutor.java:306)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(\nDefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifec\nycleExecutor.java:140)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.jav\na:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessor\nImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n--------------- nested within: ------------------\nweblogic.utils.compiler.ToolFailureException: com/bea/wlw/filesystem/IFileFilter -\nwith nested exception:\n[java.lang.NoClassDefFoundError: com/bea/wlw/filesystem/IFileFilter]\n        at weblogic.application.compiler.FlowDriver.handleStateChangeException(Flow\nDriver.java:53)\n        at weblogic.application.compiler.FlowDriver.nextState(FlowDriver.java:37)\n        at weblogic.application.compiler.FlowDriver.run(FlowDriver.java:26)\n        at weblogic.application.compiler.Appc.runBody(Appc.java:163)\n        at weblogic.utils.compiler.Tool.run(Tool.java:158)\n        at weblogic.utils.compiler.Tool.run(Tool.java:115)\n        at weblogic.application.compiler.Appc.main(Appc.java:174)\n        at weblogic.appc.main(appc.java:14)\n        at org.codehaus.mojo.weblogic.AppcMojo.execute(AppcMojo.java:129)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginMa\nnager.java:412)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Default\nLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifec\nycle(DefaultLifecycleExecutor.java:475)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultL\nifecycleExecutor.java:454)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandle\nFailures(DefaultLifecycleExecutor.java:306)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(\nDefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifec\nycleExecutor.java:140)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.jav\na:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessor\nImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: java.lang.NoClassDefFoundError: com/bea/wlw/filesystem/IFileFilter\n        at weblogic.servlet.jsp.jspc20.runBodyInternal(jspc20.java:420)\n        at weblogic.servlet.jsp.jspc20.runJspc(jspc20.java:195)\n        at weblogic.servlet.jsp.JspcInvoker.compile(JspcInvoker.java:239)\n        at weblogic.application.compiler.AppcUtils.compileWAR(AppcUtils.java:353)\n        at weblogic.application.compiler.WARCompiler.compile(WARCompiler.java:78)\n        at weblogic.application.compiler.flow.AppCompilerFlow.compileInput(AppCompi\nlerFlow.java:118)\n        at weblogic.application.compiler.flow.AppCompilerFlow.compile(AppCompilerFl\now.java:43)\n        at weblogic.application.compiler.FlowDriver$FlowStateChange.next(FlowDriver\n.java:69)\n        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriv\ner.java:26)\n        at weblogic.application.compiler.FlowDriver.nextState(FlowDriver.java:36)\n        ... 25 more\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Exception encountered during APPC processing\n\nEmbedded error: com/bea/wlw/filesystem/IFileFilter\n\nIt goes on a bit more. I have every Weblogic jar I can think of on the classpath being referenced and am using the JDK that comes with Weblogic 9.2. I can't for the life of me find this class! I've done alot of searching the codehuse,D2D site as well as google, and have nothing to show for it. Can anyone suggest what might be happening?\n\nAny comments would be appreciated.\n\nDeb\n"
    ],
    [
        "MNG-5387",
        "MNG-2683",
        "Add ability to replace an artifact in mid-build To clean up how the shade plugin works, we need an API to allow it to say, 'please replace the jar file that the jar plugin has given you with this other one here.' \n\nIt turns out we already more or less have this method, due to a collection of historical conflict.\n\nAt some point in time, http://jira.codehaus.org/browse/MNG-3119 called for Maven to reject more than one call to attach the same artifact to the build. However, this proved an unacceptable incompatibility at the time. Instead, under http://jira.codehaus.org/browse/MNG-4013, Maven was changed to log but otherwise ignore all calls to 'addArtifact' on MavenProject after the first for a G/A/V/C/T coordinate. \n\nThis decision to take 'first wins' instead of 'last wins' doesn't help much of anyone. It prevents something like shade from intentionally displacing an earlier execution's results, and while it doesn't produce backtraces, ever, it can still be entirely confusing.\n\nUnder this JIRA, I'm switching to 'last one wins'. This could still be confusing, and someone might argue that there should be some way to distinguish casual and incorrect user config that results in two plugins trying to deliver the same thing from something intentional. On the other hand, if two plugins are configured to attach the same G/A/V/C, having the last one win makes more sense, and has the effect of enabling the desired behavior in shade.\n",
        "[PATCH] ProjectBuildingException should print more information I added some more detail to these exception messages to help me track down a problem with a build."
    ],
    [
        "MNG-5851",
        "MNG-2881",
        "environment variable to configure settings.xml location Wercker which is a continuous integration/deployment saas, and has a platform built on docker.\r\n\r\nwhat I'd like to be able to do is specify M2_SETTINGS=\"./settings.xml\" so that I could put my settings into my repo without extending the official docker image. This way I could configure Wercker to be able to do releases to a nexus server. Inside the settings.xml I could define other variables like server/username/password so that wercker could fill them in at runtime.",
        "Improve logging when downloading snapshots in offline mode Even though the network is not touched we get logging output like this:\n\n--->8---\n\n[INFO] snapshot org.codehaus.plexus:plexus-appserver-maven-plugin:2.0-alpha-8-SNAPSHOT: checking for updates from apache.snapshots\n[DEBUG] System is offline. Cannot resolve metadata:\n\nRepository Metadata\n--------------------------\nGroupId: org.codehaus.plexus\nArtifactId: plexus-appserver-maven-plugin\nMetadata Type: org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata\n\n--->8---\n"
    ],
    [
        "MNG-856",
        "MNG-2569",
        "Maven FAQ/XDoc/Site documentation add javadoc and apt doc for an overview",
        "Expressions not evaluated inside <parent> The version tag within the parrent  block does not evaluate properties.\nIf I put a Version String directly in there, it works.\nA correctly defined property doesn't."
    ],
    [
        "MNG-2484",
        "MNG-2874",
        "Document the naming convention for archetypes As discussed, document the archetype naming convention as <projectname>-archetype-<description>.\n\nhttp://mail-archives.apache.org/mod_mbox/maven-dev/200607.mbox/%3cadba96190607150851m8b5b070i877dbf195ab40e1d@mail.gmail.com%3e",
        "Building the plugins omits the Invoker Plugin Build maven from source. Notice that the maven-invoker-plugin is not build. Fix is trivial. Add the invoker plugin to the reactor build."
    ],
    [
        "MNG-1760",
        "MNG-5654",
        "Custom packaging type ignored when POM contains  modules entry First I have not come across any information stating that only POM's with package type POM may have a modules section. If this is so then the following is not a bug.\n\n\nI created an extension plugin that has a custom artifact type and lifecycle following the directions at http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\nThe POM that has the custom packaging type declares the plugin as an extension in it's build section and has a dependency on two modules in two different subdirectories, i.e\n\n<modules>\n      <module>runtime</module>\n      <module>boot</module>\n  </modules>\n\nIf I go into the modules directory and run mvn install and then go up to the project directory and run mvn install without the above module statement the dependencies are found and the custom lifecyle is invoked and everything is fine. However, if I add the above module declaration back in and run mvn install expecting that all three projects will be built only the sub modules are built correctly by the reactor but for the top level project the custom packaging type is ignored and the project is treated as a POM package type and is installed in the repository as such. ",
        "Move pluginManagement out of build area The pluginManagement area has more or less the same meaning as dependencyManagement so it should also be located at the same level which means:\n\n{code:xml}\n<dependencyManagement>\n</dependencyManagement>\n<pluginManagement>\n</pluginManagement>\n<build>\n</build>\n{code}\n"
    ],
    [
        "MNG-287",
        "MNG-3666",
        "make repo tool add sha1's to all artifacts, and also add to wagon/artifact deployer ",
        "Adding SCOPE in a consolidation POM stops the child dependencies from being resolved If a consolidated/library pom has a scope in it, it fails to resolve it's child dependencies.\n\nConsider this from a top level pom:\n\n        <dependency>\n            <groupId>com.ibm.db2.jcc</groupId>\n            <artifactId>library</artifactId>\n            <version>V8-FP15</version>\n            <type>pom</type>\n            <scope>test</scope>\n        </dependency>\n\nThis is what works:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\n\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\n\"http://maven.apache.org/POM/4.0.0 \nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.ibm.db2.jcc</groupId>\n    <artifactId>library</artifactId>\n    <version>V8-FP15</version>\n    <packaging>pom</packaging>\n    <name>Master POM for the DB2 Universal Drivers from V8 FP15.</name>\n    <description>POM was created from install:install-file</description>\n        <dependencies>\n            <dependency>\n                <groupId>com.ibm.db2.jcc</groupId>\n                <artifactId>db2jcc</artifactId>\n                <version>V8-FP15</version>\n            </dependency>\n            <dependency>\n                <groupId>com.ibm.db2.jcc</groupId>\n                <artifactId>db2jcc_license_cisuz</artifactId>\n                <version>V8-FP15</version>\n            </dependency>\n            <dependency>\n                <groupId>com.ibm.db2.jcc</groupId>\n                <artifactId>db2jcc_license_cu</artifactId>\n                <version>V8-FP15</version>\n            </dependency>\n        </dependencies>\n</project>\n\nIf I add a scope of <anything> to each dependency, it fails to resolve it's children.\n\nI consider this a bug.\n\nIf you are depending on a pom of type pom and the scope attribute is not needed (it should be specified in the top level dependency definition), then it should be ignored. At the very least it should not cease processing it's children.\n\nThis is the broken one, for reference:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\n\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\n\"http://maven.apache.org/POM/4.0.0 \nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.ibm.db2.jcc</groupId>\n    <artifactId>library</artifactId>\n    <version>V8-FP15</version>\n    <packaging>pom</packaging>\n    <name>Master POM for the DB2 Universal Drivers from V8 FP15.</name>\n    <description>POM was created from install:install-file</description>\n        <dependencies>\n            <dependency>\n                <groupId>com.ibm.db2.jcc</groupId>\n                <artifactId>db2jcc</artifactId>\n                <version>V8-FP15</version>\n                <scope>runtime</scope>\n            </dependency>\n            <dependency>\n                <groupId>com.ibm.db2.jcc</groupId>\n                <artifactId>db2jcc_license_cisuz</artifactId>\n                <version>V8-FP15</version>\n                <scope>runtime</scope>\n            </dependency>\n            <dependency>\n                <groupId>com.ibm.db2.jcc</groupId>\n                <artifactId>db2jcc_license_cu</artifactId>\n                <version>V8-FP15</version>\n                <scope>runtime</scope>\n            </dependency>\n        </dependencies>\n</project>\n\nThis all came about from taking all three individual dependencies from a pom and attempting to package them up into a single dependency to make inclusion easier. Drove me nuts for a few days, but I thought that I'd raise it here to save some other poor soul the same pain.\n\n-Chris\n"
    ],
    [
        "MNG-2883",
        "MNG-686",
        "Make sure that the network isn't used for snapshots in offline mode when legacy repositories are used We determined that the network is not touched for m2 repositories in offline mode, but make sure the same holds true for legacy repositories.",
        "Allow build directory specification in pom profile Comes down to moving 'directory' from Build.java to BuildBase.java and updating DefaultModelInheritanceAssembler"
    ],
    [
        "MNG-223",
        "MNG-2038",
        "consider replacement for <versions/> We removed <versions/> from the POM in m2, which made sense as the POM should be a snapshot of the current state of the project, not the history.\n\nWe can easily get old versions from the repository, however SCM tag names are missing (so these may need to be stored in the POM at release time).\n\nAnother concern is that all project data should be available from the SCM - so if the repository goes away it can be easily recreated. Would we need to manually redeploy from every historical tag? Just the versions desired? Would having another archive versions.xml in SCM help with any of the tasks?\n\nI'm in favour of just using the repository + adding the tag at release time, but we need to give all use cases due consideration.",
        "A mini guide covering the interplay between SCM and maven releases Emmanuel Venisse asked if I would contribute this document, so here it is. It is a step by step guide which covers releasing a project using maven, but also demonstrates some best practices when it comes to making branches, tags, and of course versions, all while touching on how maven makes these practices so much less of a headache."
    ],
    [
        "MNG-4461",
        "MNG-66",
        "[regression] No transfer progress during artifact deployment As reported by Juven, we get no transfer progress here:\n{noformat}\n[INFO] --- maven-deploy-plugin:2.4:deploy (default-deploy) @ test ---\n[INFO] Retrieving previous metadata from maven-core-it\n[INFO] Uploading repository metadata for: 'artifact org.apache.maven.its.mng:test'\n[INFO] Uploading project information for test 0.1\n{noformat}\ncompared to Maven 2.x\n{noformat}\n[INFO] [deploy:deploy]\nUploading: file:///M:\\z/repo/org/apache/maven/its/mng/test/0.1/test-0.1.jar\n1K uploaded  (test-0.1.jar)\n[INFO] Retrieving previous metadata from maven-core-it\n[INFO] Uploading repository metadata for: 'artifact org.apache.maven.its.mng:test'\n[INFO] Uploading project information for test 0.1\n{noformat}",
        "Create a matrix of possible exceptional conditions We need a little matrix of possible exception conditions, what causes them, what resources we can point users to for help, and how we can format the exception message as to make the most sense to users."
    ],
    [
        "MNG-4855",
        "MNG-545",
        "calling plugin without full declaration fails --> documentation? I'm not sure if this is a bug.\nSince maven 3 it's not possible to call a plugin without full delcaration. For example, in earlier mvn version it was possible to call the archetype plugin with following line:\n\narchetype:create-from-project\n\nI guess this fails now due the fact that the plugin version wasn't specified somewhere in the pom. With maven 3.0 you have to write:\n\norg.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-5:create-from-project\n\nI wasn't able to gather this information from the Compatibility Notes.I believe it would be assistant to include this information because most of the beginner tutorials and guides won't work anymore.\n\n\n",
        "M2 / xdoc / attribute of xhtml tags are filtered => so can't use all xhtml features. in xdocs\n\nin a <p> tag : the class and the id attributes are filtered. So can't use special css styles.\n\nin a <a> tag : target and title attributes are filtered (but not the href ....).  so can't use full features of <a> (I did not try the img attribute, etc....)\n\n=> xhtml in xdocs should be rendered as much as it is written in the xdoc file.\n\n(other problem related : <br/> tag is transformed in \"<br><br/>\", so put a double line in most browser... (a jira issue is yet open for M1).\n"
    ],
    [
        "MNG-2491",
        "MNG-4040",
        "[maven-model-converter] Fix parameter name for changes-plugin Alter the name of a configuration parameter to be in line with the current state of the Maven 2 changes-plugin. Patch included.",
        "Tycho build fails with PluginDescriptor for the plugin was not found Tycho build fails with PluginDescriptor for the plugin org.ops4j:maven-inherit-plugin was not found."
    ],
    [
        "MNG-5697",
        "MNG-5401",
        "remove LifecycleMapping and ArtifactHandler from maven-core: move to target packaging plugin Maven Core should only be aware of the pom packaging details, the rest of the {{ArtifactHandlers}} and {{LifecycleMappings}} should be moved to their own packaging plugin:\n- jar packaging: maven-jar-plugin\n- ejb and ejb3 packagings: maven-ejb-plugin\n- maven-plugin packaging: maven-plugin-plugin\n- war packaging: maven-war-plugin\n- ear packaging: maven-ear-plugin\n- rar packaging: maven-rar-plugin\n- par packaging: ?\n\n{{LifecycleMappings}} http://maven.apache.org/ref/3.2.5/maven-core/default-bindings.html\n{{ArtifactHandlers}} http://maven.apache.org/ref/3.2.5/maven-core/artifact-handlers.html\n\nMaven core should then get the lifecycle mappings and artifact handlers configurations from the plugin at the beginning or the build, before begin able to calculate the build plan\n",
        "load logging configuration from ~/.m2 actual logging configuration is in Maven installation directory, which is not usable when on a shared machine with shared installation\n\nit would be useful if ~/.m2 could take precedence"
    ],
    [
        "MNG-766",
        "MNG-276",
        "\"provided\" scoped dependencies is not made available during tests, making the tests fail with errors. ",
        "Make out output from archetype more informative Let the user know where the project was generated and display the parameters used during generation."
    ],
    [
        "MNG-588",
        "MNG-2750",
        "How to handle identical file names in the site structure for the static site generation? Supposed that we have the following site structure:\n+- src/\n   +- site/\n      +- apt/\n      |  +- index.apt\n      |\n      +- xdoc/\n      |  +- index.xml\n      |\n      +- site.xml\n\nActually, the site:site goal generates the index.html from site/xdoc/index.xml.\nIt could also generate it from site/apt/index.apt.\n\nThrowing an exception instead of warnings?\n",
        "Remove the notion of pluginRepositories I really don't think we need separate repositories for plugins. With the current behavior where dependencies are specified in plugins, they can only come from a plugin repository which is sort of useless. I think most people in practice just point their repository and pluginRepository settings at the same URL."
    ],
    [
        "MNG-1886",
        "MNG-4418",
        "Need way to share code between report mojos and main build mojos For example in the clover plugin i have both report mojos and main build mojos. They need to share lots of configuration elements and common methods but it's not easy to do so because each type needs to extend either AbstractMavenReport or AbstractMojo. Of course I could not extend AbstractMavenReport and instead implement the interface but then I'll have to reimplement all its methods.\n",
        "Dependency resolution appears to misbehave if a remote repository uses the id \"local\" Consider something like\n{code:xml}\n<mirror>\n  <id>local</id>\n  <mirrorOf>*</mirrorOf>\n  <url>http://localhost/mymirror</url>\n</mirror>\n{code}\nin the settings. Note in particular that the mirror uses the id \"local\". This severely impacts dependency resolution as this repo id is internally used for the local repository. In particular the path to the locally stored repo metadata uses this id, i.e. {{maven-metadata-local.xml}}, making it impossible for Maven to distinguish the real local repo metadata from the remote repo called \"local\".\n\nPossible error scenario:\n- user installs local snapshot of a artifact A\n- Maven checks remote repo \"local\" for updates of A, thereby overwriting {{maven-metadata-local.xml}} and erasing the information about the local snapshot\n- Maven downloads snapshot version of A from the remote repo, regardless of its age compared to the locally installed snapshot\n"
    ],
    [
        "MNG-2151",
        "MNG-3862",
        "classpath used to build a module affects compile classpath for building another module Here's my project layout:\n\ndaytrader/\n  ejb/\n  streamer/\n\nwhere streamer depends on the ejb-client produced by the ejb/ build.\n\nIf I do a \"mvn install\" in daytrader/ the build works. If I do it in streamer/ it fails.\n\nAfter investigation the problem was that the ejb-client produced by the ejb module was excluding by default a class required to compile streamer/.\n\nThe build when run at the top level should have failed when building the streamer/ module.",
        "Remove all plugin configuration manipulation from the plugin manager  All of this work is being done by the new model framework and the rules for manipulating the model properties. All of the requirements for plugin configuration inheriting and merging are taken care of. We need to detangle the plugin configuration from execution. This will pave the way to use the new plexus plugin manager to load and execute plugins."
    ],
    [
        "MNG-4763",
        "MNG-5743",
        "SCM entry is determined wrongly when aggregating project is not a parent Hello,\nI'm writing a plugin to check if SCM entry matches the real svn path. The scm entry is got from _$\\{project.scm\\}_ parameter, to get a real path I'm incorporating svnKit library. If the aggregated project doesn't have its own scm tag, it iherites one from parent with appended artifact id. However, according with the project layout the scm should be got from the aggregator. The issue is presented on the following example\n\naggregator pom:\n{code:xml}\n<project>    \n    <artifactId>aggregator</artifactId>\n    <scm><connection>scm:svn:http://host.com/svn/aggregator/trunk</connection></scm>\n    <modules><module>child</module></modules>\n<project>\n{code}\nparent pom:\n{code:xml}\n<project>\n    <artifactId>parent</artifactId>\n    <scm><connection>scm:svn:http://host.com/svn/parent/trunk</connection></scm>\n<project>\n{code}\nchild pom\n{code:xml}\n<project>\n    <parent><artifactId>parent</artifactId></parent>\n    <artifactId>child</artifactId>   \n<project>\n{code}\n\nThe scm entry connection (_$\\{project.scm\\}_.connection) for child is scm:svn:http://host.com/svn/parent/trunk/child but shoud be scm:svn:http://host.com/svn/aggregator/trunk/child",
        "Add support for splitted POMs Please add the possibility to split a POM into multiple files. A huge POM is difficult to maintain and it is also difficult to navigate through a huge POM. \n\nSo it would be nice to have the possibility to split a POM into multiple files.\n\nThis could be achived by adding an {{include}} directive or by supporting configuration directory as suggested in [Optional support for splitting up pom.xml in multiple files|http://docs.codehaus.org/x/BgSV].\n\nAdding this feature would be help to promoted Maven in new projects. Futhermore it would be helpful for all maintaining large Maven based projects."
    ],
    [
        "MNG-4372",
        "MNG-2214",
        "Unable to determine the release version on parallel execution We are building maven projects from Hudson with several workers.\n\nWhen two projects with the same parent (with version set to RELEASE) are built at the exact same time then both fail with:\n[INFO] Failed to resolve artifact.\n\nGroupId: com.***\nArtifactId: ***\nVersion: RELEASE\n\nReason: Unable to determine the release version\n\n  ***:pom:RELEASE\n-----------------------------\n\nKnown workarounds:\n- Start some seconds apart\n- Using explicit version instead of RELEASE\n\nIt's not 100% reproducible but happens often enough to be annoying. When we had a larger number of projects using RELEASE this happened quite often.\n\nI will try to catch it in DEBUG mode, although this seems to affected the timing of the access.",
        "ITs fail when bootstrapping M2 SVN trunk with java.lang.StringIndexOutOfBoundsException: String index out of range: 1 Here is an exception stacktrace for one of the failed tests...\n\n\nit0002... FAILED\n>>>>>> Error Stacktrace:\norg.apache.maven.it.VerificationException: java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n        at org.apache.maven.it.Verifier.executeHook(Verifier.java:366)\n        at org.apache.maven.it.Verifier.main(Verifier.java:862)\nCaused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n        at java.lang.String.charAt(String.java:566)\n        at java.util.regex.Matcher.appendReplacement(Matcher.java:696)\n        at java.util.regex.Matcher.replaceAll(Matcher.java:806)\n        at java.lang.String.replaceAll(String.java:2028)\n        at org.apache.maven.it.Verifier.resolveCommandLineArg(Verifier.java:698)\n        at org.apache.maven.it.Verifier.executeHook(Verifier.java:355)\n        ... 1 more\n<<<<<< Error Stacktrace\n"
    ],
    [
        "MNG-1620",
        "MNG-4859",
        "par and ejb3 files must expose its classes to the classpath, so other modules can use them when compiling *.par (persistence archives) and *.ejb3 packages must add its classes to the classpath, so other poms can use them when compiling. In the compatible servers, pars are exposed as jars, so no client should be used, only the par file is necessary.\nThe solution I am attaching was proposed in the mailing list [1], so I've just created the patch in order to be included in the sources. I've seen no issue opened for this, although it was proposed in the mailing list in answer to that mail. All credit should go for Thomas Marek,\n\nRegards,\n\nBruno\n\n[1] http://mail-archives.apache.org/mod_mbox/maven-users/200511.mbox/%3c437C6703.2030302@biosolveit.de%3e",
        "Console output pattern should be customizable http://stackoverflow.com/questions/3890746/maven-output-with-displaying-plugingoalproject-for-each-line-as-prefix/3895261#3895261\n\nThe main idea is, that a lot of plugins produce many console lines. If I look for some problem, it is boring and hard to scroll back top see that which built project, which plugin, which execution is wrong. It would be real good to have some possibility to customize console output like PatternLayout in log4j. The following improvements I suggest:\n\n- leave the possibility to customize severity. For example instead of [INFO] [I] would be sufficient.\n- if console log pattern could be defined, colorizing log would be enabled http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html\n- If you would define thread locals with a map containing project name, id, coordinate, running plugin coordinate, execution id, then it would be possible to ensure, that no scrolling is needed to see plugin and project. Providing aliases could be also enabled. So a console line would look like this:\n\n2010.01.11 12:33 mygroup:myartifact dependency:resolve[execid] [i] Dependency could not be resolved.\n\nWhat do you think? Would not it be good?"
    ],
    [
        "MNG-4318",
        "MNG-2817",
        "MavenProject.executionRoot is not set correctly using site plugin from 3.x branch and trunk 807360.\nIt MSITE-304 failed due to non project with executionRoot  set to true",
        "Add identity specification in maven-model and maven-settings Some generated objects are used in lists. Thus, it will be very useful to have identity specification for them: equals(..) and hashcode() (see MODELLO-43)\nFor instance, see org.apache.maven.model.Resource used in model/build/resources\n"
    ],
    [
        "MNG-4282",
        "MNG-4891",
        "improve the error message that tells the user how to install missing jars locally When a missing dependency is detected, maven reports to the user how to install that dependency locally ('mvn install:install-file...'). \n\nHowever, the instructions are missing the '-DgeneratePom=true' directive. Without it, maven keeps looking for the dependencies in the repo, causing unnecessary delays in the build. \n\nI suggest to add '-DgeneratePom=true' to the error message.",
        "Improve robustness of snapshot dependency resolution in case a remote repo accidently uses the id \"local\" This is a follow-up to MNG-4418. The model/settings validation that has been put in place to avoid metadata corruption of the local repo by a remote repo that misuses the same id doesn't help when plugins create repository instances on their own as with the {{maven-deploy-plugin}} in combination with its {{altDeploymentRepository}} parameter.\n\nUsing such a setup, the JGit folks ended up with builds that weren't able to resolve local snapshots that had just been installed seconds before. We need to improve the diagnostic output to more easily detect this kind of metadata corruption and gracefully recover from it."
    ],
    [
        "MNG-802",
        "MNG-3290",
        "Clarify SUN's jar distribution policy on site and in Maven so users know to install those files in their own remote repo refer to: \nhttp://mail-archives.apache.org/mod_mbox/maven-users/200508.mbox/next-thread?%3c3C67E582-5944-49F2-9D2C-B4034303DD20@latencyzero.com%3e\nhttp://mail-archives.apache.org/mod_mbox/maven-users/200508.mbox/%3cc38ad92d05082516333bc3e116@mail.gmail.com%3e\n",
        "add the ability to exclude dependencies from a plugin As plugins declare theyre own dependencies, we sometime need to override the plugin dependencies to use a != version of the supported tool.\n\nIn some situations, due to groupId beeing relocated, this is not possible :\n\nexample : the axistool mojo depends on org.apache.axis:axis:1.4. To generate code for a previous version of axis, we cannot override this dependency as older axis versions use groupId \"axis\".\n\nsame on the castor mojo : cannot use a newest org.codehaus.castor version as the plugin depends on groupId \"castor\".\n"
    ],
    [
        "MNG-2631",
        "MNG-4514",
        "M2 searches artefacts in wrong repo when using ranges <dependency>\n            ...\n<version>[0.8,)</version>\n            ...\n</dependency>\nI get following error while compile this second project:\n\nDownloading: http://{myServer}/internal/{groupId}/{artifactId}/1.0/{artefactId}-1.0.pom\nDownloading: http://{myServer}/snapshot/{groupId}/{artifactId}/1.0/{artefactId}-1.0.jar\n\nIt looks like Maven searches the pom on my internal repo and the belonging  artefact on the snapshotRepo.\n\nAs I have understood, reading BetterBuildsWithMaven site 215, Maven should find my artefact in my \"normal\" repo.",
        "Loading resource from plugin dependency using Plexus ResourceManager fails with leading slash When a maven plugin tries to load a resource(file) from a plugin dependency defined in a project pom file and the path to that resource begins with 'slash' / then the resource is not found. The code uses the Plexus ResourceManagers\n\nExample code that works in 2.2.1 and earlier and fails in Maven 3.0-alpha-5. If resource is in root of jar and configFile begins with forward slash then we get ResourceNotFoundException.\n\n{code:java}\n\n /**\n     * ResourceManager for getting a resource from a dependency jar\n     *\n     * @component\n     * @required\n     * @readonly\n     */\n    private ResourceManager locator;\n...\nprotected void loadResource(String configFile) throws\n            ResourceNotFoundException\n    {\n        InputStream inStream = null;\n        if (configFile != null)\n        {\n            try\n            {\n                inStream =\n                        locator.getResourceAsInputStream(configFile);\n            } finally\n            {\n                if (inStream != null)\n                {\n                    try\n                    {\n                        inStream.close();\n                    } catch (IOException ex)\n                    {\n                        throw new RuntimeException(\n                                \"Should not have happended\", ex);\n                    }\n                }\n            }\n        }\n    }\n\n{code}\n\nWill attach IT test."
    ],
    [
        "MNG-5140",
        "MNG-5123",
        "wrong reports order inside reportSet sen when working on MSITE-402, order of report plugins is well respected, but not on reports in a reportSet (seen on Maven Project Info Reports Plugin)",
        "Authentication credentials mismatch when accessing multiple repositories When accessing multiple repositories, Maven seems to use & keep <server> credentials used for the first repository accessed, with the other repositories.\n\nFor example, if we have 2 <repository> sections in our pom, accessed respectively with foo & bar usernames, \"foo\" credential will be used against the second repository, making authentication fails if foo is not authorized to access bar repository.\n\nI settled up a minimal nexus configuration demonstrating the problem.\nNexus is defining 2 repositories (foo & bar).\nOnly foo user can access foo repository. The same goes for the bar repository. A special ci user can access both repositories.\nA foo artefact has been uploaded in foo repository. A bar artefact has been uploaded in bar repository.\nA pom.xml project defines bar repository with dependencies on foo & bar artefacts. \nThe foo repository is referenced as a mirror of central in settings.xml.\nIf, in settings.xml, we use foo user for foo server, and bar user for bar server, foo artefact cannot be retrieved in foo repository because bar user is not authorized to access foo repository (although it is not what is configured) : we can see this in nexus logs. The issue is here !\n\nNote: If, in settings.xml, we use ci user for foo server, and bar user for bar server, foo artefact is retrieved (since ci user can both access foo & bar repositories).\n\nNote 2 : I provided a zot repository, too, to distinguish the <repository> section from the settings.xml and the pom.xml sections. But the same problem is going on zot repository.\n\nProblem seems to be really general : if we try to connect on N repositories using N <server> definitions, only the first <server> credentials are used (for the N repositories)."
    ],
    [
        "MNG-4791",
        "MNG-4787",
        "[regression] POM artifacts passed into MavenProjectBuilder.buildFromRepository() are no longer resolved When an artifact with type=pom is passed into {{MavenProjectBuilder.buildFromRepository()}}, this previously resolved the artifact as a side-effect of the method invocation. This no longer happens.",
        "Allow class realm manager delegates to alter public part of Maven core realm As part of the fix for MNG-4747, a new class realm was introduced that represents the public part of the Maven core. Life for integrators that need to contribute additional classes like Polyglot Maven or M2Eclipse would be easier if this realm is also subject to the class realm delegates. This would allow to inject the custom types at a central place rather than injecting them into each and every plugin realm."
    ],
    [
        "MNG-3438",
        "MNG-2469",
        "IIncompatibleClassChangeError This is happening with 2.0.9-SNAPSHOT built on 5th of March 2008:\n\n{noformat}\n[INFO] ------------------------------------------------------------------------\n[INFO] Building XWiki Platform - Applications - Selenium\n[INFO]    task-segment: [clean, install]\n[INFO] ------------------------------------------------------------------------\n[INFO] [clean:clean]\n[INFO] Deleting directory /Users/vmassol/dev/xwiki/trunks/xwiki-platform-applications/selenium/target\n[INFO] [remote-resources:process {execution: xwiki-license-resources}]\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[WARNING] Attempting to build MavenProject instance for Artifact (com.xpn.xwiki.platform.tools:xwiki-xar-plugin:1.10-20080305.115158-11) of type: maven-plugin; constructing POM artifact instead.\n[INFO] [xwiki-xar:xar]\n[INFO] Generating package.xml descriptor at [/Users/vmassol/dev/xwiki/trunks/xwiki-platform-applications/selenium/target/classes/package.xml]\n[FATAL ERROR] com.xpn.xwiki.tool.xar.XarMojo#execute() caused a linkage error (java.lang.IncompatibleClassChangeError) and may be out-of-date. Check the realms:\n[FATAL ERROR] Plugin realm = app0.child-container[com.xpn.xwiki.platform.tools:xwiki-xar-plugin]\nurls[0] = file:/Users/vmassol/.m2/repository/com/xpn/xwiki/platform/tools/xwiki-xar-plugin/1.10-SNAPSHOT/xwiki-xar-plugin-1.10-SNAPSHOT.jar\nurls[1] = file:/Users/vmassol/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nurls[2] = file:/Users/vmassol/.m2/repository/org/codehaus/plexus/plexus-archiver/1.0-alpha-9/plexus-archiver-1.0-alpha-9.jar\nurls[3] = file:/Users/vmassol/.m2/repository/org/codehaus/plexus/plexus-component-api/1.0-alpha-15/plexus-component-api-1.0-alpha-15.jar\nurls[4] = file:/Users/vmassol/.m2/repository/org/codehaus/plexus/plexus-classworlds/1.2-alpha-6/plexus-classworlds-1.2-alpha-6.jar\nurls[5] = file:/Users/vmassol/.m2/repository/org/codehaus/plexus/plexus-io/1.0-alpha-1/plexus-io-1.0-alpha-1.jar\nurls[6] = file:/Users/vmassol/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar\nurls[7] = file:/Users/vmassol/.m2/repository/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar\n[FATAL ERROR] Container realm = plexus.core\nurls[0] = file:/Applications/apache-maven-2.0.9-SNAPSHOT/lib/maven-2.0.9-SNAPSHOT-uber.jar\nurls[1] = file:/Users/vmassol/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nurls[2] = file:/Users/vmassol/.m2/repository/com/xpn/xwiki/platform/tools/xwiki-xar-handlers/1.9-SNAPSHOT/xwiki-xar-handlers-1.9-SNAPSHOT.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.IncompatibleClassChangeError\n        at org.codehaus.plexus.archiver.zip.AbstractZipArchiver.createArchiveMain(AbstractZipArchiver.java:318)\n        at org.codehaus.plexus.archiver.zip.AbstractZipArchiver.execute(AbstractZipArchiver.java:242)\n        at org.codehaus.plexus.archiver.AbstractArchiver.createArchive(AbstractArchiver.java:673)\n        at com.xpn.xwiki.tool.xar.XarMojo.performArchive(XarMojo.java:129)\n        at com.xpn.xwiki.tool.xar.XarMojo.execute(XarMojo.java:90)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:575)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:507)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:479)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:331)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:292)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:331)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:124)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:285)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n{noformat}\n\nNote that this is not happening with 2.1-SNAPSHOT.",
        "Refactor and refine the getting started guide so that you could do it 10 min \"chop up the getting started guide so it is again something you could do in 10 minutes to get a feel for Maven (perhaps go back to the level of the original guide). Maybe rename to something else? I used to call it \"the 10 minute test\" on Maven 1.\" "
    ],
    [
        "MNG-4998",
        "MNG-5375",
        "Variables interpolation: dynamic in Maven 2, static in Maven 3 Please, see http://maven.40175.n5.nabble.com/Variables-interpolation-dynamic-in-Maven-2-static-in-Maven-3-td3360336.html.\nIt demonstrates two examples where expression with ${variables} are interpolated differently in Maven 2 and Maven 3: Maven 2 allows to update <properties> and effect expressions interpolated later, Maven 3 also allows to update <properties> but all expressions are interpolated with their old values. \n\nI believe Maven 2 dynamic behavior is much more preferable than Maven 3 Ant-like \"stickiness\" to what's defined in <properties>.\n",
        "Document use of SLF4J  "
    ],
    [
        "MNG-4896",
        "MNG-4832",
        "Help for -pl option does not include use of comma-sep, also more than one -pl does not work or complain The help for the -pl option does not explain how to set more than one project.  Using more than on -pl option won't work, only the first value is respected.",
        "Maven 3 Regression: Missing constructor of org.codehaus.plexus.component.configurator.converters.special.ClassRealmConverter I reported MNG-4811 and it was fixed for 3.0-RC2 but introduced a new error.  The source for com.espn.maven.plugins.espnservice.IncludeProjectDependenciesComponentConfigurator is attached to MNG-4811.  The exception I'm seeing is below:\n\n\nCaused by: java.lang.NoSuchMethodError: org.codehaus.plexus.component.configurator.converters.special.ClassRealmConverter.<init>(Lorg/codehaus/classworlds/ClassRealm;)V\n\tat com.espn.maven.plugins.espnservice.IncludeProjectDependenciesComponentConfigurator.configureComponent(IncludeProjectDependenciesComponentConfigurator.java:43)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:90)\n\tat org.apache.maven.plugin.internal.DefaultMavenPluginManager.populatePluginFields(DefaultMavenPluginManager.java:505)\n\t... 22 more\n"
    ],
    [
        "MNG-2672",
        "MNG-770",
        "Wrong dependency handling when having dependencies to artifacts in different versions Hi,\n\nlet's take a look at the following situation. There is a project A which has dependencies to B and C. Now both B and C have a dependency to D but in different versions. B requires version D-1.0 and C version D-2.0.\n\nNow in different situations is one time D-1.0 used and the next time D-2.0. There is no chance to configure which version will be used. Notice the restriction that I can't change the configured dependencies in B oder C - they are given.Here is a list of different configurations and their results:\n\nBase configuration:\n\nA:\n<dependency>\n  <groupId>org.test</groupId>\n  <artifactId>B</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <scope>compile</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.test</groupId>\n  <artifactId>C</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <scope>compile</scope>\n</dependency>\n\nB:\n<dependency>\n  <groupId>org.test</groupId>\n  <artifactId>D</artifactId>\n  <version>1.0</version>\n  <scope>compile</scope>\n</dependency>\n\nC:\n<dependency>\n  <groupId>org.test</groupId>\n  <artifactId>D</artifactId>\n  <version>2.0</version>\n  <scope>compile</scope>\n</dependency>\n\nDebug:\n[DEBUG] org.test:A:jar:1.0 (selected for null)\n[DEBUG]   org.test:B:jar:1.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.test:D:jar:1.0:compile (selected for compile)\n[DEBUG]   org.test:C:jar:1.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.test:D:jar:2.0:compile (removed - nearer found: 1.0)\n\n=> so D-1.0.jar is used\n\nConfig 2:\nExclude artifact D from dependency on B in A:\n<dependency>\n  <groupId>org.test</groupId>\n  <artifactId>B</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <scope>compile</scope>\n  <exclusions>\n    <exclusion>\n      <groupId>org.test</groupId>\n      <artifactId>D</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n\nDebug:\n[DEBUG] org.test:A:jar:1.0 (selected for null)\n[DEBUG]   org.test:B:jar:1.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]   org.test:C:jar:1.0-SNAPSHOT:compile (selected for compile)\n\n==> So D is never used (!) and so not on the classpath. Expected was to use D-2.0. The exclude seems not to work correct here as it excludes the artifact from the whole build.\n\nConfig 3:\nNo exclusions.\nChange dependency of A to B-1.0-SNAPSHOT to B-1.0\n\nDebug:\n[DEBUG] org.test:A:jar:1.0 (selected for null)\n[DEBUG]   org.test:C:jar:1.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.test:D:jar:2.0:compile (selected for compile)\n[DEBUG]   org.test:B:jar:1.0:compile (selected for compile)\n[DEBUG]     org.test:D:jar:1.0:compile (removed - nearer found: 2.0)\n\n==> so D-2.0.jar is used (!). Why is version 2.0 nearer now than 1.0? In the base configuration above version 1.0 was nearer.\n\nConfig 4:\nChange dependency of A to B-1.0-SNAPSHOT to B-1.0\nChange dependency of A to C-1.0-SNAPSHOT to C-1.0\n\nDebug:\n[DEBUG] org.test:A:jar:1.0 (selected for null)\n[DEBUG]   org.test:C:jar:1.0:compile (selected for compile)\n[DEBUG]     org.test:D:jar:2.0:compile (selected for compile)\n[DEBUG]   org.test:B:jar:1.0:compile (selected for compile)\n[DEBUG]     org.test:D:jar:1.0:compile (removed - nearer found: 2.0)\n\n==> so D-2.0.jar is used. Same result as with config 3.\n\nSo what would be the correct behavior here? At the moment it is not configurable which version of D will be used during compile. \n\n- Fabian",
        "m2 eclipse:eclipse should look at the JDK versions Currently, the option :\n\n<plugin>\n\t      <groupId>org.apache.maven.plugins</groupId>\n\t      <artifactId>maven-compiler-plugin</artifactId>\n\t      <configuration>\n\t        <source>1.5</source>\n\t        <target>1.5</target>\n\t      </configuration>\n</plugin>\n\nare not read by the eclipse plugin.  The generated project use the default workspace source and target.  Since eclipse 3.x, there is a .settings directory in which we can place such options.\n\nI don't know if one plug-in can read options of an other one, but if it can, it would be nice the the eclipse plugin use this information when generating the project."
    ],
    [
        "MNG-245",
        "MNG-2528",
        "transparent plugin downloading not appearing to transform snapshots it appears that running m2 clean:clean doesn't resolve the SNAPSHOT through a transformation",
        "updatePolicy \"always\" does not work for repositories with \"releases\", at least not for transitive dependencies Released versions normally should be final. Once deployed, they should not be upgraded. That's what snapshot versions are for.\n\nAnyway, Maven *does* allow to overwrite an existing version in the repository by re-deploying it. Therefore, to make builds repeatable and reproducable, Maven should check for updates even of released versions, not only snapshot versions.\n\nI tried to use the following setting:\n\n <repositories>\n  <repository>\n   <releases>\n    <enabled>true</enabled>\n    <updatePolicy>always</updatePolicy>\n  </releases>\n...\n\nMy project A has a dependency to version 5.0-SNAPSHOT of a JAR B. That JAR B has a dependency to version 1.6 of another JAR C. In my local repository there's an outdated version 1.6 of JAR C (i.e. version 1.6 has been redeployed after a bug has been found).  The problem is: During my build of project A Maven is looking for an update of JAR B, but NOT of JAR C. \n\nThis problem was originally discussed on\nhttp://www.nabble.com/-m2--Updates-of-transitive-dependencies-not-working--tf2158398.html"
    ],
    [
        "MNG-2286",
        "MNG-3203",
        "Uploading missing jar files maven2 repos @ ibiblio is missing some important jar files:\n1) activation-1.0.2.jar (group Id: javax.activation, artifactId : activation, Version: 1.0.2)\n     can be obtained from http://java.sun.com/products/javabeans/jaf/index.jsp\n\n2) connector-1.0.jar (group Id: javax.resource, artifactId : connector, Version: 1.0)\n     can be obtained from http://java.sun.com/j2ee/connector/index.jsp\n\n3) jacc-1.0.jar (group Id: javax.security, artifactId : jacc, Version: 1.0)\n     can be obtained from http://java.sun.com/products/javabeans/jaf/index.jsp\n\n4) jta-1.0.1B.jar (group Id: javax.transaction, artifactId : jta, Version: 1.0.1B)\n    can be obtained from http://java.sun.com/products/jta\n\n\nIn some of the websites where the jar can be downloaded, there is a ZIP file available with class files in them. \nOne will need to jar them up with specified name.\n\nNote: I've also attached the zip file containing all the jar files.\n5) mail-1.3.2.jar (group Id: javax.activation, artifactId : activation, Version: 1.0.2)\n    can be obtained from : http://java.sun.com/products/javamail/index.jsp\n",
        "maven should execute compiler:compile and :test-compile in separate executions, to allow separate configuration Currently, it's impossible to configure the two default maven-compiler-plugin mojos in the jar lifecycle (:compile and :test-compile) separately without the configuration for one affecting both. This is because they are both executed in the same (default) execution. We should be assigning these to different execution id's, to allow separate configuration."
    ],
    [
        "MNG-3690",
        "MNG-5836",
        "inheriting properties doesn't work if name of property is too long when i used a property that was 30 characters long, it wasn't propagated.  when i shortened it to only be 20, it worked.  i don't know what the limit is, but this was a very sly bug.",
        "logging config is overwritten by $M2_HOME/lib/ext/*.jar If one of the jars in {{$M2_HOME/lib/ext/*.jar}} happens to have {{simplelogger.properties}}, that configuration file masks logging configuration under  {{$M2_HOME/conf/logging}}"
    ],
    [
        "MNG-5738",
        "MNG-2513",
        "Addition of command line flag '--legacy-reactor-resolution'. For a discussion please see MPIR-238.\nPull request is at https://github.com/apache/maven/pull/32.",
        "ArtifactResolver.resolveTransitively() is not working I've got a plugin which is basically doing the same thing that the dependency plugin is, defining artifactItem elements in a configuration, which provide he details for a maven artifact.  The version details are filled in just like the dependency plugin.\n\nProblem is that I need to take each of those artifactItems and get the transitive dependencies for them... but so far all of my attempts to do so with ArtifactResolver.resolveTransitively() is not working.\n\nShould be easy enough to test, just create a new artifact that you know has deps with a ArtifactFactory, then try to get the transitive dependencies.\n\nEverytime I try I get an empty set from result.getArtifacts()."
    ],
    [
        "MNG-3409",
        "MNG-2943",
        "Add ability to execute an specific plugin execution via its id 1. It is possible to execute a lifecycle phase\n2. It is possible to execute a plugin goal (using the plugin's configuration defined at plugin level (not at execution level))\n3. It is NOT possible to execute a plugin execution using its execution-id.(using the configuration on execution level)\n\nI have several use cases in which i want to execute a plugin from the command line with different configurations. This is now not possible.other than misusing profiles for this.",
        "Same package name is used in different modules As best practice and to play well with OSGi the same package shouldn't be in two modules\n\nWe should copy classes to a new package, make old ones extend them and deprecate"
    ],
    [
        "MNG-5929",
        "MNG-623",
        "Allow mirrors to be set through settings.xml profiles Currently I am working for 3 customers with all three their own internal repository. This means that they use the following mirror settings:\r\n\r\n<mirror>\r\n            <id>mirror</id>\r\n            <url>mirrorUrl</url>\r\n            <mirrorOf>*</mirrorOf>\r\n</mirror>\r\n\r\nI have now made three profiles for each company, allowing me to use one settings file.\r\n\r\nI made a bash script where I can set MAVEN_OPTS=-DsettingsProfile=customerName and then use this variable for the activation of the profiles. \r\n\r\nThe only pitfall is that I can't do the same for the mirror, seeing as this is not an allowed element inside the profiles. So it would be very nice if this could be improved to allow the mirror element in the profiles section.\r\n\r\n(Another solution would be to return the -Dapache.user_settings=settingsfile, but this is sadly dropped from maven 3. Using the -s is not an option seeing as this won't be used in spawned maven processes from the main maven proces.)\r\n",
        "Improve the exclusion / inclusion of a dependency inside the ear Improvment of the exclusion/inclusion mechanism: for now this is working based on dependencies wich are neither test nor provided. Need also to handle jar modules which needs to be declared in a\n\n<module>\n  <java>[...]</java>\n</module>\n\nentry. "
    ],
    [
        "MNG-2106",
        "MNG-2765",
        "Add dependency-maven-plugin to plugins list (patch attached) Added info about dependency plugin to plugins list in the mojo section",
        "Refactor DefaultPluginManager This beast needed to be broken down and the call graph simplified. We could also create a lookup( role[-hint], configuration ) in plexus to keep from exposing configurators."
    ],
    [
        "MNG-2033",
        "MNG-4100",
        "published m2 POM descriptor incorrectly uses <o> instead of <os> in at least two places Probably fixed as the page was published in October 2005. Someone may want to try to duplicate that.\n\nErrors indicated with ->\n\nExtracts:\n     <activation>\n        <activeByDefault/>\n        <jdk/>\n->      <o>\n          <name/>\n          <family/>\n          <arch/>\n          <version/>\n        </o>\n\n\n     activation\n\n          The conditions within the build runtime environment which will trigger the automatic inclusion of the parent build profile.\n          Element \tDescription\n          activeByDefault \tFlag specifying whether this profile is active as a default.\n          jdk \tSpecifies that this profile will be activated when a matching JDK is detected.\nOK    os \tSpecifies that this profile will be activated when matching OS attributes are detected.\n          property \tSpecifies that this profile will be activated when this System property is specified.\n          file \tSpecifies that this profile will be activated based on existence of a file.\n\n-> o\n     \n     This is an activator which will detect an operating system's attributes in order to activate its profile.\n     Element \tDescription",
        "Add maven-help-plugin to super pom A number of users where I work have recently upgraded to Maven 2.1, but when they try to run the maven help plugin they're still on the old 2.0.2 version.  Some local repo weirdness, clearing stuff out takes care of it, but it's not what you want when people are trying to get help.\n\nWe should add the maven-help-plugin to the super pom, and update it when new versions of the help plugin are released."
    ],
    [
        "MNG-4837",
        "MNG-4133",
        "Interpolation error due to cyclic expression for one of the POM coordinates gets needlessly repeated This simple POM\n{code:xml}\n<project>\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>${groupId}</groupId>\n  <artifactId>test</artifactId>\n  <version>0.1</version>\n  <packaging>jar</packaging>\n\n  <distributionManagement>\n    <repository>\n      <id>maven-core-it</id>\n      <url>file:///${basedir}/repo</url>\n    </repository>\n  </distributionManagement>\n</project>\n{code}\ncauses the following model errors:\n{noformat}\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     Resolving expression: '${groupId}': Detected the following recursive expression cycle: [groupId] -> [Help 2]\n[ERROR]     'groupId' with value '${groupId}' does not match a valid id pattern. @ line 25, column 12\n{noformat}\nNote the excessive repetition of the groupId related cycle although this expression actually appears only once in the POM.",
        "ssh-external wagon can not be overridden on its own when a project only overrides the ssh-external wagon, it causes the wagon-ssh that is built in to fail to load (probably because of a classloading conflict with ssh-common). See the linked issue for details.\n\nA couple of fixes are needed here:\n- don't crash the entire extension loading mechanism because one extension failed to load\n- possibly shade the common ssh JAR in the core so it doesn't cause the conflict in the first place."
    ],
    [
        "MNG-3652",
        "MNG-239",
        "set a user agent for Maven HTTP requests Apache Maven/2.1-SNAPSHOT",
        "metadata retrieval needs to communicate with reactor example: a set of projects share a version, and that version is bumped. None of the projects are deployed to the remote or local repo.\n\nAttempt a reactor build to put them all in the local repo in order. However, those depending on other projects inside the reactor cannot discover their metadata in the repo as it isn't there yet."
    ],
    [
        "MNG-4200",
        "MNG-3049",
        "Build fails on system without svn client I did a checkout (using TortoiseSVN) from https://svn.apache.org/repos/asf/maven/components/branches/maven-2.1.x/, on my system which doesn't have the command line svn client installed, causing the build to fail as in the attached build.log.\n\nThis is caused by this issue: MOJO-936 in buildnumber-maven-plugin.  The remedy is to modify maven-core/pom.xml and any other POMs where the plugin is used by upgrading the version of that plugin and adding the <revisionOnScmFailure/> element like so:\n\n{code:xml}\n<plugin>\n  <groupId>org.codehaus.mojo</groupId>\n  <artifactId>buildnumber-maven-plugin</artifactId>\n  <version>1.0-beta-3</version>\n  <executions>\n    <execution>\n      <phase>generate-resources</phase>\n      <goals>\n        <goal>create</goal>\n      </goals>\n    </execution>\n  </executions>\n  <configuration>\n    <doCheck>false</doCheck>\n    <doUpdate>false</doUpdate>\n    <revisionOnScmFailure>0</revisionOnScmFailure>\n    <format>NON-CANONICAL_{0,date,yyyy-MM-dd_HH-mm}_{1}</format>\n    <items>\n      <item>timestamp</item>\n      <item>${user.name}</item>\n    </items>\n  </configuration>\n</plugin>\n{code}\n----\n",
        "settings.xml needs a tag for the http.auth.preference parameter If you run maven on solaris with a proxy that has NTLM configured as the standard authorisation you cannot set the authentication scheme to basic in the settings.xml. You have to pass this parameter over the command line 'mvn -Dhttp.auth.preference=basic install'. But this option essential because it is not easy to get NTLM authentication running on solaris.\n\nMaybe further http.auth parameters should be added to the settings.xml. Here is a list of the java parameters:\n\nhttp://java.sun.com/javase/6/docs/technotes/guides/net/http-auth.html"
    ],
    [
        "MNG-3494",
        "MNG-3508",
        "local pom dependencies should get injected before inherited dependencies In 2.0.9, we introduced deterministic ordering of dependencies by using linkedHashMaps. When a conflict occurs at the same depth, Maven prefers the first one found. This means that we need to insert the direct dependencies into this list before the inherited ones. Otherwise we have effectively inverted the standard local wins convention.",
        "Allow 'once' configuration item on plugin execution Scenario:\n- parent pom defines modules A, B \n- it also defines a plugin with some execution\n- when it runs, the plugin runs 3 times (for parent, A, B)\n\nNow, I can set 'inherited' to false, but then if I just run 'A', the plugin won't execute. \n\nWhat I'd like is to be able to configure the execution to run 'once' in the lifecycle. This is useful mainly for plugins that do some kind of setup, initialization or validation, which in many cases need to be done once per execution."
    ],
    [
        "MNG-754",
        "MNG-5720",
        "Exception thrown building site Starting a new project which depends on another project in my tree.  I created the bare bones project directory and added an index.xml in the src/site/xdoc directory.\n\nWhen trying to build the site from the top level project, I got the following exception in the new project:\n[INFO] [site:site]\n[INFO] Generate \"JavaDocs\" report.\n[INFO] Generate \"Issue Tracking\" report.\n[INFO] Generate \"Dependencies\" report.\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Diagnosis: Error during site generation\n[INFO] ----------------------------------------------------------------------------\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error during site generation\n        at org.apache.maven.doxia.DoxiaMojo.execute(DoxiaMojo.java:500)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:364)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:470)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:451)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:433)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:266)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:125)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:186)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:316)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: java.lang.IllegalArgumentException: Can't find a valid Maven project in the repository for the artifact [org.apache.maven.project.artifact.ActiveProjectArtifact@1d03ef].\n        at org.apache.maven.report.projectinfo.DependenciesReport$DependenciesRenderer.renderBody(DependenciesReport.java:236)\n        at org.apache.maven.reporting.AbstractMavenReportRenderer.render(AbstractMavenReportRenderer.java:65)\n        at org.apache.maven.report.projectinfo.DependenciesReport.executeReport(DependenciesReport.java:147)\n        at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:117)\n        at org.apache.maven.doxia.DoxiaMojo.execute(DoxiaMojo.java:298)\n        ... 16 more\n\nI think the exception needs to have the actual artifact information.  Perhaps the ActiveProjectArtifact class needs a toString method to fix this.",
        "Change 'configuration' from Object to Properties in toolchains.xml Officially the content of the {{<configuration>}} element in a toolchain was free of structure, although we only know Properties-like structures.\n\nTo improve the automatic handling by Modello, it is better to drop the free structure and change it to Properties like it was done in MNG-5718 for <provides>.\nThe {{jdk}} toolchain will be modified accordingly, being transparent for users.\n\nBut any custom toolchain implementation will need to be updated."
    ],
    [
        "MNG-3430",
        "MNG-5411",
        "Toolchain doesn't match Toolchain extensions Toolchain uses null key within storing toolchains in Maven Session, which causes extensions not to match.\n\nSpecifically, this problem occurs in the DefaultToolchainManager.storeToolchainToBuildContext method.  When storing into context\n\ncontext.put( getStorageKey( toolchain.getType() ), toolchain.getModel() );\n\ntoolchain.getType() always returns null. Using toolchain.getModel().getType() will return the correct type and fix the problem.",
        "Missing file activation only works with hard coded vales \n{code:xml}\n<activation><file><missing>...</missing></file></activation>\n{code}\n\nOnly works when the file name is hard coded between the missing tags to activate a profile.  If instead the file name is listed as a property (or properties) the profile is always active.\n\ne.g.\n{code:xml}\n...\n<properties>\n  <exampleFile>example.txt</exampleFile>\n  <exampleDirectory>${project.build.directory}/example.txt</sourceDirectory>\n</properties>\n...\n<profiles>\n  <profile>\n    <activation>\n      <file><missing>${exampleDirectory}/${exampleFile}</missing></file>\n    </activation>\n    ...\n  </profile>\n  ...\n</profiles>\n...\n{code}\n\nThe profile here will be active regardless if the wsdlFile exists.   However, if instead one hard codes the value like so:\n{code:xml}  <file><missing>target/example.txt</missing></file> {code}\nthen the profile is only active when example.txt does not exist.\n\nI'm guessing this is a chicken and egg problem.  The properties section is probably not evaluated until after deciding what profiles should be active.  In which case, the code itself is working as designed, it is just either that design needs to be documented or updated to work the way one would expect.\n"
    ],
    [
        "MNG-2719",
        "MNG-88",
        "Request for Summary element in POM If a summary element were added it would make RPM\nSpec file generation more efficient, since spec files\n\"require\" both a description and a summary.\n\nA summary element can also be handy for \nfor other tools that want to generate reports\ngiving a summary, as well as a longer description\nof the project.\n\nIf this sounds reasonable I will update the XML Schema for maven with the summary\nelement and submit.\n\nCheers,\n- Ole\n",
        "m2 -g shows no goals The 'm2 -g' command will not display any goals. The reason is that the DefaultPluginManager never tries to load any plugins."
    ],
    [
        "MNG-3585",
        "MNG-3523",
        "nonProxyHosts separator is wrong in the default settings.xml In the default settings.xml of the Maven package, the example for proxy configuration contain this :\n\n<!-- proxy\n     | Specification for one proxy, to be used in connecting to the network.\n     |\n    <proxy>\n      <id>optional</id>\n      <active>true</active>\n      <protocol>http</protocol>\n      <username>proxyuser</username>\n      <password>proxypass</password>\n      <host>proxy.host.net</host>\n      <port>80</port>\n      <nonProxyHosts>local.net,some.host.com</nonProxyHosts>\n    </proxy>\n    -->\n\nThe separator for nonProxyHosts is wrong, it must be a \"|\".\n\nIt is defined here : http://maven.apache.org/ref/2.0.8/maven-settings/settings.html#class_proxy",
        "Bad error message if plugin.xml is missing/corrupt Take the JAR of the maven-resources-plugin, delete the file META-INF/maven/plugin.xml and run maven. You'll get this error:\n\njava.lang.IllegalStateException: The PluginDescriptor for the plugin Plugin\n[org.apache.maven.plugins:maven-resources-plugin] was not found.\n"
    ],
    [
        "MNG-4926",
        "MNG-4987",
        "ExecutionEvent give on the exception encountered (when having projectFailed , forkedProjectFailed) It could be usefull for having the exception details in ExecutionListener impls to have something like (to not wait the end of the maven execution) :\nAPI change :\n{code}\nExecutionEvent.getException().\n{code}\n",
        "[regression] LATEST, RELEASE or SNAPSHOT version picked from wrong repository when resolution order does not match timestamp order In maven-aether-provider 3.0.2, DefaultVersionResolver, line 378ff says\n\n{noformat}\n    private void merge( String key, Map<String, VersionInfo> infos, String timestamp, String version,\n                        ArtifactRepository repository )\n    {\n        VersionInfo info = infos.get( key );\n        if ( info == null )\n        {\n            info = new VersionInfo( timestamp, version, repository );\n            infos.put( key, info );\n        }\n        else if ( info.isOutdated( timestamp ) )\n        {\n            info.version = version;\n            info.repository = repository;\n        }\n    }\n{noformat}\n\nIf I understand correctly, you should add \n            \n{noformat}\n            info.timestamp = timestamp\n{noformat}\n\nto the else part. Otherwise, you'll use a wrong timestamp in future calls to this method."
    ],
    [
        "MNG-3727",
        "MNG-1899",
        "maven searches in wrong repos while resolving artifacts and their matadata and there by wastes lots of cycles In brief,  the way maven resolves artifacts by searching  across all the repos given in the parent pom seems like a \nvery expensive operation.   For example, if a product (an assembly of various projects) uses  5-6 repos,  maven walks through each  repository  until it finds the needed metadata or the artifact itself.  This appears to be very expensive (to network resources and the time it spends in resolving an artifact)  operation.  \n\nIt is also interesting to note that, even if the repository  policy is set to never for SNAPSHOTS,  maven checks for updates  of that particular artifact  snapshot.  For the very first time while resolving the artifact this approach make sense.  But, not every time we resolve artifacts whose corresponding repos are already have update policy set to never.  Something fishy going on in the  maven-artifact-manager /src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java",
        "[patch] site.xml broken link There is a link to #installation which should be #Installation"
    ],
    [
        "MNG-2162",
        "MNG-2242",
        "update iText @ iBiblio I am the project manager of iText, a free Java-PDF library ( http://www.lowagie.com/iText/ ).\nI often get the remark that the iText version offered at iBiblio is obsolete.\nFor instance: the most recent version at http://www.ibiblio.org/maven2/itext/itext/ is iText1.3.\nIn the meanwhile we've release 1.3.1, 1.3.2, 1.3.3, 1.3.4, 1.3.5, 1.3.6, 1.3.7 and 1.4.\nWho updates iBiblio? Who adds new releases of software to iBiblio? Can I do this myself?\n\nThis was my main question.\n\nFurthermore I have spent four days trying to Mavenize iText.\nI wrote my own POM (because the POM at iBiblio is very incomplete); see attachment.\nI won't list all the issues I encountered, just the two main showstoppers:\n\nMaking the JAR:\nI need to include AFM (Adobe Font Metrics) files and the license TXT files into the jar.\nI see this is a frequently asked (but never answered?) question.\nI assume I have to add some exclude/include tag inside the <archive> tag, but I didn't find any example on how to do this.\nAlso when I create a jar with a manifest file manually, I get an executable jar;\nwhen I use the POM, a manifest file is created (with extra rubbish), but the jar isn't executable.\n(I tried to copy/paste an example POM with a manifestFile tag, but that tag wasn't recognized and gave an error.)\n\nGenerating the SITE:\nI wanted to customize the site that is generated. I was able to change the CSS, I was able to add links, a menu with items;\nI did all kinds of cool but useless stuff, but I was not able to add for instance a Java Script sequence for Google Ads,\nI was not able to add Javascript refering to Amazon books, I was not able to build a site that looks the way I want it to look.\n\nUnfortunately I can't afford to spend more time on Maven, so I'm not expecting an answer on these issues.\nI'm only asking if and how my library can be updated so that Maven users get the most recent version of iText.\nbr,\nBruno",
        "mvn command gives a Null Pointer Exception when a plugin is invalid I tried to use xdoclet with Maven 2.0.2 by adding those lines in pom.xml:\n\n  <build>\n    <finalName>bookstore-web</finalName>\n    <plugins>\n       <plugin>\n         <groupId>xdoclet</groupId>\n         <artifactId>maven-xdoclet-plugin</artifactId>\n         <version>1.2</version>\n         <executions>\n\t      <execution>\n\t        <id>generate-deployment-decriptor</id>\n\t        <phase>generate-sources</phase>\n\t        <configuration>\n\t          <fileset dir=\"src/main/java\">\n\t            <include name=\"**/*.java\"/>\n\t          </fileset> \n\t          <webdoclet>\n\t             <destinationFile>web.xml</destinationFile>\n\t             <destDir>src/main/webapp/WEB-INF</destDir>\n\t          </webdoclet>\n\t         </configuration>\n\t        <goals>\n\t          <goal>webdoclet</goal>\n\t        </goals>\n\t      </execution>\n\t    </executions>\n      </plugin>\n     </plugins>\nAfter I saved the file and run mvn (mvn install and mvn clean), it gives me Null Pointer Exception:\nDownloading: http://repo1.maven.org/maven2/xdoclet/maven-xdoclet-plugin/1.2/mave\nn-xdoclet-plugin-1.2.pom\n159b downloaded\nDownloading: http://repo1.maven.org/maven2/xdoclet/maven-xdoclet-plugin/1.2/mave\nn-xdoclet-plugin-1.2.jar\n34K downloaded\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] FATAL ERROR\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] null\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginM\nanager.java:295)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(De\nfaultPluginManager.java:200)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPlug\ninManager.java:165)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(Defa\nultLifecycleExecutor.java:1218)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifec\nycle(DefaultLifecycleExecutor.java:1182)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycl\neMappings(DefaultLifecycleExecutor.java:950)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Defau\nltLifecycleExecutor.java:450)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHan\ndleFailures(DefaultLifecycleExecutor.java:303)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmen\nts(DefaultLifecycleExecutor.java:270)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLi\nfecycleExecutor.java:139)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] -------------------------------------------------------------------------\n---\n\nLooks like something is screwed up when maven attempts to run the plugin for generating the web.xml of my servlet.  I didn't do anything on the settings.xml, does that matter?\n\nAlso the documentation is por and in worse case the poor documentation offsets the benefits of the tool."
    ],
    [
        "MNG-5343",
        "MNG-3137",
        "Allow the use of JSR330 annotation in Maven extensions and plugins The implementation should not require classpath scanning, but work in a similar way to Plexus where the metadata about the components is generated at build time. \n\nThis is realized using features in Sisu/Guice and the sisu-maven-plugin[1] which generates a META-INF/sisu/javax.inject.Named file which Sisu/Guice can pick up without scanning.\n\n[1]: http://sonatype.github.com/sisu-maven-plugin/",
        "IT 0108 (snapshot updates) fail intermittently  testSnapshotUpdatedWithMetadata(org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest)  Time elapsed: 4.443 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<updated...> but was:<original...>\n        at junit.framework.Assert.assertEquals(Assert.java:81)\n        at junit.framework.Assert.assertEquals(Assert.java:87)\n        at org.apache.maven.it.Verifier.assertArtifactContents(Verifier.java:1493)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.assertArtifactContents(MavenIT0108SnapshotUpdateTest.java:255)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadata(MavenIT0108SnapshotUpdateTest.java:113)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadata(MavenIT0108SnapshotUpdateTest.java:113)\n\ntestSnapshotUpdatedWithMetadataUsingFileTimestamp(org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest)  Time elapsed: 5.265 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<updated...> but was:<original...>\n        at junit.framework.Assert.assertEquals(Assert.java:81)\n        at junit.framework.Assert.assertEquals(Assert.java:87)\n        at org.apache.maven.it.Verifier.assertArtifactContents(Verifier.java:1493)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.assertArtifactContents(MavenIT0108SnapshotUpdateTest.java:255)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadataUsingFileTimestamp(MavenIT0108SnapshotUpdateTest.java:195)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadataUsingFileTimestamp(MavenIT0108SnapshotUpdateTest.java:195)\n"
    ],
    [
        "MNG-588",
        "MNG-732",
        "How to handle identical file names in the site structure for the static site generation? Supposed that we have the following site structure:\n+- src/\n   +- site/\n      +- apt/\n      |  +- index.apt\n      |\n      +- xdoc/\n      |  +- index.xml\n      |\n      +- site.xml\n\nActually, the site:site goal generates the index.html from site/xdoc/index.xml.\nIt could also generate it from site/apt/index.apt.\n\nThrowing an exception instead of warnings?\n",
        "Improve plugin configuration property merge algorithm If the property are the same in the parent and the child project, then the parent property is not inherited. This is fine for simple properties but breaks for complex properties such as lists. Here's an example:\n\nMy parent POM:\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <configuration>\n            <systemProperties>\n\n              <property>\n                <name>cargo.resin3x.port</name>\n                <value>8280</value>\n              </property>\n              <property>\n                <name>cargo.resin3x.url</name>\n                <value>http://www.caucho.com/download/resin-3.0.9.zip</value>\n              </property>\n\n            </systemProperties>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n\nMy child POM:\n\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <configuration>\n          <systemProperties>\n\n            <!-- Default list of containers to run on. If you want to shorten or change the\n                 execution of 'samples', simply specify a shorter list of containers on the\n                 command line or in your settings -->\n            <property>\n              <name>cargo.containers</name>\n              <value>resin3x, orion2x, tomcat5x, jetty4xEmbedded</value>\n            </property>\n\n            <!-- Location where to download and install the containers for the tests -->\n            <property>\n              <name>cargo.install.dir</name>\n              <value>${basedir}/../../target/installs</value>\n            </property>\n\n          </systemProperties>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\nIt sounds a reasonable expectations that the system properties will get merged."
    ],
    [
        "MNG-4211",
        "MNG-5503",
        "[regression] proxy access broken between maven version 2.0.10 and 2.1. Probably due to addition of  wagon 1.0-beta-4+   At a large company, maven become impossible to use via proxy when maven upgraded from 1.0.10 to 2.1.  maven has always worked fine via proxy in 2.0.9 and continues to work fine.  however maven via proxy always fails in version 2.1.0 and higher.  \n  Attached is a  zip file containing   1) log of GMAIL chat between the creater of this JIRA and a maven developer.  2) two console outputs of running maven 2.2. RC3 showing the proxy failure messages.  3) setting.xml (with comments stripped out)",
        "Maven 3.1.0 fails to resolve artifacts produced by reactor build Maven 3.1.0 fails to resolve zip type dependencies produced via assemblies by modules higher up the reactor hierarchy. For example module A has a dep on module B of type zip. Module A produces a zip containing jars plus some other files which the build of module B should extract and copy to the output directory. However, dep solving of module B fails.\n\nIt works with Maven 3.0.5 but fails to build with Maven 3.1.0"
    ],
    [
        "MNG-5947",
        "MNG-5805",
        "dependencyManagement import section does not resolve dependencies using \"nearest\" definition While resolving dependencies for dependencyManagement version of a particular dependency is determined using \"first match\", not \"nearest\" definition.\r\n\r\nAssuming that we have:\r\n* parent:3.2.1:pom with commons-collections:3.2.1 in dependencyManagement\r\n* parent:3.2.2:pom with commons-collections:3.2.2 in dependencyManagement\r\n* imported:1.0:pom with dependencyManagement importing parent:3.21\r\n* final:1.0:pom with dependencyManagement importing imported:1.0 and parent:3.2.2\r\n\r\nthen dependency version for commons-collections in the final POM is set to 3.2.1 (as import 1.0 / parent 3.2.1 is first match), not 3.2.2 which is nearer (one level of import vs. two levels for 3.2.1).",
        "Custom packaging types: configuring DefaultLifecycleMapping mojo executions Currently, DefaultLifecycleMapping does not support mapping phases to goals with a custom configuration (see maven-core/src/main/resources/META-INF/plexus/default-bindings.xml). It is impossible to bind, say, an assembly plugin to 'package' phase within a custom packaging type, since assembly plugin requires a meaningful configuration to be set.\r\n\r\nAt my job, we have a number of poms, each serving a purpose of defining a lifecycle for a particular type of project (there's one for jar, a couple for wars and several more for other types of deployable artifacts).\r\n\r\nNow that I somewhat understand maven's lifecycle, It seems natural to convert such poms to custom packaging types, leaving only a single parent with global config and pluginManagement. But it is currently impossible, since we are using mostly standard plugins (only occasional dedicated ones) to configure projects' lifecycles.\r\n\r\nI did some digging around and put together a relatively straightforward change to maven-core: https://github.com/apache/maven/compare/master...atanasenko:mng-5805-lifecycle-mojo-config?w=1\r\n\r\nIt both introduces support for specifying configuration and dependencies for mojo executions:\r\n{code:xml}\r\n<install>\r\n  <mojos>\r\n    <mojo>\r\n      <goal>org.apache.maven.plugins:maven-install-plugin:2.4:install</goal>\r\n      <configuration>...</configuration>\r\n      <dependencies>...</dependencies>\r\n    </mojo>\r\n    <mojo>\r\n      ...\r\n    </mojo>\r\n  </mojos>\r\n</install>\r\n{code}\r\nas well as retains support for existing mapping syntax:\r\n{code:xml}\r\n<install>org.apache.maven.plugins:maven-install-plugin:2.4:install, ...</install>\r\n{code}\r\n\r\nI will put together some its (as well as make sure that existing are running ok) and create a pull request for both. Also, there are a couple of changes that break API in org/apache/maven/lifecycle/Lifecycle.java and org/apache/maven/lifecycle/mapping/Lifecycle.java. How critical is it to mantain compatibility in those two?\r\n\r\nITS: https://github.com/apache/maven-integration-testing/compare/master...atanasenko:mng-5805-lifecycle-mojo-config?w=1\r\n"
    ],
    [
        "MNG-5694",
        "MNG-2368",
        "Maven shade plugin transformers are not overrideable in child pom. When you configure the maven-shade-plugin with a list of transformers in a root pom, but override the <transformers> section of the maven-shade-plugin in a child pom, the last defined transformer gets all of the parameters of the previous transformers in the list, potentially making mvn install/package unusable.\n\nConcrete case (see also attached zip example) : in the root pom.xml I put the following build configuration with a shade plugin and some transformers :\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>1.5</version>\n            <configuration>\n               <outputFile>test-deploy.jar</outputFile>\n               <transformers>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                     <resource>META-INF/spring.handlers</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n                     <file>${project.build.directory}/generated-resources/versions/META-INF/${project.groupId}/${project.artifactId}.version</file>\n                     <resource>META-INF/assembly.version</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                     <mainClass>${mainClass}</mainClass>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n               </transformers>\n            </configuration>\n         </plugin>\n      </plugins>\n   </build>\n\nif in a child pom.xml, I now put the exact same transformers (useless override, I know, but sometimes you need to add one in a sub project) :\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <executions>\n               <execution>\n                  <phase>package</phase>\n                  <goals>\n                     <goal>shade</goal>\n                  </goals>\n               </execution>\n            </executions>\n            <configuration>\n               <transformers>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                     <resource>META-INF/spring.handlers</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n                     <file>${project.build.directory}/generated-resources/versions/META-INF/${project.groupId}/${project.artifactId}.version</file>\n                     <resource>META-INF/assembly.version</resource>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                     <mainClass>${mainClass}</mainClass>\n                  </transformer>\n                  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n               </transformers>\n            </configuration>\n         </plugin>\n      </plugins>\n   </build>\n\nthe 'mvn install' or 'mvn package' will fail with the following message :\n\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to configure plugin parameters for: org.apache.maven.plugins:maven-shade-plugin:1.5\n\n\n\nCause: Cannot find setter nor field in org.apache.maven.plugins.shade.resource.ServicesResourceTransformer for 'resource'\n[INFO] ------------------------------------------------------------------------\n\nThis is because if you check the effective pom with 'mvn help:effective-pom' you will see that the last transformer also gets the resource, file and mainClass parameters of the transformers defined above, while it's not supposed to:\n\n<transformers>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n    <resource>META-INF/spring.handlers</resource>\n  </transformer>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n    <file>D:\\dev\\issue\\child\\target/generated-resources/versions/META-INF/mvn.transformers.issue.example/child.version</file>\n    <resource>META-INF/assembly.version</resource>\n  </transformer>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n    <mainClass>${mainClass}</mainClass>\n  </transformer>\n  <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\">\n    <resource>META-INF/spring.handlers</resource>\n    <file>D:\\dev\\issue\\child\\target/generated-resources/versions/META-INF/mvn.transformers.issue.example/child.version</file>\n    <mainClass>${mainClass}</mainClass>\n  </transformer>\n</transformers>\n\nI put this issue in the POM/Bootstrap & Build category because it looks like a general xml 'aggregation' issue (title could maybe be generalized).\n\nNote: this is issue is not present with Maven 3.3.2! But if you do need to use 2.2.1 in your corporate environment, the only solution is to write a dummy transformer yourself that accepts the unwanted parameters to put at the end of the transformers list.",
        "Executing a goal that doesn't need a pom but that need some extensions is impossible. There is no way to specify extensions in settings.xml. This is a problem when you want to execute a goal without a pom but that need an extension. One basic case is archetype:create when the archetype is located on a ftp repository. At the moment, you need to perform the command using a fake pom declaring the extension. In my opinion, this is a big gotcha for novice users."
    ],
    [
        "MNG-300",
        "MNG-783",
        "Load .properties files and perform property substitution in pom.xml, etc. I'm looking for something like Springs, PropertyPlaceholderConfigurer in pom.xml (or any other Maven config file).\n\njdbc.properties snippet:\ndatabase.connection.url=SOME_JDBC_CONNECTION_URL\n\n\nSpring's applicationContext.xml snippet:\n<!--\n    Configurer that replaces ${...} placeholders in this config file with values from properties files.\n-->\n<bean id=\"propertyConfigurer\"\n      class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"\n>\n    <property name=\"locations\">\n        <list>\n            <value>classpath:jdbc.properties</value>\n            <value>classpath:hibernate.properties</value>\n        </list>\n    </property>\n</bean>\n\n<bean id=\"dataSource\"\n      class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"\n>\n    <property name=\"url\">\n        <value>${database.connection.url}</value>\n    </property>\n</bean>\n\nThe PropertyPlaceholderConfigureer reads in the specified properties files and makes their contents available as replacement values throughout the rest of the config file.  This is very handy, and something that seems to be missing from Maven 1.x.",
        "resource/testResource dir same as source/testSource dir produces invalid .classpath The attached project specifies a different sourceDirectory and testSourceDirectory.  The same directories are also used to hold resources and so are also specified in resources and testResources.\n\nm2 eclipse:eclipse produces an invalid .classpath with duplicate entries:\n\n<classpath>\n  <classpathentry kind=\"src\" path=\"src\"/>\n  <classpathentry kind=\"src\" path=\"src\"/>\n  <classpathentry kind=\"src\" path=\"test\" output=\"target/test-classes\"/>\n  <classpathentry kind=\"src\" path=\"test\" output=\"target/test-classes\"/>\n  <classpathentry kind=\"output\" path=\"target/classes\"/>\n  <classpathentry kind=\"var\" rootpath=\"JRE_SRCROOT\" path=\"JRE_LIB\" sourcepath=\"JRE_SRC\"/>\n</classpath>\n\nThe plugin should check that the resource directories differ from the source directories before writing them to the classpath file."
    ],
    [
        "MNG-4317",
        "MNG-4847",
        "[regression] g:a level metadata is not properly processed when resolving plugin version I recently observed trunk to fail resolving a version for plugin although the plugin was present (even locally). Some debugging showed it merely picked the first existing metadata file (which was almost empty) and didn't consider/merge the metadata of other repos.",
        "The skin does not exist: Unable to determine the release version hi I have problem generating site when im using the command mvn site\n\nit performs all stagegs and when it came to site generation the message is shown :\n\nThe skin does not exist: Unable to determine the release version\n\nTry downloading the file manually from the project website.\n\nThen, install it using the command:\n    mvn install:install-file -DgroupId=org.apache.maven.skins -DartifactId=maven\n-default-skin \\\n        -Dversion=RELEASE -Dpackaging=jar -Dfile=/path/to/file\n\n\n  org.apache.maven.skins:maven-default-skin:jar:RELEASE\n\ndo u have an idea what is the problem ?\n\np.s the jar is registered in my local repository and in the remote repository \n\nthank u "
    ],
    [
        "MNG-4155",
        "MNG-4739",
        "Profile activation based on Maven offline-mode status It would be useful to have Maven profile activation, and deactivation, based on whether or not Maven is in offline mode.",
        "Clarify \"Repository will be blacklisted\" message The Maven user lists show repeated confusion over the \"repository will be blacklisted\" message. I believe people are naturally assuming the repository becomes permanently blocked for future builds too -- which leads to the questions about how to unblock it? The message should clarify that it is a transient matter. I recommend saying \"repository will be blacklisted during this build\"."
    ],
    [
        "MNG-3347",
        "MNG-523",
        "Broken links to maven source javadocs: http://maven.apache.org/guides/index.html When scrolling to the bottom of the following page, links are provided to the javadocs of the major maven APIs:\n\nhttp://maven.apache.org/guides/index.html\n\nAll the links to these javadocs are currently broken.\n\nFollowing the links to http://maven.apache.org/ref/current/, none of the documentation sites include the maven reports section, which I suspect is the reason for the javadocs being missing.\n",
        "maven-model docs incorrectly show <resource> within <testResources> instead of <testResource> modello bug."
    ],
    [
        "MNG-190",
        "MNG-505",
        "run each goal over set of projects in reactor, not vice-versa currently the set of goals is run over each project instead of each goal being run over the set of projects.",
        "implement version range support in the artifact collector http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution"
    ],
    [
        "MNG-3553",
        "MNG-4898",
        "cannot resolve dependency with scope import This pom when added as a dependency of another project does not see repository http://snapshots.jboss.org/maven2\n\n  <!-- DependencyManagement -->\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.jboss.jbossas</groupId>\n        <artifactId>jboss-as-component-matrix</artifactId>\n        <version>${jboss.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\nwith effective settings\n\n[tdiesler@tddell trunk]$ mvn help:effective-settings\n[INFO] Scanning for projects...\n[INFO] Reactor build order: \n[INFO]   JBoss Web Services - Stack CXF\n[INFO]   JBoss Web Services - Stack CXF Management\n[INFO]   JBoss Web Services - Stack CXF Runtime Server\n[INFO]   JBoss Web Services - Stack CXF Runtime Client\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building JBoss Web Services - Stack CXF\n[INFO]    task-segment: [help:effective-settings] (aggregator-style)\n[INFO] ------------------------------------------------------------------------\n[INFO] [help:effective-settings]\n[INFO] \nEffective settings:\n\n<?xml version=\"1.0\"?><settings>\n  <localRepository>/home/tdiesler/.m2/repository</localRepository>\n\n  <profiles>\n    <profile>\n      <activation>\n        <property>\n          <name>!jboss.repository.off</name>\n        </property>\n      </activation>\n      <repositories>\n        <repository>\n          <snapshots />\n          <id>snapshots.jboss.org</id>\n          <url>http://snapshots.jboss.org/maven2</url>\n        </repository>\n        <repository>\n          <snapshots>\n            <enabled>false</enabled>\n          </snapshots>\n          <id>repository.jboss.org</id>\n          <url>http://repository.jboss.org/maven2</url>\n        </repository>\n      </repositories>\n      <id>jboss.repository</id>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <activeProfile>user-profile</activeProfile>\n  </activeProfiles>\n  <pluginGroups>\n    <pluginGroup>org.jboss.maven.plugins</pluginGroup>\n  </pluginGroups>\n</settings>\n",
        "Better DuplicateProjectException error message This was originally reported against as https://issues.sonatype.org/browse/TYCHO-531. When the same pom.xml file is referenced from multiple <module/> element, the build fails with rather unhelpful error message like \n\n{noformat}\n[ERROR] Two or more projects in the reactor have the same identifier, please make sure that <groupId>:<artifactId>:<version> is unique for each project: {org.jboss.tools.build:org.jboss.tools.build.libs:1.0.0-SNAPSHOT=[/qa/hudson_ws/workspace/jbosstools-3.2.0.Beta2.tests/sources/build/libs/pom.xml, /qa/hudson_ws/workspace/jbosstools-3.2.0.Beta2.tests/sources/build/libs/pom.xml]}\n{noformat}\n\nTo help user troubleshoot the problem, we need to provide pom.xml and ideally line numbers that reference the same module.\n"
    ],
    [
        "MNG-2699",
        "MNG-5283",
        "2.1 mvn.bat is broken because classworlds was renamed (patch attached) No karma in core, only plugins so here's the patch. The line was looking for classworlds-* when it's now plexus-classworlds-*",
        "Pom import doesn't work with plugin snapshot To develop one plugin maven in few branch (dev0, dev1....) I have some dependencies in dev0 and other dependencies in dev1\nI have a super pom dev-snapshot with profiles (profile-dev0, profile-dev1)\nfor each profile, I have a dependencymanagment with import pom file\n\n<groupId>com.pom</groupId>\n<artifactId>dynamic-parent</artifactId>\n<version>1.0.000.000-SNAPSHOT</version>\n<packaging>pom</packaging>\n<profiles>\n<profile>\n<id>profile-dev0</id>\n<activation>\n<activeByDefault>true</activeByDefault>\n</activation>\n<dependencyManagement>\n<dependencies>\n<dependency>\n<groupId>com.pom</groupId>\n<artifactId>dynamic-profile</artifactId>\n<type>pom</type>\n<version>dev0-SNAPSHOT</version>\n<scope>import</scope>\n</dependency>\n</dependencies>\n</dependencyManagement>\n</profile>\n\n<profile>\n<id>profile-dev1</id>\n<dependencyManagement>\n<dependencies>\n<dependency>\n<groupId>com.pom</groupId>\n<artifactId>dynamic-profile</artifactId>\n<type>pom</type>\n<version>dev1-SNAPSHOT</version>\n<scope>import</scope>\n</dependency>\n</dependencies>\n</dependencyManagement>\n</profile>\n</profiles>\n\nby default, profile-dev0 is activate\n\nin the pom com.pom:dynamic-profile:pom:dev0-SNAPSHOT , I have dependencies version for dev0 and in com.pom:dynamic-profile:pom:dev0-SNAPSHOT, I have dependencies for dev1\n\nWhen I compile mvn clean deploy -Pprofile-dev0, my plugin is deploy on nexus repository\n\nif I use my plugin maven on an other component, the pom com.pom:dynamic-profile:pom:dev0-SNAPSHOT\n\nmy parent is\n\n<parent>\n<groupId>com.pom</groupId>\n<artifactId>dynamic-parent</artifactId>\n<version>1.0.000.000-SNAPSHOT</version>\n</parent>\n\n<build>\n<plugins>\n<plugin>\n<groupId>my;groupid</groupId>\n<artifactId>my.plugin</artifactId>\n\nif I do a clean install -P!profile-dev0,profile-dev1\n\nit download the parent com.pom:dynamic-parent:1.0.000.000-SNAPSHOT but not the import file\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\nProject ID: com.pom:dynamic-profile\n\nReason: POM 'com.pom:dynamic-profile' not found in repository: Unable to download the artifact from any repository\n\ncom.pom:dynamic-profile:pom:dev0-SNAPSHOT\n\nfrom the specified remote repositories:\nreference-central (http://repository.all.alcatel-lucent.com/nexus/content/groups/reference-cache/)\n\nfor project com.pom:dynamic-profile\n\nThanks\n\nPascal\n"
    ],
    [
        "MNG-2012",
        "MNG-2165",
        "build with custom repository location and settings file doesn't work anymore And related to the MNG-1667 breakage,\n\n./bootstrap.sh -s ~/.m2/settings-m2trunk.xml $*\n\nwith settings-m2trunk.xml pointing to a different repository doesn't work at all anymore....\n\nBreaks very early during the build process. Will try to get a log.",
        "Provide links to release notes on download page, navigation, and README.txt in binaries The downlodable binary distribution of Maven does not include any release notes which is helpful to people who needs to analyze what exactly has changed in each version (contrary to the latest and the greatest mindset). It might be possible to get a list using JIRA but it would be convenient if each (fix) distribution can include a file listing the major enhancements and bug fixes similar to the following format:\n\nver 2.0.2\n   - change 1\n   - bugfix for bleh\n\nver 2.0.1\n   - enhancement 1\n   - new feature\n\neven a listing of the JIRA numbers (and some summary) of the included fixes and enhancement would be useful in this regard.\n\nThank you."
    ],
    [
        "MNG-3434",
        "MNG-5580",
        "[regression] Integration test it0103 is broken This is currently being demonstrated locally and in Continuum.\n\nThe error starts with: \n                      org.apache.maven.it.VerificationException: Exit code was non-zero: 1; log = \n+ Error stacktraces are turned on.\nWAGON_VERSION: 1.0-beta-2\nurl = http://repo1.maven.org/maven2\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/its/it0103/level1/1/level1-1.pom\n[ERROR]\nFailed to resolve parent-POM from repository.\nParent POM Information: \nGroup-Id: org.apache.maven.its.it0103\nArtifact-Id: level1\nVersion: 1\nLocal Repository: /export/home/build/.m2/repository\nRemote Repositories: \ncentral -& http://repo1.maven.org/maven2\nReason: Unable to download the artifact from any repository\n  org.apache.maven.its.it0103:level1:pom:1\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\nProject Id: [inherited]:level3:jar:1\nFrom file: /var/tmp/it0103/level1/level2/level3/pom.xml\nError stacktrace:\norg.apache.maven.reactor.MavenExecutionException: Error scanning for extensions: Error building model lineage in order to pre-scan for extensions: Cannot find artifact for parent POM: org.apache.maven.its.it0103:level1::1 for project [inherited]:level3:jar:1 at /var/tmp/it0103/level1/level2/level3/pom.xml\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:281)\n\tat org.apache.maven.DefaultMaven.createReactorManager(DefaultMaven.java:105)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:162)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:304)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody2(MavenEmbedder.java:895)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody3$advice(MavenEmbedder.java:304)\n\tat org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:176)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\nCaused by: org.apache.maven.extension.ExtensionScanningException: Error building model lineage in order to pre-scan for extensions: Cannot find artifact for parent POM: org.apache.maven.its.it0103:level1::1 for project [inherited]:level3:jar:1 at /var/tmp/it0103/level1/level2/level3/pom.xml\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.buildModelLineage(DefaultBuildExtensionScanner.java:428)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:136)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.checkModulesForExtensions(DefaultBuildExtensionScanner.java:330)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:196)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.checkModulesForExtensions(DefaultBuildExtensionScanner.java:330)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:196)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.checkModulesForExtensions(DefaultBuildExtensionScanner.java:330)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanInternal(DefaultBuildExtensionScanner.java:196)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.scanForBuildExtensions(DefaultBuildExtensionScanner.java:106)\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:277)\n\t... 17 more\nCaused by: org.apache.maven.project.ProjectBuildingException: Cannot find artifact for parent POM: org.apache.maven.its.it0103:level1::1 for project [inherited]:level3:jar:1 at /var/tmp/it0103/level1/level2/level3/pom.xml\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentFromRepositories(DefaultModelLineageBuilder.java:463)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentPom_aroundBody4(DefaultModelLineageBuilder.java:355)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentPom_aroundBody5$advice(DefaultModelLineageBuilder.java:260)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentPom(DefaultModelLineageBuilder.java:1)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.buildModelLineage(DefaultModelLineageBuilder.java:128)\n\tat org.apache.maven.extension.DefaultBuildExtensionScanner.buildModelLineage(DefaultBuildExtensionScanner.java:423)\n\t... 26 more\nCaused by: org.apache.maven.artifact.resolver.ArtifactNotFoundException: Unable to download the artifact from any repository\n  org.apache.maven.its.it0103:level1:pom:1\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:200)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:81)\n\tat org.apache.maven.project.build.model.DefaultModelLineageBuilder.resolveParentFromRepositories(DefaultModelLineageBuilder.java:454)\n\t... 31 more\nCaused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to download the artifact from any repository\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:374)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:184)\n\t... 33 more\n[INFO] ------------------------------------------------------------------------\n[INFO]  + Ignoring build failures\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: & 1 second\n[INFO] Finished at: Tue Mar 04 00:42:01 GMT+00:00 2008\n[INFO] Final Memory: 2M/254M\n[INFO] ------------------------------------------------------------------------\n\tat org.apache.maven.it.Verifier.executeGoals(Verifier.java:994)\n\tat org.apache.maven.it.Verifier.executeGoal(Verifier.java:850)\n\tat org.apache.maven.it.Verifier.executeGoal(Verifier.java:844)\n\tat org.apache.maven.integrationtests.MavenIT0103Test.testit0103(MavenIT0103Test.java:22)\n\tat org.apache.maven.integrationtests.MavenIT0103Test.testit0103(MavenIT0103Test.java:22)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat org.apache.maven.integrationtests.AbstractMavenIntegrationTestCase.runTest(AbstractMavenIntegrationTestCase.java:75)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)\n\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)\n\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:125)\n\tat org.apache.maven.surefire.Surefire.run(Surefire.java:132)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:290)\n\tat org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:818)",
        "mvn 3.x - unable to resolve snapshot artifact via ArtifactResolver using override local repository I can use ArtifactResolver to download a given snapshot maven coordinate. This works with private local repository ( ie I dont want to use the default one) using mvn2 but fails with mvn3.x\n\nThis type of invocation also under maven-dependency-plugin\n\nSimilar invocation using technique at https://github.com/ljnelson/maven-artifacts/blob/master/src/main/java/com/edugility/maven/Artifacts.java also see the same result\n\nThe main motivation is for my plugin to download a huge artifact using a given artifact under 'target' directory using maven 2/3.x without using aether\n\na demo is also at  https://svn.codehaus.org/mojo/trunk/sandbox/download-maven-plugin\n\n"
    ],
    [
        "MNG-2502",
        "MNG-3279",
        "mvn package does not work on J2EE multi module build In a multi module build consisting of an ejb.jar (with an ejb-client.jar), a war, and an ear where the war depends on the ejb-client.jar and the ear depends on the ejb.jar and the war, a reactor build with\n\nmvn package\n\nfails. The war build tries to download the ejb-client.jar from the repository instead of using the just built version.\n\nIf I first run 'mvn install' in the ejb module the following multi module 'mvn package' succeeds.\n\nThis issue causes also problems for the realease plugin since the sub build fails.",
        "Support Exception Chaining for MojoFailureException It would be helpful if MojoFailureException provides constructors to supply an inner exception, just like MojoExecutionException does already.\n"
    ],
    [
        "MNG-5166",
        "MNG-3255",
        "settings.xml boolean values not be honored {noformat}$ svn co http://svn.apache.org/repos/asf/maven/maven-3/trunk\n\n$ LOCAL_REPO=`mktemp -d`\n\n$ # this should fail as the local repo is empty\n\n$ mvn -o -Dmaven.repo.local=$LOCAL_REPO validate \n\n$ GLOBAL_SETTINGS=` \\\n   mvn -o -X -Dmaven.repo.local=$LOCAL_REPO validate |\\\n   sed -n 's/\\[DEBUG\\] Reading global settings from \\(.*\\)/\\1/p'` &&\\\n  LOCAL_SETTINGS=` \\\n   mvn -o -X -Dmaven.repo.local=$LOCAL_REPO validate |\\\n   sed -n 's/\\[DEBUG\\] Reading user settings from \\(.*\\)/\\1/p'` &&\\\n  rm -f \"$LOCAL_SETTINGS\"\n\n$ $EDITOR \"$GLOBAL_SETTINGS\" # set offline to true\n\n$ # this will work but should fail since the repo is empty and the settings.xml says offline\n\n$ rm -rf $LOCAL_REPO && mkdir -p $LOCAL_REPO && mvn -Dmaven.repo.local=$LOCAL_REPO validate \n\n$ mkdir -p \"`dirname \"$LOCAL_SETTINGS\"`\" && echo cp \"$GLOBAL_SETTINGS\" \"$LOCAL_SETTINGS\"\n\n$ # now that the user's settings.xml is the same as the system, it should fail again as it is offline\n\n$ rm -rf $LOCAL_REPO && mkdir -p $LOCAL_REPO && mvn -Dmaven.repo.local=$LOCAL_REPO validate \n{noformat}",
        "Documentation for checking out and build should warn abour long path names on Windows I tried checking out the 2.1 maven code and build to see if a problem I was seeing with maven eclipse integration was localized to the that integration or was caused by the new maven embedder in 2.1 that they use.\n\nI was checking out into a directory on my desktop under windows. The checkout did not complete and had a message:\n\nsvn: Can't open file 'maven-components\\maven-core\\src\\test\\resources\\org\\apache\\\nmaven\\extension\\test-extension-repo\\org\\apache\\maven\\core\\test\\test-lifecycle-an\nd-artifactHandler\\1\\.svn\\tmp\\text-base\\test-lifecycle-and-artifactHandler-1.pom.\nmd5.svn-base': The system cannot find the path specified.\n\nThe problem is that while windows allows filenames up to 256 characters the maximum path length it allows is 260 characters. When you add that path to the path to the desktop directory it was too long.\n\nI was able to check it out to the root directory without problem.\n\nThe guide to building maven should probably mention that for Windows users in the part about checking out the source."
    ],
    [
        "MNG-4344",
        "MNG-5881",
        "[regression] Managed executions of plugins introduced by default lifecycle bindings execute before explicitly defined plugins For this POM snippet\n{code:xml}\n<build>\n  <pluginManagement>\n    <plugins>\n      <plugin>\n        <!-- NOTE: It's essential that this plugin is also referenced by the default lifecycle bindings -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>0.1-stub-SNAPSHOT</version>\n        <executions>\n          <execution>\n            <id>second</id>\n            <phase>validate</phase>\n            <goals>\n              <goal>resources</goal>\n            </goals>\n            <configuration>\n              <pathname>target/log.txt</pathname>\n              <message>second</message>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </pluginManagement>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.its.plugins</groupId>\n      <artifactId>maven-it-plugin-log-file</artifactId>\n      <version>2.1-SNAPSHOT</version>\n      <executions>\n        <execution>\n          <id>first</id>\n          <phase>validate</phase>\n          <goals>\n            <goal>log-string</goal>\n          </goals>\n          <configuration>\n            <logFile>target/log.txt</logFile>\n            <string>first</string>\n          </configuration>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n{code}\nand the invocation \"mvn clean process-resources\", the execution order is first, second with Maven 2 but second, first with Maven 3.",
        "Resource not put into jar I have a resource that I am copying to the target/classes directory using the maven-dependency-plugin\r\nversion 2.10.  The <outputDirectory> is specified as:\r\n{noformat}     ${project.build.outputDirectory}/OSGI-INF/blueprint{noformat}\r\nI am doing so in the \"validate\" phase.\r\n\r\nAfter doing a \"clean install\", the file is in the {{/target/classes/OSGI-INF/blueprint}} directory alongside\r\n2 other files that were in the {{src/main/resources/OSGI-INF/blueprint}} directory.\r\nHowever, the file does not appear in the output jar file.  From posts on the\r\nweb it appears that all files in the classes directory should be copied into\r\nthe jar.\r\n\r\nI tried using the dependency copy plugin to copy it first to another folder and then using the maven resources plugin to copy it to the $\\{project.build.outputDirectory}/OSGI-INF/blueprint directory.\r\nThat did not work either.\r\nI am using maven version 3.2.3.\r\n\r\nIt is an .xml file just like the other files from the {{src/main/resources}}. "
    ],
    [
        "MNG-4917",
        "MNG-4748",
        "Profile not active even though it has activeByDefault set to true I've got a parent pom with a profile with <activeByDefault>true</activeByDefault>.\n\nYou can retrieve it for yourself via git clone git://git.apache.org/webservices-xmlschema.git.\n\nThe problem is the sourcecheck profile in the parent pom. \n\nrunning mvn -Psourcecheck works as expected, but running without the -P fails to activate the profile.\n\nthe help plugin, I think, has separate problems in this area, or perhaps it's not supposed to look at -P?\n\n\n\n\n",
        "svn checkout - special characters in file name are not encoding properly Dear All,\n     I'm working on europe based project, which has so many file names are having with special characters like control characters and cannon(hat) characters supported by windows-1252 support characters. We are using svn repository and for the application build and deployment we are using maven tool, while deploying the .ear through using maven the special characters which are supported by windows-1252(e.g. \u008a) are not converting properly. At the place of those characters i'm getting '?', Hence, the deployment is failing at runtime.\n     I've done so many encoding techniques, but still the problem remains same. Please help to resolve this issue ASAP!!!, due to this issue, my application has been stopped.\n\nI'm glad to get the solution soon.\n\nRegards,\nSunny"
    ],
    [
        "MNG-2511",
        "MNG-2805",
        "Need ability to redefine distribution management url Currently the only way to specify a url for distributionManagement is in the pom. We need to be able to override that so that if needed a developer can set a server id in their settings and define a new url. For example, some developers are outside the company's infrastructure and they deploy differently than developers internally. ",
        "Provide mechanism for suppressing inherited/injected/mapped mojo binding In some cases, a mojo should be suppressed from the build process. If this mojo binding comes from a parent POM or a lifecycle mapping, it's not possible to simply comment out that mojo binding. Currently this sort of functionality is left to the individual plugins to implement as parameters that cause each mojo to bow out. This use case is common enough in large development environments (for addressing the 80% with no customization, but allowing the remaining 20% the control to use the same parent POM with subtractions) to warrant a built-in suppression/disabling functionality.\n\nSuppression should be available by plugin or by plugin-execution. To suppress bindings from the packaging-mapping, the default executionId 'default' can be used."
    ],
    [
        "MNG-865",
        "MNG-4935",
        "re-enable daily updates of wayward poms revert the change in MNG-798 that turned it off",
        "Filter classloader information in debug output (or create a new debug switch) When running Maven 2 with the -X flag, the debug output contains useful debug output, like plugin configuration information, various information about the information, and A LOT of classloading information, which is mostly useful for Maven developers or plugin developers.\n\nI think it would be good to add an additional flag to the debug mode (--extra-debug, -xd), which would trigger adding classloading information to the debug mode. I know this is not a minor issue, since this would require another debugging level (at least from what I can figure), but it would be VERY useful for users.\n\nWe literally have hundreds of thousands of these lines in a build launched with -X. Causing all sorts of problems when loading them through a web interface for example (Hudson).\n\nCompare this:\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-clean-plugin:2.2:clean' -->\n[DEBUG]   (f) directory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\n[DEBUG]   (f) failOnError = true\n[DEBUG]   (f) followSymLinks = false\n[DEBUG]   (f) outputDirectory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\\classes\n[DEBUG]   (f) project = MavenProject: com.axway.$project:all-$project:3.6.1-SP6 @ D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\pom.xml\n[DEBUG]   (f) reportDirectory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\\site\n[DEBUG]   (f) skip = false\n[DEBUG]   (f) testOutputDirectory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\\test-classes\n[DEBUG]   (f) verbose = false\n[DEBUG] -- end configuration --\n[INFO] [clean:clean {execution: default-clean}]\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins:pom:11 for project: null:maven-site-plugin:maven-plugin:2.0-beta-7 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent:pom:8 for project: org.apache.maven.plugins:maven-plugins:pom:11 from the repository.\n[DEBUG] Configuring mojo 'com.axway.maven2.plugins:axway-timestamp-plugin:1.0.1:timestamp' -->\n[DEBUG]   (s) language = en\n[DEBUG]   (s) project = MavenProject: com.axway.$project:all-$project:3.6.1-SP6 @ D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\pom.xml\n[DEBUG]   (s) properties = {time.buildtime=yyyy-MM-dd HH:mm, time.timestamp=yyyyMMddHHmm}\n[DEBUG]   (s) session = org.apache.maven.execution.MavenSession@48f675\n[DEBUG] -- end configuration --\n[INFO] [timestamp:timestamp {execution: timestamp}]\n[INFO] Defining new property time.buildtime to 2010-12-15 17:32\n[INFO] Defining new property time.timestamp to 201012151732\n[DEBUG] Configuring mojo 'com.axway.maven2.plugins:axway-version-plugin:2.0.9:xversion' -->\n[DEBUG]   (s) elementDescriptions = {extensionpack={0} Extension-Pack {1}, patch={0} Patch {2}, servicepack={0} Service-Pack {1}, upgradepack={0} Upgrade-Pack {1}}\n[DEBUG]   (s) elementIdentifiers = {extensionpack=EP, patch=Patch, servicepack=SP, upgradepack=UP}\n[DEBUG]   (s) elementTypeNames = {extensionpack=EP, patch=PATCH, servicepack=SP, upgradepack=UP}\n[DEBUG]   (s) patchDescription = {0} Patch {1}\n[DEBUG]   (s) patchMark = P\n[DEBUG]   (s) patchType = PATCH\n[DEBUG]   (s) project = MavenProject: com.axway.$project:all-$project:3.6.1-SP6 @ D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\pom.xml\n[DEBUG]   (s) servicePackDescription = {0} Service-Pack {1}\n[DEBUG]   (s) servicePackMark = SP\n[DEBUG]   (s) servicePackType = SP\n[DEBUG]   (f) updateTargetVersion = 0.0.0\n[DEBUG]   (s) usedInBranches = [servicepack]\n[DEBUG]   (s) usedInValidations = [patch]\n[DEBUG] -- end configuration --\n[INFO] [axway-version:xversion {execution: version}]\n[INFO] Defining new property axway.version.major to 3.6.1\n[INFO] Defining new property axway.version.patch to \n[INFO] Defining new property axway.version.servicepack.name to SP6\n[INFO] Defining new property axway.version.servicepack.number to 6\n[INFO] No extensionpack found in project version format\n[DEBUG] Skipping already defined property axway.version.patch\n[INFO] Defining new property axway.version.extensionpack.name to \n[INFO] Defining new property axway.version.extensionpack.number to 0\n[INFO] No patch found in project version format\n[DEBUG] Skipping already defined property axway.version.patch\n[INFO] Defining new property axway.version.patch.name to \n[INFO] Defining new property axway.version.patch.number to 0\n[INFO] No upgradepack found in project version format\n[DEBUG] Skipping already defined property axway.version.patch\n[INFO] Defining new property axway.version.upgradepack.name to \n[INFO] Defining new property axway.version.upgradepack.number to 0\n[INFO] Defining new property axway.version.branch to 3.6.1-SP6\n[INFO] Defining new property axway.version.update.base to 3.6.1\n[INFO] Defining new property axway.version.update.type to SP\n[INFO] Defining new property axway.version.update.name to SP6\n[INFO] Defining new property axway.version.update.number to 6\n[INFO] Defining new property axway.version.update.description to 3.6.1 Service-Pack SP6\n[INFO] Defining new property axway.version.update.required to \n[INFO] Defining new property axway.version.update.disabled to \n[WARNING] Ignored version elements: \n\nto this:\n\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-clean-plugin:2.2:clean' -->\n[DEBUG]   (f) directory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\n[DEBUG]   (f) failOnError = true\n[DEBUG]   (f) followSymLinks = false\n[DEBUG]   (f) outputDirectory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\\classes\n[DEBUG]   (f) project = MavenProject: com.axway.$project:all-$project:3.6.1-SP6 @ D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\pom.xml\n[DEBUG]   (f) reportDirectory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\\site\n[DEBUG]   (f) skip = false\n[DEBUG]   (f) testOutputDirectory = D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\target\\test-classes\n[DEBUG]   (f) verbose = false\n[DEBUG] -- end configuration --\n[INFO] [clean:clean {execution: default-clean}]\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins:pom:11 for project: null:maven-site-plugin:maven-plugin:2.0-beta-7 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent:pom:8 for project: org.apache.maven.plugins:maven-plugins:pom:11 from the repository.\n[DEBUG] Plugin dependencies for:\n\ncom.axway.maven2.plugins:axway-timestamp-plugin:1.0.1\n\nare:\n\norg.apache.maven:maven-plugin-api:jar:2.0.4:runtime\norg.apache.maven:maven-core:jar:2.0.4:runtime\norg.codehaus.plexus:plexus-utils:jar:1.1:runtime\n\n\n[DEBUG] com.axway.maven2.plugins:axway-timestamp-plugin:maven-plugin:1.0.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0.4:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for org.apache.maven:maven-core\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven:maven-core:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-settings:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-model:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9:runtime (selected for runtime)\n[DEBUG]         junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven.wagon:wagon-providers:pom:1.0-alpha-6 for project: null:wagon-file:jar:1.0-alpha-7 from the repository.\n[DEBUG] Adding managed dependencies for unknown:wagon-file\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-provider-test:jar:1.0-alpha-6\n[DEBUG]   junit:junit:jar:3.8.1\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4\n[DEBUG]     org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7:runtime (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Adding managed dependencies for unknown:maven-plugin-parameter-documenter\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]     org.apache.maven:maven-plugin-parameter-documenter:jar:2.0.4:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for unknown:wagon-http-lightweight\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-provider-test:jar:1.0-alpha-6\n[DEBUG]   junit:junit:jar:3.8.1\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4\n[DEBUG]     org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven.reporting:maven-reporting:pom:2.0.4 for project: null:maven-reporting-api:jar:2.0.4 from the repository.\n[DEBUG] Adding managed dependencies for unknown:maven-reporting-api\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]     org.apache.maven.reporting:maven-reporting-api:jar:2.0.4:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven.doxia:doxia:pom:1.0-alpha-7 for project: null:doxia-sink-api:jar:1.0-alpha-7 from the repository.\n[DEBUG]       org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-7:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-repository-metadata:jar:2.0.4:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for unknown:maven-error-diagnostics\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]     org.apache.maven:maven-error-diagnostics:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-project:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-artifact-manager:jar:2.0.4:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for org.apache.maven:maven-plugin-registry\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]     org.apache.maven:maven-plugin-registry:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     commons-cli:commons-cli:jar:1.0:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for unknown:wagon-ssh-external\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-provider-test:jar:1.0-alpha-6\n[DEBUG]   junit:junit:jar:3.8.1\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4\n[DEBUG]     org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Adding managed dependencies for org.apache.maven:maven-plugin-descriptor\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]     org.apache.maven:maven-plugin-descriptor:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0.4:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for org.apache.maven:maven-monitor\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-7\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]     org.apache.maven:maven-monitor:jar:2.0.4:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for unknown:wagon-ssh\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-provider-test:jar:1.0-alpha-6\n[DEBUG]   junit:junit:jar:3.8.1\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4\n[DEBUG]     org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-7:runtime (selected for runtime)\n[DEBUG]       com.jcraft:jsch:jar:0.1.24:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]     classworlds:classworlds:jar:1.1-alpha-2:runtime (removed - nearer found: 1.1)\n[DEBUG]     classworlds:classworlds:jar:1.1:runtime (selected for runtime)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]  The following artifacts were filtered out for plugin: com.axway.maven2.plugins:axway-timestamp-plugin:1.0.1 because they're already in the core of Maven:\n\norg.apache.maven:maven-plugin-api:jar:2.0.4:runtime\norg.apache.maven:maven-core:jar:2.0.4:runtime\n\nThese will use the artifact files already in the core ClassRealm instead, to allow them to be included in PluginDescriptor.getArtifacts().\n\n\n[DEBUG] Configuring mojo 'com.axway.maven2.plugins:axway-timestamp-plugin:1.0.1:timestamp' -->\n[DEBUG]   (s) language = en\n[DEBUG]   (s) project = MavenProject: com.axway.$project:all-$project:3.6.1-SP6 @ D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\pom.xml\n[DEBUG]   (s) properties = {time.buildtime=yyyy-MM-dd HH:mm, time.timestamp=yyyyMMddHHmm}\n[DEBUG]   (s) session = org.apache.maven.execution.MavenSession@48f675\n[DEBUG] -- end configuration --\n[INFO] [timestamp:timestamp {execution: timestamp}]\n[INFO] Defining new property time.buildtime to 2010-12-15 17:32\n[INFO] Defining new property time.timestamp to 201012151732\n[DEBUG] Plugin dependencies for:\n\ncom.axway.maven2.plugins:axway-version-plugin:2.0.9\n\nare:\n\norg.apache.maven:maven-plugin-api:jar:2.0.4:runtime\norg.apache.maven:maven-project:jar:2.0.4:runtime\njunit:junit:jar:3.8.2:runtime\norg.codehaus.plexus:plexus-utils:jar:1.1:runtime\n\n\n[DEBUG] com.axway.maven2.plugins:axway-version-plugin:maven-plugin:2.0.9:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-settings:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-model:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9:runtime (selected for runtime)\n[DEBUG]         junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]   junit:junit:jar:3.8.1:runtime (removed - nearer found: 3.8.2)\n[DEBUG]   junit:junit:jar:3.8.2:runtime (selected for runtime)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]  The following artifacts were filtered out for plugin: com.axway.maven2.plugins:axway-version-plugin:2.0.9 because they're already in the core of Maven:\n\norg.apache.maven:maven-plugin-api:jar:2.0.4:runtime\norg.apache.maven:maven-project:jar:2.0.4:runtime\n\nThese will use the artifact files already in the core ClassRealm instead, to allow them to be included in PluginDescriptor.getArtifacts().\n\n\n[DEBUG] Configuring mojo 'com.axway.maven2.plugins:axway-version-plugin:2.0.9:xversion' -->\n[DEBUG]   (s) elementDescriptions = {extensionpack={0} Extension-Pack {1}, patch={0} Patch {2}, servicepack={0} Service-Pack {1}, upgradepack={0} Upgrade-Pack {1}}\n[DEBUG]   (s) elementIdentifiers = {extensionpack=EP, patch=Patch, servicepack=SP, upgradepack=UP}\n[DEBUG]   (s) elementTypeNames = {extensionpack=EP, patch=PATCH, servicepack=SP, upgradepack=UP}\n[DEBUG]   (s) patchDescription = {0} Patch {1}\n[DEBUG]   (s) patchMark = P\n[DEBUG]   (s) patchType = PATCH\n[DEBUG]   (s) project = MavenProject: com.axway.$project:all-$project:3.6.1-SP6 @ D:\\costin\\ci\\main\\$projectcore-main\\mnt-S43\\$projectcore-S43\\all-$project\\pom.xml\n[DEBUG]   (s) servicePackDescription = {0} Service-Pack {1}\n[DEBUG]   (s) servicePackMark = SP\n[DEBUG]   (s) servicePackType = SP\n[DEBUG]   (f) updateTargetVersion = 0.0.0\n[DEBUG]   (s) usedInBranches = [servicepack]\n[DEBUG]   (s) usedInValidations = [patch]\n[DEBUG] -- end configuration --\n[INFO] [axway-version:xversion {execution: version}]\n[INFO] Defining new property axway.version.major to 3.6.1\n[INFO] Defining new property axway.version.patch to \n[INFO] Defining new property axway.version.servicepack.name to SP6\n[INFO] Defining new property axway.version.servicepack.number to 6\n[INFO] No extensionpack found in project version format\n[DEBUG] Skipping already defined property axway.version.patch\n[INFO] Defining new property axway.version.extensionpack.name to \n[INFO] Defining new property axway.version.extensionpack.number to 0\n[INFO] No patch found in project version format\n[DEBUG] Skipping already defined property axway.version.patch\n[INFO] Defining new property axway.version.patch.name to \n[INFO] Defining new property axway.version.patch.number to 0\n[INFO] No upgradepack found in project version format\n[DEBUG] Skipping already defined property axway.version.patch\n[INFO] Defining new property axway.version.upgradepack.name to \n[INFO] Defining new property axway.version.upgradepack.number to 0\n[INFO] Defining new property axway.version.branch to 3.6.1-SP6\n[INFO] Defining new property axway.version.update.base to 3.6.1\n[INFO] Defining new property axway.version.update.type to SP\n[INFO] Defining new property axway.version.update.name to SP6\n[INFO] Defining new property axway.version.update.number to 6\n[INFO] Defining new property axway.version.update.description to 3.6.1 Service-Pack SP6\n[INFO] Defining new property axway.version.update.required to \n[INFO] Defining new property axway.version.update.disabled to \n[WARNING] Ignored version elements: \n[DEBUG] Plugin dependencies for:\n\norg.apache.maven.plugins:maven-site-plugin:2.0-beta-7\n\nare:\n\norg.apache.maven:maven-artifact:jar:2.0.2:runtime\norg.apache.maven:maven-artifact-manager:jar:2.0.2:runtime\norg.apache.maven:maven-model:jar:2.0.2:runtime\norg.apache.maven:maven-plugin-api:jar:2.0:runtime\norg.apache.maven:maven-project:jar:2.0:runtime\norg.apache.maven:maven-settings:jar:2.0:runtime\norg.apache.maven.reporting:maven-reporting-api:jar:2.0.4:runtime\norg.apache.maven.doxia:doxia-module-xhtml:jar:1.0-alpha-11:runtime\norg.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11:runtime\norg.apache.maven.doxia:doxia-decoration-model:jar:1.0-alpha-11:runtime\norg.apache.maven.doxia:doxia-site-renderer:jar:1.0-alpha-11:runtime\norg.apache.maven.shared:maven-doxia-tools:jar:1.0.1:runtime\norg.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-2:runtime\norg.codehaus.plexus:plexus-archiver:jar:1.0-alpha-7:runtime\norg.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9:runtime\norg.codehaus.plexus:plexus-i18n:jar:1.0-beta-7:runtime\norg.codehaus.plexus:plexus-utils:jar:1.5.1:runtime\norg.mortbay.jetty:jetty:jar:6.1.5:runtime\n\n\n[DEBUG] org.apache.maven.plugins:maven-site-plugin:maven-plugin:2.0-beta-7:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-artifact:jar:2.0.2:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-artifact-manager:jar:2.0.2:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for org.apache.maven:maven-repository-metadata\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]     org.apache.maven:maven-repository-metadata:jar:2.0.2:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Adding managed dependencies for org.apache.maven:maven-model\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-ssh-external:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-6\n[DEBUG]   org.apache.maven:maven-model:jar:2.0.2:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-model:jar:2.0:runtime (removed - nearer found: 2.0.2)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (removed - nearer found: 1.0-alpha-9)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0:runtime (removed - nearer found: 2.0.2)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (removed - nearer found: 2.0.2)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (removed - nearer found: 2.0.2)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (removed - nearer found: 1.0-alpha-9)\n[DEBUG] Adding managed dependencies for unknown:maven-settings\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5\n[DEBUG]   org.apache.maven.wagon:wagon-ssh:jar:1.0-alpha-5\n[DEBUG]   org.apache.maven.wagon:wagon-file:jar:1.0-alpha-5\n[DEBUG]   org.apache.maven.wagon:wagon-http-lightweight:jar:1.0-alpha-5\n[DEBUG]   org.apache.maven:maven-settings:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0:runtime (removed - nearer found: 2.0.2)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (removed - nearer found: 1.0-alpha-9)\n[DEBUG]   org.apache.maven.reporting:maven-reporting-api:jar:2.0.4:runtime (selected for runtime)\n[DEBUG]     org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-7:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven.doxia:doxia-modules:pom:1.0-alpha-11 for project: null:doxia-module-xhtml:jar:null from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven.doxia:doxia:pom:1.0-alpha-11 for project: null:doxia-modules:pom:null from the repository.\n[DEBUG] Adding managed dependencies for unknown:doxia-module-xhtml\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:tests:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]   org.apache.maven.doxia:doxia-module-xhtml:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG] Adding managed dependencies for unknown:doxia-core\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:tests:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]     org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for unknown:doxia-sink-api\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:tests:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]       org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11:runtime (removed - nearer found: 1.0-alpha-7)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-containers:pom:1.0-alpha-30 for project: null:plexus-container-default:jar:1.0-alpha-30 from the repository.\n[DEBUG] Adding managed dependencies for unknown:plexus-container-default\n[DEBUG]   org.codehaus.plexus:plexus-classworlds:jar:1.2-alpha-9\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]   org.codehaus.plexus:plexus-component-api:jar:1.0-alpha-30\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30:runtime (removed - nearer found: 1.0-alpha-9)\n[DEBUG]     org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11:runtime (removed - nearer found: 1.0-alpha-7)\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-7:runtime (removed - nearer found: 1.0-alpha-11)\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven.doxia:doxia-sitetools:pom:1.0-alpha-11 for project: null:doxia-decoration-model:jar:null from the repository.\n[DEBUG] Adding managed dependencies for unknown:doxia-decoration-model\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-apt:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-fml:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-$projectoc:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-xhtml:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-decoration-model:jar:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-i18n:jar:1.0-beta-7\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]   org.apache.maven.doxia:doxia-decoration-model:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG] Adding managed dependencies for unknown:doxia-site-renderer\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-apt:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-fml:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-$projectoc:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-module-xhtml:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-decoration-model:jar:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-i18n:jar:1.0-beta-7\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]   org.apache.maven.doxia:doxia-site-renderer:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-components:pom:1.1.12 for project: null:plexus-i18n:jar:1.0-beta-7 from the repository.\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus:pom:1.0.10 for project: org.codehaus.plexus:plexus-components:pom:1.1.12 from the repository.\n[DEBUG]     org.codehaus.plexus:plexus-i18n:jar:1.0-beta-7:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.4.1:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-velocity:jar:1.1.7:runtime (selected for runtime)\n[DEBUG]     org.apache.velocity:velocity:jar:1.5:runtime (selected for runtime)\n[DEBUG]       commons-collections:commons-collections:jar:3.1:runtime (selected for runtime)\n[DEBUG]       commons-lang:commons-lang:jar:2.1:runtime (selected for runtime)\n[DEBUG]       oro:oro:jar:2.0.8:runtime (selected for runtime)\n[DEBUG]     commons-collections:commons-collections:jar:3.1:runtime (removed - nearer found: 3.2)\n[DEBUG]     commons-collections:commons-collections:jar:3.2:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for unknown:doxia-module-apt\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:tests:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]     org.apache.maven.doxia:doxia-module-apt:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG] Adding managed dependencies for unknown:doxia-module-fml\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:tests:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]     org.apache.maven.doxia:doxia-module-fml:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG] Adding managed dependencies for unknown:doxia-module-$projectoc\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:1.0-alpha-11\n[DEBUG]   org.apache.maven.doxia:doxia-core:jar:tests:1.0-alpha-11\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.4.5\n[DEBUG]     org.apache.maven.doxia:doxia-module-$projectoc:jar:1.0-alpha-11:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.apache.maven.shared:maven-shared-components:pom:9 for project: org.apache.maven.shared:maven-doxia-tools:jar:1.0.1 from the repository.\n[DEBUG]   org.apache.maven.shared:maven-doxia-tools:jar:1.0.1:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.commons:commons-parent:pom:7 for project: commons-io:commons-io:jar:1.4 from the repository.\n[DEBUG]     commons-io:commons-io:jar:1.4:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime (removed - nearer found: 1.1)\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-6:runtime (removed - nearer found: 1.0-beta-2)\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-2:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-components:pom:1.1.6 for project: null:plexus-archiver:jar:1.0-alpha-7 from the repository.\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus:pom:1.0.8 for project: org.codehaus.plexus:plexus-components:pom:1.1.6 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-7:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus:pom:1.0.5 for project: null:plexus-utils:jar:1.2 from the repository.\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.2:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (removed - nearer found: 1.0-alpha-9)\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9:runtime (selected for runtime)\n[DEBUG]     junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]   org.codehaus.plexus:plexus-i18n:jar:1.0-beta-7:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.4.1:runtime (removed - nearer found: 1.1)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (removed - nearer found: 1.5.1)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.5.1:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.mortbay.jetty:project:pom:6.1.5 for project: org.mortbay.jetty:jetty:jar:null from the repository.\n[DEBUG] Adding managed dependencies for org.mortbay.jetty:jetty\n[DEBUG]   org.apache.maven:maven-plugin-tools-api:jar:2.0\n[DEBUG]   junit:junit:jar:3.8.2\n[DEBUG]   org.slf4j:jcl104-over-slf4j:jar:1.3.1\n[DEBUG]   org.slf4j:slf4j-simple:jar:1.3.1\n[DEBUG]   mx4j:mx4j:jar:3.0.1\n[DEBUG]   mx4j:mx4j-tools:jar:3.0.1\n[DEBUG]   xerces:xercesImpl:jar:${xerces-version}\n[DEBUG]   commons-el:commons-el:jar:1.0\n[DEBUG]   ant:ant:jar:1.6.5\n[DEBUG]   javax.mail:mail:jar:1.4\n[DEBUG]   javax.activation:activation:jar:1.1\n[DEBUG]   org.mortbay.jetty:jetty:jar:6.1.5:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for org.mortbay.jetty:jetty-util\n[DEBUG]   org.apache.maven:maven-plugin-tools-api:jar:2.0\n[DEBUG]   junit:junit:jar:3.8.2\n[DEBUG]   org.slf4j:jcl104-over-slf4j:jar:1.3.1\n[DEBUG]   org.slf4j:slf4j-simple:jar:1.3.1\n[DEBUG]   mx4j:mx4j:jar:3.0.1\n[DEBUG]   mx4j:mx4j-tools:jar:3.0.1\n[DEBUG]   xerces:xercesImpl:jar:${xerces-version}\n[DEBUG]   commons-el:commons-el:jar:1.0\n[DEBUG]   ant:ant:jar:1.6.5\n[DEBUG]   javax.mail:mail:jar:1.4\n[DEBUG]   javax.activation:activation:jar:1.1\n[DEBUG]     org.mortbay.jetty:jetty-util:jar:6.1.5:runtime (selected for runtime)\n[DEBUG] Adding managed dependencies for org.mortbay.jetty:servlet-api-2.5\n[DEBUG]   org.apache.maven:maven-plugin-tools-api:jar:2.0\n[DEBUG]   junit:junit:jar:3.8.2\n[DEBUG]   org.slf4j:jcl104-over-slf4j:jar:1.3.1\n[DEBUG]   org.slf4j:slf4j-simple:jar:1.3.1"
    ],
    [
        "MNG-4392",
        "MNG-3366",
        "DependencyManagement doesn't work for providing versions for tests classifer I can't get the following to work despite trying various combos.\n\nThe expected behaviour is that only one declaration of the version for a given artifact/groupId should be needed, and that that artifact is used by all consuming artifacts.\n\n{code:xml}\n<!-- in <dependencyManagement> of parent POM -->\n            <dependency>\n            \t<groupId>ucles</groupId>\n            \t<artifactId>ucles.util</artifactId>\n            \t<version>1.1</version>\n            </dependency>\n{code}\n\n\n{code:xml}\n    <!-- in project dependencies -->\n    <dependency>\n    \t<groupId>ucles</groupId>\n    \t<artifactId>ucles.util</artifactId>\n    \t<scope>compile</scope>\n    </dependency>\n    <dependency>\n    \t<groupId>ucles</groupId>\n    \t<artifactId>ucles.util</artifactId>\n    \t<classifier>tests</classifier>\n    \t<scope>test</scope>\n    </dependency>\n{code}\n\nSurely this is a bug, as I can't see why someone would want to use different versions of the same artifact.",
        "Site generation is totally messed up I tried generating the enforcer site with 2.1 and i get essentially empty pages after lots of warning."
    ],
    [
        "MNG-1491",
        "MNG-3077",
        "Reactor should print out a message if it detects a collision of artifact ids It might be a good idea to have the Reactor print out a warning message if it detects similar artifact IDs (copy and paste problem) when scanning for the build order at the start of the build.\n\nCurrently, there are no messages shown in the screen even if \"-X\" is used.",
        "NullPointerException, if MojoExecutionException has no message It seems, that you get a NPE, when a throwable passed to MojoExecutionExceptionDiagnoser.diagose(Throwable error) has no message, which means the message is null. \n\njava.lang.NullPointerException\n        at org.apache.maven.usability.MojoExecutionExceptionDiagnoser.diagnose(MojoExecutionExceptionDiagnoser.java:64)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:84)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:727)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:672)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:131)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:280)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nLine 64 --> if ( directCauseMessage != null && mee.getMessage().indexOf( directCauseMessage ) < 0 )\n(Source: Revision 495147)"
    ],
    [
        "MNG-3864",
        "MNG-4404",
        "[regression] Collection elements inside a per-execution plugin config are collapsed in combination with pluginManagement The build for plexus-classworlds is currently failing because the POM snippet:\n{code:xml}\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-dependency-plugin</artifactId>\n  <version>2.0</version>\n  <executions>\n    <execution>\n      <phase>generate-test-resources</phase>\n      <goals>\n        <goal>copy</goal>\n      </goals>\n      <configuration>\n          <artifactItems>\n            <artifactItem>\n              <groupId>ant</groupId>\n              <artifactId>ant</artifactId>\n              <version>1.6.5</version>\n            </artifactItem>\n            <artifactItem>\n              <groupId>commons-logging</groupId>\n              <artifactId>commons-logging</artifactId>\n              <version>1.0.3</version>\n            </artifactItem>\n            <artifactItem>\n              <groupId>xml-apis</groupId>\n              <artifactId>xml-apis</artifactId>\n              <version>1.3.02</version>\n            </artifactItem>\n          </artifactItems>\n          <outputDirectory>${project.build.directory}/test-lib</outputDirectory>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n{code}\nends up as the effective POM\n{code:xml}\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-dependency-plugin</artifactId>\n  <version>2.0</version>\n  <executions>\n    <execution>\n      <phase>generate-test-resources</phase>\n      <goals>\n        <goal>copy</goal>\n      </goals>\n      <configuration>\n          <artifactItems>\n            <artifactItem>\n              <groupId>ant</groupId>\n              <artifactId>ant</artifactId>\n              <version>1.6.5</version>\n            </artifactItem>\n          </artifactItems>\n          <outputDirectory>${project.build.directory}/test-lib</outputDirectory>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n{code}\ni.e. all but the first {{<artifactItem>}} element are lost.",
        "Throw validation error upon duplicate profile id Identifiers ought to be unique, this is currently not enforced for profile id's."
    ],
    [
        "MNG-3052",
        "MNG-814",
        "Transitive Dependency not found when repo is not listed I have seen the situation where a build fails because a project has a transitive dependency that only exists in a repository not listed by my project.  An example of this is I have Projects A, B, and C.  Where A depends on B, and B on C.  B has been released to remote repo 1, and C has been released to remote repo 2.  Since A just directly depends on B it only lists remote repo 1 in its POM.  However when I try to build project A the build fail because it can't resolve its transitive dependency C in any of the dependencies it is checking (repo 1 only).  \n\nIt is my understanding that for project A I shouldn't have to list the remote repos to resolve transitive dependencies.  I should only have to list the repos to get to B and Maven then should use the POM of B to resolve C.\n\nIs that not correct?",
        "command line profile activation is broken due to the profile manager being recreated in the project builder, there is no way to get the active profiles from the command line (-P).\n\nAdditionally, I think settings.xml based activation is broken but have done less research on that. Could be the same reason."
    ],
    [
        "MNG-4862",
        "MNG-3770",
        "ConfigurationContainer.configuration should be of type Xpp3Dom, not Object All references to ConfigurationContainer.configuration, including the get/setConfiguration methods, treat it as a org.codehaus.plexus.util.xml.Xpp3Dom instance. Yet the signature is Object, and the Javadoc does not even mention the actual type. This is confusing and error-prone.\n\nSuggest changing the signature throughout to Xpp3Dom. If this cannot be done for reasons of binary compatibility, I would suggest: change the signature of the field; introduce a new setConfiguration(Xpp3Dom); @Deprecate setConfiguration(Object) and make it just call setConfiguration(Xpp3Dom) after casting; and update the Javadoc of getConfiguration to specify that it will always return an Xpp3Dom instance (or maybe null). (While the JVM is happy to have two no-arg methods with the same name but different return types, javac will not allow it; possible only by postprocessing bytecode.) Could also introduce new method names, e.g. get/setConfigurationDom.\n\nIt seems that the bug may ultimately be in modello-plugin-java for handling <type>DOM</type> poorly. (JavaModelloGenerator, introduced by brett, commented on by demers.)",
        "pom gets trancated when deploying to repository i have a problem deploying artifacts to repository\nif the artifact exists  the pom is trancated   else no pb\ni'm using redhat4,  maven2.0.9 and hudson"
    ],
    [
        "MNG-138",
        "MNG-2875",
        "ability for user to add their own repositories for downloads previously, user's could add their own repositories to override.xml but this was removed.\n\nThe ability to do this is required. It could be done in a properties file, perhaps like so:\n\nmaven.repo.<id>.name=My Internal Repository\nmaven.repo.<id>.url=http://...",
        "Maven does not honour Plexus component lifecycles in embedded environment for singleton-keep-alive components I have a plugin which is injected with a Plexus Component.  This plexus component implements the plexus Startable interface, and therefore expects stop() to be called upon completion in order to perform cleanup.  In addition, the component is a singleton-keep-alive component so it sticks around for a while and is available to other plugins.\n\nNow this plugin spawns and monitors a thread (it actually kicks off a copy of Jetty 5 so I can do integration tests).  Naturally, I want to shut down Jetty 5 after my tests have run.  To do this I have another plugin which is run after my integration tests which gets the component and tells it to shutdown the threads.\n\nAll works well so far, provided that the tests don't fail.\n\nIf the tests do fail, the stop plugin is never reached.  In standalone maven this all works fine, because the process ends, killing the threads.\n\nIn embedded maven however, the stop method of the component is never called, so that my copy of Jetty keeps on running and I have to shutdown my entire embedded environment (in this case Netbeans with Mevenide, but I believe the same problem occurs in Eclipse).\n\nRunning through the code, it appears that Maven never shuts down the top level component, thus components never have the opportunity to cleanup."
    ],
    [
        "MNG-2339",
        "MNG-1138",
        "${project.*} are interpreted in the wrong place If a plugin use ${project.version}, this parameter is interpreted with the version of the current project and not the plugin version. I think we have the same pb with dependencies and other ${project.*}\n\nFor a plugin in version 2.0 used in a project in version 1.0-SNAPSHOT, ${project.version} used in the plugin will be interpreted as 1.0-SNAPSHOT instead of 2.0",
        "remove use of exclusions through m2 "
    ],
    [
        "MNG-5289",
        "MNG-1317",
        "-Dmaven.repo.local not honored STR:\n\n1) Checkout a multimodule project, e.g. JBoss AS 7\n{code}git clone git://github.com/jbossas/jboss-as.git{code}\n\n2) {code}mvn -Dmaven.repo.local=foo dependencies:go-offline clean install -DallTests -DskipTests{code}\n\n3) {code}mvn -Dmaven.repo.local=foo -o install -DallTests -DskipTests{code}\n\nThis will complain about not having artifact XYZ.\n\n4) On the other hand, this works:\n{code}\nmv ~/.m2/repository ~/.m2/repository_\nln -s `pwd`/localRepo ~/.m2/repository\n\nmvn -o install\n{code}",
        "m2.bat doesn't work on Windows 2000 the m2.bat doesn't work on Windows 2000.\nThis batch uses '%~dps0\\mvn %*' to call the mvn batch file.  %~dps0 expands to the path including the batch name, resulting in an incorrect path.\nLooking at another batch (cruisecontrol.bat) uses %~dp0 instead of %~dps0\n\nCurrent Output with echo turned on:\n\nC:\\cc_stg\\Hercules_nl\\MetadataRepository\\shared\\util>m2 compile\n\n>echo.\n>echo THE m2 COMMMAND IS DEPRECATED - PLEASE RUN mvn INSTEAD \nTHE m2 COMMMAND IS DEPRECATED - PLEASE RUN mvn INSTEAD\n\nC:\\cc_stg\\Hercules_nl\\MetadataRepository\\shared\\util>echo.\n>C:\\cc_stg\\HERCUL~1\\METADA~1\\external\\maven\\maven-2.0\\bin\\m2.bat\\mvn compile\nThe directory name is invalid."
    ],
    [
        "MNG-2048",
        "MNG-2891",
        "Quote args in mvn script The mvn script as distributed does not handle quoted args such as:\n\nm2 -Dgreeting=\"huh bah\" hello:sayhi\n\nYou get the error:\n\nInvalid task 'bah': you must specify a valid lifecycle phase, or a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal\n\nHere is a fix for the mvn script:\n\n*** mvn\t2006/02/07 15:58:33\t1.1\n--- mvn\t2006/02/07 15:58:38\n***************\n*** 134,138 ****\n    -classpath \"${M2_HOME}\"/core/boot/classworlds-*.jar \\\n    \"-Dclassworlds.conf=${M2_HOME}/bin/m2.conf\" \\\n    \"-Dmaven.home=${M2_HOME}\"  \\\n!   ${CLASSWORLDS_LAUNCHER} $@\n  \n--- 134,138 ----\n    -classpath \"${M2_HOME}\"/core/boot/classworlds-*.jar \\\n    \"-Dclassworlds.conf=${M2_HOME}/bin/m2.conf\" \\\n    \"-Dmaven.home=${M2_HOME}\"  \\\n!   ${CLASSWORLDS_LAUNCHER} \"$@\"",
        "Fix deployment permissions so by default group write works We will change some code in Maven to set these defaults reasonably."
    ],
    [
        "MNG-3091",
        "MNG-4540",
        "rebuild project speed When rebuilding a project (the clean flag not set) maven still runs all the unit tests and rebuilds all the artifacts. It would be much faster if it worked in a way similar to make/ant where the time stamp of the files was checked, if the files are not modified and the dependencies have not changed then the artifact should not be rebuild. This would speed up the build time especially for J2EE projects that have a lot of .ear files which each reference several other .war and .jar artifacts ",
        "False positives on ${version} usage I get this warning with mvn 3 alpha5:\n[WARNING] The expression ${version} is deprecated. Please use ${project.version} instead. @ com.davidkarlsen.zipcodeservice:zipcodeservice-selenium-tests:1.0-SNAPSHOT, /u/david/projects/davidkarlsen.com/zipcodeservice/zipcodeservice-selenium-tests/pom.xml\n\nbut this is not the case, the pom's contain cxf.version, not version:\n:~/projects/davidkarlsen.com/zipcodeservice$ find . -name pom.xml -exec fgrep -il '${version}' '{}' \\;\n:~/projects/davidkarlsen.com/zipcodeservice$ find . -name pom.xml -exec fgrep -il '${cxf.version}' '{}' \\;\n./zipcodeservice-core/pom.xml\n\n"
    ],
    [
        "MNG-5035",
        "MNG-4571",
        "\\ -> / on Unix for java.io.File-typed mojo param I created a file {{/tmp/a\\b/c}} (note backslash). I created a quickstart app with\n\n{noformat}\n    public static void main( String[] args )\n    {\n        System.out.println( System.getProperty(\"user.dir\") );\n        System.out.println(Arrays.toString(new File(\"\").listFiles()));\n    }\n{noformat}\n\nand then run it with\n\n{noformat}\nmvn -Dexec.workingdir=/tmp/a\\\\b \"-Dexec.args=-classpath %classpath ....App\" -Dexec.executable=.../java process-classes org.codehaus.mojo:exec-maven-plugin:1.2:exec -X\n{noformat}\n\nI see\n\n{noformat}\n[DEBUG] Configuring mojo 'org.codehaus.mojo:exec-maven-plugin:1.2:exec' with basic configurator -->\n[DEBUG]   (f) workingDirectory = /tmp/a/b\n[DEBUG] Making working directory '/tmp/a/b'.\n/tmp/a/b\nnull\n{noformat}\n\nwhere I expected to see\n\n{noformat}\n[DEBUG] Configuring mojo 'org.codehaus.mojo:exec-maven-plugin:1.2:exec' with basic configurator -->\n[DEBUG]   (f) workingDirectory = /tmp/a\\b\n/tmp/a\\b\n[/tmp/a\\b/c]\n{noformat}\n\nI believe the guilty code is in {{org.codehaus.plexus.component.configurator.converters.basic.FileConverter}}:\n\n{noformat}\nnew File( str.replace( '\\\\', File.separatorChar ).replace( '/', File.separatorChar ) )\n{noformat}\n\nshould probably replace only / with \\ and only on Windows. Not sure what compatibility regressions there might be, if some POM written by a Windows developer uses \\ as the separator character for relative paths.",
        "mvn deploy -DaltDeploymentRepository errors out With version <= 2.2.1, I can do:\nmvn -DaltDeploymentRepository=<reponame>::default::<url> deploy\n\nand get a project's artifacts deployed into my 3rd party snapshot repo.\n\nHowever, with 3.0-alpha-6:\n\n[INFO] --- maven-deploy-plugin:2.4:deploy (default-deploy) @ maven-sling-plugin ---\n[INFO] Using alternate deployment repository <reponame>::default::<url>\n[INFO] Retrieving previous build number from <reponame>\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 5.692s\n[INFO] Finished at: Thu Feb 25 09:23:05 EST 2010\n[INFO] Final Memory: 12M/264M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.4:deploy (default-deploy) on project maven-sling-plugin: Error retrieving previous build number for artifact 'org.apache.sling:maven-sling-plugin:maven-plugin': repository metadata for: 'snapshot org.apache.sling:maven-sling-plugin:2.0.5-SNAPSHOT' could not be retrieved from repository: <reponame> due to an error: Error transferring file: Server returned HTTP response code: 401 for URL: <url>org/apache/sling/maven-sling-plugin/2.0.5-SNAPSHOT/maven-metadata.xml -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n\n(obviously, <reponame> and <url> have been subbed in here for the actual values)\n\nI'm using plain text passwords in ~/.m2/settings.xml.\n"
    ],
    [
        "MNG-4372",
        "MNG-2390",
        "Unable to determine the release version on parallel execution We are building maven projects from Hudson with several workers.\n\nWhen two projects with the same parent (with version set to RELEASE) are built at the exact same time then both fail with:\n[INFO] Failed to resolve artifact.\n\nGroupId: com.***\nArtifactId: ***\nVersion: RELEASE\n\nReason: Unable to determine the release version\n\n  ***:pom:RELEASE\n-----------------------------\n\nKnown workarounds:\n- Start some seconds apart\n- Using explicit version instead of RELEASE\n\nIt's not 100% reproducible but happens often enough to be annoying. When we had a larger number of projects using RELEASE this happened quite often.\n\nI will try to catch it in DEBUG mode, although this seems to affected the timing of the access.",
        "FAQ about why there are no dependency properties, and document how to use an artifact filter instead see: http://mail-archives.apache.org/mod_mbox/maven-users/200511.mbox/%3C84fb18c70511200619u635d1e8ax46ec8a5691819d8a@mail.gmail.com%3E\n(whole thread)"
    ],
    [
        "MNG-4568",
        "MNG-2763",
        "maven-embedder 3.0-alpha-6 doesn't contain the MavenEmbedder class The jar has no class named MavenEmbedder. In fact the whole 'embed' package used to be 3.0-alpha-2 is gone.\n",
        "Fix it0051 in trunk This is a Plexus/ClassWorlds problem causing the JavaDoc plugin to fail."
    ],
    [
        "MNG-4353",
        "MNG-5728",
        "[regression] Plugin dependencies are not downloaded from repos given in the plugin's POM While trying to build Hudson with trunk:\n{noformat}\n[ERROR] Unresolveable build extensions: Missing:\n----------\n1) javanettasks:javanettasks:jar:1.0.12\n\n  Path to dependency:\n        1) org.jvnet.hudson.tools:maven-hpi-plugin:maven-plugin:1.14\n        2) javanettasks:javanettasks:jar:1.0.12\n\n----------\n1 required artifact is missing.\n\nfor artifact:\n  org.jvnet.hudson.tools:maven-hpi-plugin:maven-plugin:1.14\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2, releases=true, snapshots=false),\n  java.net2 (http://download.java.net/maven/2, releases=true, snapshots=false)\n @ net.fredjean.ws7:ws7:1.0-SNAPSHOT (M:\\hudson\\plugins\\ws7\\pom.xml)\n{noformat}\nThe artifact [javanettasks:javanettasks:jar:1.0.12|http://download.java.net/maven/1/javanettasks/jars/javanettasks-1.0.12.jar] is available from {{java.net}} as specified in the POM of [maven-hpi-plugin-1.14|http://download.java.net/maven/2/org/jvnet/hudson/tools/maven-hpi-plugin/1.14/maven-hpi-plugin-1.14.pom].",
        "Switch the default checksum policy from \"warn\" to \"fail\" The default checksum policy when obtaining artifacts during a build is currently, by default, \"warn\". This seems a bit odd for me since a checksum is usually used to prevent the use of corrupted data.\n\nSince Maven produces a lot of output (and some IDEs sometimes hide it), it is easy to miss a bad checksum warning. I am aware that there is a checksumPolicy setting in Maven, but, unless I am mistaken, it cannot be defined for all repositories at once. It has to be done either on a per-repository basis or by using the \"strict-checksum\" flag in the command line.\n\nAfter searching around a bit on the Web and with the help of a coworker, we discovered that the default \"warn\" setting was mainly there because some repositories were not handling checksums quite well. Issue MNG-339 contains some information about this.\n\nMy colleague also chatted briefly with \"trygvis\" on IRC. Apparently, the default \"warn\" setting is really there for historical reasons.\n\nI believe that a default value of \"fail\" would greatly reduce the likelihood of errors and also slightly increase the security of Maven. Corrupted artifacts should not, by default, be used for builds."
    ],
    [
        "MNG-5030",
        "MNG-1323",
        "Provide a way to get a raw <configuration> XML for plugin to read As a plugin author I may need to read its *{{<configuration>}}* slightly different than Maven does it. It would be very nice to get a raw XML as an alternative to standard fields injection.",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-135",
        "MNG-2939",
        "Snapshot usage improved to allow a single jar:install Snapshot JAR usage has slipped into slighly inconsistent usage and we want to align the usage of <currentVersion/> in the top-level portion of the POM with the <version/> in a dependency.\n\nHaving the situation where we have:\n\n1.1-SNAPSHOT as the currentVersion and SNAPSHOT in a dependency which refers to the same artifact is probably bad. Aligning these will allow a simplification of tools and the first candidate is the jar:install. The standard jar:install will work. But a few plugins like the release plugin will need to be taught about the new format.",
        "${basedir isn't well interpolated in properties files If you have ${basedir} in a properties file, it is interpolated to a directory path like C:\\mypath\\myproject instead of C\\:\\\\mypathmyproject"
    ],
    [
        "MNG-87",
        "MNG-4542",
        "m2 fails build with jdk 1.5.0 mboot.jar will fail to compile maven-core-it-verifier with jdk 1.5.0 as it depends on the Xalan classes included in the jdk 1.4 runtime. In jdk 1.5.0 these classes have been moved to Sun internal packages.",
        "StringSearchModelInterpolator concurrency problem StringSearchModelInterpolator contains several unsafe accesses to shared data structures that will fail in *any* concurrent maven implementation. \n\nAdditionally StringSearchModelInterpolatorTest from the 2.2.X code base has not been migrated to 3.x."
    ],
    [
        "MNG-3782",
        "MNG-905",
        "Variable substition not performed in transitive dependency using value from active profile When invoking the 'mvn compile' command and a profile is active, defined in settings.xml, a variable substitution is not performed in a transitive dependency. \n\nIn the example provided the project to be built, C, depends on B which in its turn depends on A. The versions of B and A to be used are defined in a profile, the POM-files defines a variable indicating the versions. The profile in question is defined in the settings.xml and is always active (check with command 'mvn help:active-profiles'). The results of project A and B are successfully built and installed in the local repository. \n\nInvoking a build for project C using a command line parameter indicating, 'mvn compile -Dparentversion=0.0.1-SNAPSHOT, the versions render a successful build. The transitive dependency is resolved correctly. \n\nThis problem is also visible in Eclipse, m2eclipse, as the project C in the example provided, does not build (error indication). The example provided includes Eclipse projects displaying this (version 0.9.7.20081001-2217 of the Eclipse plugin is used). \n\nThe settings.xml and a build log are provided as attachments to this issue. ",
        "review clean repo install of m2 for download trimming we've got some cruft:\n- old junit\n- logging\n- non default provider implementations (eclipse compiler)\n\nThese should be trimmed so a clean repo install is very quick and painless."
    ],
    [
        "MNG-2252",
        "MNG-3589",
        "Upgrade to plexus-utils 1.3 When ready, upgrade to plexus-utils 1.3\nThis issue is just a placeholder for other ones to depend on",
        "multi level multi module build with cyclic references does not work Our main project consists of 3 multi modules projects m1, m2 and m3\n\nm1 is a multi module project which contains again several projects.\nThere is a cyclic reference in m1 (only for test cases) which we solved with the dependency tag <scope>test</scope>:\nA --> B --> only for test cases C --> A\nIf we build m1 separately it works.\nIf  we want to build our main project it aborts with \"The projects in the reactor contain a cyclic reference\" with the cycle shown above."
    ],
    [
        "MNG-1271",
        "MNG-5156",
        "Maven 2 needs to give a warning when it is being run in a Maven 1 project and there isn't a pom.xml file I was installing Maven 2 per the Installation Instructions and after running mvn --version and seeing 2.0 I decided to \"try it out\" - now realize I am a build/release guy, *not* a java coder so I'm coming from this as a complete newbie.\n\nSo, happy that Maven 2 was installed I went over to the working directory for our Maven 1 project and typed \"mvn compile\" and after a couple minutes of some downloading I get the following:\n\n[ERROR] BUILD ERROR\n...\n[INFO] Cannot execute mojo: resources. It requires a project, but the build is not using one.\n...\n[INFO] For more information, run Maven with the -e switch\n\nok, hmm, I'm thinking \"well, I *see* project.xml - what the heck does it want\" but I run mvn -e compile to be safe.  That spews a nice stack trace (and if I was a java guy it would probably make sense) but still nothing says \"hey fool - this is Maven *2* - you need a pom.xml file not that so-last-decade project.xml file!\"\n\nanywho - sorry for the long winded report - can you change the INFO message to mention pom.xml?\n\n",
        "org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator doesn't take into account direct vs. transitive dependencies When calculating the scope of a dependency, Maven should assign to direct dependencies higher priority than transitive dependencies.\n\nFor example:\n\ncom.acme:root:jar:1.0.0\n+- com.acme:test-framework:jar:1.0.0:test                 <<<<<<<<<<<<< direct dependency\n\\- com.acme:another-module:jar:1.0.0:compile\n   \\- com.acme:test-framework:jar:1.0.0:compile           <<<<<<<<<<<<< transitive dependency\n\nWe can see that the 'root' project references test-framework directly with scope 'test'. However, the same test-framework also has a 'compile' scope, but via a transitive dependency. I believe that the final scope should be 'test' -- that's the explicit desire of the author of project 'root'.\n\nHowever, when I do roughly the following:\n\n   ProjectBuilder projectBuilder = plexusContainer.lookup(ProjectBuilder.class);\n   ProjectBuildingRequest projectBuildingRequest = ....;\n   projectBuildingRequest.setResolveDependencies(true);\n   ...\n   ProjectBuildingResult result = projectBuilder.build(pom, projectBuildingRequest);\n   MavenProject proj = result.getProject();\n   ...\n   Set<Artifact> artifacts = proj.getArtifacts();\n\nThe 'test-framework' Artifact has a scope of 'compile'!!! (I will provide more code, if you'd like.)\n\nAfter some debugging to find out the reason for this, I reached class org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator. There, in method chooseEffectiveScope, there's the following code:\n\n        else if ( scopes.contains( JavaScopes.COMPILE ) )\n        {\n            effectiveScope = JavaScopes.COMPILE;\n        }\n\nSo, no attention is paid whether the dependency is direct or transitive. If there's *any* dependency with scope 'compile', then the conflict is resolved by setting the final scope to 'compile'. But, as I said above, I believe the final scope should be 'test'.\n\nHere's a relevant stack trace:\n\nJavaEffectiveScopeCalculator.chooseEffectiveScope(Set<String>) line: 220\t\nJavaEffectiveScopeCalculator.resolve(ConflictGroup, Map<?,?>, Set<?>) line: 139\t\nJavaEffectiveScopeCalculator.transformGraph(DependencyNode, DependencyGraphTransformationContext) line: 92\t\nChainedDependencyGraphTransformer.transformGraph(DependencyNode, DependencyGraphTransformationContext) line: 75\t\nDefaultDependencyCollector.collectDependencies(RepositorySystemSession, CollectRequest) line: 253\t\nDefaultRepositorySystem.collectDependencies(RepositorySystemSession, CollectRequest) line: 345\t\nDefaultProjectDependenciesResolver.resolve(DependencyResolutionRequest) line: 131\t\nDefaultProjectBuilder.build(File, ModelSource, DefaultProjectBuilder$InternalConfig) line: 166\t\nDefaultProjectBuilder.build(ModelSource, ProjectBuildingRequest) line: 108\t\n.\n.\n.\n\nBy the way, the Dependency Plugin reports this:\n\n...\n+- com.acme:test-framework:jar:1.0.0:test (scope not updated to compile)\n\nThe plugin resolves the conflict properly! The scope remains 'test', it's not set to 'compile'.\n\nI detected this problem with versions 3.0.3 and 3.0.2. It might be present in other versions too but I didn't bother to check any more versions."
    ],
    [
        "MNG-5770",
        "MNG-5305",
        "mvn can't find Oracle jdk8 on mac Line 85\n  export JAVA_HOME=/usr/libexec/java_home\n\nshould be changed to \n  export JAVA_HOME=`/usr/libexec/java_home`",
        "Deprecate relativePath The concept of relativePath is alien to the overall Maven design of having project directory that only depends on entities in the repositories. With relative-paths the build might yield to different results depending on were a project folder is located in the local filesystem.\n\nThe parent POM resolution was changed in Maven 3. Because of this explicit relativePaths need to be specified  more often for reactor builds to be built in the correct order. The reason for this (according to Maven 3.x compatibility note) is to improve consistency: \"In Maven 2, building the child project in isolation could fail while the reactor build would succeed to resolve the parent.\". However this behaviour is inconsistent with the resolution of the other dependencies, in fact the above is true for any Maven version when a dependency that is part of the reactor is not available in a suitable versions in the repository: in this case the build of the individual project fails while the build of the whole reactor succeeds.\n\nBecause of this relativePath should be marked as deprecated and the parent should be treated like a dependency when computing the build order of reactor projects."
    ],
    [
        "MNG-2069",
        "MNG-4009",
        "Output more information in error message (issue redirected to Embedded component by Eugene Kuleshov, see http://jira.codehaus.org/browse/MNGECLIPSE-73?page=all)\nI keep getting the following error message over and over again:\n\n2/12/06 4:00:10 PM CET: Reading /LF/pom.xml\n2/12/06 4:00:17 PM CET: [WARN] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n2/12/06 4:00:17 PM CET: Unable to download the artifact from any repository\n\nand I don't know what is causing it. It would really help out if the error/warning message provided was more informative.\nHence, what resource is it trying to get?\n\nBelow is the the output with debug turned on:\n\n2/12/06 4:46:24 PM CET: [DEBUG] xml-apis:xml-apis:jar:1.0.b2 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] com.ibm.icu:icu4j:jar:2.6.1 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] xerces:xmlParserAPIs:jar:2.6.1 (removed - nearer found: 2.6.2)\n2/12/06 4:46:24 PM CET: [DEBUG] xerces:xmlParserAPIs:jar:2.6.2 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] xerces:xercesImpl:jar:2.2.1 (removed - nearer found: 2.6.2)\n2/12/06 4:46:24 PM CET: [DEBUG] xerces:xercesImpl:jar:2.6.2 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] junit:junit:jar:3.8.1 (selected for test)\n2/12/06 4:46:24 PM CET: [DEBUG] se.stickybit.lf:lf-test-license:jar:0.1 (selected for system)\n2/12/06 4:46:24 PM CET: [DEBUG] xmlbeans:xbean:jar:2.1.0 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] xsdlib:xsdlib:jar:20030225 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] xmlbeans:xmlpublic:jar:2.1.0 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] dom4j:dom4j:jar:1.6.1 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] stax:stax-api:jar:1.0 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] pull-parser:pull-parser:jar:2 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] jaxme:jaxme-api:jar:0.3 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] dom4j:dom4j:jar:1.5.2 (removed - causes a cycle in the graph)\n2/12/06 4:46:24 PM CET: [DEBUG] jaxen:jaxen:jar:1.1-beta-6 (removed - nearer found: 1.1-beta-8)\n2/12/06 4:46:24 PM CET: [DEBUG] While downloading xml-apis:xml-apis:2.0.2\nThis artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n2/12/06 4:46:24 PM CET: [DEBUG] xml-apis:xml-apis:jar:1.0.b2 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] msv:xsdlib:jar:20030807 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] xpp3:xpp3:jar:1.1.3.3 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] msv:relaxngDatatype:jar:20030807 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] log4j:log4j:jar:1.2.9 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] xmlbeans:xbean_xpath:jar:2.1.0 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] msv:msv:jar:20050913 (selected for compile)\n2/12/06 4:46:24 PM CET: [DEBUG] Found 0 components to load on start\n2/12/06 4:46:24 PM CET: [DEBUG] Building Maven user-level plugin registry from: '/home/jimisola/.m2/plugin-registry.xml'\n2/12/06 4:46:24 PM CET: [DEBUG] Trying repository central\n2/12/06 4:46:35 PM CET: [WARN] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n2/12/06 4:46:35 PM CET: Unable to download the artifact from any repository\n\n2/12/06 4:46:35 PM CET: [DEBUG] Found 0 components to load on start\n2/12/06 4:46:35 PM CET: [DEBUG] Building Maven user-level plugin registry from: '/home/jimisola/.m2/plugin-registry.xml'\n2/12/06 4:46:35 PM CET: [DEBUG] Found 0 components to load on start\n2/12/06 4:46:35 PM CET: [DEBUG] Building Maven user-level plugin registry from: '/home/jimisola/.m2/plugin-registry.xml'\n2/12/06 4:46:35 PM CET: [DEBUG] Trying repository central\n2/12/06 4:46:36 PM CET: [WARN] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n2/12/06 4:46:36 PM CET: Unable to download the artifact from any repository",
        "[regression] Effects of active profiles from parent are not inherited by children. Parent POM snippet:\n{code:xml}\n<profiles>\n  <profile>\n    <id>parent-profile</id>\n    <properties>\n      <!-- our children should see this, too -->\n      <parentProfileProperty>PASSED</parentProfileProperty>\n    </properties>\n  </profile>\n</profiles>\n{code}\nThe effective child POM is missing the property parentProfileProperty although the profile \"parent-profile\" has been activated from CLI."
    ],
    [
        "MNG-4226",
        "MNG-4883",
        "Better detection of JAVA_HOME on Apple Mac OS X On mac JAVA_HOME is detected by using the following code:\n{code}\n           if [ -z \"$JAVA_VERSION\" ] ; then\n             JAVA_VERSION=\"CurrentJDK\"\n           else\n             echo \"Using Java version: $JAVA_VERSION\"\n           fi\n           if [ -z \"$JAVA_HOME\" ] ; then\n             JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/${JAVA_VERSION}/Home\n           fi\n{code}\n\nBut this does not work in collaboration with Using \"Java preferences\" to change the actual java version to use as \"CurrentJDK\" does not change once you update the \"java applications\" order.\n\nThere is an alternative (at least on Leopard) for determining current java home that is based on Java Preferences by using an apple provided script. So, as a replacement fo rthe code above the following could be used.\n{code}\n           if [ -z \"$JAVA_HOME\" ] ; then\n             JAVA_HOME=`/usr/libexec/java_home | tail -1`\n           fi\n{code}\nCould also be taht this is teh first attempt and if fails use the current way of determining home.",
        "[regression] Dependency resolution does not fail for artifact with over-constrained version ranges The sample project shows a usage of build ranges that should result in a build failure when you try to build project D.\n\nBecause project D transitively depends on two different versions of project A 1.0 and 1.1.\nThese versions are called out absolutely (using ranges) hence maven should not be able to build the project.\n\nThis fails correctly in maven 2.2.1\nHowever the project builds successfully in maven 3.0\n\nMaven 3.0 should also fail to build.\n\nNote: I have included two copies of the pom file for project A so that you can build both of them without needing to edit the version.\nBuild order is: A-1.0, A-1.1, B, C, D\n"
    ],
    [
        "MNG-1323",
        "MNG-539",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n",
        "Error running test when the output directory is not 'target' Before I realized that output directory elements are optional, I used 'build' as the name, which somehow makes surefire think that there is no test to run.  After struggling with it thinking it is something else I need to do, I accidently deleted it and it works.\n\nYou can check out our open source project dbfixture (http://gforge.public.thoughtworks.org/projects/dbfixture/) if you want to reproduce it.  But in a nut shell:\n\nThis works:\n...\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <testResources>\n      <testResource>\n        <directory>test</directory>\n        <includes>\n          <include>**/*.txt</include>\n        </includes>\n      </testResource>\n    </testResources>\n  </build> \n...\nand this doesn't\n...\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <testResources>\n      <testResource>\n        <directory>test</directory>\n        <includes>\n          <include>**/*.txt</include>\n        </includes>\n      </testResource>\n    </testResources>\n   If uncommented, the test will show no test to run\n    <directory>build</directory>\n    <outputDirectory>build/classes</outputDirectory>\n    <testOutputDirectory>build/test-classes</testOutputDirectory>\n  </build> \n...\n"
    ],
    [
        "MNG-1992",
        "MNG-5713",
        "CLI -D should override properties in settings.xml I have a mojo that takes a parameter as an expression, simple boolean. If I set it to true in my settings.xml, setting it to false with -D doesn't have any effect. The CLI should have the final say.",
        "Improve Toolchains API description "
    ],
    [
        "MNG-941",
        "MNG-3139",
        "Deletion of ~/.m2 directory prevents (re)creation of plugin-registry.xml file with java.io.FileNotFoundException Deletion of ~/.m2 directory prevents (re)creation of plugin-registry.xml file with java.io.FileNotFoundException\nRecreating ~/.m2 directory enabled plugin-registry.xml to be properly created by m2\n\nOutput\n\nRunning Maven2 with CLI options: -X -e install\nRunning Maven2 with JVM options: -Dorg.apache.maven.global-settings=D:\\Aelitis\\tools\\abs\\conf\\maven-global-settings.xml\n-Dmaven.repo.local=D:\\Aelitis\\repository\n+ Error stacktraces are turned on.\n[DEBUG] Building Maven global-level plugin registry from: 'D:\\Aelitis\\tools\\maven-2.0-beta-1\\conf\\plugin-registry.xml'\n[DEBUG] Building Maven user-level plugin registry from: 'D:\\profiles\\AllenJ4\\.m2\\plugin-registry.xml'\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Aelitis root project\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] maven-install-plugin: resolved to version 2.0-beta-1 from repository central\nFATAL ERROR: Error executing Maven for a project\nError stacktrace:\norg.apache.maven.reactor.ReactorException: Error executing project within the reactor\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:242)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:302)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\n<snip/>\n\nCaused by: java.io.FileNotFoundException: D:\\profiles\\AllenJ4\\.m2\\plugin-registry.xml (The system cannot find the path specified)\n        at java.io.FileOutputStream.open(Native Method)\n        at java.io.FileOutputStream.<init>(FileOutputStream.java:179)\n        at java.io.FileOutputStream.<init>(FileOutputStream.java:131)\n\n\n",
        "The skin does not exist: Unable to determine the release version hi I have problem generating site when im using the command mvn site\n\nit performs all stagegs and when it came to site generation the message is shown :\n\nThe skin does not exist: Unable to determine the release version\n\nTry downloading the file manually from the project website.\n\nThen, install it using the command:\n    mvn install:install-file -DgroupId=org.apache.maven.skins -DartifactId=maven\n-default-skin \\\n        -Dversion=RELEASE -Dpackaging=jar -Dfile=/path/to/file\n\n\n  org.apache.maven.skins:maven-default-skin:jar:RELEASE\n\ndo u have an idea what is the problem ?\n\np.s the jar is registered in my local repository and in the remote repository \n\nthank u "
    ],
    [
        "MNG-545",
        "MNG-5872",
        "M2 / xdoc / attribute of xhtml tags are filtered => so can't use all xhtml features. in xdocs\n\nin a <p> tag : the class and the id attributes are filtered. So can't use special css styles.\n\nin a <a> tag : target and title attributes are filtered (but not the href ....).  so can't use full features of <a> (I did not try the img attribute, etc....)\n\n=> xhtml in xdocs should be rendered as much as it is written in the xdoc file.\n\n(other problem related : <br/> tag is transformed in \"<br><br/>\", so put a double line in most browser... (a jira issue is yet open for M1).\n",
        "Maven results are wrong after rerun test cases by RetryListeners I am getting wrong result count after re-run the failed test case using RetryListener. \r\n\r\nEnvironment details:\r\n\r\nJava,\r\nSelenium with TestNG\r\nChrome browser\r\nMaven mode execution\r\nTotal Running Test case : 1\r\n\r\nSimulation:\r\n\r\n1. Have added Listener class in TestNG and running test case using maven\r\n\r\n        <listeners> \r\n           <listener class-name=\"<Package>.RetryListener\" /> \r\n        </listeners> \r\n\r\n2. Made test case failed and it invoked failed test case and 2nd time, it got passed. The results would be as follows;\r\n\r\nExpected Results ==> Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 (Correct) \r\n\r\nActual Results ==> Tests run: 2, Failures: 0, Errors: 0, Skipped: 0 (Wrong)\r\n\r\nI've used below classes for Listeners and calling RetryListener class from TestNG.xml and executing them from Maven mode.\r\n\r\nIRetryAnalyzer class:\r\n\r\npublic class RetryAnalyzer implements IRetryAnalyzer {\r\n\r\n\tprivate int retryCount = 0;\r\n\tprivate int retryMaxCount = 1;\r\n\t\r\n\tpublic RetryAnalyzer() {\r\n\t\tsetCount(retryMaxCount);\r\n\t}\r\n\r\n\t @Override\r\n\t  public boolean retry(ITestResult result) {\r\n\t    if (!result.isSuccess()) {\r\n\t      if (retryCount < retryMaxCount) {\r\n\t    \t  retryCount++;\r\n\t        result.setStatus(ITestResult.SUCCESS);\r\n\t        String message = Thread.currentThread().getName() + \": Error in \" + result.getName() + \" Retrying \"\r\n\t            + (retryMaxCount + 1 - retryCount) + \" more time(s)\";\r\n\t        System.out.println(message);\r\n\t        Reporter.log(message);\r\n\t        return true;\r\n\t      } else {\r\n\t        result.setStatus(ITestResult.FAILURE);\r\n\t      }\r\n\t    }\r\n\t    return false;\r\n\t  }\r\n\t\r\n\tpublic void setCount(int count) {\r\n\t\tretryMaxCount = count;\r\n\t}\r\n\r\n\r\nRetryLister Class:\r\n\r\npublic class RetryListener implements IAnnotationTransformer {\r\n\r\n\t@SuppressWarnings(\"rawtypes\")\r\n\t@Override\r\n\tpublic void transform(ITestAnnotation arg0, Class arg1, Constructor arg2,\r\n\t\t\tMethod arg3) {\r\n\t\tIRetryAnalyzer retry = arg0.getRetryAnalyzer();\r\n\t\tif (retry == null) {\r\n\t\t\targ0.setRetryAnalyzer(RetryAnalyzer.class);\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tpublic void onFinish(ITestContext context) {\r\n\t     Iterator<ITestResult> failedTestCases =context.getFailedTests().getAllResults().iterator();\r\n\t    while (failedTestCases.hasNext()) {\r\n\t        System.out.println(\"failedTestCases\");\r\n\t        ITestResult failedTestCase = failedTestCases.next();\r\n\t        ITestNGMethod method = failedTestCase.getMethod();\r\n\t        if (context.getFailedTests().getResults(method).size() > 1) {\r\n\t            System.out.println(\"failed test case remove as dup:\" + failedTestCase.getTestClass().toString());\r\n\t            failedTestCases.remove();\r\n\t        } else {\r\n\r\n\t            if (context.getPassedTests().getResults(method).size() > 0) {\r\n\t                System.out.println(\"failed test case remove as pass retry:\" + failedTestCase.getTestClass().toString());\r\n\t                failedTestCases.remove();\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t   }\r\n\r\n"
    ],
    [
        "MNG-5039",
        "MNG-3383",
        "Maven does not properly track class files to be included in jar/test breaking incremental build When files in the source tree (either src/main or src/test) are renamed or removed, the class files resulting from their prior compilation remain in the corresponding target/ directories.  It seems that surefire and package plugins simply grab everything from target/ and as a result, incremental builds are not correct.  For example,\n\n* If you remove a test source file and the test will continue to run. This is bad esp when the test is failing; packaging will fail even though it should not.\n* If you remove/rename a source file and the class file will continue to be in the jar.  This may cause tests to succeed even though they should not.  (And if you share the jar, this will affect downstream non-test dependencies.)\n\nI wrote up a test suite for the second case and put it up at https://github.com/sit/java-build-test. To run it ...\n\n   git clone git://github.com/sit/java-build-test.git\n   cd java-build-test\n   sh runme.sh\n\n(It does rely on git to automate the rename/delete actions though so a tar of the sources won't work.)\nIn addition to Maven, it tests Gradle (which works) and Buildr (which behaves the same as Maven).\n\nWhile incremental builds are not the recommendation for official deliverables, this does make Maven appear extremely unreliable to developers who never know after syncing whether they will have to do a clean build or if an incremental one is correct.",
        "Downloaded plugin dependencies influence project dependencies Currently, a plugin may define additional pluginRepositories, which are used to resolve dependencies of that plugin.\n\nThis leads to the fact that a plugin might resolve a dependency which would normally not be available to the project.\n\nWhen it does that, it seems to write a metadata-central (although on the central repo this artifact does not exist) and thus, the project will use that dependency, too.\n\nHow to reproduce:\n1. remove xstream from local repo:\n{code}rm -Rf ~/.m2/repository/com/thoughtworks/xstream{code}\n2. run mvn clean install on the attached pom.xml\n-> the build should fail because the version 1.3.0-SNAPSHOT is not available at repo1.maven.org\n3. edit the pom.xml, uncomment the plugin definition (jspc used for demonstration purposes only)\n3. run mvn clean install again\n-> the build succeeds and the 1.3.0-SNAPSHOT is being built into the artifact, which is wrong."
    ],
    [
        "MNG-3640",
        "MNG-2747",
        "CLI cannot deactivate a profile that's activated in POM via <activeByDefault> Consider the following POM:\n{noformat}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>test</groupId>\n  <artifactId>test</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>test</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <profiles>\n    <profile>\n      <id>yuck</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>no-such-plugin</groupId>\n            <artifactId>just-to-cause-error</artifactId>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n{noformat}\n\nI'd like to deactivate the \"yuck\" profile that kicks in by default. I cannot do this even if I run \"mvn -P -yuck\".\n\nThis is because the DefaultProfileManager.getActiveProfiles() is implemented as follows:\n{noformat}\n    public List getActiveProfiles()\n        throws ProfileActivationException\n    {\n        List activeFromPom = new ArrayList();\n        List activeExternal = new ArrayList();\n\n        for ( Iterator it = profilesById.entrySet().iterator(); it.hasNext(); )\n        {\n            Map.Entry entry = (Entry) it.next();\n\n            String profileId = (String) entry.getKey();\n            Profile profile = (Profile) entry.getValue();\n\n            boolean shouldAdd = false;\n            if ( activatedIds.contains( profileId ) )\n            {\n                shouldAdd = true;\n            }\n            else if ( !deactivatedIds.contains( profileId ) && isActive( profile ) )\n            {\n                shouldAdd = true;\n            }\n\n            if ( shouldAdd )\n            {\n                if ( \"pom\".equals( profile.getSource() ) )\n                {\n                    activeFromPom.add( profile );\n                }\n                else\n                {\n                    activeExternal.add( profile );\n                }\n            }\n        }\n\n        if ( activeFromPom.isEmpty() )\n        {\n            for ( Iterator it = defaultIds.iterator(); it.hasNext(); )\n            {\n                String profileId = (String) it.next();\n\n                Profile profile = (Profile) profilesById.get( profileId );\n\n                activeFromPom.add( profile );\n            }\n        }\n\n        List allActive = new ArrayList( activeFromPom.size() + activeExternal.size() );\n\n        allActive.addAll( activeExternal );\n        allActive.addAll( activeFromPom );\n\n        return allActive;\n    }\n{noformat}\n\n... and therefore the {{defaultIds}} set (which contains \"yuck\") is considered active, even if {{deactivatedIds}} contain them. The fix should be obvious by now.",
        "Maven doesn't detect invalid dependency descriptions in the pom Maven doesn't detect that the following pom snippet is not valid:\n\n[...]\n<dependencies>\n    <groupId>jdom</groupId>\n    <artifactId>jdom</artifactId>\n    <version>1.0</version>\t  \n</dependencies>\n[...]\n\nif 'mvn compile' is run on the included test project, this is what happens:\n\ntik@tweety:~/Develop/testpom$ mvn compile\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building testproject\n[INFO]    task-segment: [compile]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:compile]\nCompiling 1 source file to /home/tik/Develop/testpom/target/classes\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Compilation failure\n\n/home/tik/Develop/testpom/src/main/java/TestClass.java:[1,16] package org.jdom does not exist\n\n/home/tik/Develop/testpom/src/main/java/TestClass.java:[5,12] cannot find symbol\nsymbol  : class Element\nlocation: class TestClass\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Mon Jan 08 19:23:14 CET 2007\n[INFO] Final Memory: 3M/8M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-1011",
        "MNG-58",
        "<defaultGoal> doesn't work added the following to pom.xml:\n\n  <build>\n    <defaultGoal>install</defaultGoal>\n  </build>\n\nOn command line, type: m2\n\nError: \nYou must specify at least one goal. Try 'install'\n\nusage: maven [options] [goal [goal2 [goal3] ...]]\n\n...",
        "Fix the xpp3 parser to deal with entities correctly The xpp3 parser we're using doesn't deal with entities very well so we've chatted with the author and he's given us the rundown on what we need to do in order to fix the problems. Another alternative is to use another implementation of an xmlpull parser which deals with entities correctly like the stax implementation @ codehaus."
    ],
    [
        "MNG-2186",
        "MNG-894",
        "POM interpolation problem in maven-2.0.3 my maven-2.0.3 shows ${project.build.directory}=target.  Instead of the fullpath\nthis surely breaks the reactor build/test.\n \nhere is an example pom\n\n<?xml version=\"1.0\"?>\n<project>\n\n  <modelVersion>4.0.0</modelVersion>\n  \n  <!--\n  <parent>\n    <groupId>test</groupId>\n    <artifactId>parent</artifactId>\n    <version>1.0-SNAPSHOT</version> \n  </parent>\n  -->\n  <packaging>jar</packaging>\n  <groupId>test</groupId>\n  <artifactId>child</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  \n  <name>child</name>\n    \n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-antrun-plugin</artifactId>\n        <executions>\n          <execution> \n            <id>echo</id>\n            <phase>generate-sources</phase>\n            <goals>\n              <goal>run</goal> \n            </goals>\n            <configuration> \n              <tasks>\n                <echo>project.build.directory:${project.build.directory}</echo>\n              </tasks>\n            </configuration>\n          </execution> \n        </executions>\n      </plugin>\n    </plugins>    \n\n  </build>\n\n</project>\n\nCarlos also comfirmed\n\nConfirmed :(\n\n2.0.3 = project.build.directory:target\n2.0.2 = project.build.directory:C:\\Documents and\nSettings\\csanchez\\Local Settings\\Temp\\target\n\n\n\n",
        "Add task-oriented mini-HOWTO's to Maven 2.0 documentation See http://www.biojava.org/docs/bj_in_anger/index.htm for an example of this. It's a sort of hybrid between FAQ and HOW-TO, and would be really useful for beginners. As the complexity of m2 increases, we need to seriously consider helping people bootstrap into using m2."
    ],
    [
        "MNG-57",
        "MNG-129",
        "Convert CI process over to using the new mboot.jar bootstrap ",
        "generic install technique m2 -r jar:install in plexus, for example, doesn't work because of the lack of poms in the local repository.\n\nm2 -r install should be finished after the lifecycle stuff to ensure this works.\n\nThe unified source directory will also help here."
    ],
    [
        "MNG-2026",
        "MNG-4509",
        "Document how parent-child POM relationships, <modules/>, and <parent><relativePath/> works Create a document that will describe how POMs can be related to one another in a multimodule build. Specifically, document:\n\n* The parent-child relationship - how is this manifest in the POMs\n* How does the <modules/> section work\n* How does the <relativePath/> element of the <parent/> section work...and what is required in the <parent/> section?\n* How to install ONLY the parent POM for a multimodule setup (mvn -N pom.xml at the top level)\n* How to build an entire multimodule setup from one command (tie all of this together into a working example)\n\nRelated to this, but in another document, should be a list of things that are inherited (could be a link to somewhere else, if this documentation exists in other places). Also, the algorithm used to merge inherited and local POM sections should be in this other document.",
        " MAVEN_DEBUG_OPTS in mvnDebug.bat is set at the wrong place The current MAVEN_DEBUG_OPTS in mvnDebug.bat is set before setlocal, after it is run, all env vars set in the batch file continues to live in the command windows that calls mvnDebug.bat\n"
    ],
    [
        "MNG-2816",
        "MNG-4400",
        "Pom without xsd import is not validated I added a dependency to a module a couple of days ago. I did it just a tad too quickly (copy and paste from dependency management), and forgot to enclose with the dependency tag, i.e. I had the following structure:\n\n<dependencies>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-web</artifactId>\n</dependencies>\n\nSo - what happened when I did an \"mvn install\" the dependency was ignored rather than producing an error message as the pom was actually valid xml. It would be nice to have some defaulting of xsd if none was specified.",
        "[regression] Repository order from settings.xml is not respected during artifact resolution When 3.x resolves artifacts, the repositories from the settings.xml are not tried in their declaration order."
    ],
    [
        "MNG-5300",
        "MNG-3452",
        "404 HTML page downloaded into .m2/repository instead of considering resource as missing Sometimes when I use Maven when connected to the internet via a mobile phone maven doesn't process missing resources properly. Instead of considering a resource not found, all of the files (poms, jars etc) contain the HTML below. This basically pollutes my .m2/repository as the system thinks certain resources are there where in fact they only contain this error message as content. It only happens when I use my mobile phone to connect to the internet, not when I'm connected otherwise.\n\nAll other applications work fine over the mobile phone connection, only maven acts up like this. Is there any way to get around this?\n\n{code:xml}<?xml version=\"1.0\"?>\n<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.0//EN\" \n  \"http://www.wapforum.org/DTD/xhtml-mobile10.dtd\" >\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head>\n        <title>* Error *</title>\n        <!-- \n            Change href=\"style.css\" below to the file name and\n            relative path or URL of your external style sheet.\n          --> \n        <!-- \n        <link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\"/>\n        <style> document-wide styles would go here </style>\n        -->\n    </head>\n    <body>\n        <h1>Sorry</h1>\n\t\t<ul>\n\t\t    The requested item could not be found!<br/>(Status Code: 404)\n\t\t</ul>\t    \n\t</body>\n</html>{code}",
        "StackOverflowError building Apache ServiceMix 3 Maven 2.1-SNAPSHOT fail on building ServiceMix projects. Steps to reproduce:\n\n* Checkout https://svn.apache.org/repos/asf/servicemix/smx3/trunk \n* Run mvn install\n\nThis works with maven 2.0.8 but fails with the following exception with recent 2.1-SNAPSHOT"
    ],
    [
        "MNG-4722",
        "MNG-2299",
        "Maven does not validate <scope> values <scope>xx</scope> does not generate an error. IMO it should.",
        "org.apache.maven.it.Verifier.loadProperties(..) does not close FileInputStream (relies upon finalizer being called) The loadProperties(..) method in the Verifier class needs to close the FileInputStream.\n\nSee attached patch."
    ],
    [
        "MNG-4827",
        "MNG-3983",
        "warnings at the start of the build are easily missed I regularly forget that there are a bunch of warnings at the start of the build still to fix.\n\nIt would be helpful if there were a strict mode I could enable that turned these warnings into failures. This mode should be off by default, but able to be turned on by default (through a property that can be set somewhere permanent like MAVEN_OPTS or a parent project, or by an enforcer rule that can re-check them?)\n\nIf that's not desired (or not enabled), an alternative might be to repeat the number of warnings at the end, and refer the user to the build output.",
        "Plugin Repositories Not Injected From Profile Plugin repositories are not being injected from an active profile."
    ],
    [
        "MNG-2677",
        "MNG-3391",
        "Plugin discovery not reactor aware Regression of MNG-870",
        "StackOverflowError in DefaultMavenProjectBuilder checkout https://svn.apache.org/repos/asf/servicemix/smx3/trunk and try to run a goail in samples/cxf-wsdl-first \nif you checkout only https://svn.apache.org/repos/asf/servicemix/smx3/trunk/samples/cxf-wsdl-first  there's no problem, so it must be something to do with the parents\n\nRevisions tested: 619946 and 609730\n\n$ mvn process-test-resources\n[WARNING] Deprecated expression: ${version} - missing prefix. Use ${pom.version} (model: org.apache.servicemix:servicemix:pom:3.3-SNAPSHOT)\n[INFO] Attempting to resolve a version for plugin: org.apache.servicemix.tooling:jbi-maven-plugin using meta-version: LATEST\n---------------------------------------------------\nconstituent[0]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/aspectjrt-1.5.3.jar\nconstituent[1]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/backport-util-concurrent-3.0.jar\nconstituent[2]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/commons-cli-1.0.jar\nconstituent[3]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/doxia-sink-api-1.0-alpha-9.jar\nconstituent[4]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/jsch-0.1.27.jar\nconstituent[5]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/jtidy-4aug2000r7-dev.jar\nconstituent[6]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-artifact-3.0-20080208.175410-49.jar\nconstituent[7]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-core-2.1-20080208.175921-35.jar\nconstituent[8]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-embedder-2.1-SNAPSHOT-sources.jar\nconstituent[9]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-embedder-2.1-SNAPSHOT.jar\nconstituent[10]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-lifecycle-2.1-20080208.175921-36.jar\nconstituent[11]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-model-2.1-20080208.175921-40.jar\nconstituent[12]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-plugin-api-2.1-20080208.175921-35.jar\nconstituent[13]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-profile-2.1-20080208.175921-37.jar\nconstituent[14]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-project-2.1-20080208.175921-38.jar\nconstituent[15]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-reporting-api-2.1-20080208.175921-19.jar\nconstituent[16]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/plexus-container-default-1.0-alpha-44.jar\nconstituent[17]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/plexus-interactivity-api-1.0-alpha-6.jar\nconstituent[18]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/plexus-utils-1.4.5.jar\nconstituent[19]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/retrotranslator-runtime-1.2.1.jar\nconstituent[20]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-file-1.0-beta-2.jar\nconstituent[21]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-http-lightweight-1.0-beta-2.jar\nconstituent[22]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-http-shared-1.0-beta-2.jar\nconstituent[23]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-provider-api-1.0-beta-2.jar\nconstituent[24]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-1.0-beta-2.jar\nconstituent[25]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-common-1.0-beta-2.jar\nconstituent[26]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-external-1.0-beta-2.jar\n---------------------------------------------------\nException in thread \"main\" java.lang.StackOverflowError\n        at java.lang.Character.toUpperCase(Character.java:4278)\n        at java.lang.String.regionMatches(String.java:1384)\n        at java.lang.String.equalsIgnoreCase(String.java:1120)\n        at sun.net.www.protocol.jar.Handler.parseURL(Handler.java:59)\n        at java.net.URL.<init>(URL.java:596)\n        at java.net.URL.<init>(URL.java:464)\n        at sun.misc.URLClassPath$JarLoader.checkResource(URLClassPath.java:671)\n        at sun.misc.URLClassPath$JarLoader.getResource(URLClassPath.java:756)\n        at sun.misc.URLClassPath$JarLoader.findResource(URLClassPath.java:732)\n        at sun.misc.URLClassPath.findResource(URLClassPath.java:145)\n        at java.net.URLClassLoader$2.run(URLClassLoader.java:362)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findResource(URLClassLoader.java:359)\n        at java.lang.ClassLoader.getResource(ClassLoader.java:977)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.getRealmResource(ClassRealm.java:179)\n        at org.codehaus.plexus.classworlds.strategy.DefaultStrategy.getResource(DefaultStrategy.java:94)\n        at org.codehaus.plexus.classworlds.strategy.ForeignStrategy.getResource(ForeignStrategy.java:53)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.getResource(ClassRealm.java:206)\n        at java.lang.Class.getResource(Class.java:2074)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.getSuperModel(DefaultMavenProjectBuilder.java:1395)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:630)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)"
    ],
    [
        "MNG-2211",
        "MNG-5691",
        "Windows installer Maven 2 should have a Windows installer like Maven 1. This could be an .exe or .msi. It should install Maven and set the appropriate environment variables.\n\nThere's an effort to provide plugins for generating installers at\n\nhttp://jira.codehaus.org/browse/MASSEMBLY-32?rc=1\n\nbut it appears to be stalled since December.",
        "Reopen MNG-1388 Please reopen MNG-1388. Plenty of valid reasons for doing so were given after the issue was closed. There is no known workaround and this is a major hurdle for projects that mix Java and native code."
    ],
    [
        "MNG-2656",
        "MNG-157",
        "Revised the Introduction to the POM Revise the Minimal POM\nDiscuss Project Inheritance further\nAdd Discussion about Project Aggregation",
        "java mojo extractor should search extended classes for annotations example: many of the mojo's have identical parameters in the modello plugin. They could all be declared on the abstract modello mojo instead."
    ],
    [
        "MNG-3563",
        "MNG-246",
        "Content of a property ending with .url gets overwritten with the content of <url></url> from the pom.xml If one creates a property e.g. named jdbc.url in a parent pom.xml and then refers to that property via ${jdbc.url} in a resource file of a subproject whose pom.xml is derived from the one that declares the jdbc.url property the content is overwritten with the content of the <url> tag during the filtering step.\n\nE.g.\n\ncom.example.project contains:\n<jdbc.url>jdbc:mysql://localhost:3306/TestDB</jdbc.url>\nin its pom.xml\n\ncom.example.subproject is derived from com.example.project and contains \nurl=\"${jdbc.url}\nin some db setup file and\n<url>http://maven.apache.org</url>\nin its pom.xml\n\nThe resulting content, after the filtering step, will be \"url=\"http://maven.apache.org\"\" instead of \"url=\"jdbc:mysql://localhost:3306/TestDB\"\".",
        "lifecycle initialised even when it won't be used the lifecycle executor processes all the lifecycle phases and mojos even if the tasks in question to be executed are not phases (eg clean:clean). This results in mojos resolving, which might mean deps being downloaded/snapshots updated/etc.\n"
    ],
    [
        "MNG-391",
        "MNG-4466",
        "Endless loop if a quote is missing in a @parameter expression I am working on the EAR plugin and I have this element:\n\n   /**\n     * The display-name element in generated <tt>application.xml</tt>.\n     *\n     * @parameter expression=\"${maven.ear.displayname}\n     * @required\n     * @description \"display-name element in generated application.xml\"\n     */\n    private String displayName;\n\nNote the quote missing in @parameter expression=\"${maven.ear.displayname}\n\nIf I try to install the plugin, m2 takes 100% of my CPU (endless loop or something I assume). If I add the quote at the end, everything works as expected.",
        "Plugin Metaversion Compatibility According to the compatibility notes at http://cwiki.apache.org/MAVEN/maven-3x-compatibility-notes.html:\n\n\"For the sake of reproducible builds, Maven 3.x no longer supports usage of [the RELEASE and LATEST] metaversions in the POM.\"\n\nLATEST is working fine for me in alpha-4."
    ],
    [
        "MNG-4380",
        "MNG-2558",
        "Failure to resolve artifact if there is a dependency that uses version range I have a  simple pom.xml that defines a dependency on jsp-impl from the Maven repository:  http://download.java.net/maven/2\n\n--------------------------pom.xml-----------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>maven.test</groupId>\n<artifactId>simple</artifactId>\n<version>1.0</version>\n<name>SimpleTest</name>\n<repositories>\n    <repository>\n        <id>java.net</id>\n        <name>Java Net Maven 2 </name>\n        <url>http://download.java.net/maven/2</url>\n    </repository>\n</repositories>\n<dependencies>\n <dependency>\n    <groupId>org.glassfish.web</groupId>\n    <artifactId>jsp-impl</artifactId>\n    <version>2.1.3-b17</version>\n  </dependency>\n</dependencies>\n</project>\n\n-------------------------------------------------------------------\n\nRunning \"mvn install\" will fail with the message:\n\nDownloading: http://repo1.maven.org/maven2/javax/servlet/jsp/jsp-api/2.1.3-b05/jsp-api-2.1.3-b05.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nMissing:\n----------\n1) javax.servlet.jsp:jsp-api:jar:2.1.3-b05\n\nTry downloading the file manually from the project website.\n\nThen, install it using the command:\n  mvn install:install-file -DgroupId=javax.servlet.jsp -DartifactId=jsp-api -Dversion=2.1.3-b05 -Dpackaging=jar -Dfile=/path/to/file\n\nAlternatively, if you host your own repository you can deploy the file there:\n  mvn deploy:deploy-file -DgroupId=javax.servlet.jsp -DartifactId=jsp-api -Dversion=2.1.3-b05 -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]\n\nPath to dependency:\n    1) maven.test:simple:jar:1.0\n    2) org.glassfish.web:jsp-impl:jar:2.1.3-b17\n    3) javax.servlet.jsp:jsp-api:jar:2.1.3-b05\n\n----------\n1 required artifact is missing.\n\nfor artifact:\nmaven.test:simple:jar:1.0\n\nfrom the specified remote repositories:\ncentral (http://repo1.maven.org/maven2),\njava.net (http://download.java.net/maven/2)\n\n\nIt's complaining about resolving the artifact jsp-api.  But this artifact (javax.servlet.jsp:jsp-api:jar:2.1.3-b05) exists in java.net (http://download.java.net/maven/2/javax/servlet/jsp/jsp-api/2.1.3-b05/).   Looks like it's trying to download the artifact from the Central repo (http://repo1.maven.org/maven2) and not  even search for it in java.net.    The message at the end is not true.\n\nIf I explicitly define jsp-api artifact in the pom.xml then it compiles successfully. \n\nNote:  The dependency of jsp-api uses version range.  \n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>[2.1.3-b02,2.2)</version>\n        </dependency>\n\nIt maybe related to MNG-2742 but this is not a plugin dependency.\n",
        "Expanded POM and Settings files documentation I've created a couple of docs expanding on the POM and settings.xml reference/user guides, viewable here:\n\nhttp://www.propellors.net/maven/site/pom.html\nhttp://www.propellors.net/maven/site/settings.html\n"
    ],
    [
        "MNG-4093",
        "MNG-2506",
        "SNAPSHOT jars not correctly updated Occasionally I would get compilation errors after releasing a new SNAPSHOT dependency of a project.\n\nAfter some debugging I found that it was adding a -SNAPSHOT.jar to my classpath and not the actual timestamped jar.\nBut I also found that, occasionally,  I would get this:\n\n{code}\n-rw-r--r-- 1 tich tich 1482491 common-util-25-20090313.151759-9.jar\n-rw-r--r-- 1 tich tich 1482490 common-util-25-20090317.001243-13.jar\n-rw-r--r-- 1 tich tich 1482491 common-util-25-SNAPSHOT.jar\n{code}\n\nIt seems that the SNAPSHOT downloading process *silently* fails to update the x-SNAPSHOT.jar.\nThis behavior seems to occur randomly and can not be recovered from until you:\n* delete the corrupted local repository OR\n* release a new snapshot",
        "Problem with maven 2 with multiproject I have a project that looks like this:\n\nFirst/\nFirst/pom.xml\n\nFirst/Second\nFirst/Second/pom.xml\nFirst/Second/Project\nFirst/Second/Project/pom.xml\n\nFirst/Third\nFirst/Third/pom.xml\n\nand when i try to \"package\" my project ( a war proyect) it throws:\n\nGroupId: First\nArtifactId: Second\nVersion: 0.1\n\nReason: Unable to download the artifact from any repository\n\nEvery parent has its modules, and every module has his parent setted.\n\nI don't know if this is a pom problem or a maven problem.\n\nThanks."
    ],
    [
        "MNG-5543",
        "MNG-3266",
        "NoClassDefFoundError when using executions in maven *I've created the smallest maven POM file I can to highlight the problem (see below)*.\n\nI'm using an email server plugin (for integration testing).  I can launch the plugin no problem:\n{noformat}\n    mvn emailserver:run\n    [INFO] --- emailserver-maven-plugin:1.1.1:run (default-cli) @ project ---\n    [INFO] Starting Greenmail mail server...\n    [INFO] Started Greenmail mail server\n    [INFO] Waiting for command from client\n{noformat}\nHowever, I have configured the plugin to run before the `integration-test` lifecycle.  When run this way, I get a `NoClassDefFoundError`:\n\n{noformat}\n    mvn integration-test\n    Exception in thread \"Thread-1\" java.lang.NoClassDefFoundError: com/icegreen/greenmail/util/ServerSetup\n{noformat}\nWhen I execute maven with `-X` to see what's happening, in both cases it shows the same dependency tree as far as I can see, so I'm at a bit of a loss as to why I'm getting an exception which it's launched through lifecycle phases.  Hopefully someone can help!\n{code:xml}\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n        <modelVersion>4.0.0</modelVersion>\n\n        <groupId>com.mytest</groupId>\n        <artifactId>project</artifactId>\n        <packaging>jar</packaging>\n        <version>1.0</version>\n        <name>Test Project</name>\n\n        <build>\n            <plugins>\n                <plugin>\n                    <groupId>com.btmatthews.maven.plugins</groupId>\n                    <artifactId>emailserver-maven-plugin</artifactId>\n                    <configuration>\n                        <monitorKey>emailserver</monitorKey>\n                        <monitorPort>10025</monitorPort>\n                        <serverName>greenmail</serverName>\n                        <portOffset>13000</portOffset>\n                        <useSSL>false</useSSL>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <id>run-mail</id>\n                            <goals>\n                                <goal>run</goal>\n                            </goals>\n                            <phase>pre-integration-test</phase>\n                            <configuration>\n                                <daemon>true</daemon>\n                            </configuration>\n                        </execution>\n                        <execution>\n                            <id>stop-mail</id>\n                            <goals>\n                                <goal>stop</goal>\n                            </goals>\n                            <phase>post-integration-test</phase>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </build>\n    </project>\n{code}\n{noformat}\nMaven information:\n\n    > mvn -v\n    Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 16:22:22+0100)\n    Maven home: /opt/apache-maven\n    Java version: 1.7.0_45, vendor: Oracle Corporation\n    Java home: /opt/jdk1.7.0_45/jre\n    Default locale: en_IE, platform encoding: UTF-8\n    OS name: \"linux\", version: \"3.11.0-13-generic\", arch: \"amd64\", family: \"unix\"\n{noformat}\n*NOTE*\nThis appears to be a problem on 3.1.1 only.  I downloaded 3.0.5 and it worked as expected.",
        "maven-model RepositoryBase overrides equals() but not hashCode() Overriding equals and not hashCode is considered bad practice. Also, while looking around, I noticed the two subclasses (Repository and PluginRepository) both override equals and just call \"super.equals()\". There is a cryptic comment nearby that leads me to believe this is a temporary fix for an old problem."
    ],
    [
        "MNG-5528",
        "MNG-2127",
        "Help text confuses people When the 'mvn --help' command is used, the output for -U states  \"Forces a check for updated releases and snapshots on remote repositories\".  This confuses a lot of users into thinking that this option will update released versions of artifacts.\n\nCould this be changed to something like \"Forces a check for updated snapshots on remote repositories\"\n\nThis would solve a number of problems that I have seen at different sites where people think they can patch a finally released artifact and it is updated in the local repository with the -U option.\n\nUpdating the help text would then roll into documentation where the text is copied into it.",
        "mvn.bat always exits 0 on Windows 2000 and higher Write the following ant script and run it on Windows 2000 or higher:  <project default=\"main\"><target  name=\"main\"><exec executable=\"mvn.bat\" failonerror=\"true\" /></target></project>\n\nThis will run \"mvn\" with no arguments, which will always fail.  But the ant script will claim \"build successful\", because the exit value of mvn.bat was 0.  It is absolutely critical that this work correctly, or else I can't integrate Maven into any other automated system.\n\nThis is happening because mvn.bat is improperly abusing local scoping.  On line 130 of mvn.bat, we execute maven, but we don't do anything with its exit value... we just always goto end.  The fix for this is to add a line 131 that says \"if errorlevel 1 goto error\", which will behave correctly.\n\n(I marked this as having a test case because I've included a test ant script, but technically this isn't a JUnit test case, so it may be an inappropriate use of the \"testcase included\" marker.)"
    ],
    [
        "MNG-2166",
        "MNG-4499",
        "Provide the help listing as default when no arguments are provided When just writing \"mvn\" with no arguments on the command line I get a message such as this: \n>mvn\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] You must specify at least one goal. Try 'install'\n[INFO] ----------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Mar 22 09:15:04 CET 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n\nMany new users to maven or any other such tools are used to getting at least some basic info of what is expected. How about just displaying the listing that shows up when a user writes \"mvn -h\" as default when no arguments are privided? This is also a feature that most other similar products have.  I also would suggest printing a URL for where they can get basic information for how to use maven.\n",
        "Security management: Ease interaction with SSL sites  Development environments often use ssl-certificates which are self-signed or signed by company-internal\ncertification authorities.\n\nIf the certificate is unknown maven outputs the following message:\n---\nINFO] Scanning for projects...\n[INFO] snapshot de.foo.bar:bar-parent:0.0.1-SNAPSHOT: checking for updates from snapshots\n[WARNING] repository metadata for: 'snapshot de.foo.bar:bar-parent:0.0.1-SNAPSHOT' could not be retrieved from repository: snapshots due to an error: Error transferring file: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n[INFO] Repository 'snapshots' will be blacklisted\n---\nThis is disastrous form usability point of view :-)\n\nProcedures like this are very not very convenient for developers:\n---\n$JAVA_HOME/bin/keytool -import -alias UserTrustExternalCARoot -file UserTrustExternalCARoot.crt -keystore $JAVA_HOME/jre/lib/security/jssecacerts\nexport MAVEN_OPTS=\"-Djavax.net.ssl.keyStore=$HOME/.keystore \\\n    -Djavax.net.ssl.keyStorePassword=changeit \\\n    -Djavax.net.ssl.trustStore=$HOME/.keystore \\\n    -Djavax.net.ssl.trustStorePassword=changeit\"\nmvn -Dusername=foo deploy\n---\n\nMaven should provide an convenient way to accept a unknown certificate.\n\nI my opinion this should implemented like this:\n- If the exceptions is raised maven should output a message that the certificate can by downloaded\n  and integrated in the keystore in an automated way by invoking the new maven option\n  \"-dc <hostname> ..<hostname>|--download-certificate <hostname> <hostname>\"\n- If this option is invoked, maven automatically downloads the certificate/ca for the specified\n  domain and adds it to a keystore located in $HOME/.m2/keystores/<domain> an executes the specified goal\n  with this keystore\n- If maven is called without the new option, maven uses the keystores in $HOME/.m2/keystores/<domain>\n  before giving up on certificate problems\n\n\n  \n\n\n"
    ],
    [
        "MNG-2302",
        "MNG-5087",
        "SCM path calculations don't work when parent and grandparent are in sibling directories I have the following directory structure:\n\n-top\n |\n +-grandparent\n |\n +-parent\n |\n +-child\n\nwhere modules are specified in grandparent and parent, respectively, as:\n\n<module>../parent</module>\n\nand \n\n<module>../child</module>\n\nWhen I put these into Continuum, and it tries to use the SCM info provided in the grandparent, it winds up thinking the child directory is a subdirectory of the parent directory.",
        "Maven 3 dependency resolution fails until maven-metadata-local.xml files (created by maven-invoker-plugin) are deleted In one of my Maven projects, dependency resolution will succeed once, then fail for later build attempts:\n\n{code}\n[WARNING] The POM for commons-logging:commons-logging:jar:1.1.1 is missing, no dependency information available\n[WARNING] The POM for commons-httpclient:commons-httpclient:jar:3.1 is missing, no dependency information available\n[WARNING] The POM for javax.mail:mail:jar:1.4.4 is missing, no dependency information available\n{code}\n\n...and so on, until I delete the {{maven-metadata-local.xml}} files corresponding to the failing artifacts (e.g. {{~/.m2/repository/commons-logging/commons-logging/maven-metadata-local.xml}}), which appear to be created by maven-invoker-plugin:install. After those files are deleted, the next {{mvn}} invocation proceeds properly; the metadata files are restored by that invocation (presumably as part of the process of checking my upstream repositories/mirrors for updated artifacts), and I am again presented with the above errors until I again delete the metadata files.\n\nThis is repeatable, even after starting with a completely fresh local repository. Note that Maven 2.2.1 does *NOT* exhibit this problem.\n\nFYI, I'm not using an integration-testing-only local repo [http://maven.apache.org/plugins/maven-invoker-plugin/install-mojo.html#localRepositoryPath|as described here], simply because doing so causes the re-downloading of all transitive dependencies ([http://maven.apache.org/plugins/maven-invoker-plugin/examples/fast-use.html|unless you want to maintain an integration-specific settings.xml file!!!]). I've used the invoker plugin with a variety of other projects in this way with good results ([http://github.com/clojure/tools.nrepl|example]) -- certainly never encountering a borked local repository in the process like this.\n\nHere's an affected project: [https://github.com/cemerick/rummage/tree/1.3.0-compat|the 1.3.0-compat branch of rummage]. To reproduce, just clone that repo, checkout {{1.3.0-compat}}, and:\n\n{code}\n> mvn clean test\n# no error -- can run this and other builds that don't involve maven-invoker-plugin all day w/o problems\n> mvn clean integration-test\n# FAIL: \"Could not resolve dependencies\", with warnings as noted above\n> mvn clean test\n# FAIL: \"Could not resolve dependencies\", with warnings as noted above\n{code}\n\nOnce the local repository is broken (by the generation of the {{maven-metadata-local.xml}} files, AFAICT), no builds will get past the dependency resolution stage.\n\nRunning mvn -X reveals lines like this for each artifact that is later apparently not found:\n\n{code}\n[DEBUG] Verifying availability of /Users/chas/.m2/repository/javax/mail/mail/1.4.4/mail-1.4.4.jar from []\n{code}\n\nOf course, {{/Users/chas/.m2/repository/javax/mail/mail/1.4.4/mail-1.4.4.jar}} et al. does exist, as does {{/Users/chas/.m2/repository/javax/mail/mail/1.4.4/mail-1.4.4.pom}}.\n\nI'm assuming this is a bug in Maven 3's core dependency resolution mechanisms (as opposed to maven-invoker-plugin) since Maven 2.2.1 doesn't exhibit the behaviour."
    ],
    [
        "MNG-77",
        "MNG-463",
        "dependency-pom's parent not included in transitive dependency search UPDATE: related discussion of dependency classifiers is in MNG-78.\n\n\n\nexample:\n\nI have a project for work that uses marmalade-core-1.0-alpha1.jar\nThis leads to transitive resolution of marmalade-core-1.0-alpha1.pom, \nwhich inherits from marmalade-parent-1.0-alpha1.pom.\n\nmarmalade-parent-1.0-alpha1.pom defines a dependency on xpp3-1.1.3.3.jar\n\nWhen I build my work project, it DOES NOT resolve a transitive dependency on xpp3-1.1.3.3.jar.\n\n======================\n\nAfter looking at the source code for MavenMetadataSource, I see that the model's parent is not considered during artifact resolution. This has a simple fix, in that the parent should be checked for artifacts if it's not null. I have the new code implemented on my local working dir.\n\nHOWEVER, I cannot build maven with this fix. This is due to the fact that plexus-components-1.0.pom defines a TEST-ONLY dependency on commons-jelly-tags-velocity-XXX.jar, which doesn't have a pom associated with it. The quick fix is to satisfy all of these (I know there are more...I just can't see them now) outstanding pom-not-found instances one by one. This is not desirable, since it will lead to a bloated local repository full of other projects' test dependencies.\n\nA longer-term fix is to determine how to classify dependencies as testing-only vs. runtime vs. whatever...I know we've discussed this, but we should probably nail this down and get it fixed correctly. I'll file a separate issue for the dependency classifier discussion, and note its ID here.",
        "[data loss] installation script inconditionally deletes M2_HOME contents I've set up M2_HOME to a wrong directory by mistake, and the m2 installer deleted everything in it...\nMay I suggest to use the same strategy used by the cargo installer?\n\nI.e. \n\nif (target directory empty || m2 marker file exists)\n- copy the contents\n- add a marker file specific to m2\nelse\n  warn user\n\nSee CARGO-27 for the original CARGO issue."
    ],
    [
        "MNG-2496",
        "MNG-1094",
        "dependencyManagement not used for dependencies in plugin section. In my parent, I have a dependencyManagement set with this jar:\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.stchome.build.maven</groupId>\n                <artifactId>testng-initializer</artifactId>\n                <version>1.0</version>\n                <scope>test</scope>\n            </dependency>\n\nI have a plugin specified that had a dependency like this:\n            <plugin>\n                <artifactId>maven-antrun-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>run-testng</id>\n                        <phase>test</phase>\n                        <configuration>\n                            <tasks>\n                                <java classname=\"com.stchome.testng.initializer.PackageInitializer\">\n                                    <arg path=\"${project.build.testOutputDirectory}\"/>\n                                    <arg path=\"${project.build.testSourceDirectory}\"/>\n                                </java>\n                                <ant antfile=\"run-testng.xml\" inheritRefs=\"true\" inheritAll=\"true\">\n                                    <property name=\"target.dir\" value=\"${project.build.directory}\"/>\n                                    <property name=\"test-classes.dir\" value=\"${project.build.testOutputDirectory}\"/>\n                                    <property name=\"test-source.dir\" value=\"${project.build.testSourceDirectory}\"/>\n                                </ant>\n                            </tasks>\n                        </configuration>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <dependencies>\n                    <dependency>\n                        <groupId>com.stchome.build.maven</groupId>\n                        <artifactId>testng-initializer</artifactId>\n                    </dependency>\n                </dependencies>\n            </plugin>\n\nWhen I build, it doesn't seem to resolve this dependency version from dependencyManagement\n\n[INFO] An invalid artifact was detected.\n\nThis artifact might be in your project's POM, or it might have been included transitively du\n information we do have for this artifact:\n\n    o GroupID:     com.stchome.build.maven\n    o ArtifactID:  testng-initializer\n    o Version:     <<< MISSING >>>\n    o Type:        jar\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.artifact.InvalidArtifactRTException: For artifact {com.stchome.build.maven:\nn cannot be empty.\n        at org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:1\n        at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:119)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultAr\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetada\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginManager.java:\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginM\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.ja\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycle\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifecycle(Default\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(De\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleE\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLi\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecu\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)",
        "Repositories' <uniqueVersion> tag is not inhertied to child POMs If you define the following distribution management in a parent POM, child POMs will inherit the repository definition, but the <uniqueVersion> value is reset back to \"true\".\n\nHere's a snippet of what I used in the parent POM:\n    <distributionManagement>\n        <repository>\n            <id>corleon</id>\n            <name>Corleon Software Foundation (CSF) internal repository</name>\n            <url>file:///maven-repo</url>\n            <layout>default</layout>\n            <uniqueVersion>false</uniqueVersion>\n        </repository>\n    </distributionManagement>\n\nIf I copy the snippet into the child POM, it works as expected."
    ],
    [
        "MNG-487",
        "MNG-3226",
        "add backwards compatibility for the local repository setting, with a deprecation warning ",
        "Developers and Contributors information is not being inherited The developers and contributors information is not being merged into the effective POM of child projects.\n\nAccording to the Project Inheritance section of the following two POM references, this info should be merged.\nhttp://maven.apache.org/guides/introduction/introduction-to-the-pom.html\nhttp://maven.apache.org/pom.html#Inheritance\n\n\n"
    ],
    [
        "MNG-5182",
        "MNG-637",
        "Abnormal behavior for plugin POM download when missing plugin version In our company repository (using Nexus), it provide several repository groups.  PUBLIC is proxy to public repository. EXT contains 3rd party artifacts that is not available on public repo.\n\nMy settings.xml contains NO mirrors declaration, and in which defined a activeProfile that contains several repositories and plugin repositories, which put EXT and PUBLIC (EXT comes before PUBLIC).\n\nI have did a minor change in a 3rd party plugin, org.codehaus.mojo:native2ascii-maven-plugin:1.0-alpha-1, and I put the modified version in EXT repo, with version changed to 1.0-alpha-1.1\n\nA project is declared to use the plugin org.codehaus.mojo:native2ascii-maven-plugin, with no version provided.  \n\nLocal repository should be purged before building the project.\n\nBy building the project, and inspects the local repository, it can be found that only JAR of the plugin is downloaded, but not the POM. By adding -X option when building with Maven, it can be found that Maven is downloading JAR of org.codehaus.mojo:native2ascii-maven-plugin:1.0-alpha-1.1 from EXT, but then trying to get the POM from central.  As there is no such artifact in central repository, Maven treated that as no POM available.\n\nHowever, if plugin version is added in the project POM, everything will be fine.  Plugin POM is correctly downloaded.\n\nAlthough it is my fault that plugin version is missed in the project, it does not seems that reasonable for the behavior for Maven:  It downloaded the plugin JAR from the first plugin repository (I bet it simply get the latest version), and then trying to get the plugin POM from a totally unrelated location (central repo in such case).\n\n\nAttached please find the testing project as part of the test case.  However, as the test needs quite a lot of setup in the environment, I cannot provide the full test case.",
        "setup and use a temporary snapshot repository for m2 "
    ],
    [
        "MNG-2342",
        "MNG-5877",
        "Maven - Guide to Maven Evangelism has wrong svn URL In the \"Maven - Guide to Maven Evangelism\" page, the svn URL is stated \"svn://svn.codehaus.org/maven/scm/repository\", but it is actually \"svn://svn.codehaus.org/maven/repository\".",
        "maven-aether-provider/maven-compat does not always generate snapshot versions using Gregorian calendar year  I am using the maven-aether-provider in my software and have an issue when Thailand users are publishing their snapshot versions get the Buddhist calendar year (offset of 543 years).\r\n\r\nI have located the problem to be in the RemoteSnapShotMetaData class:\r\n\r\n{code:title=RemoteSnapShotMetaData.java|borderStyle=solid}\r\n            DateFormat utcDateFormatter = new SimpleDateFormat( \"yyyyMMdd.HHmmss\" );\r\n            utcDateFormatter.setTimeZone( TimeZone.getTimeZone( \"UTC\" ) );\r\n\r\n            snapshot = new Snapshot();\r\n            snapshot.setBuildNumber( getBuildNumber( recessive ) + 1 );\r\n            snapshot.setTimestamp( utcDateFormatter.format( new Date() ) );\r\n{code}\r\n\r\nThe fix should be to explicitly set the calendar to be Gregorian:\r\n\r\n{code:title=RemoteSnapShotMetaData.java|borderStyle=solid}\r\n            DateFormat utcDateFormatter = new SimpleDateFormat( \"yyyyMMdd.HHmmss\" );\r\n            utcDateFormatter.setTimeZone( TimeZone.getTimeZone( \"UTC\" ) );\r\n            utcDateFormatter.setCalendar(new GregorianCalendar());\r\n\r\n            snapshot = new Snapshot();\r\n            snapshot.setBuildNumber( getBuildNumber( recessive ) + 1 );\r\n            snapshot.setTimestamp( utcDateFormatter.format( new Date() ) );\r\n{code}"
    ],
    [
        "MNG-1094",
        "MNG-613",
        "Repositories' <uniqueVersion> tag is not inhertied to child POMs If you define the following distribution management in a parent POM, child POMs will inherit the repository definition, but the <uniqueVersion> value is reset back to \"true\".\n\nHere's a snippet of what I used in the parent POM:\n    <distributionManagement>\n        <repository>\n            <id>corleon</id>\n            <name>Corleon Software Foundation (CSF) internal repository</name>\n            <url>file:///maven-repo</url>\n            <layout>default</layout>\n            <uniqueVersion>false</uniqueVersion>\n        </repository>\n    </distributionManagement>\n\nIf I copy the snippet into the child POM, it works as expected.",
        "improve release selection for ranges currently, ranges such as (,1.0) do not work, as it is incapable of locating the newest version < 1.0.\nAlso, ranges such as [1.0,)  result in RELEASE, which may not be present for all artifacts.\n\nWe should replace or augment RELEASE with a full listing of versions for an artifact in the repository. This would be repository metadata of the same fashion as the plugin prefix -> id mapping."
    ],
    [
        "MNG-2211",
        "MNG-2198",
        "Windows installer Maven 2 should have a Windows installer like Maven 1. This could be an .exe or .msi. It should install Maven and set the appropriate environment variables.\n\nThere's an effort to provide plugins for generating installers at\n\nhttp://jira.codehaus.org/browse/MASSEMBLY-32?rc=1\n\nbut it appears to be stalled since December.",
        "Add <javadoc/> and <source/> to plugin metadata Add to the plugin metadata <javadoc/> and <source/>  support so related source/javadoc are resolved as well along the dependency itself."
    ],
    [
        "MNG-4576",
        "MNG-2613",
        "Issue running test plugin, build failure .. -Tycho- (getEclipseLauncher?) Setting up my test with <packaging>eclipse-test-plugin</packaging> provokes a build failure: the test bundle contains JUnit tests under src/.. and requires some of my other bundles. I run \"mvn clean integration-test -Dtycho.targetPlatform=C:\\app\\mypath\\rcp-target-platform\\platform\\win32\\rcp\" which breaks, see attached log file. (throwing a NPE in context of TestMojo.getEclipseLauncher?) Calling phases before integration-test suceeds. Please find enclosed the debug log and the POM. \n\n\n",
        "Unresolved dependencies in intermediate projects when using dependencyManagement tag in multi-module builds I have a nested project with the follow structure:\n\nroot/intermediate1/intermediate2/leaf\n\nIn this setup, each child level is a module of the parent, and each child's POM derives from the parent POM.\n\nIf I execute 'mvn help:effective-pom' at root or leaf, it works fine.  However, the following error message will be thrown when I try to validate the POM at any intermediate level:\n\nValidation Messages:\n\n    [0]  'dependencies.dependency.version' is missing for <DEP_1>\n    [...]  'dependencies.dependency.version' is missing for <DEP_...>\n    [N]  'dependencies.dependency.version' is missing for <DEP_N>\n\n\nReason: Failed to validate POM\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Failed to validate POM\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:370)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:283)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:120)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:263)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.InvalidProjectModelException: Failed to validate POM\n        at org.apache.maven.project.DefaultMavenProjectBuilder.processProjectLogic(DefaultMavenProjectBuilder.java:941)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:752)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMavenProjectBuilder.java:423)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:192)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:520)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:452)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:496)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:356)\n        ... 11 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Sun Sep 17 10:33:24 EDT 2006\n[INFO] Final Memory: 1M/127M\n[INFO] ------------------------------------------------------------------------\n\nThis doesn't just affect the help:effective-pom goal; it throws this error whenever it has to walk the dependency graph.  So, for instance, I can't execute 'mvn install' or 'mvn grafo:grafo'.\n"
    ],
    [
        "MNG-2725",
        "MNG-2812",
        "Make sure MavenEmbedder.execute( request ) always returns a MavenProject instance The MavenProject is not being returned correctly when there are failures in the lifecycle. The exceptions need to be propagated back to the caller.",
        "Profile with an undefined os family activation should not activate The following profile gets activated eventhough the os family is not the current os family ... <profile> <id>bogus-profile</id> <activation> <os> <family>bogus-family</family> </os> </activation> </profile> ..."
    ],
    [
        "MNG-5846",
        "MNG-256",
        "Maven 3.3.3 ignores repository definition for \"central\" Hi,\r\n\r\nThe sample pom.xml works fine with maven 3.0.5 but shows a big problem while using maven 3.3.3.\r\nIt's starts correctly and downloads a set of dependencies from the specified and overriden central repositories. The, suddenly, during a running build it starts downloading dependencies from the default \"central\" repository (which is actually overridden). This behaviour is problematic for us.\r\n\r\nIn these log-statements you can see that initial downloads are done from the overridden definition and that later the default central repository is used.\r\n\r\n{quote}\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>xxx</groupId>\r\n  <artifactId>yyy</artifactId>\r\n  <version>5.0-SNAPSHOT</version>\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>org.glassfish.main.appclient.client</groupId>\r\n      <artifactId>gf-client</artifactId>\r\n      <version>3.1.2.2</version>\r\n    </dependency>\r\n  </dependencies>\r\n    <repositories>\r\n        <repository>\r\n            <id>central</id>\r\n            <url>http://www.liermann.ws/maven/</url>\r\n            <releases>\r\n                <enabled>true</enabled>\r\n            </releases>\r\n            <snapshots>\r\n                <enabled>true</enabled>\r\n                <updatePolicy>always</updatePolicy>\r\n            </snapshots>\r\n        </repository>\r\n    </repositories>\r\n\r\n    <pluginRepositories>\r\n        <pluginRepository>\r\n            <id>central</id>\r\n            <url>http://www.liermann.ws/maven/</url>\r\n            <releases>\r\n                <enabled>true</enabled>\r\n            </releases>\r\n            <snapshots>\r\n                <enabled>true</enabled>\r\n                <updatePolicy>always</updatePolicy>\r\n            </snapshots>\r\n        </pluginRepository>\r\n    </pluginRepositories>\r\n</project>\r\n{quote}\r\n\r\nLog file snippet\r\n{quote}\r\nDownloading: http://www.liermann.ws/maven/org/glassfish/metro/metro-project/2.2.0-1/metro-project-2.2.0-1.pom\r\nDownloaded: http://www.liermann.ws/maven/org/glassfish/metro/metro-project/2.2.0-1/metro-project-2.2.0-1.pom (31 KB at 532.0 KB/sec)\r\nDownloading: http://repo1.maven.org/maven2/com/sun/xml/ws/jaxws-ri/2.2.6-2/jaxws-ri-2.2.6-2.pom\r\nDownloaded: http://repo1.maven.org/maven2/com/sun/xml/ws/jaxws-ri/2.2.6-2/jaxws-ri-2.2.6-2.pom (6 KB at 101.3 KB/sec)\r\n{quote}",
        "m2 should use an internal repository instead of lib, it would be great to have an internal application repository that could be used as a fallback to the local repo and accessed consistently. This should be a general plexus app thing, and perhaps we could convince classworlds to be able to find things by id/version instead of paths to construct the realms. Alternatively, the assembly can create a correct classworlds.conf.\n\nThis should mean that Maven doesn't redownload all the JARs from it's lib directory as it does at present.\n\n"
    ],
    [
        "MNG-4554",
        "MNG-5098",
        "[regression] plugin updates are requested on every build regardless of policies I'm not sure if this is an intentional change that I've missed or not, but running something like:\n\n{code}\nmvn archetype:generate\n{code}\n\nwill retrieve the metadata from the repository on every build:\n\n{code}\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-metadata.xml\n9 KB downloaded at 17.1 KB/sec\n{code}\n\nThis is in contrast to Maven 2.2.1 which always continues to use the first version encountered until you use -U:\n\n{code:xml}\n  <pluginRepositories>\n    <pluginRepository>\n      <releases>\n        <updatePolicy>never</updatePolicy>\n      </releases>\n{code}\n\nWhile that remains in the super POM of Maven 3, it seems that the metadata is retrieved regardless.",
        "Environment variable HOME with space leads to an error Setting the environment variable\nHOME=\"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\"\nleads to an error when executing Maven:\n\nC:\\Users\\MyUser\\workspace\\myproject\\trunk>mvn.bat\n\"Files\\Microsoft\" kann syntaktisch an dieser Stelle nicht verarbeitet werden.\n(\"Files\\Microsoft\" cannot be processed syntactically in this place.)\n\nThe equivalent to the HOME variable in Linux is USERPROFILE for Windows systems.\n\nNo assumptions about the value of variable HOME should be made on Windows.\n\nPlease observe that the value of USERPROFILE is not necessarily the concatenation of the values of HOMEDRIVE and HOMEPATH.\n\nPlease change mvn.bat to use %USERPROFILE% instead of %HOME% on Windows systems."
    ],
    [
        "MNG-3628",
        "MNG-4808",
        "When running offline, snapshot artifcats cannot be resolved even if they have previously be dowloaded from a repository When running offline, snapshot artifcats cannot be resolved even if they have previously be dowloaded from a repository. This happens when attempting to depend on a snapshot version of a module downloaded from a repository. If the snapshot version of the module is built and installed locally, the problem goes away.\n\nI will attach two projects (in a tar file) that have minimal external dependencies, and the debug output of trying to build. Here are the steps to reproduce:\n\nEnvironment:\nMaven 2.0.8\nLinux 2.6.18\nArtifactory 1.2.5 (rev. 1154)\n(this has also been reproduced by a colleague on a Windows machine).\n\nPreliminary steps:\n1) Modify the pom files to refer to your actual repository instead of http://localhost:8081/artifactory/jumptap-snapshots\n2) Build maven-test-project1\n3) Upload the pom and jar for maven-test-project1 to your repository.\n\nSteps that cause the error to happen:\n1) Delete maven-test-project1 from the local repository.\n2) Build maven-test-project2 without the offline flag (mvn install). This build is successful (and downloads maven-test-project1 to the local repository).\n3) Build maven-test-project2 with the offline flag (mvn -o install). This build fails, unable to resolve the maven-test-project1 artifact.\n\nSteps that cause the error not to happen\n1) Build maven-test-project1 locally. This build is successful.\n2) Build maven-test-project2 without the offline flag (mvn install). This build is successful.\n3) Build maven-test-project2 with the offline flag (mvn -o install). This build is successful.\n",
        "Maven does not resolve variables within a plugin's <goal> I have a Maven project with a Hudson profile, to be run when run under Hudson CI. The only relevant part of the Hudson profile is that the build should not fail when there are checksyle or findbugs errors. To achieve this, I've defined goal variables for both Checkstyle and Findbugs, see the attached (simplified) POM.\n\njust run mvn:clean, and you'll get:\n'${checkstyle.goal}' was specified in an execution, but not found in the plugin\n\n(and later also for findbugs)\n\nThe variable doesn't seem to be properly resolved. What's really strange, if I do mvn effective-pom, it all looks as I'd expect it, i.e it prints out <goal>check</goal> instead of <goal>${checkstyle.goal}</goal>\n\nThis used to work perfectly under Maven 2.0.9, i.e. it would run checkstyle:check normally, but checkstyle:checkstyle under Hudson. Seems to be a regression.\n"
    ],
    [
        "MNG-5609",
        "MNG-528",
        "README.txt in distro incorrectly states JDK requirement as 1.5+ The README.txt file in the distro states:\n{quote}\n  JDK:\n    1.5 or above (this is to execute Maven - it still allows you to build against 1.3\n    and prior JDK's).\n{quote}\nwhich is not correct. It should be 1.6 or above.",
        "Ant Task that extracts/copies a JAR file to a specified location from the local repository I would like to use the Maven2 Ant tasks to resolve the dependencies of my web application. To make the dependecies availbale to my web appklcation I have to make them available in the /WEB-INF/lib directory. At the moment there is no elegant way to copy the JARs I got using the dependencies task to the  /WEB-INF/lib directory.\nI know that a work around would be to copy the JAR manually from the repository but therefore additional information would be needed in the Ant script. This would not be elegant IMHO."
    ],
    [
        "MNG-566",
        "MNG-291",
        "Maven Plugin Matrix: XML Beans 2.0 support for m2 Please add the following entry to the Maven Plugin Matrix:\n\nPlugin: Maven XML Beans Plugin\n\nMaven 1.x: Yes\n\nMaven 2.x: No\n\nAuthor: David Jencks, Brett Porter and Kris Bravo\n\nComments: Maven 2.x support for XML Beans 2.x in progress.\n",
        "Resolve Problems in Mojos steps to reproduce:\n- unzip the attached zip\n- cd to helloworld\n- m2 install\n- cd to test\n- m2 compile\n-> exception\n- uncomment the dependency in the test/pom.xml\n- m2 compile\n-> works!"
    ],
    [
        "MNG-3300",
        "MNG-1497",
        "Nested compile source roots in effective POM cause bad Eclipse build path Source generating plugins like for JavaCC or JFlex usually add their output folder to the POM as a compile source root. If these source directories happen to be nested, i.e. \"src/main/java\" and additional something like \"src/main/java/org/apache\", mvn eclipse:eclipse produces the following bad .classpath contents with overlapping build paths:{code:xml}\n<classpath>\n  <classpathentry kind=\"src\" path=\"src/main/java\"/>\n  <classpathentry kind=\"src\" path=\"src/main/java/org/apache\"/>\n  ...\n</classpath>\n{code}\n\nWhile this issues relates to MECLIPSE-114, I really think my problem is caused by Maven.\n\nThough the maven-eclipse-plugin causes the problem to manifest itself, it might not be the proper place to solve it as it appears to be a more general issue (i.e. the Maven Eclipse Integration might also be affected, though I did not test this). Surely, each and every plugin developer could be told to check for source directory nesting but I consider this an error-prone approach. I would rather appreciate either that MavenProject.addCompileSourceRoot() automatically ignores nested source directories (if such a general change is acceptable) or that new methods in MavenProject are introduced that allow for conditional addition of source roots only if they do not nest with existing roots such that plugin developers can easily fix the problem.\n",
        "remove old html files from the site The Maven Directory Layout page (http://maven.apache.org/reference/dirlayout.html) notes for the \"src\" directory that\n\n\"The code may be placed into separate source code directories by language, as in src/java/ and src/php/ for source code in the Java and PHP languages respectively. The separation into directories according to function (src/share, src/core, src/web) is currently not supported by Maven. It is highly recommended that sub-directories be used under src/.\"\n\nThe Maven Conventions Page (http://maven.apache.org/reference/conventions.html) advises that projects should follow another directory structure:\nsrc/main/$LANGUAGE, src/test/$LANGUAGE, src/site/xdocs, etc.  To me this seems to contradict the statement that Maven doesn't support separation into directories according to function.  The examples given of structures to avoid (src/core and src/web) match closely to what's encouraged elsewhere (src/main and src/site).\n\nThe directory layout page is marked as being for v1.0.2, but the conventions page is not marked with a version.  If the conventions are different for different versions, clearer labeling is needed.  If the conventions are constant across versions, then the documentation should be changed so that it is not contradicting itself."
    ],
    [
        "MNG-4182",
        "MNG-4828",
        "Properties from profiles.xml are not replaced when builing in parent module When running a submodule in its own directory properties form a parent profiles.xml are honored.\n\nTrying to build in the parent, this properties are not honored. The properties are not replaced.\n\nI get this result with help:effective-pom. See the ${appletkeyalias} instead of the proper replacment.\n\n        <plugin>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>2.2</version>\n          <executions>\n            <execution>\n              <phase>package</phase>\n              <goals>\n                <goal>sign</goal>\n              </goals>\n            </execution>\n          </executions>\n          <configuration>\n            <keystore>../${keystore}</keystore>\n            <alias>${appletkeyalias}</alias>\n            <storepass>${keystorepass}</storepass>\n            <jarPath>C:\\Users\\widerstand_2\\Documents\\mobifetch\\apps\\coupon\\j2se\ncoupon-install-applet\\target/coupon-install-applet-1.0.2-SNAPSHOT-jar-with-depe\ndencies.jar</jarPath>\n            <signedjar>C:\\Users\\widerstand_2\\Documents\\mobifetch\\apps\\coupon\\j2\ne\\coupon-install-applet\\target/signed/coupon-install-applet-1.0.2-SNAPSHOT-jar-\nith-dependencies.jar</signedjar>\n            <verify>true</verify>\n          </configuration>\n        </plugin>",
        "avoid the reactor summary when it isn't helpful At the root of a large multi-module project (eg, Redback), run:\n\n{code}\nmvn help:describe -Dplugin=surefire\n{code}\n\nThe output is lost among the scanning + summary, even though it will only ever affect one project.\n\nIn a scenario like this, I think the reach summary should be reduced to:\n\n{code}\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] Redback ........................................... SUCCESS [5.922s]\n[INFO]         Sub-modules not executed\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 11.777s\n[INFO] Finished at: Sun Sep 19 10:35:40 PDT 2010\n[INFO] Final Memory: 15M/81M\n[INFO] ------------------------------------------------------------------------\n{code}\n\nAnd potentially reduce the start to (though I'm not sure if it's known at the point it's shown):\n\n{code}\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO] \n[INFO] Redback\n[INFO] (Sub-modules will not be executed)\n[INFO] ------------------------------------------------------------------------\n{code}\n"
    ],
    [
        "MNG-153",
        "MNG-3490",
        "allow goals to be added to the lifecycle goals such as source generation need to be able to be added to the lifecycle based on the execution of the plugin containing them.\n\nThe rules:\n- @phase specifier in a mojo will add that mojo to the given phase\n- must pre-process the list of goals to be executed so all plugins can\n  be loaded and phases updated (and so on)\n\nmore rules in following issues.",
        "Foo 2.0 obsoletes Bar 1.0 I would like to be able to say, in a high-level POM:\n\n\"Whenever Foo.jar is in a dependency tree in version 2.0 or above, Bar.jar version 1.0 or below should not also be in that same dependency tree.\"\n\nBackground:\n\n* There once was Foo, version 1.0.\n* Then came along the Bar extension, also version 1.0, to be used alongside Foo 1.0.\n* Later, a new version 2.0 of Foo was released, that included the Bar functionality (also updated); so Foo 2.0 made Bar 1.0 obsolete.\n\nPresently, Maven will happily provide Bar 1.0 alongside with Foo 2.0, thus ushering us into JAR hell. It is then up to JAR lottery which of Bar 1.0 or Foo 2.0's Bar we actually get.\n\nWhat I want is a way to fix this in my own top-level POM, in dependency management.\n\"If I have Foo 2.0, never even think of including Bar 1.0 also.\"\n\nPresent workaround:\n* Analyze all low-level POMs.\n* Most use Foo 1.0, leave those alone. (Unfortunately, Foo 2.0 is not without issues.)\n* Find the few that do use Foo 2.0.\n* Figure out all transitive dependencies of such a POM that pull in Bar 1.0.\n* Apply <exclude> to those.\n\nRegards, and thank you for providing fine software,\n\nAndreas"
    ],
    [
        "MNG-5847",
        "MNG-1265",
        "Maven controls java.library.path We have many Java projects that are dependent of other Java projects which make use of JNI. Hence, when we do \"mvn test\" in our project, we fail frequently as the native part of the dependency is missing, even if we declare the native part as an explicit dependency. There are several ideas how to solve that, but non of them is complete or sufficient.\r\n\r\nThe solution users expect would look like this:\r\n\r\n* MyProject has one dependency to OtherProject of <type>*</type> (asterisk means: Maven selects best fit).\r\n* OtherProject offers many different packages, e. g. win-x86-dll, win-x64-dll, linux-so-64, etc.\r\n* When doing mvn test on MyProject, Maven checks ALL exiting packages for the dependency's coordinates, and select that package that is the best fit for the current execution enviroment. For example, it select \"win-x86-dll\" when run on Windows (32 Bit), or selects \"linux-so-64\" when run on Linux (64 Bit) etc. This mechanism should be extensible by future extension plugin, so a third party vendor can simply provide addtional mappings via Maven Central.\r\n* Just as Maven does a configuration of the ClassPath from all JAR dependencies, it now will now do a configuration of all native dependencies. That means, it copies the selected native dependencies to target/dependencies and builds a synthetic java.library.path system property.\r\n* As a result, adding a native dependency will work on any platform without any complex pom.xml tweaks.\r\n* The solution shall not be a Java-only solution, but it shall work with any kind of toolset. So a toolset plugin shall be able to utilize the core mechanism and adapt it to its own needs, which includes for example the fact that setting java.library.path is job of the Java Toolset Plugin, while providing a similar lookup mechanism is job a hypothetical different Toolset Plugin.\r\n\r\nWe would really beg the Maven team to provide such a solution, as JNI is an integral part of Java for really long time, and we have this problem every other day.",
        "Improve information displayed by \"mvn --version\" We should add information such as \"Built on <date + time>\" instead of just the version.\n\nFor example, imagine I have version 2.0.1-SNAPSHOT I have built 2 days ago. I'm building it again from sources.Some problems happen during the build. I want to see if the new version corresponds to what I have just built. If it just says 2.0.1-SNAPSHOT, I won't know.\n\nDisplaying: \n\n2.0.1-SNAPSHOT build on 2005-10-20 at 14:29 GMT+1\n\nwould be much better.\n\n"
    ],
    [
        "MNG-3564",
        "MNG-3148",
        "alternative and higher level configuration option to <exlusions> maven provides scope (test, runtime etc.) to filter certain dependencies.\nnever the less sometimes it is quite helpful to have a another configuration option, where you decide what to include transitively or what kind of dependency-set is relevant to your current project. using <exclusions> configuration to accomplish this is often very verbose, non-standard and is difficult to read (it is often not obvious what is meant with all these exclusions). \n \nas an example ivy includes such configuration meta-info approach (see http://ant.apache.org/ivy/m2comparison.html). this feature would be nice because when building releases one is more flexible.",
        "Write at the debug output the name of the used settings.xml and the path of the repository \nWhen used with the -X option (debug), Maven should also say at least:\n - which configuration file (settings.xml) it's trying to use, or if it hasn't found anyone\n - the path of the repository which will be used\n\nThat's important since a lot of problems occur when you think that you (and Eclipse) are using a repository but Maven is saving all new things in other place. I experienced these problems after a move of the repository and the settings.xml and it was very hard to discover that Maven wasn't really using my ~/.m2/settings.xml\n\n"
    ],
    [
        "MNG-3170",
        "MNG-1890",
        "DefaultRepositoryMetadataManager caches metadata without eviction policy DefaultRepositoryMetadataManager.cachedMetadata ignores changes in the local repo as the metadata is cached forever in an embedded environment",
        "Optionally split up/partition pom.xml with XInclude A pom.xml can get really big, considering it holds more information then maven.xml and project.xml together.\nIn Java is a bad idea to have a class with more then 500 lines.\nIn Spring they use the <import tag to split up applicationContext files.\nBut there already is a standard to partition xml files: XInclude.\n\nFrom a user perspective a partitioned pom.xml would be a lot more maintable since we could decide to make a\npom-dependencies.xml etc if we we want.\n\nProblems:\n- Sending the pom to the repository should merge it.\n- Continuum needs a non-partioned pom\n- pom processing mevenide's etc.\n\n"
    ],
    [
        "MNG-2235",
        "MNG-2870",
        "unify .m2 configuration and have a \"super settings\" the \".m2/settings.xml\" configuration is located in several places, and instead should be a configuration solely of the default maven settings builder to make it easily changable.\n\nAlso, any defaults in the settings model should come from a super model implemented in a similar fashion to the super pom.",
        "Hide internal dependencies like plexus-utils Using the minijar plugin we can hide internally used utilities like plexus so that plugins can use their own version."
    ],
    [
        "MNG-5039",
        "MNG-2546",
        "Maven does not properly track class files to be included in jar/test breaking incremental build When files in the source tree (either src/main or src/test) are renamed or removed, the class files resulting from their prior compilation remain in the corresponding target/ directories.  It seems that surefire and package plugins simply grab everything from target/ and as a result, incremental builds are not correct.  For example,\n\n* If you remove a test source file and the test will continue to run. This is bad esp when the test is failing; packaging will fail even though it should not.\n* If you remove/rename a source file and the class file will continue to be in the jar.  This may cause tests to succeed even though they should not.  (And if you share the jar, this will affect downstream non-test dependencies.)\n\nI wrote up a test suite for the second case and put it up at https://github.com/sit/java-build-test. To run it ...\n\n   git clone git://github.com/sit/java-build-test.git\n   cd java-build-test\n   sh runme.sh\n\n(It does rely on git to automate the rename/delete actions though so a tar of the sources won't work.)\nIn addition to Maven, it tests Gradle (which works) and Buildr (which behaves the same as Maven).\n\nWhile incremental builds are not the recommendation for official deliverables, this does make Maven appear extremely unreliable to developers who never know after syncing whether they will have to do a clean build or if an incremental one is correct.",
        "Allow plugin executions in the \"super-init\" phase before reactor sorting of modules build order As seen here, http://www.nabble.com/How-to-execute-a-plugin-prior-to-the-reactor-sorting--tf2062739.html#a5682349.  I also have the need to bind my maven-pde-plugin to a phase before the reactor sorting of project build order happens.  My plugin is being developed to build eclipse plugins, features, fragments, update sites and products.  Right now I can build plugins and features.  However the order has to constantly be managed by the user taking information from the eclipse descriptors and adding it to the pom file.  For plugin projects I can bind to a phase before the compile phase and dynamically analyze the eclipse plugin descriptors and add the necessary dependencies/resources to the MavenProject instance and all is well.  For feature projects, I also can dynamically analyze the eclipse feature descriptor and add the necessary resources to the MavenProject instance.  However, features depend on other plugins, fragments and features.  While I can dynamicaly add the plugins, fragments and features to the MavenProject as dependencies they are not taken into context as the reactor has already computed the sorting order.\n\nWhat would be perfect is if there was a \"super-init\" phase that plugins could bind to and be executed in before the normal declared lifecycle happened.  Therefore no matter what the lifecycle was, the \"super-init\" phase would be available.  Then plugins could do things like augmenting the super-pom with build #'s/identifiers, dependencies, dynamic projects, etc all before maven gets going.  That would solve the problem myself and others have as well as be 100% backwards compatible.  This super-init phase (please pick a better name) would e available to reactor and non-reactor builds.  A more specific fix would be to allow plugins to ask the reactor to reevaluate the build order."
    ],
    [
        "MNG-3070",
        "MNG-4601",
        "${x} properties no longer expanded in </version> tag after 2.0.3 I was experimenting  with maven using killer-app sample (http://www.sonatype.com/book/examples/book-killerapp.zip) from Sonatipe book (http://www.sonatype.com/book/index.html) and immediately hit a show stopper.\nMaven 2.0.3 is able to build the sample out of the box, but any later version up to 2.0.7 chokes telling that it's not able to find the parent project:\n\nC:\\home\\prjHome\\mavenTest\\killerapp>mvn help:effective-pom\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nGroupId: com.training.killerapp\nArtifactId: killerapp\nVersion: 1.0-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  com.training.killerapp:killerapp:pom:1.0-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Cannot find parent: com.training.killerapp:killerapp for project: null:killerapp-model:jar:null for project null:killerapp-model:jar:null\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:378)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:290)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:280)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nAll the problems looks to be caused by the fact that the root POM has the following construct (that should be perfectly legal) in it:\n  <version>${killerappVersion}</version>\n\n  <properties>\n    <killerappVersion>1.0-SNAPSHOT</killerappVersion>\n  </properties>\n\nIf i substitute the version tag in the root POM with the following everything works with all versions.\n<version>1.0-SNAPSHOT</version>\n\nI was not able to find anywhere in the doc that ${x} substitution is no longer legal in </version> tag, so i think this is a regression from 2.0.3.\n\nBtw, all the test were done with clean local repository.\n",
        "More options for activating profiles, specifically file in path It would be nice to test for the presence of a given command or file in the user's PATH as a condition for activating a profile.\n\nMy specific use case is that I want to change the way Javadocs are output if graphviz's dot.exe program is in the path."
    ],
    [
        "MNG-5884",
        "MNG-4950",
        "mvn script doesn't handle directories containing spaces find_maven_basedir() doesn't handle a parent directory working directory containing spaces. This causes a \"bad variable name\" warning when starting mvn.\r\n\r\n{noformat}me@mymachine:~/tmp/space in directory/nospace$ mvn -v\r\n/home/me/local/maven/bin/mvn: 200: local: directory/nospace: bad variable name\r\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T13:57:37+02:00)\r\nMaven home: /home/me/local/maven\r\nJava version: 1.7.0_79, vendor: Oracle Corporation\r\nJava home: /usr/lib/jvm/java-7-openjdk-amd64/jre\r\nDefault locale: fr_FR, platform encoding: UTF-8\r\nOS name: \"linux\", version: \"3.13.0-62-generic\", arch: \"amd64\", family: \"unix\"{noformat}\r\n\r\nI've submitted a patch at https://github.com/apache/maven/pull/63.",
        "Javadoc improvements to DefaultSettingsWriter/Reader The javadocs of DefaultSettingsWriter and DefaultSettingsReader is just copied from the interface and should better reflect what these classes do.\nI fixed this in the attached patch (project: maven-settings-builder on trunk)."
    ],
    [
        "MNG-1932",
        "MNG-3186",
        "Document how to write an ant based mojo ",
        "First iteration of concise, user-centric error reporting "
    ],
    [
        "MNG-1945",
        "MNG-2225",
        "project.getBuild().setSourceDirectory() should modify the compile source roots automatically Here's the code that I have in the clover plugin right now:\n\n    private void redirectSourceDirectories()\n    {\n        String oldSourceDirectory = this.project.getBuild().getSourceDirectory();\n\n        this.project.getBuild().setSourceDirectory( this.cloverOutputSourceDirectory );\n        \n        // Maven2 limitation: changing the source directory doesn't change the compile source roots\n        Iterator sourceRoots = this.project.getCompileSourceRoots().iterator();\n        for (int i = 0; sourceRoots.hasNext(); i++)\n        {\n            String sourceRoot = (String) this.project.getCompileSourceRoots().get( i );\n            if (sourceRoot.equals(oldSourceDirectory))\n            {\n                this.project.getCompileSourceRoots().remove( i );\n\n                // Note: Ideally we should add the new compile source root at the same place as the\n                // one we're removing but there's no API for this...\n                this.project.addCompileSourceRoot( this.project.getBuild().getSourceDirectory() );\n            }\n        }\n    }\n\nI believe this could be put in Maven core.",
        "Classloader problem when adding jars to M2_HOME Added these jars to M2_HOME/custom to allow using scm based remote repos\n\nhttp://www.ibiblio.org/maven2/org/apache/maven/scm/maven-scm-api/1.0-beta-2/maven-scm-api-1.0-beta-2.jar\nhttp://www.ibiblio.org/maven2/org/apache/maven/scm/maven-scm-manager-plexus/1.0-beta-2/maven-scm-manager-plexus-1.0-beta-2.jar\nhttp://www.ibiblio.org/maven2/org/apache/maven/scm/maven-scm-provider-svn/1.0-beta-2/maven-scm-provider-svn-1.0-beta-2.jar\nhttp://cvs.apache.org/maven-snapshot-repository/org/apache/maven/wagon/wagon-scm/1.0-alpha-7-SNAPSHOT/wagon-scm-1.0-alpha-7-20060308.183410-3.jar\n\n\nbin/m2.conf\n\nmain is org.apache.maven.cli.MavenCli from plexus.core.maven\n\nset maven.home default ${user.home}/m2\n\n[plexus.core]\nload ${maven.home}/core/*.jar\n\n[plexus.core.maven]\nload ${maven.home}/custom/*.jar\nload ${maven.home}/lib/*.jar\n\n\n\n\nWhen running \"mvn install\" and \"mvn testwagonscm:test\" in the attached test case you get a ClassCastException although the Class to assign to and the assigned one are the same. The problem seems to be that they come from different classloaders. This problem makes the project-info-report:scm goal fail."
    ],
    [
        "MNG-5205",
        "MNG-3708",
        "Memory leak in StringSearchModelInterpolator {{StringSearchModelInterpolator}} abuses {{WeakHashMap}}; the {{Field}} values of {{fieldsByClass}} hold hard references to the {{Class}} keys, making it useless. Thus if you passed any {{Class}} to it, that class and its {{ClassLoader}} and the transitive static graph therefrom would never be collectible.\n\nAnyway a cache is unnecessary, since {{Class}} does its own caching of fields!\n\nAlso removing the ill-conceived {{fieldIsPrimitiveByClass}} - not a memory leak, but likely unnecessary complication.\n\nThe class is deprecated anyway, but just in case it is used by someone it should be fixed.",
        "Windows Installer A simple NSIS-based installer for Windows would be nice.\nProcedure:\n- copy to C:\\Program Files\\Maven2\n- add PATH env variable that points to Maven2\\bin"
    ],
    [
        "MNG-4372",
        "MNG-29",
        "Unable to determine the release version on parallel execution We are building maven projects from Hudson with several workers.\n\nWhen two projects with the same parent (with version set to RELEASE) are built at the exact same time then both fail with:\n[INFO] Failed to resolve artifact.\n\nGroupId: com.***\nArtifactId: ***\nVersion: RELEASE\n\nReason: Unable to determine the release version\n\n  ***:pom:RELEASE\n-----------------------------\n\nKnown workarounds:\n- Start some seconds apart\n- Using explicit version instead of RELEASE\n\nIt's not 100% reproducible but happens often enough to be annoying. When we had a larger number of projects using RELEASE this happened quite often.\n\nI will try to catch it in DEBUG mode, although this seems to affected the timing of the access.",
        "Continuous integration for the core "
    ],
    [
        "MNG-2553",
        "MNG-5703",
        "Maven Local Settings Model should allow configuration of distributions (distributionManagement) There is a good use case where this would be very useful.\n\nE.g. I develop a plugin in mojo-sandbox and want to test it in an environment other than the one that I developed it on (e.g. a computer at work). I check out the plugin to this, build and then want to deploy to another repository (e..g a company's internal repository). I don't want to fiddle with the pom.xml of the plugin, just refer to a profile in settings.xml.",
        "ClosedChannelException from DefaultUpdateCheckManager.read on Linux I already added a note in: http://jira.codehaus.org/browse/MNG-5629 .\nBut, since this JIRA deals with Windows, since my issues are on Linux, and since I'm blocked, I'm opening a new JIRA.\n\nI was working on the port of Falcon on PPC64 when it appeared. I'm now blocked.\nFirst, I was on RHEL7/PPC64BE: this Maven error was not there, and I've been able to compile and run tests, with IBM JVM v1.6 .\nThen, I moved to Ubuntu/PPC64LE, with IBM JVM 1.7, and the issue appeared.\nI then tried on Ubuntu/x86_64, with IBM JVM and then Oracle JVM, v1.7, and the issue was there too. Same with IBM JVM 1.6 .\n\nTraces show the issue when using -X only.\n\nExample of traces, on Ubuntu/x86_64 , with IBM JVM 1.6 :\n{noformat}\nexport HADOOP_VERSION=2.4.1\nexport HADOOP_PROFILE=hadoop-2\nexport OOZIE_VERSION=4.0.1\nmvn -X compile -P $HADOOP_PROFILE -Dhadoop.version=$HADOOP_VERSION -Doozie.version=$OOZIE_VERSION -Doozie.forcebuild=false -DskipTests\n\n...\n[DEBUG] Determining update check for artifact asm:asm (/home/reixt/.m2/repository/asm/asm/maven-metadata-central.xml) from central (http://repo1.maven.org/maven2)\n[DEBUG] Searching for central.maven-metadata-central.xml.lastUpdated in resolution tracking file.\n[DEBUG] Reading resolution-state from: /home/reixt/.m2/repository/asm/asm/resolver-status.properties\n[DEBUG] Error releasing shared lock for resolution tracking file: /home/reixt/.m2/repository/asm/asm/resolver-status.properties\njava.nio.channels.ClosedChannelException\nat sun.nio.ch.FileLockImpl.release(FileLockImpl.java:47)\nat org.apache.maven.repository.legacy.DefaultUpdateCheckManager.read(DefaultUpdateCheckManager.java:396)\nat org.apache.maven.repository.legacy.DefaultUpdateCheckManager.readLastUpdated(DefaultUpdateCheckManager.java:323)\nat org.apache.maven.repository.legacy.DefaultUpdateCheckManager.readLastUpdated(DefaultUpdateCheckManager.java:159)\nat org.apache.maven.repository.legacy.DefaultUpdateCheckManager.isUpdateRequired(DefaultUpdateCheckManager.java:148)\n\n...\n\n[INFO] Apache Falcon Oozie EL Extension .................. FAILURE [ 26.935 s]\n[INFO] Apache Falcon Embedded Hadoop - Test Cluster ...... SKIPPED\n....\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 17:52 min\n[INFO] Finished at: 2014-10-20T10:18:30-05:00\n[INFO] Final Memory: 38M/181M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal on project falcon-oozie-el-extension: Could not resolve dependencies for project org.apache.falcon:falcon-oozie-el-extension:jar:0.5-incubating: Could not find artifact org.apache.oozie:oozie-core:jar:4.0.1-falcon in central (http://repo1.maven.org/maven2) -> [Help 1]\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project falcon-oozie-el-extension: Could not resolve dependencies for project org.apache.falcon:falcon-oozie-el-extension:jar:0.5-incubating: Could not find artifact org.apache.oozie:oozie-core:jar:4.0.1-falcon in central \n{noformat}\n\nTestcase:\n- download Falcon v0.5\n- use above mvn options"
    ],
    [
        "MNG-2727",
        "MNG-5857",
        "Fix Logging in threadsafe components ",
        "Arguments from command line should override those in .mvn/maven.config Because of the way the command line args are added at the *start* of the list here: https://git-wip-us.apache.org/repos/asf?p=maven.git;a=blob;f=maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java;h=034cb004a1f431089de5c66aab15ddbf5b784c30;hb=HEAD#l403, they get overwritten by the settings in .mvn/maven.config. I would have thought this should be the other way round."
    ],
    [
        "MNG-1419",
        "MNG-908",
        "resolve outstanding wagon issues ",
        "Context class loader references incorrect realm during plugin execution John Fallows wrote:\n\nI am currently developing a custom maven2 plugin that needs to parse\nsome xml files (using xmlbeans).  Therefore I used the m2 xmlbeans\nplugin at mojo.codehaus.org to generate the Java code for 3 different\nschema namespaces.\n\nUnit tests within the plugin verify that this code has been generated\ncorrectly and works as expected.\n\nHowever, when another m2 project attempts to use the custom plugin,\nnot all the parsed xml data structures are strongly typed Java\nObjects.  Instead, some are just simple XmlObjects, as though no type\ninformation was generated.\n\nIt seems as though some of the type information cannot be located by\nthe xmlbeans runtime when executed through a maven2 plugin.  Could the\nclassworlds classloader be somehow preventing xmlbeans from seeing all\nthe type information?\n\n\nJohn Fallows wrote:\n\nOk, so i've done some more digging and it appears to be a classloader\nproblem in M2 rather than anything xmlbeans-specific.\n\nThe reason that some of the xmlbeans type information is not available\nis that a call to\ncontextClassLoader.getResourceAsStream(\"some-generated-xmlbeans-resource\")\nis returning null when it should be returning non-null.\n\nHowever, the class loader of the CustomMojo.class itself does return a\nnon-null stream as desired.\n\nSo, I have worked around this by doing the following in CustomMojo:\n\n public void execute() throws MojoExecutionException\n {\n   ClassLoader ccl = Thread.currentThread().getContextClassLoader();\n   try\n   {\n     Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n     ... other Mojo code that calls XmlBeans here ...\n   }\n   finally\n   {\n     Thread.currentThread().setContextClassLoader(ccl);\n   }\n }\n\nIs this something that could be managed by the M2 runtime instead?\n"
    ],
    [
        "MNG-4554",
        "MNG-4008",
        "[regression] plugin updates are requested on every build regardless of policies I'm not sure if this is an intentional change that I've missed or not, but running something like:\n\n{code}\nmvn archetype:generate\n{code}\n\nwill retrieve the metadata from the repository on every build:\n\n{code}\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-metadata.xml\n9 KB downloaded at 17.1 KB/sec\n{code}\n\nThis is in contrast to Maven 2.2.1 which always continues to use the first version encountered until you use -U:\n\n{code:xml}\n  <pluginRepositories>\n    <pluginRepository>\n      <releases>\n        <updatePolicy>never</updatePolicy>\n      </releases>\n{code}\n\nWhile that remains in the super POM of Maven 3, it seems that the metadata is retrieved regardless.",
        "[regression] Build filters are collapsed Input POM snippet:\n{code:xml}\n<build>\n  <filters>\n    <filter>src/main/filters/a.properties</filter>\n    <filter>src/main/filters/c.properties</filter>\n    <filter>src/main/filters/b.properties</filter>\n    <filter>src/main/filters/d.properties</filter>\n  </filters>\n</build>\n{code}\nEffective POM:\n{code:xml}\n<build>\n  <filters>\n    <filter>src/main/filters/a.properties</filter>\n  </filters>\n</build>\n{code}\ni.e. only one filter definition survives."
    ],
    [
        "MNG-5376",
        "MNG-1381",
        "Account for changes between the Apple and Oracle JDKs on OSX With the arrival of Java 7 on OSX the directory locations and naming has changed. Some changes need to be made in the launch scripts to account for the changes.",
        "best practices: testing strategies The wiki page used to collect feedback is: http://docs.codehaus.org/display/MAVEN/Testing+Strategies\n"
    ],
    [
        "MNG-4338",
        "MNG-2117",
        "Unexepceted \"Unknown packaging: bundle\" error for plugins with custom lifecycle mapping that defines optional mojos This was originally reported against m2e as https://issues.sonatype.org/browse/MNGECLIPSE-1636. Attached sample project builds using maven 2.2.1 but fails with using 3.0 snapshot (svn rev 811372)\n\n{noformat}\nigor@desktop:/tmp/bundle-test$ /workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/bin/mvn -X clean package\nApache Maven 3.0-SNAPSHOT (r811383; 2009-09-04 12:18:34-0400)\nJava version: 1.6.0_13\nJava home: /opt/jdk1.6.0_13/jre\nDefault locale: en_CA, platform encoding: UTF-8\nOS name: \"linux\" version: \"2.6.28-15-generic\" arch: \"amd64\" Family: \"unix\"\n[INFO] Error stacktraces are turned on.\n[INFO] Scanning for projects...\n[DEBUG] Created new class realm project>org.example:bundle-test:1.0.0-SNAPSHOT\n[DEBUG]   Included: org.ops4j:maven-pax-plugin:maven-plugin:1.4\n[DEBUG]   Excluded: org.apache.maven:maven-project:jar:2.0.7\n[DEBUG]   Excluded: org.apache.maven:maven-settings:jar:2.0.7\n[DEBUG]   Excluded: org.apache.maven:maven-model:jar:2.0.7\n[DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:1.4.7\n[DEBUG]   Excluded: org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1\n[DEBUG]   Included: junit:junit:jar:3.8.1\n[DEBUG]   Excluded: classworlds:classworlds:jar:1.1-alpha-2\n[DEBUG]   Excluded: org.apache.maven:maven-profile:jar:2.0.7\n[DEBUG]   Excluded: org.apache.maven:maven-artifact-manager:jar:2.0.7\n[DEBUG]   Excluded: org.apache.maven:maven-repository-metadata:jar:2.0.7\n[DEBUG]   Excluded: org.apache.maven:maven-artifact:jar:2.0.7\n[DEBUG]   Excluded: org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-2\n[DEBUG]   Excluded: org.apache.maven:maven-plugin-registry:jar:2.0.7\n[DEBUG]   Excluded: org.apache.maven:maven-plugin-api:jar:2.0.7\n[DEBUG]   Included: org.apache.maven.archetype:maven-archetype-core:jar:1.0-alpha-7\n[DEBUG]   Included: org.codehaus.plexus:plexus-velocity:jar:1.1.2\n[DEBUG]   Included: plexus:plexus-utils:jar:1.0.2\n[DEBUG]   Included: commons-collections:commons-collections:jar:2.0\n[DEBUG]   Included: commons-logging:commons-logging-api:jar:1.0.4\n[DEBUG]   Included: velocity:velocity:jar:1.4\n[DEBUG]   Included: velocity:velocity-dep:jar:1.4\n[DEBUG]   Included: dom4j:dom4j:jar:1.6.1\n[DEBUG]   Included: xml-apis:xml-apis:jar:1.0.b2\n[DEBUG]   Included: org.apache.maven.shared:maven-downloader:jar:1.0\n[DEBUG]   Included: org.apache.maven.plugins:maven-compiler-plugin:maven-plugin:2.0.2\n[DEBUG]   Included: org.codehaus.plexus:plexus-compiler-api:jar:1.5.3\n[DEBUG]   Included: org.codehaus.plexus:plexus-compiler-manager:jar:1.5.3\n[DEBUG]   Included: org.codehaus.plexus:plexus-compiler-javac:jar:1.5.3\n[DEBUG]   Included: org.apache.maven.plugins:maven-eclipse-plugin:maven-plugin:2.5.1\n[DEBUG]   Included: org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-7\n[DEBUG]   Included: org.codehaus.plexus:plexus-interactivity-jline:jar:1.0-alpha-5\n[DEBUG]   Included: jline:jline:jar:0.9.1\n[DEBUG]   Included: org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-5\n[DEBUG]   Included: org.apache.maven:maven-archiver:jar:2.2\n[DEBUG]   Included: org.codehaus.plexus:plexus-resources:jar:1.0-alpha-4\n[DEBUG]   Included: biz.aQute:bndlib:jar:0.0.255\n[DEBUG]   Included: org.apache.maven.shared:maven-osgi:jar:0.2.0\n[DEBUG]   Included: org.eclipse.core:resources:jar:3.3.0-v20070604\n[DEBUG]   Included: org.apache.maven.shared:file-management:jar:1.2\n[DEBUG]   Included: org.apache.maven.shared:maven-shared-io:jar:1.1\n[DEBUG] Failed to lookup a member of active collection with role: org.apache.maven.lifecycle.mapping.LifecycleMapping and role-hint: bundle\n-----------------------------------------------------\nthis realm =    project>org.example:bundle-test:1.0.0-SNAPSHOT\nthis strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nurls[0] = file:/home/igor/.m2/repository/org/ops4j/maven-pax-plugin/1.4/maven-pax-plugin-1.4.jar\nurls[1] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-utils/1.4.7/plexus-utils-1.4.7.jar\nurls[2] = file:/home/igor/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar\nurls[3] = file:/home/igor/.m2/repository/org/apache/maven/archetype/maven-archetype-core/1.0-alpha-7/maven-archetype-core-1.0-alpha-7.jar\nurls[4] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-velocity/1.1.2/plexus-velocity-1.1.2.jar\nurls[5] = file:/home/igor/.m2/repository/plexus/plexus-utils/1.0.2/plexus-utils-1.0.2.jar\nurls[6] = file:/home/igor/.m2/repository/commons-collections/commons-collections/2.0/commons-collections-2.0.jar\nurls[7] = file:/home/igor/.m2/repository/commons-logging/commons-logging-api/1.0.4/commons-logging-api-1.0.4.jar\nurls[8] = file:/home/igor/.m2/repository/velocity/velocity/1.4/velocity-1.4.jar\nurls[9] = file:/home/igor/.m2/repository/velocity/velocity-dep/1.4/velocity-dep-1.4.jar\nurls[10] = file:/home/igor/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar\nurls[11] = file:/home/igor/.m2/repository/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar\nurls[12] = file:/home/igor/.m2/repository/org/apache/maven/shared/maven-downloader/1.0/maven-downloader-1.0.jar\nurls[13] = file:/home/igor/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.0.2/maven-compiler-plugin-2.0.2.jar\nurls[14] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-compiler-api/1.5.3/plexus-compiler-api-1.5.3.jar\nurls[15] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-compiler-manager/1.5.3/plexus-compiler-manager-1.5.3.jar\nurls[16] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-compiler-javac/1.5.3/plexus-compiler-javac-1.5.3.jar\nurls[17] = file:/home/igor/.m2/repository/org/apache/maven/plugins/maven-eclipse-plugin/2.5.1/maven-eclipse-plugin-2.5.1.jar\nurls[18] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-archiver/1.0-alpha-7/plexus-archiver-1.0-alpha-7.jar\nurls[19] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-interactivity-jline/1.0-alpha-5/plexus-interactivity-jline-1.0-alpha-5.jar\nurls[20] = file:/home/igor/.m2/repository/jline/jline/0.9.1/jline-0.9.1.jar\nurls[21] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-5/plexus-interactivity-api-1.0-alpha-5.jar\nurls[22] = file:/home/igor/.m2/repository/org/apache/maven/maven-archiver/2.2/maven-archiver-2.2.jar\nurls[23] = file:/home/igor/.m2/repository/org/codehaus/plexus/plexus-resources/1.0-alpha-4/plexus-resources-1.0-alpha-4.jar\nurls[24] = file:/home/igor/.m2/repository/biz/aQute/bndlib/0.0.255/bndlib-0.0.255.jar\nurls[25] = file:/home/igor/.m2/repository/org/apache/maven/shared/maven-osgi/0.2.0/maven-osgi-0.2.0.jar\nurls[26] = file:/home/igor/.m2/repository/org/eclipse/core/resources/3.3.0-v20070604/resources-3.3.0-v20070604.jar\nurls[27] = file:/home/igor/.m2/repository/org/apache/maven/shared/file-management/1.2/file-management-1.2.jar\nurls[28] = file:/home/igor/.m2/repository/org/apache/maven/shared/maven-shared-io/1.1/maven-shared-io-1.1.jar\nNumber of foreign imports: 4\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlSerializer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParserException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParser from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.Xpp3Dom from realm ClassRealm[plexus.core, parent: null]]\nNumber of parent imports: 19\nimport: Entry[import org.codehaus.plexus.personality from realm null]\nimport: Entry[import org.codehaus.plexus.logging from realm null]\nimport: Entry[import org.codehaus.plexus.lifecycle from realm null]\nimport: Entry[import org.codehaus.plexus.context from realm null]\nimport: Entry[import org.codehaus.plexus.container from realm null]\nimport: Entry[import org.codehaus.plexus.configuration from realm null]\nimport: Entry[import org.codehaus.plexus.component from realm null]\nimport: Entry[import org.codehaus.plexus.classworlds from realm null]\nimport: Entry[import org.codehaus.plexus.PlexusContainerException from realm null]\nimport: Entry[import org.codehaus.plexus.PlexusContainer from realm null]\nimport: Entry[import org.codehaus.plexus.PlexusConstants from realm null]\nimport: Entry[import org.codehaus.plexus.MutablePlexusContainer from realm null]\nimport: Entry[import org.codehaus.plexus.DuplicateChildContainerException from realm null]\nimport: Entry[import org.codehaus.plexus.DefaultPlexusContainer from realm null]\nimport: Entry[import org.codehaus.plexus.DefaultContainerConfiguration from realm null]\nimport: Entry[import org.codehaus.plexus.DefaultComponentRegistry from realm null]\nimport: Entry[import org.codehaus.plexus.ContainerConfiguration from realm null]\nimport: Entry[import org.codehaus.plexus.ComponentRegistry from realm null]\nimport: Entry[import org.apache.maven from realm null]\n\nthis realm =    plexus.core\nthis strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nurls[0] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/wagon-provider-api-1.0-beta-6.jar\nurls[1] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/nekohtml-1.9.6.2.jar\nurls[2] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/wagon-file-1.0-beta-6.jar\nurls[3] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/maven-plugin-api-3.0-SNAPSHOT.jar\nurls[4] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/plexus-interpolation-1.11.jar\nurls[5] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/xbean-reflect-3.4.jar\nurls[6] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/wagon-http-lightweight-1.0-beta-6.jar\nurls[7] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/maven-model-builder-3.0-SNAPSHOT.jar\nurls[8] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/commons-cli-1.2.jar\nurls[9] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/plexus-cipher-1.4.jar\nurls[10] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/google-collect-snapshot-20080530.jar\nurls[11] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/plexus-sec-dispatcher-1.3.jar\nurls[12] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/maven-model-3.0-SNAPSHOT.jar\nurls[13] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/plexus-container-default-1.2.1-20090904.072840-12.jar\nurls[14] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/xercesMinimal-1.9.6.2.jar\nurls[15] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/plexus-component-annotations-1.2.1-20090904.072840-12.jar\nurls[16] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/maven-compat-3.0-SNAPSHOT.jar\nurls[17] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/maven-embedder-3.0-SNAPSHOT.jar\nurls[18] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/plexus-utils-1.5.15.jar\nurls[19] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/maven-core-3.0-SNAPSHOT.jar\nurls[20] = file:/workspaces/tycho-dev/maven/apache-maven/target/apache-maven-3.0-SNAPSHOT/lib/wagon-http-shared-1.0-beta-6.jar\nNumber of foreign imports: 0\n\n-----------------------------------------------------\norg.codehaus.plexus.component.repository.exception.ComponentLookupException: Unable to lookup component 'org.apache.maven.lifecycle.mapping.LifecycleMapping', it could not be started.\n      role: org.apache.maven.lifecycle.mapping.LifecycleMapping\n  roleHint: bundle\nclassRealm: project>org.example:bundle-test:1.0.0-SNAPSHOT\n\tat org.codehaus.plexus.DefaultComponentRegistry.getComponent(DefaultComponentRegistry.java:366)\n\tat org.codehaus.plexus.DefaultComponentRegistry.lookup(DefaultComponentRegistry.java:178)\n\tat org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:394)\n\tat org.codehaus.plexus.component.collections.AbstractComponentCollection.lookup(AbstractComponentCollection.java:140)\n\tat org.codehaus.plexus.component.collections.ComponentMap.get(ComponentMap.java:74)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.getPluginsBoundByDefaultToAllLifecycles(DefaultLifecycleExecutor.java:1537)\n\tat org.apache.maven.model.plugin.DefaultLifecycleBindingsInjector.injectLifecycleBindings(DefaultLifecycleBindingsInjector.java:61)\n\tat org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:245)\n\tat org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:224)\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:316)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:320)\n\tat org.apache.maven.DefaultMaven.getProjectsForMavenReactor(DefaultMaven.java:263)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:128)\n\tat org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:460)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:334)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:70)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: org.codehaus.plexus.component.repository.exception.ComponentLifecycleException: Error constructing component role: 'org.apache.maven.lifecycle.mapping.LifecycleMapping', implementation: 'org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping', role hint: 'bundle'\n\tat org.codehaus.plexus.component.builder.XBeanComponentBuilder.createComponentInstance(XBeanComponentBuilder.java:176)\n\tat org.codehaus.plexus.component.builder.XBeanComponentBuilder.build(XBeanComponentBuilder.java:123)\n\tat org.codehaus.plexus.component.manager.AbstractComponentManager.createComponentInstance(AbstractComponentManager.java:181)\n\tat org.codehaus.plexus.component.manager.SingletonComponentManager.getComponent(SingletonComponentManager.java:67)\n\tat org.codehaus.plexus.DefaultComponentRegistry.getComponent(DefaultComponentRegistry.java:351)\n\t... 23 more\nCaused by: org.apache.xbean.recipe.ConstructionException: Unable to convert property value from org.codehaus.plexus.component.builder.XBeanComponentBuilder$PlexusConfigurationRecipe to java.util.List<org.apache.maven.lifecycle.mapping.Lifecycle> for injection private java.util.List org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping.lifecycles\n\tat org.apache.xbean.recipe.ObjectRecipe.setProperty(ObjectRecipe.java:472)\n\tat org.apache.xbean.recipe.ObjectRecipe.setProperties(ObjectRecipe.java:367)\n\tat org.apache.xbean.recipe.ObjectRecipe.internalCreate(ObjectRecipe.java:282)\n\tat org.apache.xbean.recipe.AbstractRecipe.create(AbstractRecipe.java:96)\n\tat org.apache.xbean.recipe.AbstractRecipe.create(AbstractRecipe.java:61)\n\tat org.apache.xbean.recipe.AbstractRecipe.create(AbstractRecipe.java:49)\n\tat org.codehaus.plexus.component.builder.XBeanComponentBuilder.createComponentInstance(XBeanComponentBuilder.java:159)\n\t... 27 more\nCaused by: org.apache.xbean.recipe.ConstructionException: Unable to convert configuration for property lifecycles to java.util.List\n\tat org.codehaus.plexus.component.builder.XBeanComponentBuilder$PlexusConfigurationRecipe.internalCreate(XBeanComponentBuilder.java:445)\n\tat org.apache.xbean.recipe.AbstractRecipe.create(AbstractRecipe.java:96)\n\tat org.apache.xbean.recipe.RecipeHelper.convert(RecipeHelper.java:167)\n\tat org.apache.xbean.recipe.ObjectRecipe.setProperty(ObjectRecipe.java:466)\n\t... 33 more\n[ERROR] Some problems were encountered while processing the POMs:\n[ERROR] Unknown packaging: bundle @ org.example:bundle-test:1.0.0-SNAPSHOT (/tmp/bundle-test/pom.xml)\n\norg.apache.maven.project.ProjectBuildingException: Some problems were encountered while processing the POMs:\n[ERROR] Unknown packaging: bundle @ org.example:bundle-test:1.0.0-SNAPSHOT (/tmp/bundle-test/pom.xml)\n\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:339)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:320)\n\tat org.apache.maven.DefaultMaven.getProjectsForMavenReactor(DefaultMaven.java:263)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:128)\n\tat org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:460)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:334)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:70)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\n{noformat}",
        "Update doap file descriptor "
    ],
    [
        "MNG-2783",
        "MNG-5836",
        "Maven Guide to EARs describes WAR projects The \"Maven - Guide to EARs\" [1] describes creation of an EAR project using a non-existent \"maven-archetype-ear\" and further describes the output of the ear archetype creation as a WAR.  It appears that the \"Guide to EARs\" is nearly an exact copy of the \"Guide to Webapps\" [2].\n\n[1] http://maven.apache.org/guides/mini/guide-ear.html\n[2] http://maven.apache.org/guides/mini/guide-webapp.html",
        "logging config is overwritten by $M2_HOME/lib/ext/*.jar If one of the jars in {{$M2_HOME/lib/ext/*.jar}} happens to have {{simplelogger.properties}}, that configuration file masks logging configuration under  {{$M2_HOME/conf/logging}}"
    ],
    [
        "MNG-4773",
        "MNG-4208",
        "Stack trace printed from MavenProject.getParent When M3 is embedded inside NetBeans, and a project is missing a local copy of its parent POM, an unwanted stack trace is printed to console:\n\n{code}\norg.apache.maven.project.ProjectBuildingException: Error resolving project artifact: The repository system is offline and the requested artifact is not locally available at ...\n  org.glassfish:glassfish-parent:pom:3.1-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2, releases=true, snapshots=false)\n for project org.glassfish:glassfish-parent:pom:3.1-SNAPSHOT\n        at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:244)\n        at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:209)\n        at org.apache.maven.project.MavenProject.getParent(MavenProject.java:356)\n        at <<NetBeans code...>>\nCaused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: The repository system is offline and the requested artifact is not locally available at ...\n  org.glassfish:glassfish-parent:pom:3.1-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2, releases=true, snapshots=false)\n\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:291)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:540)\n        at org.apache.maven.repository.legacy.LegacyRepositorySystem.resolve(LegacyRepositorySystem.java:340)\n        at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:231)\n        ... 14 more\n{code}\n\nPlease do not print this stack trace, or send it to a proper logging component where it will be suppressed by default.",
        "[regression] CLI properties can't override project properties during interpolation For the POM snippet\n{code:xml}\n<properties>\n  <testProperty>FAILED</testProperty>\n  <interpolatedProperty>${testProperty}</interpolatedProperty>\n</properties>\n{code}\nand the invocation\n{noformat}\nmvn help:effective-pom -DtestProperty=PASSED\n{noformat}\nthe effective value for {{interpolatedProperty}} ends up being {{FAILED}} instead of {{PASSED}} as specified by the user."
    ],
    [
        "MNG-2323",
        "MNG-5133",
        "Locked SNAPSHOT version ignored We use for our tip revision (head revision of a branch) a snapshot version in the form of:\n\n_major.minor-SNAPSHOT_\n\nIf we make a (maintenance) release, we create a version like:\n\n_major.minor.revision_\n\nWe manage our dependencies in a dependencyManagement section of a super POM, where we define always the last released version of an artifact. A dependency of an artifact that is always declared without explicit version unless it makes usage of an unreleased version, then the child POM will be changed from\n\n{code:xml}\n<dependency>\n  <groupId>group</group>\n  <artifactId>artifact</artifactId>\n<dependency>\n{code}\n\nto \n\n{code:xml}\n<dependency>\n  <groupId>group</group>\n  <artifactId>artifact</artifactId>\n  <version>major.minor-SNAPSHOT</version>\n<dependency>\n{code}\n\nUnfortunately this does not work, Maven still prefers the released version. Here in the example 2.0.0 instead of 2.0.-SNAPSHOT (snippet):\n\n{noformat}\n[INFO] [eclipse:eclipse]\n[DEBUG] com.elsagsolutions.projects.components:es_logging:jar:1.0-SNAPSHOT (selected for null)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0-SNAPSHOT:test (applying version: 2.0.0;applying scope: test)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0.0:test (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (applying version: 2.1_3;)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (selected for test)\n{noformat}\n\nBut it gets worse. Even if we try to lock the version in the child POM, it does not work; the locked version is happily ignored:\n\n{code:xml}\n<dependency>\n  <groupId>group</group>\n  <artifactId>artifact</artifactId>\n  <version>[major.minor-SNAPSHOT]</version>\n<dependency>\n{code}\n\nOutput from the example:\n\n{noformat}\n[INFO] [eclipse:eclipse]\n[DEBUG] com.elsagsolutions.projects.components:es_logging:jar:1.0-SNAPSHOT (selected for null)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0-SNAPSHOT:test (setting version to: 2.0-SNAPSHOT from range: [2.0-SNAPSHOT,2.0-SNAPSHOT])\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0-SNAPSHOT:test (applying version: 2.0.0;applying scope: test)\n[DEBUG]   com.elsagsolutions.commons:es_commons_test:jar:2.0.0:test (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (applying version: 2.1_3;)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3:test (selected for test)\n{noformat}\n\nFirst problem is, that 2.0.x is treated as nearer as 2.0-SNAPSHOT. This is IMHO wrong. The algorithm should look, at which point in the version numbering the SNAPSHOT part starts and ignore the further numbers in the version of released artifacts. Additionally the locked version must be honored in any case.",
        "Problem generating a maven site with multi module projects. Issue:\n\nProblem generating a maven site with multi module projects.\n\nSummary:\n\nThere is a problem when aggregating surefire reports at the parent\nlevel with multi module projects where the child has a reference \nto the parent.\n\n\nDescription:\n\nIn a simple parent / child project configuration, the reactor builds\nthe child first and then the parent last. The simple configuration\nis such that the parent has a sub module definition and the child\nknows nothing about the parent.\n\n    <modules>\n      <module>child1</module>\n    </modules>\n\n    Reactor Build Order:\n    child1\n    example1\n\n\n\nThe reactor order changes to build the parent first when the child \nproject is modified so that it has a reference to the parent.\n\n  <name>child1</name>\n  <artifactId>child1</artifactId>\n\n  <parent>\n    <groupId>muck</groupId>\n    <artifactId>example1</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <relativePath>../pom.xml</relativePath>\n  </parent>\n\n    Reactor Build Order:\n    example1\n    child1\n\n\n\nThis feature may be by design, but it causes a problem with surefire\nand aggregation of it's reports at the parent level. \n\nIf we want to build a top level site and aggregate the surefire \nreport at the top level so that it includes all the child modules, \nthen building the parent site first will cause the surefire report\nto display no tests.\n\n    <modules>\n      <module>child1</module>\n      <module>child2</module>\n    </modules>\n    <build>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-site-plugin</artifactId>\n          <version>3.0-beta-3</version>\n          <configuration>       \n            <reportPlugins>\n              ...\n              <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-report-plugin</artifactId>\n                <version>2.9</version>\n                <configuration>\n                  <aggregate>true</aggregate>\n                </configuration>\n              </plugin>\n\n\n\nRemoval of the parent reference from the child pom will allow the\nsite to generate the surefire report correctly (at the parent) as the\nparent is built last.\n\n\n\nPerhaps the site lifecycle in the reactor should be modified so \nthat it always runs last at the parent level?\n\n\n\nI have a simple test project that exhibits the above behavior. \n\n\n\nSteps to reproduce the issue:\n\nExample 1 is a project configuration with child references \nback to the parent, where aggregation of surefire reports exhibit \nthe unwanted behavior.\n\n1.  Extract out all the files from the maven3-jira.zip into a directory of\n    your choice. I will use E:\\projects\\maven3-jira\n   \n2.  From the \"example1\" directory, run:\n   \n        mvn clean\n   \n    Then run:\n   \n        mvn package site\n        \n    Note that I have collected a log for this step with:\n        mvn -X package site > ../build1.log\n\n3.  Note the reactor build order:\n\n        Reactor Build Order:\n        example1\n        child1\n        child2      \n\n4.  Inspect the surefire report:\n\n        E:\\projects\\maven3-jira\\example1\\target\\site\\surefire-report.html        \n\n5.  Note that there are 0 tests in the report.\n\n6.  Run the command again:\n\n        mvn package site\n\n    Note that I have collected a log for this step with:\n        mvn -X package site > ../build2.log\n\n7.  Inspect the surefire report:\n\n        E:\\projects\\maven3-jira\\example1\\target\\site\\surefire-report.html        \n\n8.  Note that there are now some tests results in the report.\n    I believe that they are the results from the previous run, and not \n    this current run.\n\n9.  Run a \"mvn clean\", and then another \"mvn package site\" and note\n    that the site report displays 0 tests again.\n\nExample 2 is a project configuration with no child references \nback to the parent.\n\n10. From the \"example2\" directory, run:\n\n        mvn clean\n   \n    Then run:\n   \n        mvn package site\n\n11. Note the reactor build order:\n\n        Reactor Build Order:\n        child1\n        child2\n        example2\n\n12. Inspect the surefire report:\n\n        E:\\projects\\maven3-jira\\example2\\target\\site\\surefire-report.html        \n\n13. Note thet there are tests results in the report.\n\n"
    ],
    [
        "MNG-4043",
        "MNG-1250",
        "Resolve or rollback WebDAV wagon deployment issue where hostname is improperly extracted from URL See WAGON-244.\n\nThis is one of the most serious problems we've had reported for Maven 2.1.0-M1, and should be driven to some sort of resolution before 2.1.0-final is released.",
        "Wrong version number reported by --version I just installed Maven 2.0 after it was released last night.  When running mvn --version (or m2 --version) the version returned is \"Maven version: 2.0-beta-1\" and I imagine it should be version 2.0. An incredibly minor issue, but the devil is in the details.  Thanks for all your hard work.\n----------------\nRegards,\nAlex"
    ],
    [
        "MNG-4498",
        "MNG-2218",
        "Don't fail dependency resolution if one remote repo's metadata is broken It can happen that Maven fetches broken {{maven-metadata.xml}} into the local repo (e.g. because it doesn't understand HTTP error codes properly and downloads HTML files or just because the remote repo serves crap). Currently, the bad metadata file for one repo will make the entire dependency resolution fail, regardless whether the repo/metadata in question is actually needed to complete the resolution.\n\nWe should just warn in case of unreadable metadata. If it was crucial for the current artifact resolution, it will still fail the build later on when all metadata has been merged (and the bits from the broken metadata are missing).",
        "Inheritance of Properties-style plugin parameters doesn't appear to work It seems that you cannot inherit systemProperties for the surefire plugin when the child POM provides its own set...the Xpp3Dom class should provide merge control XML attributes for this, but they don't seem to be working. The attached test case shows what I believe to be the correct configuration."
    ],
    [
        "MNG-5366",
        "MNG-772",
        "[Regression] resolveAlways does not force dependency resolution in Maven 3.0.4 Using Maven 3.0.4, artifacts can only be resolved a single time during the build lifecycle using the Maven 2.x dependency resolution API.  Using resolver.resolveAlways() should force re-resolution of the artifact, however if the artifact was already resolved once during the build, then it will not be re-resolved even when calling resolveAlways().\n\nThis works as expected in Maven 3.0.0-3.0.3, and the artifact is re-resolved.\n",
        "maven-eclipse-plugin NPE during writing setting file. the maven eclipse plugin was certain that if the maven-compiler-plugin was mentioned in the artifacts list that it would have source and target values defined.\n\n         <plugin>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n               <encoding>iso-8859-1</encoding>\n            </configuration>\n         </plugin>\n\nI don't and the eclipse plugin was blowing up with a NPE for this.\n\nI patched it to check for the child Xpp3Dom objects to actually exist before trying to get their values, which was the cause of the NPE."
    ],
    [
        "MNG-724",
        "MNG-2784",
        "Make distinction between m2 and project plugins, and add --dont-update-snapshots and --dont-update-maven-snapshots Make a distinction between Maven dependencies and Project dependencies.\n\nMaven core deps are already in the maven dir; everything that those depend on, like plugins and their dependencies,\nare 'maven dependencies', needed to build the project.\n\nThe project itself also has dependencies, those are the project dependencies (doh!)\n\nI've had almost daily problems here using a bootstrapped snapshot m2, because dependencies\nof m2 (like plexus-compiler-*) were updated, and these updates broke the compiler-plugin, requiring\na new bootstrap.\n\nI'd like to be able to tell m2 NOT to update snapshots, be it  m2 snapshots, project snapshots, or in general (both).\nOffline mode doesn't cover this - it will also not download releases.",
        "Multiple executions of the same plugin at the same life cycle phase in a multi-module profile mixed up I use the latest Maven 2.0.5 build found at \nhttp://people.apache.org/~jvanzyl/maven-2.0.5/org/apache/maven/maven-core/2.0.5/\n\nI have multiple executions of the same plugin at the same life cycle phase in a multi-module parent POM. There was a bug regarding the order of this executions. This was fixed at 2.0.5.\n\nNow I needed to extract these plugin executions to a profile in this parent POM. Now the executions are not ordered correctly anymore :-(\n\nBefore (works fine):\nparent\\pom.xml <= multiple executions of the same plugin at the same life \ncycle phase in the default build element\nparent \\child1\\pom.xml\nparent \\child2\\pom.xml\nCalling mvn install in parent works fine.\n\nAfter (fails):\nparent\\pom.xml <= multiple executions of the same plugin at the same life \ncycle phase in the build element of a profile\nparent \\child1\\pom.xml\nparent \\child2\\pom.xml\nCalling mvn install in parent mixed up the execution order in the childs."
    ],
    [
        "MNG-5608",
        "MNG-5228",
        "warn if file-based profile activation uses ${project.basedir} since only ${basedir} is supported documentation was improved in MNG-5590\n\nbut adding a warning will help users discover the documentation",
        "[regression] Local snapshots are ignored when version range is specified in dep a) \"mvn deploy\" libA  (deploy version libA, 1.0.0 in remote repository)\nb) wait a few seconds\nc) \"mvn install\" libA, this creates a local snapshot that is newer than the latest release version in remote repo (libA, 1.0.0-SNAPSHOT)\nd) in a dependent project libB, specifying dependency on libA as [1.0.0-SNAPSHOT, 1.0.1) \"mvn compile -U\"\n\nLatest released version in remote repo is always used and local SNAPSHOT never used (although newer and included in version range)\n\n\nRelated to MNG-4955 ?"
    ],
    [
        "MNG-2878",
        "MNG-1997",
        "[regression] NPE when running Checkstyle I get:\n\n{code}\n[INFO] An error has occurred in Checkstyle report generation.\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: An error has occurred in Checkstyle report generation.\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:524)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.forkProjectLifecycle(DefaultLifecycleExecutor.java:862)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.forkLifecycle(DefaultLifecycleExecutor.java:699)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:470)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:440)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:419)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:271)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:238)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:146)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:303)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:123)\n        at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:907)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:369)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\nCaused by: org.apache.maven.plugin.MojoExecutionException: An error has occurred in Checkstyle report generation.\n        at org.apache.maven.reporting.AbstractMavenReport.execute(AbstractMavenReport.java:79)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:598)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:499)\n        ... 20 more\nCaused by: java.lang.NullPointerException\n        at java.io.Reader.<init>(Reader.java:61)\n        at java.io.InputStreamReader.<init>(InputStreamReader.java:55)\n        at org.codehaus.plexus.util.IOUtil.copy(IOUtil.java:248)\n        at org.codehaus.plexus.util.IOUtil.toString(IOUtil.java:307)\n        at org.codehaus.plexus.util.IOUtil.toString(IOUtil.java:295)\n        at org.apache.maven.reporting.AbstractMavenReport.getSiteDescriptor(AbstractMavenReport.java:134)\n        at org.apache.maven.reporting.AbstractMavenReport.execute(AbstractMavenReport.java:70)\n        ... 22 more\n{code}\n\nThe POM I used:\n\n{code}\n  <build>\n    <plugins>\n      <plugin>\n        <!-- Apply the Checkstyle configurations defined in the top level pom.xml file -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <dependencies>\n          <dependency>\n            <groupId>com.xpn.xwiki</groupId>\n            <artifactId>xwiki-build-verifications</artifactId>\n            <version>1.0-SNAPSHOT</version>\n          </dependency>\n        </dependencies>\n        <configuration>\n          <includes>\n              **/Api.java,\n              **/xmlrpc/Attachment.java,\n              **/xmlrpc/SpaceSummary.java,\n              **/ViewAction.java,\n              **/ZipExplorer*.java,\n              **/content/**/*.java,\n              **/XWikiMessageTool.java\n          </includes>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n{code}\n\nThanks\n-Vincent",
        "document xsd support for pom and settings in guides Your favorite IDE probably supports xsd schema's for pom.xml and settings.xml editing.\nYet very few have the defined the xsd in those files because they don't know about it.\n\nThe guides should note that pom.xml files best start with:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\nWhy isn't it http://maven.apache.org/xsd/maven-v4_0_0.xsd (notice the xsd subdirectory) btw?\n\nand the settings.xml starts with:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/???/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/???/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\nOf course, replace the ??? with something (I did \"settings\" but I ahve no idea if that's ok)."
    ],
    [
        "MNG-1414",
        "MNG-1177",
        "Maven dies when trying to report a plugin error While trying to build an EAR with Maven 2.0.\n\n\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-ear-plugin:2.0:generate-application-xml' --\n>\n[DEBUG]   (f) displayName = wsf-runtime-ear\n[DEBUG]   (f) generatedDescriptorLocation = D:\\perforce\\depot\\modules\\cordoba\\runtime-ear\\target\n[DEBUG]   (f) groupId = wsf\n[DEBUG]   (f) artifactId = wsf-engine-web\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n---------------------------------------------------\nconstituent[0]: file:/c:/dev/maven-2.0/lib/commons-cli-1.0.jar\nconstituent[1]: file:/c:/dev/maven-2.0/lib/doxia-sink-api-1.0-alpha-4.jar\nconstituent[2]: file:/c:/dev/maven-2.0/lib/jsch-0.1.23.jar\nconstituent[3]: file:/c:/dev/maven-2.0/lib/maven-artifact-2.0-1.jar\nconstituent[4]: file:/c:/dev/maven-2.0/lib/maven-artifact-manager-2.0-1.jar\nconstituent[5]: file:/c:/dev/maven-2.0/lib/maven-core-2.0.jar\nconstituent[6]: file:/c:/dev/maven-2.0/lib/maven-error-diagnostics-2.0.jar\nconstituent[7]: file:/c:/dev/maven-2.0/lib/maven-model-2.0.jar\nconstituent[8]: file:/c:/dev/maven-2.0/lib/maven-monitor-2.0.jar\nconstituent[9]: file:/c:/dev/maven-2.0/lib/maven-plugin-api-2.0.jar\nconstituent[10]: file:/c:/dev/maven-2.0/lib/maven-plugin-descriptor-2.0.jar\nconstituent[11]: file:/c:/dev/maven-2.0/lib/maven-plugin-parameter-documenter-2.0.jar\nconstituent[12]: file:/c:/dev/maven-2.0/lib/maven-plugin-registry-2.0.jar\nconstituent[13]: file:/c:/dev/maven-2.0/lib/maven-profile-2.0.jar\nconstituent[14]: file:/c:/dev/maven-2.0/lib/maven-project-2.0-1.jar\nconstituent[15]: file:/c:/dev/maven-2.0/lib/maven-reporting-api-2.0.jar\nconstituent[16]: file:/c:/dev/maven-2.0/lib/maven-repository-metadata-2.0.jar\nconstituent[17]: file:/c:/dev/maven-2.0/lib/maven-settings-2.0.jar\nconstituent[18]: file:/c:/dev/maven-2.0/lib/plexus-interactivity-api-1.0-alpha-4.jar\nconstituent[19]: file:/c:/dev/maven-2.0/lib/wagon-file-1.0-alpha-5.jar\nconstituent[20]: file:/c:/dev/maven-2.0/lib/wagon-http-lightweight-1.0-alpha-5.jar\nconstituent[21]: file:/c:/dev/maven-2.0/lib/wagon-provider-api-1.0-alpha-5.jar\nconstituent[22]: file:/c:/dev/maven-2.0/lib/wagon-ssh-1.0-alpha-5.jar\n---------------------------------------------------\njava.lang.NullPointerException\n        at java.util.regex.Matcher.getTextLength(Matcher.java:758)\n        at java.util.regex.Matcher.find(Matcher.java:414)\n        at org.apache.maven.plugin.PluginConfigurationException.addParameterUsageInfo(PluginConfigur\nationException.java:92)\n        at org.apache.maven.plugin.PluginConfigurationException.buildConfigurationDiagnosticMessage(\nPluginConfigurationException.java:272)\n        at org.apache.maven.usability.PluginConfigurationDiagnoser.diagnose(PluginConfigurationDiagn\noser.java:49)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81\n)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:640)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:119)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n",
        "Project descriptor reference does not explain the syntax for the <properties> element. The Project Descriptor reference page (maven-model/maven.html) should contain information about the properties element under project.  Specifically, the format for setting properties, what I can use for values (string literals only, or can I use the values of other properties) and what property types I can create (Strings only, or ints, dates, floats, booleans, etc.)"
    ],
    [
        "MNG-3212",
        "MNG-3173",
        "project model should allow to register and introspect generated classes project model should allow to register and introspect generated folders with classes. So, plugins like xmlbeans won't have to do the evil hacks like copying their generated classes from target\\generated-classes\\xmlbeans into the target\\classes",
        "It should be possible to declare transitive dependency exclusions independent of any of the immediately declared dependencies There are situations in projects with many dependencies where  a transitive dependency that is desired to be excluded is pulled in by several of the immediate dependencies. In these situations it can be awkward and clumsy to have to add and maintain this particular exclusion in each immediate dependency that introduces it. \n\nThere should be a way to list exclusions independent of a specific immediate dependency, so that they take effect for all of them wherever the specified artifacts might be introduced transitively."
    ],
    [
        "MNG-3159",
        "MNG-4572",
        "IT 95 is failing on the trunk and maven-2.0.x branch ",
        "<modelVersion> element in pom does not allow whitespace around version string I'm using 2.2.x and was surprised to find that, while valid XML, the following are not valid in a pom.xml:\n\n<modelVersion> 4.0.0 </modelVersion>\n\nor\n\n<modelVersion> 4.0.0 </modelVersion>\n\nI had expected that the maven xml parser would be normalizing the whitespace, but looked in maven-2.2.x/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java and found this in readModel(), line 1609:\n\nif ( modelSource.indexOf( \"<modelVersion>\" + MAVEN_MODEL_VERSION ) < 0 ) { throw new InvalidProjectModelException( projectId, pomLocation, \"Not\na v\" + MAVEN_MODEL_VERSION + \" POM.\" ); } "
    ],
    [
        "MNG-2903",
        "MNG-2562",
        "Snapshots are being packaged with datestamps in their filename instead of \"SNAPSHOT\",  When I run mvn package on a project, it collects all the correct and most recent\njar files for me in the lib directory, however in the zip file instead\nof naming them <project>-3.0-SNAPSHOT.jar (for example) it will name\nthem <project>-20070318.080720-37.jar.  \n\nMeanwhile in the project's own jar file, the manifest will point to\n./lib/<project>-3.0-SNAPSHOT.jar.  This means the packaged project does\nnot run.\n\nIt doesn't do this for every single dependency snapshot, and I can't\nseem to work out a pattern as to which get named correctly and which\ndon't.\n\nI have two repositories in my pom file:\n\n<repositories>\n\t<repository>\n\t\t<id>common-repository</id>\n\t\t<name> Common Repository</name>\n\t\t<url>http://repository/common-repository</url>\n\t</repository>\n\t<repository>\n\t\t<id>snapshot-repository</id>\n\t\t<name>Trovix Snapshot Repository</name>\n\t\t<url>http://repository/snapshots</url>\n\t\t<snapshots>\n\t\t\t<enabled>true</enabled>\n\t\t\t<updatePolicy>always</updatePolicy>\n\t\t</snapshots>\n\t</repository>\n</repositories>\n\nIf I try to disable them manually (and use only the local repository),\nthe problem persists.  However, this is where it gets weird.  If I\nunplug my network cable - my package file is created perfectly!\n\nHowever - if I unplug my network cable with the snapshot repository\nremoved, it creates the package incorrectly once again!\n\nThis seems to be the key part of what is making it work (blacklisting\nthe snapshot-repository):\n\n[INFO]    task-segment: [package]\n[INFO]\n---------------------------------------------------------------------\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] snapshot com:com.benchmark:3.0-SNAPSHOT: checking for updates\nfrom snapshot-repository\n[WARNING] repository metadata for: 'snapshot\ncom:com.benchmark:3.0-SNAPSHOT' could not be retrieved from repository:\n snapshot-repository due to an error: Error transferring file\n[INFO] Repository 'snapshot-repository' will be blacklisted\n[INFO] [compiler:compile]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [resources:testResources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:testCompile]\n[INFO] No sources to compile\n[INFO] [surefire:test]\n[INFO] No tests to run.\n[INFO] [jar:jar]\n\nI have also run mvn -X package, and the debug log shows that it thinks\nit is collecting all the correct SNAPSHOT named jars, even though it\nthen stores the date-stamped ones.",
        "expose current time as a property for POM interpolation it is useful to have the current time, for example to write out a manifest entry for the build time or to filter into another file.\n\nI'm not sure of the best way to make the format of the time configurable - perhaps another POM element/property.\n\nSee the related issue for a current example of how this can be done, but it would be nice to have a built-in."
    ],
    [
        "MNG-572",
        "MNG-1281",
        "surefire does not run tests I have three unit tests, one is extending BaseTestCase, in src/test/java named *Test.java.  I haven't configured surefire or any plugins in the pom.xml. I have junit as a dependency.\n\nWhen I run m2 test I see this in the console:\n[INFO] [compiler:testCompile]\nCompiling 4 source files to xxx\n\nResults :\n[surefire] Tests run: 0, Failures: 0, Errors: 0\n\nm2 compiled the tests but surefire did not run any of them. Removing two of the tests makes surefire run one of the tests. And adding \n   <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <goals>\n          <goal>  \n           <id>test</id>\n           <configuration>\n             <includes>\n               <include implementation=\"java.lang.String\">**/*Test.java</include>\n             </includes>\n           </configuration>\n         </goal>\n        </goals>\n      </plugin>\n    </plugins>\n\nMakes it run two of them, with one disabled.\n\n",
        "Most of the links off the m2 ant task documentation page are broken Most of the \"for further information\" links off the ant task docs refer to pages that are either absent or the wrong page. please fix..\n\nhttp://maven.apache.org/maven-settings/settings.html   //absent\nhttp://maven.apache.org/dependencies.html  //doesnt explain dependency mech\nhttp://maven.apache.org/maven-model/maven.html  //404 and not descriptor reference\nhttp://maven.apache.org/configuration.html //configuring maven is 404\n\n"
    ],
    [
        "MNG-5115",
        "MNG-5696",
        "Repository deprecation: When a mvn build uses a maven repository that is marked deprecated in the maven repository metadata, it should show a warning. The old garbage JBoss repository is still used in many recent pom's (directly or indirectly through dependencies).\nTo be able to battle it's use, a repository should be able to be marked as deprecated.\n\nThen when running a mvn build that somehow uses such a deprecated repository, we should see something like this:\n{code}\n$ mvn clean install\n[WARNING] You are using a deprecated repository (http://deprecatedrepo.org/maven2/)\n          which was added in the pom of dependency org.foo:bar:1.0 -> jdom:jdom:0.1 -> log4j:log4j:0.7\n{code}\nNote that it clearly shows the dependency graph path to the dependency pom that included that bad repository.",
        "Remove dependency on Easymock maven-compat has a test dependency on easymock, which is not really used for anything. Dependency on easymock should be removed."
    ],
    [
        "MNG-3726",
        "MNG-2886",
        "Extend POM model to support declaration of IRC channels The POM is already capable of holding mailing list infos so I wonder whether it should support IRC, too. Not sure if this is really sensible or maybe too exotic or seldom.\n\nIn more detail, the required POM snippet might look like this:\n{code:xml}\n<ircChannels>\n  <ircChannel>\n    <name>Maven Talk</name>\n    <channel>#maven</channel>\n    <server>irc://irc.codehaus.org/</server>\n    <web>http://irc.codehaus.org/</web>\n    <logs>http://dev.rectang.com/logs/codehaus/%23maven/</logs>\n  </ircChannel>\n</ircChannels>\n{code}\n\nThe Maven Project Info Reports Plugin should then be able to pick that up and integrate it nicely into the site, maybe like illustrated by the [Mojo Site|http://mojo.codehaus.org/irc.html].",
        "Dynamically includes <module> dependencies if subfolder is available  We would like to use Maven to build our multi-project using the <modules/> construct in a top level pom file. The project contains common libraries and war files. Since the war files are not dependent on each other, developers are used to exclude all other war project directories out of their SCM load configurations to reduce update time. Currently we have implemented ANT in such a way that if a project directory is not available at build time it will excluded from the build configuration. Since the sub-module pom contains the <dependency/> reference to a sibling build configuration anyway the build will fail if the dependency cannot be found.\n\nCurrently if a module is defined for which no project exists you get the following error:\n\nE:\\Temp\\Maven\\AXN>mvn install\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\n\nReason: Could not find the model file 'E:\\Temp\\Maven\\AXN\\xyz\\pom.xml'.\n...\n\nOn further investigation I located the source of the exception is being thrown in the method org.apache.maven.DefaultMaven::collectProjects where the modules list added at line 496:\n\nmodulesFiles.add( moduleFile );\n\nThe following change would do the trick...\n\nif( moduleFile.isFile()) {\n  modulesFiles.add( moduleFile );\n}\n"
    ],
    [
        "MNG-2847",
        "MNG-542",
        "Close reader properly when reading models ",
        "Allow properties to inherit from other properties For example pom.build.outputDirectory (classes directory) should inherit from pom.build.directory. Same for all properties that are used to generate build data.\n\nWhy? Becasue otherwise it's downright impossible to change the location of the target directory (pom.build.directory) as you don't know beforehand all the plugins that are part of the lifecycle and how many properties they each have and their name.\n\nFor example in the clover plugin I need to set the target dir to another location so that main build data is not compromised. I can't do it as I can't controll all the properties that could possibly exist. I'd just like to set the pom.build.directory to a new value and be done with it.\n\n"
    ],
    [
        "MNG-714",
        "MNG-5755",
        "When artifact not found on mirror the real site isn't checked I'm using the settings.xml mirror feature as a local cache. Periodically I upload my local repo\nto the webserver specified as mirror.\n\nWhen an artifact cannot be found on the mirror, the original site isn't checked (and possibly the rest of the sites).\n\nI'm not sure what the exact function of the mirror is (except caching?), but repo1 is checked often regardless\nof mirror presence, so I figure it's not meant to totally disable checking the central repo's.\n\nSimple reproduction: define a few mirrors in your settings.xml for central, central-plugins and snapshots, pointing to\nsay file://tmp/empty/dir/.\n\nStacktrace:\n\n[DEBUG] Error resolving artifact version from metadata.\norg.apache.maven.wagon.ResourceDoesNotExistException: Unable to locate resource in repository\n        at org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:81)\n        at org.apache.maven.wagon.StreamWagon.get(StreamWagon.java:70)\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:343)\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifactMetadata(DefaultWagonManager.java:263)\n        at org.apache.maven.artifact.metadata.AbstractVersionArtifactMetadata.retrieveFromRemoteRepository(AbstractVersionArtifactMetadata.java:93)\n        at org.apache.maven.artifact.transform.AbstractVersionTransformation.retrieveFromRemoteRepository(AbstractVersionTransformation.java:171)\n        at org.apache.maven.artifact.transform.AbstractVersionTransformation.resolveVersion(AbstractVersionTransformation.java:96)\n        at org.apache.maven.artifact.transform.SnapshotTransformation.transformForResolve(SnapshotTransformation.java:43)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:95)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:290)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:274)\n        at org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:81)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:186)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:70)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:197)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:185)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:156)\n        at org.apache.maven.plugin.DefaultPluginManager.ensurePluginContainerIsComplete(DefaultPluginManager.java:544)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:479)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:334)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:378)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:351)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:337)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:229)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:123)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:209)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:267)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: java.io.FileNotFoundException: http://MY_MIRROR_SITE/maven2/repository/plexus/plexus-compiler-manager/1.5-SNAPSHOT/plexus-compiler-manager-1.5-SNAPSHOT.version.txt\n        at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:798)\n        at org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:71)\n        ... 35 more\n[DEBUG] Skipping disabled repository central\nDownloading: http://MY_MIRROR_SITE/maven2/repository/plexus/plexus-compiler-manager/1.5-SNAPSHOT/plexus-compiler-manager-1.5-SNAPSHOT.pom\n[WARNING] Unable to get resource from repository http://snapshots.maven.codehaus.org/maven2\n[WARNING] \n  ***** Using defaults for missing POM plexus:plexus-compiler-manager:pom:1.5-SNAPSHOT *****\n\n[DEBUG]   plexus:plexus-compiler-manager:jar:1.5-SNAPSHOT (selected for runtime)\n[DEBUG] Skipping disabled repository central\nDownloading: http://MY_MIRROR_SITE/maven2/repository/plexus/plexus-compiler-manager/1.5-SNAPSHOT/plexus-compiler-manager-1.5-SNAPSHOT.jar\n[WARNING] Unable to get resource from repository http://snapshots.maven.codehaus.org/maven2\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Diagnosis: Error configuring plugin for execution of 'compiler:compile'.\n[INFO] ----------------------------------------------------------------------------\n[ERROR] Cause: \norg.apache.maven.plugin.MojoExecutionException: Error configuring plugin for execution of 'compiler:compile'.\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:339)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:378)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:351)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:337)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:229)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:123)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:209)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:267)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.PluginConfigurationException: Cannot resolve plugin dependencies\n        at org.apache.maven.plugin.DefaultPluginManager.ensurePluginContainerIsComplete(DefaultPluginManager.java:579)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:479)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:334)\n        ... 15 more\nCaused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Unable to download the artifact from any repository\n  plexus:plexus-compiler-manager:1.5-SNAPSHOT:jar\n\nfrom the specified remote repositories:\n  http://repo1.maven.org/maven2, http://snapshots.maven.codehaus.org/maven2\nPath to dependency: \n        1) org.apache.maven.plugins:maven-compiler-plugin:maven-plugin:2.0-beta-1-SNAPSHOT\n        2) plexus:plexus-compiler-manager:jar:1.5-SNAPSHOT\n\n\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:132)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:204)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:185)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:156)\n        at org.apache.maven.plugin.DefaultPluginManager.ensurePluginContainerIsComplete(DefaultPluginManager.java:544)\n        ... 17 more\nCaused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to download the artifact from any repository\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:233)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:115)\n        ... 22 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue Aug 09 10:39:58 CEST 2005\n[INFO] Final Memory: 2M/4M\n[INFO] ----------------------------------------------------------------------------\n",
        "Access toolchains without maven-toolchain-plugin The original idea of toolchains was to have the same tool being used by different plugins within the same project.\nThis seems like a good approach, but there are several cases where you want more control over the tool to choose, for instance:\n* the maven-compiler-plugin should use the lowest (preferably matching) jdk version to ensure proper bytecode for the classes\n* the maven-surefire-plugin might need a higher version due to requirements of the testing frameworks\n* some code-generators require a more recent JDK compared to the code they're actually producing.\n* the look-and-feel of javadoc has changed per JDK. If you like the latest, you should be able to use it.\n* In case of the maven-invoker-plugin you should be able to test all combinations of JDK and Maven as runtime environment."
    ],
    [
        "MNG-5377",
        "MNG-3280",
        "Use log4j2 as logging implementation Now as we have slf4j api used for logging we can use an advanced logging implementation.\nWith log4j2 users will be able to easily customize their maven logging (possible use of jansi for colorized output)",
        "Keep getting required artifacts are missing when compiling geotool using maven Missing:\n----------\n1) org.apache.maven.wagon:wagon-webdav:jar:1.0-beta-2\nTry downloading the file manually from the project website.\nThen, install it using the command:\n      mvn install:install-file -DgroupId=org.apache.maven.wagon -DartifactId=wagon-webdav \\\n          -Dversion=1.0-beta-2 -Dpackaging=jar -Dfile=/path/to/file\nAlternatively, \nif you host your own repository you can deploy the file there:       \nmvn deploy:deploy-file -DgroupId=org.apache.maven.wagon -DartifactId=wagon-webdav \\\n -Dversion=1.0-beta-2 -Dpackaging=jar -Dfile=/path/to/file \\\n  \n         -Durl=[url] -DrepositoryId=[id]\n Path to dependency:\n 1) org.geotools:gt2:pom:2.3.3\n  2) org.apache.maven.wagon:wagon-webdav:jar:1.0-beta-2\n\n2) org.codehaus.plexus:plexus-utils:jar:1.1\n\n  \nTry downloading the file manually from the project website.\n\n  Then, install it using the command:\n      \nmvn install:install-file -DgroupId=org.codehaus.plexus -DartifactId=plexus-utils \\\n  \n        -Dversion=1.1 -Dpackaging=jar -Dfile=/path/to/file\nAlternatively, \nif you host your own repository you can deploy the file there:       \nmvn deploy:deploy-file -DgroupId=org.codehaus.plexus -DartifactId=plexus-utils \\\n \n         -Dversion=1.1 -Dpackaging=jar -Dfile=/path/to/file \\\n           \n-Durl=[url] -DrepositoryId=[id]\n\n  Path to dependency:\n        \n\n1) org.geotools:gt2:pom:2.3.3\n        2) org.codehaus.plexus:plexus-utils:jar:\n1.1\n\n----------\n\n\n2 required artifacts are missing.\n\nfor artifact:\n  org.geotools:gt2:pom:2.3.3\n\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  \nibiblio (http://www.ibiblio.org/maven2),\n  \nrefractions (http://lists.refractions.net/m2),\n  \ngeotools (http://maven.geotools.fr/repository)\n\n\n\n[INFO] ------------------------------------------------------------------------\n\n[INFO] For more information, run Maven with the -e switch\n\n[INFO] ------------------------------------------------------------------------\n\n[INFO] Total time: 50 minutes 54 seconds\n[INFO] Finished at: Sun Oct 28 11:35:51 AST 2007\n[INFO] Final Memory: 10M/197M\n[INFO] ------------------------------------------------------------------------\n\n"
    ],
    [
        "MNG-5645",
        "MNG-2517",
        "version of \"...\" causes InternalErrorException. The following dependency causes InternalErrorException.\n\n    <dependency>\n      <groupId>any</groupId>\n      <artifactId>any</artifactId>\n      <version>...</version>\n    </dependency>\n\nThis can be confusing to a new maven user trying to get a dependency to work.\n\nA patch is attached that fixes the problem.",
        "The binary distribution produced by assembly plugin contains .svn directory Result in zip file:\nmaven-2.1-SNAPSHOT\\conf\n\\.svn\\\n\\settings.xml"
    ],
    [
        "MNG-830",
        "MNG-5808",
        "review plugins use of expression and change to default-value/component where appropriate we also need a good explanation written down of the difference.\n\n* default-value is used when expression is null\n* expression is intended to be used to get the user's override, eg from a system property\n\nPerhaps if we could cover that other use case differently (eg by a standard system property mechanism that went [plugin-prefix.goal.configuration]), we could eliminate expression altogether in a future version of Maven.\n",
        "Upgrade Maven to use Wagon 2.9 "
    ],
    [
        "MNG-2053",
        "MNG-4202",
        "Implements a better toString method in the maven objects exemple in : o.a.m.p.MavenProject In order to debug mojo, I use mvn -X.\nExemple with the eclipse plugin, I have something like this in the output :\n[DEBUG]   (f) reactorProjects = [org.apache.maven.project.MavenProject@e29b03d6,\n org.apache.maven.project.MavenProject@db660f38, org.apache.maven.project.MavenP\nroject@eecae9aa, org.apache.maven.project.MavenProject@a44caf, org.apache.maven.\nproject.MavenProject@adb676ad, org.apache.maven.project.MavenProject@33defbd1, o\nrg.apache.maven.project.MavenProject@f11d7dff, org.apache.maven.project.MavenPro\nject@c08c0a31, org.apache.maven.project.MavenProject@1309c11]\nCould we have a better toString() method with the minimum of information in case of maven project groupId, artifactId and version ?\nThis could be done with a lot of core object Resource ....\nOlivier",
        "Unable to resolve ${env.HOSTNAME} Empirical test. Using the following POM, you will be able to resolve the environment variable {{$FOO}}:\n\n{noformat}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>test</groupId>\n    <artifactId>test</artifactId>\n    <packaging>pom</packaging>\n    <version>1.1-SNAPSHOT</version>\n\n    <modules>\n\t<module>${env.FOO}</module>\n    </modules>\n</project>\n{noformat}\n\nIf we then assign the value {{BAR}} to {{$FOO}}, we can observer that the environment has been set in the shell:\n\n{noformat}\npdzwart@Fosters:/tmp[18:57:46](1,0)$ export FOO=BAR\npdzwart@Fosters:/tmp[18:58:48](1,0)$ echo $FOO\nBAR\n{noformat}\n\nNow, running {{mvn clean}} using this POM, we expect that an exception will be thrown regarding {{$PWD/BAR}} not existing:\n\n{noformat}\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\n\nReason: Could not find the model file '/private/tmp/BAR'. for project unknown\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Could not find the model file '/private/tmp/BAR'. for project unknown\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:432)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:300)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:356)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Could not find the model file '/private/tmp/BAR'. for project unknown\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.java:1585)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMavenProjectBuilder.java:506)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:200)\n\tat org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:632)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:515)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:588)\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:419)\n\t... 11 more\nCaused by: java.io.FileNotFoundException: /private/tmp/BAR (No such file or directory)\n\tat java.io.FileInputStream.open(Native Method)\n\tat java.io.FileInputStream.<init>(FileInputStream.java:106)\n\tat hidden.org.codehaus.plexus.util.xml.XmlReader.<init>(XmlReader.java:124)\n\tat hidden.org.codehaus.plexus.util.xml.XmlStreamReader.<init>(XmlStreamReader.java:67)\n\tat hidden.org.codehaus.plexus.util.ReaderFactory.newXmlReader(ReaderFactory.java:113)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.java:1580)\n\t... 17 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue Jun 16 18:59:37 EST 2009\n[INFO] Final Memory: 1M/3M\n[INFO] ------------------------------------------------------------------------\n{noformat}\n\nExcellent. Now, try this with {{$env.HOSTNAME}}, here is the POM:\n\n{noformat}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>test</groupId>\n    <artifactId>test</artifactId>\n    <packaging>pom</packaging>\n    <version>1.1-SNAPSHOT</version>\n\n    <modules>\n\t<module>${env.HOSTNAME}</module>\n    </modules>\n</project>\n{noformat}\n\nHere is what is currently assigned to {{$HOSTNAME}}:\n\n{noformat}\npdzwart@Fosters:/tmp[19:00:10](1,0)$ echo $HOSTNAME\nFosters.sydney.atlassian.com\n{noformat}\n\nNo, run maven again, and we expect that the directory {{$PWD/Fosters.sydney.atlassian.com}} does not exist:\n\n{noformat}\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\n\nReason: Could not find the model file '/private/tmp/${env.HOSTNAME}'. for project unknown\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Could not find the model file '/private/tmp/${env.HOSTNAME}'. for project unknown\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:432)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:300)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:356)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Could not find the model file '/private/tmp/${env.HOSTNAME}'. for project unknown\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.java:1585)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMavenProjectBuilder.java:506)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:200)\n\tat org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:632)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:515)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:588)\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:419)\n\t... 11 more\nCaused by: java.io.FileNotFoundException: /private/tmp/${env.HOSTNAME} (No such file or directory)\n\tat java.io.FileInputStream.open(Native Method)\n\tat java.io.FileInputStream.<init>(FileInputStream.java:106)\n\tat hidden.org.codehaus.plexus.util.xml.XmlReader.<init>(XmlReader.java:124)\n\tat hidden.org.codehaus.plexus.util.xml.XmlStreamReader.<init>(XmlStreamReader.java:67)\n\tat hidden.org.codehaus.plexus.util.ReaderFactory.newXmlReader(ReaderFactory.java:113)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.java:1580)\n\t... 17 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue Jun 16 19:01:25 EST 2009\n[INFO] Final Memory: 1M/3M\n[INFO] ------------------------------------------------------------------------\n{noformat}\n\nOOOOKKKAAAAY..... let's take a closer look at that shall we:\n\n{noformat}\nReason: Could not find the model file '/private/tmp/${env.HOSTNAME}'. for project unknown\n{noformat}\n\nAnd closer:\n\n{noformat}\n'/private/tmp/${env.HOSTNAME}'\n{noformat}\n\nSome extra special magic is going on there; I suspect that this specific environment variable is being filtered out for some reason. So, let's try the following:\n* {{${env.HOSTNAM}}}\n{noformat}\n pdzwart@Fosters:/tmp[19:06:53](1,146)$ cat pom.xml && HOSTNAM=$HOSTNAME mvn clean\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>test</groupId>\n    <artifactId>test</artifactId>\n    <packaging>pom</packaging>\n    <version>1.1-SNAPSHOT</version>\n\n    <modules>\n\t<module>${env.HOSTNAM}</module>\n    </modules>\n</project>\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\n\nReason: Could not find the model file '/private/tmp/Fosters.sydney.atlassian.com'. for project unknown\n...\n{noformat}\n* {{${env.HOSTNAMEE}}}\n{noformat}\npdzwart@Fosters:/tmp[19:07:31](1,146)$ cat pom.xml && HOSTNAMEE=$HOSTNAME mvn clean\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>test</groupId>\n    <artifactId>test</artifactId>\n    <packaging>pom</packaging>\n    <version>1.1-SNAPSHOT</version>\n\n    <modules>\n\t<module>${env.HOSTNAMEE}</module>\n    </modules>\n</project>\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\n\nReason: Could not find the model file '/private/tmp/Fosters.sydney.atlassian.com'. for project unknown\n...\n{noformat}\n* {{${env.HOSTNAMO}}}\n{noformat}\npdzwart@Fosters:/tmp[19:07:59](1,146)$ cat pom.xml && HOSTNAMO=$HOSTNAME mvn clean\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>test</groupId>\n    <artifactId>test</artifactId>\n    <packaging>pom</packaging>\n    <version>1.1-SNAPSHOT</version>\n\n    <modules>\n\t<module>${env.HOSTNAMO}</module>\n    </modules>\n</project>\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\n\nReason: Could not find the model file '/private/tmp/Fosters.sydney.atlassian.com'. for project unknown\n{noformat}\n\nThanks for coming in today maven."
    ],
    [
        "MNG-2776",
        "MNG-5136",
        "Upgrade the dependency on modello-maven-plugin to a more recent version Upgrade the dependency on modello-maven-plugin in maven-model to alpha-13 (or alpha-14 if that is released). This  would bring in a couple of nice features for the generated documentation.",
        "Not all dependency are included in WAR When I launch mvn dependency:tree i found logback-core, when I build War the lib isn't include.\n\n"
    ],
    [
        "MNG-3251",
        "MNG-4793",
        "Test fails on windows due to locked files  maven-core/src/test/java/org/apache/maven/extension/DefaultExtensionManagerTest.java.tearDown fails on windows, the test-extension-1.jar is locked for deletion\n\nI traced it and seems to get locked at getRealm().findRealmResources( name ) in org.codehaus.plexus.classworlds.strategy.DefaultStrategy:146",
        "Unable to obtain archiver for extension 'zip' There seems to be a regression in maven-3-beta-3 related to the assembly plugin.  When building a multi-module project using Maven 3-beta-3 I get the error \"Unable to obtain archiver for extension 'zip'\".  This error does not happen with Maven 3-beta-2.\n\nI wasn't able to reproduce this problem with a smaller project.  The source can be checked out from the jboss repo\n{code}\nsvn co -r 107936 http://anonsvn.jboss.org/repos/jbossas/trunk\n{code}\n\nThe problem can be seen running building certain modules.\n{code}\nmvn clean install -pl deployment,server,osgi/zip\n{code}\n\nI will try to narrow down the problem further if I have some time.\n\n"
    ],
    [
        "MNG-3766",
        "MNG-2903",
        "toolchains not found in extensions There's currently no way to plugin in new toolchains without placing them in M2_HOME/lib. For wagons to be available in extensions, the extension manager explicitly registers them - so I propose to do the same in 2.1.0-M2 for toolchains, and only support the Java toolchains in 2.0.9.\n\n",
        "Snapshots are being packaged with datestamps in their filename instead of \"SNAPSHOT\",  When I run mvn package on a project, it collects all the correct and most recent\njar files for me in the lib directory, however in the zip file instead\nof naming them <project>-3.0-SNAPSHOT.jar (for example) it will name\nthem <project>-20070318.080720-37.jar.  \n\nMeanwhile in the project's own jar file, the manifest will point to\n./lib/<project>-3.0-SNAPSHOT.jar.  This means the packaged project does\nnot run.\n\nIt doesn't do this for every single dependency snapshot, and I can't\nseem to work out a pattern as to which get named correctly and which\ndon't.\n\nI have two repositories in my pom file:\n\n<repositories>\n\t<repository>\n\t\t<id>common-repository</id>\n\t\t<name> Common Repository</name>\n\t\t<url>http://repository/common-repository</url>\n\t</repository>\n\t<repository>\n\t\t<id>snapshot-repository</id>\n\t\t<name>Trovix Snapshot Repository</name>\n\t\t<url>http://repository/snapshots</url>\n\t\t<snapshots>\n\t\t\t<enabled>true</enabled>\n\t\t\t<updatePolicy>always</updatePolicy>\n\t\t</snapshots>\n\t</repository>\n</repositories>\n\nIf I try to disable them manually (and use only the local repository),\nthe problem persists.  However, this is where it gets weird.  If I\nunplug my network cable - my package file is created perfectly!\n\nHowever - if I unplug my network cable with the snapshot repository\nremoved, it creates the package incorrectly once again!\n\nThis seems to be the key part of what is making it work (blacklisting\nthe snapshot-repository):\n\n[INFO]    task-segment: [package]\n[INFO]\n---------------------------------------------------------------------\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] snapshot com:com.benchmark:3.0-SNAPSHOT: checking for updates\nfrom snapshot-repository\n[WARNING] repository metadata for: 'snapshot\ncom:com.benchmark:3.0-SNAPSHOT' could not be retrieved from repository:\n snapshot-repository due to an error: Error transferring file\n[INFO] Repository 'snapshot-repository' will be blacklisted\n[INFO] [compiler:compile]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [resources:testResources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:testCompile]\n[INFO] No sources to compile\n[INFO] [surefire:test]\n[INFO] No tests to run.\n[INFO] [jar:jar]\n\nI have also run mvn -X package, and the debug log shows that it thinks\nit is collecting all the correct SNAPSHOT named jars, even though it\nthen stores the date-stamped ones."
    ],
    [
        "MNG-70",
        "MNG-520",
        "ClassLoader issue when executing the eclipse:eclipse goal D:\\maven2\\src\\maven-core>m2 eclipse:eclipse\n[INFO] [eclipse:eclipse]\n---------------------------------------------------\nconstituent[0]: file:/d:/maven2/lib/commons-cli-1.0-beta-2.jar\nconstituent[1]: file:/d:/maven2/lib/marmalade-core-0.1.jar\nconstituent[2]: file:/d:/maven2/lib/marmalade-el-ognl-0.1.jar\nconstituent[3]: file:/d:/maven2/lib/maven-core-2.0-SNAPSHOT.jar\nconstituent[4]: file:/d:/maven2/lib/maven-model-2.0-SNAPSHOT.jar\nconstituent[5]: file:/d:/maven2/lib/maven-plugin-2.0-SNAPSHOT.jar\nconstituent[6]: file:/d:/maven2/lib/ognl-2.5.1.jar\nconstituent[7]: file:/d:/maven2/lib/plexus-i18n-1.0-beta-3.jar\n---------------------------------------------------\nException in thread \"main\" java.lang.VerifyError: (class: org/apache/maven/plugin/eclipse/EclipsePlugin, method: execute signature:\n(Lorg/apache/maven/plugin/PluginExecutionRequest;Lorg/apache/maven/plugin/PluginExecutionResponse;)V) Incompatible object argument f\nor function call\n        at java.lang.Class.getDeclaredConstructors0(Native Method)\n        at java.lang.Class.privateGetDeclaredConstructors(Class.java:1610)\n        at java.lang.Class.getConstructor0(Class.java:1922)\n        at java.lang.Class.newInstance0(Class.java:278)\n        at java.lang.Class.newInstance(Class.java:261)\n        at org.codehaus.plexus.component.factory.java.JavaComponentFactory.newInstance(JavaComponentFactory.java:71)\n        at org.codehaus.plexus.DefaultPlexusContainer.createComponentInstance(DefaultPlexusContainer.java:1182)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.createComponentInstance(AbstractComponentManager.java:92)\n        at org.codehaus.plexus.component.manager.ClassicSingletonComponentManager.getComponent(ClassicSingletonComponentManager.java:65)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:166)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:265)\n        at org.apache.maven.lifecycle.session.MavenSession.lookup(MavenSession.java:112)\n        at org.apache.maven.lifecycle.goal.MavenGoalExecutionContext.lookup(MavenGoalExecutionContext.java:74)\n        at org.apache.maven.lifecycle.goal.phase.GoalAttainmentPhase.execute(GoalAttainmentPhase.java:67)\n        at org.apache.maven.lifecycle.goal.DefaultMavenGoalPhaseManager.execute(DefaultMavenGoalPhaseManager.java:48)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:116)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:86)\n        at org.apache.maven.MavenCli.main(MavenCli.java:150)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:350)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:290)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:433)\nD:\\maven2\\src\\maven-core>",
        "MavenProject(MavenProject) constructor does not copy the artifactId element When using the new @execute tag, m2 creates a new MavenProject instance. Unfortunately it does not set the artifactId element on the new MavenProject instance... BTW I don't know how this can have passed the integration tests ;-)\n\nHere is a patch attached (2 files).\n\nI have decided to make the change in ModelUtils.clone(). Maybe it should be made in DefaultModelInheritanceAssembler.assembleModelInheritance() instead but I didn't know enough about the code to make the change there so I took the safest solution..."
    ],
    [
        "MNG-4001",
        "MNG-5174",
        "Unable to resolve Dashboard mojo from Central I have a simple test project that declares the dashboard-maven-plugin (see http://mojo.codehaus.org/dashboard-maven-plugin/usage.html ).\n\nNote that the usage does explicitly state that the Codehaus repository must be specified as a plugin repository...\nHowever, according to:  http://maven.apache.org/guides/introduction/introduction-to-plugin-prefix-mapping.html\nI'm pretty sure that Maven should be able to resolve the dashboard-maven-plugin from the central repo.\n\nI validated that the [dashboard-maven-plugin residing in central|http://repo1.maven.org/maven2/org/codehaus/mojo/dashboard-maven-plugin/1.0.0-beta-1/] is indeed the same artifact as that which lives at the [codehaus repository|http://repository.codehaus.org/org/codehaus/mojo/dashboard-maven-plugin/1.0.0-beta-1/].\n\nBut as you can see from my attached test case, the codehaus mojo is NOT being resolved without the special plugin repository defined.  When running {noformat}mvn dashboard:dashboard{noformat}, I get the following error message:\n{noformat}\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'dashboard'.\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] The plugin 'org.apache.maven.plugins:maven-dashboard-plugin' does not exist or no valid version could be found\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Sat Jan 24 12:40:55 PST 2009\n[INFO] Final Memory: 1M/254M\n[INFO] ------------------------------------------------------------------------{noformat}\n\nIf you edit the pom.xml to uncomment out the plugin repository declaration for codehaus, it works as one would expect.\n\nMy understanding is that the only reason why the Dashboard Usage mentions their plugin repository is because the artifact was not available on the central repository -- but it certainly is today.\n\nI also thought that perhaps the maven-metadata.xml might be incorrect (perhaps the dashboard plugin prefix is missing or different).  I checked:\n* http://repo1.maven.org/maven2/org/codehaus/mojo/maven-metadata.xml\n* http://repository.codehaus.org/org/codehaus/mojo/maven-metadata.xml\n\nand they both look OK to me...  I clearly see:{code:xml}\n<plugin>\n    <name>Maven Dashboard Report Plugin</name> \n    <prefix>dashboard</prefix> \n    <artifactId>dashboard-maven-plugin</artifactId> \n</plugin>\n{code}\n\nAnd I don't see any plugin with a dashboard prefix specified as an Apache Maven Plugin here:\n* http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-metadata.xml\n\nIf I explicitly specify the dashboard plugin like:  {noformat}mvn org.codehaus.mojo:dashboard-maven-plugin:dashboard{noformat}\nthat works...\n\nOverall, I am recording a bug because the [documentation|http://maven.apache.org/guides/introduction/introduction-to-plugin-prefix-mapping.html] states:{quote}\nMaven will always search the following groupId's after searching any plugin groups specified in the user's settings:\n* org.apache.maven.plugins \n* org.codehaus.mojo \n{quote}\n\nI don't see this being done.\n\nFinally, I even tried adding a {{pluginGroups}} to my {{settings.xml}}:{code:xml}\n<pluginGroups>\n  <pluginGroup>org.codehaus.mojo</pluginGroup>\n</pluginGroups>\n{code}\nBut that did not work either...\n",
        "Plugin Configuration from Grandparent Not Executed on Grandchild Summary: The configuration of a plugin in the grandparent of a project, whether in <plugins> or <pluginManagement> is not properly inherited to grandchild.\n\nTo reproduce:\nSetup: \nPOM C extends POM B; POM B extends POM A\n\nPOM A includes:\n{code}\n...\n\n\t<build>\t\t\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-dependency-plugin</artifactId>\n\t\t\t\t<version>2.3</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>copy-dependencies</id>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>copy-dependencies</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<outputDirectory>${project.build.directory}/dependency-libs</outputDirectory>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t\t\t\n\t</build>\n...\n{code}\n\nThen in the POM C folder execute {{mvn package}}.  The plugin does not work.\n\nIf the same configuration is moved or copied to POM B, then the execution in POM C's folder is repeated, it works fine.\n\nThe same holds true if the above is moved to POM A's {{<pluginManagement>}} node (and the appropriate {{<plugin>}} groupId and artifactId are added to POM C).  It even holds true if you do this and add additional to POM B.  Unless the full config is in POM B (or POM C) then it will not run from POM C."
    ],
    [
        "MNG-256",
        "MNG-3917",
        "m2 should use an internal repository instead of lib, it would be great to have an internal application repository that could be used as a fallback to the local repo and accessed consistently. This should be a general plexus app thing, and perhaps we could convince classworlds to be able to find things by id/version instead of paths to construct the realms. Alternatively, the assembly can create a correct classworlds.conf.\n\nThis should mean that Maven doesn't redownload all the JARs from it's lib directory as it does at present.\n\n",
        "Complete the POM construction tests which will be the validation for the specification "
    ],
    [
        "MNG-78",
        "MNG-4461",
        "create dependency classification system to minimize local repo bloat Currently, all dependencies are resolved and retrieved transitively before a project is built. This means that any dependencies included in other projects' poms purely for testing purposes (f.e. jmock, junit, httpunit, etc.) will also be downloaded, regardless of whether the current project actually needs them for testing. The net result is a bloated local repository, as all testing, etc. [non-runtime] dependencies of each dependency project is retrieved.\n\nOne facet of the consequences of this can be seen in MNG-77.\n\nThere has been some talk about how best to classify dependencies within maven, but as far as I know, nothing concrete has come out of it. I would like to nail this particular functionality down, and get it implemented, to reduce the overhead of manual POM construction, among other things.\n\nOften, it is completely inappropriate to include compile-time dependencies in a bundled distro (f.e. EJBs cannot include j2ee.jar). This issue has seen some play on the maven-1 lists lately, and I'd like to hit it out of the park with m2.",
        "[regression] No transfer progress during artifact deployment As reported by Juven, we get no transfer progress here:\n{noformat}\n[INFO] --- maven-deploy-plugin:2.4:deploy (default-deploy) @ test ---\n[INFO] Retrieving previous metadata from maven-core-it\n[INFO] Uploading repository metadata for: 'artifact org.apache.maven.its.mng:test'\n[INFO] Uploading project information for test 0.1\n{noformat}\ncompared to Maven 2.x\n{noformat}\n[INFO] [deploy:deploy]\nUploading: file:///M:\\z/repo/org/apache/maven/its/mng/test/0.1/test-0.1.jar\n1K uploaded  (test-0.1.jar)\n[INFO] Retrieving previous metadata from maven-core-it\n[INFO] Uploading repository metadata for: 'artifact org.apache.maven.its.mng:test'\n[INFO] Uploading project information for test 0.1\n{noformat}"
    ],
    [
        "MNG-5495",
        "MNG-2218",
        "API incompatibility causes Swagger Maven Plugin (and others) to fail under Maven 3.1.0 {code}\nERROR] Failed to execute goal com.github.kongchen:swagger-maven-plugin:1.1.1:generate (default) on project maestro-webapp: An API incompatibility was encountered during configuration of mojo com.github.kongchen:swagger-maven-plugin:1.1.1:generate: java.lang.NoSuchMethodError: org.codehaus.plexus.component.configurator.converters.special.ClassRealmConverter.<init>(Lorg/codehaus/classworlds/ClassRealm;)V\n[ERROR] -----------------------------------------------------\n[ERROR] realm =    plugin>com.github.kongchen:swagger-maven-plugin:1.1.1\n[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\n[ERROR] urls[0] = file:/Users/brett/.m2/repository/com/github/kongchen/swagger-maven-plugin/1.1.1/swagger-maven-plugin-1.1.1.jar\n[ERROR] urls[1] = file:/Users/brett/.m2/repository/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar\n{code}",
        "Inheritance of Properties-style plugin parameters doesn't appear to work It seems that you cannot inherit systemProperties for the surefire plugin when the child POM provides its own set...the Xpp3Dom class should provide merge control XML attributes for this, but they don't seem to be working. The attached test case shows what I believe to be the correct configuration."
    ],
    [
        "MNG-3884",
        "MNG-3917",
        "Command line arguments don't overwrite settings.xml properties when invoking a plugin To explain the issue, let's start with the following example:\n\n1\u00b0) Run a plugin goal with an argument specified in the command line with the \"-D\" option only\n\nmvn eclipse:eclipse -Declipse.projectNameTemplate=CommandLineProjectName\n\nWe can see if we open the generated .project file that the name of the project is as we expect: \"CommandLineProjectName\"\nThis is normal, the goal input parameter is set with the command line property.\n\n2\u00b0) Run a plugin goal with an argument specified in the \"settings.xml\" file only\n\nmvn eclipse:eclipse\n\nwith settings.xml containing the following enabled profile:\n\n<profiles>\n  <profile>\n    <id>testProfile</id>\n      <properties>\n      <eclipse.projectNameTemplate>SettingsProjectName</eclipse.projectNameTemplate>\n    </properties>\n  </profile>\n</profiles>\n\n<activeProfiles>\n  <activeProfile>testProfile</activeProfile>\n</activeProfiles>\n\nWe can see if we open the generated .project file that the name of the project is as we expect: \"SettingsProjectName\".\nThis is normal, the input parameter of the goal is set with the \"settings.xml\" file property.\n\n3\u00b0) Run a plugin goal with an argument specified in the command line with the \"-D\" option and with another value in the \"settngs.xml\" file\n\nIf we use both scenarios, the property value set in the \"settings.xml\" file will overwrite the value set via the command line with the \"-D\" option.\nMaven should not react in that way but in the opposite: the command line value should overwite the \"settings.xml\" file value.\n\nIt is already the case if we reuse the value somewhere in the pom.xml file. It should be the same when invoking a plugin goal.",
        "Complete the POM construction tests which will be the validation for the specification "
    ],
    [
        "MNG-505",
        "MNG-5845",
        "implement version range support in the artifact collector http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution",
        "when in maven mojo, ClassNotFoundException slf4j-api `MessageFormatter` class *my code is*\r\n\r\n{code}\r\n@Mojo(name = \"hello\",requiresProject = false)\r\npublic class HelloWorldMojo extends AbstractMojo{\r\n\r\n    @Override\r\n    public void execute() throws MojoExecutionException,MojoFailureException{\r\n        String[] argStrings = { \"Hello world\" };\r\n        FormattingTuple formattingTuple = MessageFormatter.arrayFormat(\"{}\", argStrings);\r\n        getLog().info(formattingTuple.getMessage());\r\n    }\r\n}\r\n{code}\r\n\r\n\r\n*when i run my plugins , show me result:*\r\n\r\n{code}\r\nCaused by: java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\n\tat com.feilong.core.log.Slf4jUtil.formatMessage(Slf4jUtil.java:77)\r\n\tat com.feilong.project.train.mojo.BaseFlowMojo.getFolderPath(BaseFlowMojo.java:72)\r\n\tat com.feilong.project.train.mojo.InvitationMojo.handleExecute(InvitationMojo.java:89)\r\n\tat com.feilong.project.train.mojo.BaseFlowMojo.execute(BaseFlowMojo.java:111)\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)\r\n\t... 21 more\r\nCaused by: java.lang.ClassNotFoundException: org.slf4j.helpers.MessageFormatter\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)\r\n\t... 26 more\r\n{code}\r\n\r\n*And from the log (run with -X), i see that :*\r\n\r\n{code}\r\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)\r\nMaven home: D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\r\nJava version: 1.8.0_11, vendor: Oracle Corporation\r\nJava home: D:\\Program Files\\Java\\jdk1.8.0_11\\jre\r\nDefault locale: zh_CN, platform encoding: GBK\r\nOS name: \"windows 7\", version: \"6.1\", arch: \"x86\", family: \"dos\"\r\n[DEBUG] Created new class realm maven.api\r\n[DEBUG] Importing foreign packages into class realm maven.api\r\n[DEBUG]   Imported: javax.enterprise.inject.* < plexus.core\r\n[DEBUG]   Imported: javax.enterprise.util.* < plexus.core\r\n[DEBUG]   Imported: javax.inject.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.artifact < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.classrealm < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.cli < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.configuration < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.exception < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution.scope < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.model < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.monitor < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.plugin < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.profiles < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.project < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.reporting < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.rtinfo < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.settings < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.toolchain < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.usability < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authentication < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authorization < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.events < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.observers < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.proxy < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.resource < plexus.core\r\n[DEBUG]   Imported: org.codehaus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.* < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.component < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.configuration < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.container < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.context < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.logging < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.personality < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.Xpp3Dom < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParser < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParserException < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlSerializer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.* < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.artifact < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.collection < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.deployment < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.graph < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.installation < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.internal.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.metadata < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.repository < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.resolution < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.spi < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.transfer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.version < plexus.core\r\n[DEBUG]   Imported: org.slf4j.* < plexus.core\r\n[DEBUG]   Imported: org.slf4j.spi.* < plexus.core\r\n[DEBUG] Populating class realm maven.api\r\n[INFO] Error stacktraces are turned on.\r\n[DEBUG] Reading global settings from D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\\conf\\settings.xml\r\n[DEBUG] Reading user settings from C:\\Users\\feilong\\.m2\\settings.xml\r\n[DEBUG] Reading global toolchains from D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\\conf\\toolchains.xml\r\n[DEBUG] Reading user toolchains from C:\\Users\\feilong\\.m2\\toolchains.xml\r\n[DEBUG] Using local repository at D:\\FeiLong Soft\\Essential\\Development\\repository\r\n[DEBUG] Using manager EnhancedLocalRepositoryManager with priority 10.0 for D:\\FeiLong Soft\\Essential\\Development\\repository\r\n[INFO] Scanning for projects...\r\n[DEBUG] Extension realms for project org.apache.maven:standalone-pom:pom:1: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Skipped remote request for com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] Skipped remote request for com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] Skipped remote request for com.feilong.platform:parent:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] === REACTOR BUILD PLAN ================================================\r\n[DEBUG] Project: org.apache.maven:standalone-pom:pom:1\r\n[DEBUG] Tasks:   [com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT:invitation]\r\n[DEBUG] Style:   Aggregating\r\n[DEBUG] =======================================================================\r\n[INFO]                                                                         \r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Building Maven Stub Project (No POM) 1\r\n[INFO] ------------------------------------------------------------------------\r\n[DEBUG] Lifecycle default -> [validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]\r\n[DEBUG] Lifecycle clean -> [pre-clean, clean, post-clean]\r\n[DEBUG] Lifecycle site -> [pre-site, site, post-site, site-deploy]\r\n[DEBUG] === PROJECT BUILD PLAN ================================================\r\n[DEBUG] Project:       org.apache.maven:standalone-pom:1\r\n[DEBUG] Dependencies (collect): []\r\n[DEBUG] Dependencies (resolve): [compile+runtime]\r\n[DEBUG] Repositories (dependencies): [central (http://search.maven.org/remotecontent?filepath=, default, releases+snapshots)]\r\n[DEBUG] Repositories (plugins)     : [maven-plugin (http://search.maven.org/remotecontent?filepath=, default, releases+snapshots), central (https://repo.maven.apache.org/maven2, default, releases)]\r\n[DEBUG] -----------------------------------------------------------------------\r\n[DEBUG] Goal:          com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT:invitation (default-cli)\r\n[DEBUG] Style:         Regular\r\n[DEBUG] Configuration: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration/>\r\n[DEBUG] =======================================================================\r\n[DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=0, ConflictMarker.markTime=0, ConflictMarker.nodeCount=1, ConflictIdSorter.graphTime=1, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=0, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=2, ConflictResolver.conflictItemCount=0, DefaultDependencyCollector.collectTime=0, DefaultDependencyCollector.transformTime=5}\r\n[DEBUG] org.apache.maven:standalone-pom:pom:1\r\n[INFO] \r\n[INFO] --- feilong-training-plugin:1.2.1-SNAPSHOT:invitation (default-cli) @ standalone-pom ---\r\n[DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=2, ConflictMarker.markTime=0, ConflictMarker.nodeCount=176, ConflictIdSorter.graphTime=1, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=84, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=9, ConflictResolver.conflictItemCount=163, DefaultDependencyCollector.collectTime=418, DefaultDependencyCollector.transformTime=12}\r\n[DEBUG] com.feilong.maven.plugins:feilong-training-plugin:jar:1.2.1-SNAPSHOT:\r\n[DEBUG]    org.apache.maven:maven-core:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-model:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-settings:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-settings-builder:jar:3.3.3:compile\r\n[DEBUG]          org.apache.maven:maven-builder-support:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-artifact:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-model-builder:jar:3.3.3:compile\r\n[DEBUG]          com.google.guava:guava:jar:18.0:compile\r\n[DEBUG]       org.apache.maven:maven-aether-provider:jar:3.3.3:compile\r\n[DEBUG]          org.eclipse.aether:aether-spi:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-impl:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-api:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-util:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.sisu:org.eclipse.sisu.plexus:jar:0.3.0:compile\r\n[DEBUG]          javax.enterprise:cdi-api:jar:1.0:compile\r\n[DEBUG]             javax.annotation:jsr250-api:jar:1.0:compile\r\n[DEBUG]          org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0:compile\r\n[DEBUG]       org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.5:compile\r\n[DEBUG]          javax.inject:javax.inject:jar:1:compile\r\n[DEBUG]          aopalliance:aopalliance:jar:1.0:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-interpolation:jar:1.21:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-classworlds:jar:2.5.2:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile\r\n[DEBUG]       org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile\r\n[DEBUG]          org.sonatype.plexus:plexus-cipher:jar:1.4:compile\r\n[DEBUG]    org.apache.maven:maven-plugin-api:jar:3.3.3:compile\r\n[DEBUG]    org.codehaus.plexus:plexus-container-default:jar:1.6:compile\r\n[DEBUG]       org.apache.xbean:xbean-reflect:jar:3.7:compile\r\n[DEBUG]       com.google.collections:google-collections:jar:1.0:compile\r\n[DEBUG]    org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-6:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-component-api:jar:1.0-alpha-16:compile\r\n[DEBUG]          junit:junit:jar:4.12:test\r\n[DEBUG]             org.hamcrest:hamcrest-core:jar:1.3:test\r\n[DEBUG]    org.codehaus.plexus:plexus-utils:jar:3.0.22:compile\r\n[DEBUG]    com.feilong.project:feilong-train:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.office:feilong-office-excel:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          com.feilong.platform:feilong-servlet:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]             javax.servlet:jstl:jar:1.2:compile\r\n[DEBUG]          org.apache.poi:poi:jar:3.11:compile\r\n[DEBUG]             commons-codec:commons-codec:jar:1.9:compile\r\n[DEBUG]          org.apache.poi:poi-ooxml:jar:3.11:compile\r\n[DEBUG]          org.apache.poi:poi-ooxml-schemas:jar:3.11:compile\r\n[DEBUG]             org.apache.xmlbeans:xmlbeans:jar:2.6.0:compile\r\n[DEBUG]                stax:stax-api:jar:1.0.1:compile\r\n[DEBUG]          loxia2:loxia2-support:jar:2.5.2:compile\r\n[DEBUG]             org.aspectj:aspectjweaver:jar:1.6.8:compile\r\n[DEBUG]             ognl:ognl:jar:2.7.3:compile\r\n[DEBUG]                jboss:javassist:jar:3.7.ga:compile\r\n[DEBUG]          commons-digester:commons-digester:jar:2.1:compile\r\n[DEBUG]       com.feilong.chart:feilong-chart-core:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.chart:feilong-chart-amcharts:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-ant:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          org.apache.ant:ant:jar:1.9.4:compile\r\n[DEBUG]             org.apache.ant:ant-launcher:jar:1.9.4:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-mail:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          com.sun.mail:javax.mail:jar:1.5.2:compile\r\n[DEBUG]             javax.activation:activation:jar:1.1:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-velocity:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          org.apache.velocity:velocity:jar:1.7:compile\r\n[DEBUG]          org.apache.velocity:velocity-tools:jar:2.0:compile\r\n[DEBUG]             commons-chain:commons-chain:jar:1.1:compile\r\n[DEBUG]             commons-validator:commons-validator:jar:1.3.1:compile\r\n[DEBUG]             dom4j:dom4j:jar:1.6.1:compile\r\n[DEBUG]                xml-apis:xml-apis:jar:1.4.01:compile\r\n[DEBUG]             oro:oro:jar:2.0.8:compile\r\n[DEBUG]       com.feilong.platform:feilong-core:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          commons-lang:commons-lang:jar:2.6:compile\r\n[DEBUG]          org.apache.commons:commons-lang3:jar:3.4:compile\r\n[DEBUG]          commons-beanutils:commons-beanutils:jar:1.9.2:compile\r\n[DEBUG]          commons-logging:commons-logging:jar:1.2:compile\r\n[DEBUG]          commons-collections:commons-collections:jar:3.2.1:compile\r\n[DEBUG]          commons-io:commons-io:jar:2.4:compile\r\n[DEBUG]          net.sf.json-lib:json-lib:jar:jdk15:2.4:compile\r\n[DEBUG]             net.sf.ezmorph:ezmorph:jar:1.0.6:compile\r\n[DEBUG]    com.feilong.data:feilong-data-redis:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       redis.clients:jedis:jar:2.6.2:compile\r\n[DEBUG]          org.apache.commons:commons-pool2:jar:2.0:compile\r\n[DEBUG]    com.feilong.platform.tools:feilong-tools-jsoup:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       org.jsoup:jsoup:jar:1.7.3:compile\r\n[DEBUG]    ch.qos.logback:logback-core:jar:1.1.3:compile\r\n[DEBUG]    ch.qos.logback:logback-classic:jar:1.1.3:compile\r\n{color:red} \r\n[DEBUG]    org.slf4j:slf4j-api:jar:1.7.12:compile\r\n{color}\r\n[DEBUG] Created new class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG] Importing foreign packages into class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG]   Imported:  < maven.api\r\n[DEBUG] Populating class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.maven.plugins:feilong-training-plugin:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.maven:maven-builder-support:jar:3.3.3\r\n[DEBUG]   Included: com.google.guava:guava:jar:18.0\r\n[DEBUG]   Included: org.eclipse.aether:aether-util:jar:1.0.2.v20150114\r\n[DEBUG]   Included: javax.enterprise:cdi-api:jar:1.0\r\n[DEBUG]   Included: javax.annotation:jsr250-api:jar:1.0\r\n[DEBUG]   Included: org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0\r\n[DEBUG]   Included: org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.5\r\n[DEBUG]   Included: aopalliance:aopalliance:jar:1.0\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-interpolation:jar:1.21\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-component-annotations:jar:1.5.5\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-cipher:jar:1.4\r\n[DEBUG]   Included: org.apache.xbean:xbean-reflect:jar:3.7\r\n[DEBUG]   Included: com.google.collections:google-collections:jar:1.0\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-6\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:3.0.22\r\n[DEBUG]   Included: com.feilong.project:feilong-train:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.office:feilong-office-excel:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.platform:feilong-servlet:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: javax.servlet:jstl:jar:1.2\r\n[DEBUG]   Included: org.apache.poi:poi:jar:3.11\r\n[DEBUG]   Included: commons-codec:commons-codec:jar:1.9\r\n[DEBUG]   Included: org.apache.poi:poi-ooxml:jar:3.11\r\n[DEBUG]   Included: org.apache.poi:poi-ooxml-schemas:jar:3.11\r\n[DEBUG]   Included: org.apache.xmlbeans:xmlbeans:jar:2.6.0\r\n[DEBUG]   Included: stax:stax-api:jar:1.0.1\r\n[DEBUG]   Included: loxia2:loxia2-support:jar:2.5.2\r\n[DEBUG]   Included: org.aspectj:aspectjweaver:jar:1.6.8\r\n[DEBUG]   Included: ognl:ognl:jar:2.7.3\r\n[DEBUG]   Included: jboss:javassist:jar:3.7.ga\r\n[DEBUG]   Included: commons-digester:commons-digester:jar:2.1\r\n[DEBUG]   Included: com.feilong.chart:feilong-chart-core:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.chart:feilong-chart-amcharts:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-ant:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.ant:ant:jar:1.9.4\r\n[DEBUG]   Included: org.apache.ant:ant-launcher:jar:1.9.4\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-mail:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.sun.mail:javax.mail:jar:1.5.2\r\n[DEBUG]   Included: javax.activation:activation:jar:1.1\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-velocity:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.velocity:velocity:jar:1.7\r\n[DEBUG]   Included: org.apache.velocity:velocity-tools:jar:2.0\r\n[DEBUG]   Included: commons-chain:commons-chain:jar:1.1\r\n[DEBUG]   Included: commons-validator:commons-validator:jar:1.3.1\r\n[DEBUG]   Included: dom4j:dom4j:jar:1.6.1\r\n[DEBUG]   Included: xml-apis:xml-apis:jar:1.4.01\r\n[DEBUG]   Included: oro:oro:jar:2.0.8\r\n[DEBUG]   Included: com.feilong.platform:feilong-core:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: commons-lang:commons-lang:jar:2.6\r\n[DEBUG]   Included: org.apache.commons:commons-lang3:jar:3.4\r\n[DEBUG]   Included: commons-beanutils:commons-beanutils:jar:1.9.2\r\n[DEBUG]   Included: commons-logging:commons-logging:jar:1.2\r\n[DEBUG]   Included: commons-collections:commons-collections:jar:3.2.1\r\n[DEBUG]   Included: commons-io:commons-io:jar:2.4\r\n[DEBUG]   Included: net.sf.json-lib:json-lib:jar:jdk15:2.4\r\n[DEBUG]   Included: net.sf.ezmorph:ezmorph:jar:1.0.6\r\n[DEBUG]   Included: com.feilong.data:feilong-data-redis:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: redis.clients:jedis:jar:2.6.2\r\n[DEBUG]   Included: org.apache.commons:commons-pool2:jar:2.0\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-jsoup:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.jsoup:jsoup:jar:1.7.3\r\n[DEBUG]   Included: ch.qos.logback:logback-core:jar:1.1.3\r\n[DEBUG]   Included: ch.qos.logback:logback-classic:jar:1.1.3 \r\n{code}\r\n\r\n\r\n*and i also see that,  in  maven  \"META-INF/maven/extension.xml\" file ,\r\n here is slf4j  exportedArtifact config:*\r\n{code}\r\n    <exportedArtifact>org.slf4j:slf4j-api</exportedArtifact>\r\n{code}\r\n\r\n\r\n*and in org.apache.maven.classrealm.DefaultClassRealmManager.isProvidedArtifact(Artifact)   line 167 , has code validator*\r\n\r\n{code}\r\nif ( artifacts != null )\r\n        {\r\n            for ( Artifact artifact : artifacts )\r\n            {\r\n                if ( !isProvidedArtifact( artifact ) )\r\n                {\r\n                    artifactIds.add( getId( artifact ) );\r\n                    if ( artifact.getFile() != null )\r\n                    {\r\n                        constituents.add( new ArtifactClassRealmConstituent( artifact ) );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n{code}\r\n......\r\n\r\n\r\n*why in my plugins, can not use MessageFormatter?*"
    ],
    [
        "MNG-5094",
        "MNG-3526",
        "If POM's parent is not availabe in local repository then DefaultProjectBuilder is unable to resolve this parent while POM build I created a maven project via  \"mvn archetype:generate\" with selection item no as 3. Project I created was abc:xyz:1.0:jar.\nI am using build( File pomFile, ProjectBuildingRequest request ) method of DefaultProjectBuilder which returns ProjectBuildingResult containing MavenProject of POM file.\n\nHere is parent section of POM \n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>com.cedarsoft</groupId>\n    <artifactId>open</artifactId>\n    <version>4.0.2</version>\n  </parent>\n  <groupId>abc</groupId>\n  <artifactId>xyz</artifactId>\n  <version>1.0</version>\n---\n</project>\n\nProblem: My local repository doesn't contain com.cedarsoft:open:4.0.2. So while building with this build method I was expecting it to download parent (com.cedarsoft:open:4.0.2) and move ahead with the building work, but it didn't happen. This used to happen with maven 2.2.1 apis using DefaultMavenProjectBuilder.\n\nI debugged and found that while resolving parent (com.cedarsoft:open:4.0.2) repositories list is empty whereas it should provide Central repository from Super POM to resolve this parent artifact. This used to happen with maven 2.2.1 apis\n\nWhat I did to avoid this : Either I add central repository in my POM or add Central repository in ProjectBuildingRequest.\n\nSo I think this is a bug of maven 3.0.3 where its unable to pass central repository while resolving artifacts.     ",
        "Small change to artifact version parsing. We currently many projects that use an OSGi compatible scheme for release version numbers.  The OSGi spec does not currently allow a \"-\" to determine the location of the qualifier.  So instead of the maven standard like this:\n\n1.0.1-beta-1\n\nWe have something like this:\n\n1.0.1.beta1\n\nMaven's currently handles this by treating the entire version string as a classifier.  It would be helpful this could be parsed as \nmajor = 1\nminor = 0\nincremental = 1\nqualifier = beta1"
    ],
    [
        "MNG-1273",
        "MNG-3588",
        "Current  installation instructions for Windows do not mention M2_HOME. It is required and cannot have spaces. Two issues:\n\n1. The installation instructions for Windows make no mention of the need to set M2_HOME. But if you try to run \"mvn --version\" after following the instructions, you are prompted to set this environment variable.\n\n2. At least on Windows 2K, M2_HOME will not work if it contains spaces. One workaround is to use the \"short\" 8.3 version of all directory names. (To see the short version of directory names, do \"dir /A:D /X\" in a DOS window.)\n\n",
        "${maven.repo.local} in settings.xml doesn't work. I can't use ${maven.repo.local} parameter inside settings.xml file. The parameter is simply ignored.\n\n<settings>\n    <localRepository>c:\\base_repo_location</localRepository>\n\n    <profiles>\n         <profile>\n            <id>my-profile</id>\n             <properties>\n                 <maven.repo.local>C:\\alternative_repo_location</maven.repo.local>\n             </properties>     \n          </profile>\n    </profiles>\n</settings>\n\nWhen I run \n\"mvn -P my-profile package\" \nall downloaded artifacts are stored under \"c:\\base_repo_location\" not \"C:\\alternative_repo_location\".\n\nWhen I run \n\"mvn -Dmaven.repo.local=C:\\alternative_repo_location package\" package\nartifacts are stored under \"C:\\alternative_repo_location\" as I expected.\n"
    ],
    [
        "MNG-175",
        "MNG-2754",
        "add modules handling to reactor <modules>\n  <module>foo</module>\n  <module>bar</module>\n</modules>\n",
        "System Properties profile activation should move to Execution Properties activation Any -D options from the CLI should be turned into execution properties and the activator which relies on system properties should use activation properties."
    ],
    [
        "MNG-5616",
        "MNG-5193",
        "when multithreading is activated, log level FINE is wrongly printed Hello, \n\nIn maven 3, I encountered that there are some additionnal log, when a multi-module project is builded with multi-thread. \n\nMaven keeps printing the http header of all of the download request for dependencies. \n\nI did not alter the configuration log in simplelogger.properties and I use a log4j in many of my projects. \n\nCould you tell me if there is another way to overwrite the log level of MAVEN ? \n\nRegards, ",
        "Maven-Ranges Referencing artifacts using ranges, for instance\n\n<dependency>\n\t\t<groupId>local</groupId>\n\t\t<artifactId>Wumpelputz_Component</artifactId>\n\t\t<version>[1.0.0,1.1.0)</version>\t\t\n</dependency>\n\nthe most recent version artifact is referenced. This can be the last snapshot (for instance \"1.0.9-SNAPSHOT\") or the last release (for instance \"1.0.8\" if the \"1.0.9-SNAPSHOT\" build hasn't finished yet).\n\nPlease note: This can be a snapshot artifact even when in a context of a release build (maven-release-plugin), what I consider a major bug!!!\n\nWhat we need (humbly ask for) is something like that:\n\n<dependency>\n\t\t<groupId>local</groupId>\n\t\t<artifactId>Wumpelputz_Component</artifactId>\n\t\t<version>[1.0.0,1.1.0)</version>\t\t\n\t\t<includeSnapshots>false</includeSnapshots>\n</dependency>\n\nUsing \"<includeSnapshots>\" we want to control, whether the last snapshot or the most recent release is to be referenced. This should be set to \"false\" by default.\n"
    ],
    [
        "MNG-3989",
        "MNG-2750",
        "Simple handling of external jars \nFor whatever reason, there will always be jars that don't exist in a maven repository.\n\nThere are numerous techniques for these - installing them in your local repo (either manually or with\nsome bootstrap.sh script or special profile activation).   Checking in the jars into a local maven repository that is checked into svn \nand then point to it from your settings.xml and/or top level pom (with aid of an env variable).\n\nBut all these methods lack a very important features.  You can just do: \"svn co http:/myproj.com/foo; cd foo; mvn\"\nIf the jars change, you can't just do \"svn up; mvn\", you have to re-run whatever script/profile installed the repo.\nIt's all rather a PITA.\n\nWhat I want, is some way to have a module of a project that contains some non-maven jars that when I\ndo a \"mvn install\" in that project, install those jars in my local repository for use by my other modules. If the\njars are not updated, then nothing is done.\n\nWith something like this, projects that have external dependencies could describe them to maven and \nmake them available for use, without manual steps and special scripts.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "Remove the notion of pluginRepositories I really don't think we need separate repositories for plugins. With the current behavior where dependencies are specified in plugins, they can only come from a plugin repository which is sort of useless. I think most people in practice just point their repository and pluginRepository settings at the same URL."
    ],
    [
        "MNG-4309",
        "MNG-2598",
        "Checksum validation doesn't fail the build for repository metadata files I have a repository which has invalid checksums for some of it's maven-metadata.xml files.\n\nWhen building with \"-C\" I get a warning, but the build still succeeds\n\n\n{code}\n\nmvn -C deploy\n\n+ Enabling strict checksum verification on all artifact downloads.\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - test:project_a:jar:2.0.2-SNAPSHOT\n[INFO]    task-segment: [deploy]\n[INFO] ------------------------------------------------------------------------\n[INFO] [resources:resources {execution: default-resources}]\n[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory /Users/rseddon/test/foo/project_a/src/main/resources\n[INFO] [compiler:compile {execution: default-compile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [resources:testResources {execution: default-testResources}]\n[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory /Users/rseddon/test/foo/project_a/src/test/resources\n[INFO] [compiler:testCompile {execution: default-testCompile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [surefire:test {execution: default-test}]\n[INFO] No tests to run.\n[INFO] [jar:jar {execution: default-jar}]\n[INFO] [install:install {execution: default-install}]\n[INFO] Installing /Users/rseddon/test/foo/project_a/target/project_a-2.0.2-SNAPSHOT.jar to /Users/rseddon/.m2/repository/test/project_a/2.0.2-SNAPSHOT/project_a-2.0.2-SNAPSHOT.jar\n[INFO] [deploy:deploy {execution: default-deploy}]\n[INFO] Retrieving previous build number from foo\nUploading: http://localhost:8081/nexus/content/repositories/snapshots//test/project_a/2.0.2-SNAPSHOT/project_a-2.0.2-20090817.175509-6.jar\n1K uploaded  (project_a-2.0.2-20090817.175509-6.jar)\n[INFO] Retrieving previous metadata from foo\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '1fee9c8f59bbb8457c230db81681cf98d90683d1'; remote = '07f4f4f5cc59ff10b1f71328abe8f61f6e56bdc0' - RETRYING\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '1fee9c8f59bbb8457c230db81681cf98d90683d1'; remote = '07f4f4f5cc59ff10b1f71328abe8f61f6e56bdc0' - IGNORING\n[INFO] Uploading repository metadata for: 'artifact test:project_a'\n[INFO] Retrieving previous metadata from foo\n[INFO] Uploading repository metadata for: 'snapshot test:project_a:2.0.2-SNAPSHOT'\n[INFO] Uploading project information for project_a 2.0.2-20090817.175509-6\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Mon Aug 17 10:55:09 PDT 2009\n[INFO] Final Memory: 9M/19M\n[INFO] ------------------------------------------------------------------------\n\n{code}",
        "profile element in POM should support overriding project.build.directory I am trying to set up a 'dev' build profile that, when enabled, will cause my j2ee artifacts to be built directly to exploded j2ee deployment dirs, instead of target/classes/. The purpose is to make the everyday development process more efficient by skipping a number of time-consuming intermediate mvn steps (i.e. jarring artifacts, copying the jars to the local repo, then unjarring the artifacts to their deploy locations).\n\nThe intuitive way to achieve this is to override 'project.build.directory' and/or 'project.build.outputDirectory' in a profile; e.g.:\n\n<profile>\n...\n <build>\n  <outputDirectory>${jboss.home}/server/default/deploy/my.ear/my-exploded-ejb.jar\n </build>\n...\n</profile>\n\nUnfortunately, profiles currently do not allow one to override either 'project.build.directory' or 'project.build.outputDirectory'. Please change Maven to allow profiles to override these props. Otherwise, I can't see any other way to achieve what my team needs to do to have a practical build/dev infrastructure.\n\nThanks,\nIan\n"
    ],
    [
        "MNG-2773",
        "MNG-561",
        "Plugin repositories are chekced for SNAPSHOTS on every run in the 2.0.5 candidate Trussing the mvn process shows that Maven tries to connect to the plugin repository on every run, instead of the daily check.\n\n{code}\n[16:38:50][tlaugstoel@sunw360:monitor-core]$ truss -t connect mvn -Dmaven.test.skip=true install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Unnamed - no.java.monitor:monitor-core:jar:1.0-SNAPSHOT\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] artifact org.apache.maven.plugins:maven-resources-plugin: checking for updates from codehaus-snapshots\n/1:     connect(8, 0xFFBFBAF4, 16, SOV_DEFAULT)         = 0\n/1:     connect(7, 0xFFBFBD98, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-compiler-plugin: checking for updates from codehaus-snapshots\n/1:     connect(7, 0xFFBFBD80, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-surefire-plugin: checking for updates from codehaus-snapshots\n/1:     connect(9, 0xFFBFBD98, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-jar-plugin: checking for updates from codehaus-snapshots\n/1:     connect(7, 0xFFBFBD80, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-install-plugin: checking for updates from codehaus-snapshots\n[INFO] [plexus:descriptor {execution: default}]\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[WARNING] \n        Artifact junit:junit:jar:3.8.1:test retains local scope 'test' overriding broader scope 'compile'\n        given by a dependency. If this is not intended, modify or remove the local scope.\n{code}",
        "Adding more options for the javadoc plugin Actually, we cannot set specific option for the javadoc plugin, ie at least those m1.\n\nMoreover, with maven-artifact-test plugin, the javadoc goal doesn't work without the package option.\n\n\n\n"
    ],
    [
        "MNG-4144",
        "MNG-1142",
        "document escape character for curly braces in clear-text passwords for settings.xml password security ",
        "restriction of [1.6,) and [1.5,1.6.2) in that order results in 1.6.2 instead of 1.6.1 got this by adding ant [1.6,) to it0034, and ant [1.5,1.6.2) to one of its deps (deeper).\n\nI think this is caused by the fact that versions are resolved too early instead of retaining the restriction, but it needs a further look."
    ],
    [
        "MNG-2618",
        "MNG-4606",
        "pom.xml with amperstands and variables I've got an exception with structure:\n\n<!-- pom fragment -->\n\t<organization>\n\t\t<name>Autoguard &amp; Insurance Sp. z o.o</name>\n\t</organization>\n\nthe ${project.organization.name} makes an exception.",
        "Plugin dependencies are not available for initialization java.util.logging It seems that the classloader cannot find dependencies declared by Maven. After {{java.util.logging}} is parsed the logging handlers are inizialized lazy. The first call to {{java.util.logging.Logger.getLogger}} fails with a {{ClassNotFoundException: org.slf4j.bridge.SLF4JBridgeHandler}}\n\nI added a sample project (jersey produces the JUL-Output) and the Maven-debug-output as attachment. I invoked maven with following command line:\n{{mvn -X jetty:run -Djava.util.logging.config.file=.\\src\\main\\resources\\logging.properties -Dlog4j.configuration=file:.\\src\\main\\resources\\log4j.properties >maven.out 2>&1}}\n\nThe project deployed to a Tomcat with has the same slf4j-setup works fine."
    ],
    [
        "MNG-2188",
        "MNG-2638",
        "Report mojos should check canGenerateReport() when called directly There's a canGenerateReport() method in a ReportMojo. This method is called by the site phase to decide if the mojo should be called or not. This is cool. However the user can call directly the report mojo and in that case the canGenerateReport() method is not called automatically. Thus the solution for a plugin developer is to write:\n\n{code}\npublic void executeReport()\n{\n    if (canGenerateReport() )\n    { \n        [...]\n    }\n}\n{code}\n\nWhich means that the canGenerateReport method is going to be called twice when mvn site is executed.\n",
        "Please add Developpez.com Maven FAQ to articles (french) Here is the new FAQ for Maven 2 & Continuum on developpez.com\n\nWith the collaboration of emmanuel ;)"
    ],
    [
        "MNG-483",
        "MNG-3826",
        "sort out artifact attachment currently, there is an attachArtifact call inside the plugin building the attachment. It imposes a m-a and m-p dependency, as well as an artifactFactory requirement to be able to construct the artifact to attach.\n\nsort out\n- if there is an easier way to achieve this\n- how to retain the default source binding, but also how to turn it off\n- how to make the source binding happen only on \"release\" (bear in mind people may not be using the release plugin... a profile was the original idea)\n- how to bind assembly similarly\n\n",
        "Add profile activation when project version matches a regex Here is the related discussion\n\nby Dan Tran Nov 06, 2008; 01:07pm :: Rate this Message: - Use ratings to moderate (?)\n\nActivate a profile when project.version is not SNAPSHOT\n\nis it possible?\n\n-D\n\nby Stephen Connolly-2 Nov 06, 2008; 01:35pm :: Rate this Message: - Use ratings to moderate (?)\n\nAFAIK, No... the core does not support it and plugins cannot activate\nprofiles as the active profiles have been decided before the validate phase\n\n\nby Dan Tran Nov 06, 2008; 01:39pm :: Rate this Message: - Use ratings to moderate (?)\n\nsounds like a new feature to request for maven-profile component\n\nby mihobson Nov 07, 2008; 01:26am :: Rate this Message: - Use ratings to moderate (?)\n\nI've been wanting this for a while but figured it'd be solved by\ncustom profile activators, currently sitting in trunk:\n\nhttp://docs.codehaus.org/display/MAVEN/Custom+Profile+Activators\n\nPerhaps a new snapshot profile activator would be best for the\nshort-term.  Have you raised an issue I could watch?\n\nCheers,\n\nMark\n\n"
    ],
    [
        "MNG-5730",
        "MNG-209",
        "Provide a tool to test Maven version parsing and comparison At the moment, when someone thinks there is a problem, the only way to investigate is to write new unit tests in ComparableVersionTest\n\na little CLI tool to display the parsed version (in its canonical form) and comparing arguments would be useful\n\n{noformat}$ java -jar maven-artifact-*.jar 3.2.4-alpha-1 3.2.4-SNAPSHOT 3.2.4.0\nDisplay parameters as parsed by Maven (in canonical form) and comparison result:\n1. 3.2.4-alpha-1 == 3.2.4.alpha.1\n   3.2.4-alpha-1 < 3.2.4-SNAPSHOT\n2. 3.2.4-SNAPSHOT == 3.2.4.snapshot\n   3.2.4-SNAPSHOT < 3.2.4.0\n3. 3.2.4.0 == 3.2.4{noformat}",
        "lifecycle is not cleared on successive runs, leaving behind cruft currently, the lifecycle is only initialised once, and then the bindings are all gathered up.\n\nAs a result of this, new bindings for projects previously executed in the reactor are used on subsequent projects, whereas the lifecycle bindings should be fresh each time."
    ],
    [
        "MNG-540",
        "MNG-5002",
        "There should be a page of \"powered by maven2\" Since Maven2 still don't have enough document, it would be even more useful to have a page of \"powered by maven2'.  In this way, user can checkout the other project pom file as a sample while trying to figure out if something is a bug or just wrong configuration.\n\nWe volunteer as the first one :)\n\nhttp://gforge.public.thoughtworks.org/projects/dbfixture/",
        "Artifact metadata file names are corrupted with the text \"local\" I have a custom MOJO where in I add a piece of metadata to the project's primary artifact. I've extended the AbstractArtifactMetadata class to do so. The getLocalFilename and getRemoteFilename methods simply return a string in the following format $artifactId-$version.nvn. In Maven 2.2.1 the file would get stored in the repository properly. For example, emc-vsi-core-features-4.1.0-SNAPSHOT.nvn is how the file should look, and does in Maven 2.2.1. In Maven 3 the file resembles emc-vsi-core-features-4-local.1.0-SNAPSHOT.nvn. Clearly the new local resolution logic in Maven 3 is inserting the text \"local\" into the metadata's file name prior to storing it on the file system.\n\nI'm simply invoking the primary artifact's addMetadata method and passing it an instance of my custom class. I've attached my metadata class to this bug report."
    ],
    [
        "MNG-4219",
        "MNG-2281",
        "update plexus-utils to avoid leaking processes in CommandLineUtils.getSystemEnvars() Not long ago, it was discovered that CommandLineUtils leaks processes in come circumstances (in older versions of plexus-utils) because it fails to read stderr. Later versions of plexus-utils (1.5.11 and above) have fixed this problem.\n\nInterestingly, Hudson has had a persistent problem with leaking processes on the Windows slave VM out on https://grid.sonatype.org/ci/ - I'm pretty sure this will help alleviate those issues. We should move up to the latest version of plexus-utils to take advantage of this bugfix.",
        "1.0-beta-3 should be < 1.0-SNAPSHOT "
    ],
    [
        "MNG-869",
        "MNG-4902",
        "Reference to non existent tools.jar on mac os x After running\n\nsh m2-bootstrap-all.sh \n\nI got the following integration failure pasted below. I also ran 'find . -name tools.jar' from my java home directory and got no results.\n\n[INFO] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] Main Error:\n  System artifact: jdk-tools:jdk-tools:jar:1.4.2 not found in path: /System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Home/../lib/tools.jar\n  jdk-tools:jdk-tools:1.4.2:jar\n\nPath to dependency: \n        1) org.apache.maven.it:maven-core-it0063:jar:1.0\n        2) jdk-tools:jdk-tools:jar:1.4.2\n\n\n\nRoot error:\n  System artifact: jdk-tools:jdk-tools:jar:1.4.2 not found in path: /System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Home/../lib/tools.jar\n  jdk-tools:jdk-tools:1.4.2:jar\n\nPath to dependency: \n        1) org.apache.maven.it:maven-core-it0063:jar:1.0\n        2) jdk-tools:jdk-tools:jar:1.4.2\n\n",
        "Update default plugin versions The WAR Plugin version 2.1 currently used by default is broken and should be updated."
    ],
    [
        "MNG-5356",
        "MNG-1027",
        "Make encrypt/decrypt logic pluggable It would be good if Maven Core facilitated the encryption (and decryption) logic to be replaceable. Today's solution is very much hard-coded to the plexus logic.\n\nThis would make it possible for enterprise environments to re-use existing solutions, like for eg smart cards, for this. The default should be the current implementation though.",
        "Deployed manifest classpaths contain SNAPSHOT filenames When deploying a snapshot that includes the classpath in it's manifest, the SNAPSHOT.jar filenames are written into the manifest rather than the actual deployed <timestamp>.jar filenames."
    ],
    [
        "MNG-4009",
        "MNG-5766",
        "[regression] Effects of active profiles from parent are not inherited by children. Parent POM snippet:\n{code:xml}\n<profiles>\n  <profile>\n    <id>parent-profile</id>\n    <properties>\n      <!-- our children should see this, too -->\n      <parentProfileProperty>PASSED</parentProfileProperty>\n    </properties>\n  </profile>\n</profiles>\n{code}\nThe effective child POM is missing the property parentProfileProperty although the profile \"parent-profile\" has been activated from CLI.",
        "LifecycleModuleBuilder effectively swallows runtime exceptions and errors When RuntimeException or Error is thrown during project build, I expect  reactor build to halt, the project to be mark as FAILED in the build summary and original Throwable stacktrace printed if maven was started with --errors. Current behaviour is inconsistent and depending on builder used and location of the original throw statement, the failure can be completely ignored."
    ],
    [
        "MNG-1880",
        "MNG-5449",
        "Add new pre and post phases to the integration-test phase Here's an example:\n\nImagine I want to use the cargo plugin for starting/stopping my container. I need to attach the cargo:start goal to a phase and I need to do the same for the cargo:stop goal. I can't do that today.\n\nOf course, I could modify the cargo plugin and offer some cargo:test goal that would do it all. But that violates the concept of phases and reduces the options for the users (note: I may still offer a cargo:test goal but I'd like to user to be able to map cargo goals to phases himself too).\n\nThis is just an example. By definition IT require a running environment so there'll always be a need to set up and tear down stuff.\n",
        "Conflicting dependencies and NoClassDefFoundError h3. Overview\n\nI have conflicting transitive dependencies that lead to a runtime {{NoClassDefFoundError}} without any warning. \n\nh3. Details\n\nI have a project whose transitive dependencies include two versions of {{org.apache.maven/maven-artifact}}, 3.0.4 and 2.2.1.\n\n{code:xml|title=pom.xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>demo</groupId>\n  <artifactId>demo</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>demo</name>\n  <dependencies>\n  \t<dependency>\n  \t\t<groupId>org.antlr</groupId>\n  \t\t<artifactId>antlr4-maven-plugin</artifactId>\n  \t\t<version>4.0</version>\n  \t\t<type>maven-plugin</type>\n  \t</dependency><dependency>\n  \t\t<groupId>org.apache.maven.plugin-tools</groupId>\n  \t\t<artifactId>maven-plugin-tools-generators</artifactId>\n  \t\t<version>3.2</version>\n  \t</dependency>\n  </dependencies>\n</project>\n{code}\n\nThese artifacts have conflicting transitive dependencies:\n\n{code}\n$ mvn dependency:tree -Dverbose -Dincludes=org.apache.maven:maven-artifact\n[INFO] demo:demo:jar:0.0.1-SNAPSHOT\n[INFO] +- org.antlr:antlr4-maven-plugin:maven-plugin:4.0:compile\n[INFO] |  +- org.apache.maven:maven-plugin-api:jar:3.0.4:compile\n[INFO] |  |  \\- org.apache.maven:maven-artifact:jar:3.0.4:compile\n[INFO] |  \\- org.apache.maven:maven-project:jar:2.2.1:compile\n[INFO] |     +- org.apache.maven:maven-artifact-manager:jar:2.2.1:compile\n[INFO] |     |  \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n[INFO] |     \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n[INFO] \\- org.apache.maven.plugin-tools:maven-plugin-tools-generators:jar:3.2:compile\n[INFO]    +- org.apache.maven.plugin-tools:maven-plugin-tools-api:jar:3.2:compile\n[INFO]    |  \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n[INFO]    \\- org.apache.maven:maven-plugin-descriptor:jar:2.2.1:compile\n[INFO]       \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n{code}\n\nHere's some simple code importing a class from one of the direct dependencies:\n\n{code:java|title=Main.java}\npackage demo;\nimport org.apache.maven.tools.plugin.generator.GeneratorUtils;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(GeneratorUtils.toText(\"{@code demo}\"));\n\t}\n}\n{code}\n\nWhen run, it gives the following traceback:\n\n{code}\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/maven/artifact/DependencyResolutionRequiredException\n\tat demo.Main.main(Main.java:6)\nCaused by: java.lang.ClassNotFoundException: org.apache.maven.artifact.DependencyResolutionRequiredException\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n\t... 1 more\n{code}\n\nIt turns out that {{DependencyResolutionRequiredException}} is present in maven-artifact 2.x, but not in 3.x.\n\nGiven the above, I would have expected a warning of some kind about the conflicting transitive dependencies if they can't be resolved automatically."
    ],
    [
        "MNG-609",
        "MNG-5470",
        "Filtered resources should support ${pom.*} and ${project.*} syntax only, not ${*}, for POM properties I noticed that the latest code on the trunk adds support for filtered resources, including the ability to refer to pom properties, in addition to any filter properties defined in filter.properties.\n\nFor example:\n\n src/main/resources/my-resource.txt\n\nwith contents\n\n ${version}\n\nIt seems that each property of the POM is exposed as an independent top-level variable.\n\nI was expecting the filtered resource file syntax to be...\n\n ${project.version}\n\n...since that would be consistent with expressions used in the pom.xml file, such as:\n\n <sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>\n\nThis has the added benefit of reduced collision space for top-level variables in filtered resource files.\n\nRecommend that top level variables, such as ${version} are _not_ supported as implicit filter variables, only ${pom} and ${project}.\n",
        "Fix license headers on source files RAT is reporting GIT HASH 262b9bb1ef91d1414e5162d9dd0f5522e7186202 has 391 files that are either missing license headers or have not been flagged as files that cannot support a license header. \n\nMost of these are test data files and I would be happy to argue that the test may require a specific exact content for reproducibility, but the following I do not feel we can make a case for:\n\n{code}\n  apache-maven/src/bin/m2.conf\n  apache-maven/src/conf/logging/simplelogger.properties\n  maven-aether-provider/src/main/java/org/apache/maven/repository/internal/package.html\n  maven-aether-provider/src/site/apt/index.apt\n  maven-artifact/src/site/apt/index.apt\n  maven-compat/compatibility.cfl\n  maven-compat/src/main/resources/META-INF/maven/plugin.xml\n  maven-core/lifecycle-executor.txt\n  maven-core/plugin-manager.txt\n  maven-core/project-builder.txt\n  maven-core/src/main/resources/org/apache/maven/messages/build.properties\n  maven-core/src/site/apt/artifact-handlers.apt\n  maven-core/src/site/apt/configuration-management.apt\n  maven-core/src/site/apt/default-bindings.apt.vm\n  maven-core/src/site/apt/getting-to-container-configured-mojos.apt\n  maven-core/src/site/apt/index.apt\n  maven-core/src/site/apt/inheritance.apt\n  maven-core/src/site/apt/lifecycles.apt.vm\n  maven-core/src/site/apt/offline-mode.apt\n  maven-core/src/site/apt/plugin-execution-isolation.apt\n  maven-core/src/site/apt/scripting-support/marmalade-support.apt\n  maven-core/src/site/resources/design/2.1-lifecycle-refactor.graffle\n  maven-embedder/src/examples/simple-project/src/main/java/org/apache/maven/embedder/App.java\n  maven-embedder/src/examples/simple-project/src/test/java/org/apache/maven/embedder/AppTest.java\n  maven-embedder/src/main/resources/META-INF/MANIFEST.MF\n  maven-embedder/src/main/resources/META-INF/maven/slf4j-configuration.properties\n  maven-embedder/src/site/apt/cli.apt.vm\n  maven-embedder/src/site/apt/index.apt.vm\n  maven-embedder/src/site/apt/logging.apt\n  maven-model/src/main/java/org/apache/maven/model/io/xpp3/package.html\n  maven-model/src/main/java/org/apache/maven/model/merge/package.html\n  maven-model/src/main/java/org/apache/maven/model/package.html\n  maven-model/src/site/apt/index.apt\n  maven-model-builder/src/site/apt/index.apt\n  maven-model-builder/src/site/apt/super-pom.apt.vm\n  maven-plugin-api/src/site/apt/index.apt\n  maven-plugin-api/src/test/resources/plugin.xml\n  maven-repository-metadata/src/site/apt/index.apt\n  maven-settings/src/site/apt/index.apt\n{code}\n\nAttached is the full RAT report\n"
    ],
    [
        "MNG-2053",
        "MNG-4221",
        "Implements a better toString method in the maven objects exemple in : o.a.m.p.MavenProject In order to debug mojo, I use mvn -X.\nExemple with the eclipse plugin, I have something like this in the output :\n[DEBUG]   (f) reactorProjects = [org.apache.maven.project.MavenProject@e29b03d6,\n org.apache.maven.project.MavenProject@db660f38, org.apache.maven.project.MavenP\nroject@eecae9aa, org.apache.maven.project.MavenProject@a44caf, org.apache.maven.\nproject.MavenProject@adb676ad, org.apache.maven.project.MavenProject@33defbd1, o\nrg.apache.maven.project.MavenProject@f11d7dff, org.apache.maven.project.MavenPro\nject@c08c0a31, org.apache.maven.project.MavenProject@1309c11]\nCould we have a better toString() method with the minimum of information in case of maven project groupId, artifactId and version ?\nThis could be done with a lot of core object Resource ....\nOlivier",
        "Push all repository/artifact related code into a legacy module and create a backward compat layer for external consumers "
    ],
    [
        "MNG-3282",
        "MNG-3739",
        "maven only tries the first repo that contains an artifact If there are multiple repos that contain an artifact, the metadata in the local repo for all of them will contain this fact. Maven only tries the first one to get the artifact and doesn't try the others. It should try any other repos known to contain the artifact if the previous ones fail (if they are down for example).",
        "Perform multiple web requests simultaneously. Maven's dependency downloading is horribly slow.\n\nIt appears to only make one request at a time; often to slow mirrors which take seconds to respond.\n\nThis is not so much of an issue when you use a local repository to keep and manage your dependencies; though it becomes one again once you leave the network of that repository and try to access it over the internet.\n\nMaven should make multiple (5 or so; configurable perhaps) requests simultaneously so that while several are establishing connection, others are at least already using the available bandwidth.  And should mirrors be capped; other artifacts can already be downloaded from other mirrors to make optimal use of the bandwidth.  Currently only a fraction of the bandwidth capacity is used; causing an initial build of a large project without a local repository available to take *for* *ever*.  The project I'm working on; I need to make sure to reserve a day at least should I want to build the code with a client."
    ],
    [
        "MNG-3793",
        "MNG-1741",
        "MavenMetadataSource.retrieveAvailableVersions(...) returns garbage with a legacy repository I have a legacy repository containing lots of jars.\n\nOn the repository, I have these versions for an artifact :\nrepository_maven$ ls crih_asi/jars/quartz-crih-*jar\ncrih_asi/jars/quartz-crih-1.04.jar  crih_asi/jars/quartz-crih-1.06.jar  crih_asi/jars/quartz-crih-1.09.jar\ncrih_asi/jars/quartz-crih-1.05.jar  crih_asi/jars/quartz-crih-1.07.jar  crih_asi/jars/quartz-crih-1.10.jar\n\nWith the goal versions:display-dependency-updates, I have this :\n[INFO] The following dependency updates are available:\n[INFO]   crih_asi:quartz-crih ................................... 1.10 -> 3.21\n\nRunning this goal in debug shows this :\n[DEBUG] Checking crih_asi:quartz-crih for updates newer than 1.10\n[DEBUG] crih_asi:quartz-crih:jar:1.10:provided has versions [1.00, 1.55, 1.70, 1.56, 1.04, 1.01, 1.52, 1.54, 1.02, 2\n.69, 3.21, 1.10, 1.53, 1.05, 1.06, 1.07]\n\nThe versions are correct for others artifacts, but not for this one. The list is obtained with this code :\nversions = artifactMetadataSource.retrieveAvailableVersions( artifact, localRepository, remoteRepositories );\n\nThe implementation for artifactMetadataSource is org.apache.maven.project.artifact.MavenMetadataSource",
        "Not detecting changes in the installed jars. I have installed my components jar to remote repository. If someone has change the repository then and user is using the same version of the component. Although the component jar has been changed but user is not getting the new component jar in the repository as he is having the same version jar in his/her local repository."
    ],
    [
        "MNG-3621",
        "MNG-2556",
        "site url inheritance broken for UNC paths I have a parent POM that is inherited by multiple projects that specifies site wide default settings. \n(e.g)\nParent\\pom.xml <--- this is the pom containing the site configuration\nParent\\CheckStyleConfig\\pom.xml\n\nPart of this is the site deploy \n\n<distributionManagement>\n<site>\n<id>nds-uk.site</id>\n<url>file://///scg-nas.uk.nds.com/maven_sites/${project.groupId}/${project.artifactId}/${project.version}</url>\n</site>\n</distributionManagement>\n\nrunning site:deploy on the sub procject results in it using a corrupted version of the url.\n\nbuild output attached.\n\nNotice the corruption of the original parent  file:///// (2 slashes are removed so it tries to deploy to local HDD)\n\nparent (OK 5 slashes) file://///scg-nas.uk.nds.com/maven_sites/com.nds.cab.scg/common-parent/1.0.0.0-SNAPSHOT - Session: Opened \nchild (bad 3 slashes) file:///scg-nas.uk.nds.com/maven_sites/com.nds.cab.scg/common-checkstyle/1.0.0.0-SNAPSHOT/common-checkstyle - Session: Opened \n\n\n",
        "downloadable docs A downloadable package of maven documentation would be nice.\n\nThis is obviously total wishlist :)"
    ],
    [
        "MNG-1123",
        "MNG-1187",
        "publish m2 component javadoc and reports ",
        "new scope for nontransitive system dependency Would be very useful to have new dependency scope named for example system-provided, with meaning of system & nontransitive dependency.\nbest regards\nJuBu\n"
    ],
    [
        "MNG-3553",
        "MNG-2814",
        "cannot resolve dependency with scope import This pom when added as a dependency of another project does not see repository http://snapshots.jboss.org/maven2\n\n  <!-- DependencyManagement -->\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.jboss.jbossas</groupId>\n        <artifactId>jboss-as-component-matrix</artifactId>\n        <version>${jboss.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\nwith effective settings\n\n[tdiesler@tddell trunk]$ mvn help:effective-settings\n[INFO] Scanning for projects...\n[INFO] Reactor build order: \n[INFO]   JBoss Web Services - Stack CXF\n[INFO]   JBoss Web Services - Stack CXF Management\n[INFO]   JBoss Web Services - Stack CXF Runtime Server\n[INFO]   JBoss Web Services - Stack CXF Runtime Client\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building JBoss Web Services - Stack CXF\n[INFO]    task-segment: [help:effective-settings] (aggregator-style)\n[INFO] ------------------------------------------------------------------------\n[INFO] [help:effective-settings]\n[INFO] \nEffective settings:\n\n<?xml version=\"1.0\"?><settings>\n  <localRepository>/home/tdiesler/.m2/repository</localRepository>\n\n  <profiles>\n    <profile>\n      <activation>\n        <property>\n          <name>!jboss.repository.off</name>\n        </property>\n      </activation>\n      <repositories>\n        <repository>\n          <snapshots />\n          <id>snapshots.jboss.org</id>\n          <url>http://snapshots.jboss.org/maven2</url>\n        </repository>\n        <repository>\n          <snapshots>\n            <enabled>false</enabled>\n          </snapshots>\n          <id>repository.jboss.org</id>\n          <url>http://repository.jboss.org/maven2</url>\n        </repository>\n      </repositories>\n      <id>jboss.repository</id>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <activeProfile>user-profile</activeProfile>\n  </activeProfiles>\n  <pluginGroups>\n    <pluginGroup>org.jboss.maven.plugins</pluginGroup>\n  </pluginGroups>\n</settings>\n",
        "OS name is only detected if lower cased The following profile does not activate on MacosX:\n\n    <profile>\n      <id>activate-mac</id>\n      <activation>\n        <os>\n          <name>Mac OS X</name>\n        </os>\n      </activation>\n    </profile>\n\n\"Mac OS X\" matches the value returned when querying ${os.name}.\n\nIf you lowercase the name, the profile is activated:\n\n    <profile>\n      <id>activate-mac</id>\n      <activation>\n        <os>\n          <name>mac os x</name>\n        </os>\n      </activation>\n    </profile>\n\nThis is counter intuitive, as one would expect the exact cut and pasted (capitalised) ${os.name} value to work as an OS name in a profile.\n"
    ],
    [
        "MNG-5155",
        "MNG-5358",
        "'inherited' flag of report sets ignored. Defining a report plugin in a parent pom like\n\n{code:xml}\n<reporting>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-javadoc-plugin</artifactId>\n      <reportSets>\n        <reportSet>\n          <id>javadoc</id>\n          <reports>\n            <report>javadoc</report>\n            <report>test-javadoc</report>\n          </reports>\n        </reportSet>\n        <reportSet>\n          <id>aggregate</id>\n          <inherited>false</inherited>\n          <reports>\n            <report>aggregate</report>\n            <report>test-aggregate</report>\n          </reports>\n        </reportSet>\n      </reportSets>\n    </plugin>\n  </plugins>\n</reporting>\n{code}\n\nthe report set with id 'aggregate' will appear in the effective model of child modules although the 'inherited' flag is set to false.",
        "Install Plugin installs poms that contain variables in artifact version and parent version I am currently trying to create a build process that is optimized for being able to have individual modules of one project deployed with different versions. Therefore I created a build that uses properties for providing the version numbers for artifacts, dependencies and parent relations. The build is working nicely, unfortunately the install plugin installs the artifacts into the correct directories, but it doesn't replace the properties. This way the repo contains artifacts it can certainly not resolve ich a user checks out only part of the project.\n\nI created a small test-project. If you simply \"mvn install\" it you will see the problematic results."
    ],
    [
        "MNG-4237",
        "MNG-2848",
        "also-make-dependents builds parent projects incorrectly I am attempting to use --also-make-dependents to build a minimal set of changed components in response to source code changes.\n\nHere is a sample project tree:\n\n* root (1.0.0)\n** p1 (1.0.0)\n*** c1 (1.0.1-SNAPSHOT)\n** p2 (1.0.1-SNAPSHOT) (depends on c1)\n** p3 (1.0.0)\n*** c2 (1.0.0)\n\nA developer adds a new project c3 under p3, modifies p3 to include c3, and modifies c1 so that it depends on c3.  The version numbers of all modified projects are updated to 1.0.1-SNAPSHOT.  The resulting project tree would appear as follows (with the modified projects in bold):\n\n* root (1.0.0)\n** p1 (1.0.0)\n*** *c1* (1.0.1-SNAPSHOT) (depends on c3)\n** p2 (1.0.1-SNAPSHOT) (depends on c1)\n** *p3* (1.0.1-SNAPSHOT)\n*** c2 (1.0.0)\n*** *c3* (1.0.1-SNAPSHOT)\n\nAfter the developer checks in these changes, the continuous integration server detects the changes and runs {{mvn --projects p1/c1,p3,p3/c3 --also-make-dependents deploy}}.  The expected result of the reactor would be:\n\n* p3 is deployed\n* c3 is deployed\n* c1 is deployed\n* p2 is deployed\n\nHowever when the command is run c2 is also built.  c2 is not a dependent on any of the modified projects and should not be built.  I assume it is being built because its parent is being built, but this should not happen.\n\nIf c2 declared p3:1.0.1-SNAPSHOT as its parent it should be rebuilt because a change in the parent could affect the child.  However c2 is a child module of p3:1.0.0 so a new version of p3 should not affect it.\n\nAlso, if the root project is modified another problem emerges.  Attempting to add a period (to reference the current working directory) to the project list causes the build to fail:\n\n{noformat}\nmvn --projects . --also-make-dependents\n\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Couldn't find specified project in module list: C:\\root\\.\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Fri Jul 10 14:48:00 CDT 2009\n[INFO] Final Memory: 5M/9M\n[INFO] ------------------------------------------------------------------------\n{noformat}",
        "Environment variables in profile activation not working When using an environment variable as a profile activation variable, it doesnt work, using either env.X or ${env.X} doesnt work.\nI found the same issue on the forums unresolved.\n\nhttp://www.nabble.com/profile-activation-based-on-environment-variables-tf2585492s177.html#a7208580\n\nBasically, the following doesnt work, where FOO is a windows environment variable (like PATH for example) :\n{code:xml} \n <profile>\n  <id>haroon-workstation</id>\n  <activation>\n    <property>\n      <name>env.FOO</name>\n      <value>foo</value>\n    </property>\n   </activation>\n    .......\n\n </profile> \n{code}\n"
    ],
    [
        "MNG-1525",
        "MNG-3452",
        "Allow environment variables to be referenced in pom.xml, settings.xml, etc. Maven should allow environment variables to be referenced; similar to Java System properties. Ant allows this to be done using the following syntax:\n\n    <property environment=\"env\"/>\n    ${env.CATALINA_BASE}\n\nwhere CATALINA_BASE has been defined like:\n\n    export CATALINA_BASE=$HOME/tomcat\n\nIn Maven, an example use for signing jars might be:\n\n<plugin>\n <groupId>org.apache.maven.plugins</groupId>\n <artifactId>maven-jar-plugin</artifactId>\n <executions>\n   <execution>\n     <goals>\n       <goal>sign</goal>\n     </goals>\n   </execution>\n </executions>\n <configuration>\n   <keystore>${env.KEYSTORE_FILE}</keystore>\n   <storepass>${env.KEYSTORE_PASS}</storepass>\n   <alias>${env.KEYSTORE_ALIAS}</alias>\n   <jarPath>${project.build.directory}/${project.build.finalName}.jar</jarPath>\n </configuration>\n</plugin>\n\nwhere KEYSTORE_FILE, KEYSTORE_PASS, and KEYSTORE_ALIAS are environment variables.\n\nIt would also be very useful to have environment variables available when defining filter properties files. For instance:\n\n# application.properties\ndeploy.dir=${env.CATALINA_BASE}/webapps\n\nEnvironment variables can be referenced in Java like:\n\nMap<String, String> environmentVariables = java.lang.System.getenv();",
        "StackOverflowError building Apache ServiceMix 3 Maven 2.1-SNAPSHOT fail on building ServiceMix projects. Steps to reproduce:\n\n* Checkout https://svn.apache.org/repos/asf/servicemix/smx3/trunk \n* Run mvn install\n\nThis works with maven 2.0.8 but fails with the following exception with recent 2.1-SNAPSHOT"
    ],
    [
        "MNG-2925",
        "MNG-2856",
        "NullPointerException in PluginDescriptor.getMojo() if there's no mojo in pom.xml The getMojo method fails with NPE because getMojos() method returns null. This happens when there's no mojo in the plugin.\nThe code should be modified to check for this situation, like this:\n\n{code}\n    public MojoDescriptor getMojo( String goal )\n    {\n        List mojos = getMojos();\n        if(mojos==null) return null; // no mojo in this POM\n\n        MojoDescriptor mojoDescriptor = null;\n        for ( Iterator i = mojos.iterator(); i.hasNext() && mojoDescriptor == null; )\n        {\n            MojoDescriptor desc = (MojoDescriptor) i.next();\n            if ( goal.equals( desc.getGoal() ) )\n            {\n                mojoDescriptor = desc;\n            }\n        }\n        return mojoDescriptor;\n    }\n{/code}",
        "Maven Archetype Plugin Changes PNG images When the maven archetype serializes 123.png, it changes the file, making it unreadable.\n\nHere's the log info:\n\n[WARNING]\norg.apache.velocity.runtime.exception.ReferenceException:\nreference : template =\narchetype-resources/src/main/resources/images/123.png\n[line 9,column 50] : $I is not a valid reference.\n[WARNING]\norg.apache.velocity.runtime.exception.ReferenceException:\nreference : template =\narchetype-resources/src/main/resources/images/123.png\n[line 11,column 115] : $I is not a valid reference.\n\nMaybe there needs to be a binary resources tag in the archetype descriptor, so that the maven archetype simply copies binary resources, without attempting to evaluate template parameters.\n"
    ],
    [
        "MNG-2541",
        "MNG-2495",
        "Dependecy order is lost  in org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler:\n\n    private void assembleDependencyInheritance( Model child, Model parent )\n    {\n        Map depsMap = new HashMap();\n\n        List deps = parent.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        deps = child.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        child.setDependencies( new ArrayList( depsMap.values() ) );\n    }\n\nThis method mixes up the order of the dependenies due to the use of the Map.",
        "Javadocs for the test harness plugin would be very useful There is no javadoc report at http://maven.apache.org/shared/maven-plugin-testing-harness. "
    ],
    [
        "MNG-3634",
        "MNG-1233",
        "Improve the maven model to change the order of the POM elements  see the thread\nhttp://www.nabble.com/-Proposal--Pom-Code-Style-(WAS-svn-commit:-r670264----maven-plugins-trunk-maven-site-plugin-pom.xml)-td18083228.html",
        "overriding compile dependency with provided scope doesn't get excluded from a webapp "
    ],
    [
        "MNG-5606",
        "MNG-3423",
        "maven should use JDK_HOME env var if present JAVA_HOME is for jre, but maven searches for javac there.\nOne can add\n@if not \"%JDK_HOME%\" == \"\" set JAVA_HOME=\"%JDK_HOME%\"\nto mvn.bat\nand the analogue string to .sh script",
        "Regression when resolving depenencies for org.springframework.ws:spring-ws-core:1.0.3 Using maven 2.1 built from revision 620417, the following problem has been detected when resolving transitive dependencies for:\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.ws</groupId>\n\t\t\t<artifactId>spring-ws-core</artifactId>\n\t\t\t<version>1.0.3</version>\n\t\t</dependency>\n\nThe dependencies are not correctly detected, probably because of a \"problem with an invalid artifact in depman section\nof a transitive dependency's parent project\" [1].\n\nUsing the attached pom, only the declared dependency is copied to \"some-other-place\" by the built maven. Using a released 2.0.6 version, 14 dependencies are copied, so this looks like a regression.\n\nNote, this is not a problem with the dependencies plug-in, it has been used only to demonstrate the problem.\n\n[1] This has been detected using the embedder in q4e and then verified on the command line. The original report is at http://code.google.com/p/q4e/issues/detail?id=277"
    ],
    [
        "MNG-2052",
        "MNG-1573",
        "Transitive system deps are not interpolated correctly thus rendering them invalid When a library is loaded as a dependency if its dependencies contain one of type system which has a variable in the path the variable is not interpolated so that <systemPath>${appHome}/lib/...</systemPath> is not an absolute path, rendering the dependency invalid.\n\nex\n\nLib A\n      |-->Lib B\n               |-->Lib C (System Dep, path=$appHome}/lib/....jar)\n\nWhen resolving deps for lib B's pom will throw an error because path is not interpolated.\n\n\n",
        "No debug output for optional dependencies Running maven with -X is currently the only way to see, what dependencies are triggered. Unfortunately all optional dependencies do not appear in the debug output, neither where the (transitive) dependencies are printed nor in the output of the resulting classpath used to compile the source. Compilation is fine though, the classes are found."
    ],
    [
        "MNG-3326",
        "MNG-709",
        "Profile Deactivation Configuration Profile definitions should have a way to add deactivation configuration similar to the activation configuration.  So you could have a profile definition similar to this:\n{code:xml}\n<profile>\n  <id>my-profile</id>\n  <activation>\n    <property>\n      <name>all.profiles.on</name>\n    </property>\n  </activation>\n  <deactivation>\n    <property>\n      <name>all.profiles.off</name>\n    </property>\n    <jdk>1.6</jdk>\n  </deactivation>\n</profile>\n{code}",
        "lifecycle can end up in an infinite loop The pom source below used to work for alpha-3 subject to the comment about phase.  I just built maven2 from the trunk head, and AssemblyMojo.execute() no longer gets called.  If I call it from the command-line, it works fine.  Interestingly, if I uncomment the phase clause, the m2 script goes into an infinite loop.\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-assembly-plugin</artifactId>\n        <configuration>\n           <descriptor>src/assemble/zip-source.xml</descriptor>\n        </configuration>\n        <executions>\n          <execution>\n\t    <!-- Bug in alpha: phase was not defined in the mojo javadoc so we need the element below -->\n            <!--phase>package</phase-->\n            <goals>\n              <goal>assembly</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>"
    ],
    [
        "MNG-1712",
        "MNG-5369",
        "Maven should handle <extensions> when a mojo doesn't requires a project I have encountered this when I am trying to create the deploy:deploy-file goal. \n\nCurrently, we can tell wagon what provider to use by adding  <extensions>, but  this mojo doesnt require a project so how can we tell the wagon what provider to use?",
        "Inconsistent interaction between activeProfiles and activeByDefault I have two profiles.  One is activated by activeProfiles in settings.xml and the other is activeByDefault = true\n\nThey are both expected to be active as I am not using -P in my commands.\n\nThe bug is there are some cases in which the activeByDefault profile is not active.\n\nIt seems like whenever both profiles are located in the same pom, the activeByDefault profile is no longer active.  But moving the activeProfiles profile up into a parent pom or moving the activeByDefault profile down to a module both seems to work.\n\nIts a rather complicated to describe, so I have attached 6 sample projects which illustrates various scenarios.  I've summarized the results in the attached image.\n\nYou can also run all the projects with the command:\nls -1 | xargs --verbose -I CASE mvn -f CASE/sub-parent/project/pom.xml validate -s CASE/settings.xml |grep -vP '^\\[INFO\\]'\n\n"
    ],
    [
        "MNG-5764",
        "MNG-2975",
        "Tolerate \"soft\" 404, check downloaded pom files With maven 3.2 if the user downloads a pom/jar from external repository and the network proxy sends a \"soft 404\", the html-content of the response will be stored in the pom file. It needs some work to find out what went wrong.\n\nWhen downloading pom files, the content of the pom file could be parsed and the file should not be stored in the local maven cache. In such cases the artifact should not be downloaded either.",
        "test scope does not work with pom dependency I have a project A with pom packaging (<packaging>pom</packaging>) that use this dependency : \n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-mock</artifactId>\n\t\t\t<version>2.0</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\n\nIn project B , I try to use the project A like a dependency like this :\n\t<dependency>\n\t\t\t<groupId>xxx</groupId>\n\t\t\t<artifactId>SOFFWK_LIBS</artifactId>\n\t\t\t<version>1.0</version>\n\t\t\t<type>pom</type>\t\t\t\n\t\t</dependency>\n\n\n I don't get the spring-mock transitive dependency when I compile or test project B.\nIs it because it has a test scope? \n\n\n\n"
    ],
    [
        "MNG-5246",
        "MNG-15",
        "Allow <classifier> inside <plugin> element In the current Maven project descriptor (http://maven.apache.org/ref/3.0.4/maven-model/maven.html), plugins are declared inside {{<build>}} elements by specifying the {{<groupId>}}, {{<artifactId>}} and {{<version>}} elements. However the {{<classifier>}} element is currently not legal for a plugin. I would like {{<classifier>}} to be legal for plugins, like any other dependencies.\n\n*Use case:* I maintain two branches for my project: a development branch on JDK7, and a branch ported to JDK6. I use custom Maven plugins for my build process. However the JDK7 doclet API seems to have some incompatible changes compared to the JDK6 doclet API. In addition some APT (Annotation Processing Tools) API are being removed from JDK8, since they are now merged with the javac API. For various reasons (may also be reasons specific to my projects), I wish slightly different Maven plugins depending if I'm building my JDK6 branch or my JDK7 branch. I would like to simply use my custom Maven plugins with the same classifier than the project I'm building, but this is currently not possible.\n",
        "Generate the plugin.xml from @tags in the plugin "
    ],
    [
        "MNG-4991",
        "MNG-1271",
        "LegacyRepositorySystem#injectProxy(repositories, proxies) doesn't evaluate non-proxy hosts The method {{LegacyRepositorySystem#injectProxy(List<ArtifactRepository>, List<Proxy>)}} doesn't evaluate non-proxy host settings.\n\nEffect: When using this mehtod, each repository will be configured with a proxy, even if the related host is excluded via the {{<nonProxyHosts />}} tag in the _settings.xml_.",
        "Maven 2 needs to give a warning when it is being run in a Maven 1 project and there isn't a pom.xml file I was installing Maven 2 per the Installation Instructions and after running mvn --version and seeing 2.0 I decided to \"try it out\" - now realize I am a build/release guy, *not* a java coder so I'm coming from this as a complete newbie.\n\nSo, happy that Maven 2 was installed I went over to the working directory for our Maven 1 project and typed \"mvn compile\" and after a couple minutes of some downloading I get the following:\n\n[ERROR] BUILD ERROR\n...\n[INFO] Cannot execute mojo: resources. It requires a project, but the build is not using one.\n...\n[INFO] For more information, run Maven with the -e switch\n\nok, hmm, I'm thinking \"well, I *see* project.xml - what the heck does it want\" but I run mvn -e compile to be safe.  That spews a nice stack trace (and if I was a java guy it would probably make sense) but still nothing says \"hey fool - this is Maven *2* - you need a pom.xml file not that so-last-decade project.xml file!\"\n\nanywho - sorry for the long winded report - can you change the INFO message to mention pom.xml?\n\n"
    ],
    [
        "MNG-5736",
        "MNG-3588",
        "ProjectSorter invalid duplication checking One pom has two modules, both modules link to the same third module.\n\nProjectSorter detects this as a DuplicateProjectException, but in fact if you check getFile() for both projects they are in fact the exact same underlying pom.xml.\n\nSo I've provided a patch to ProjectSorter which check and skips the conflicting project, prior to throwing DuplicateProjectException.\n\nNot sure if I should be fixing ProjectSorter or if the bug needs to be fixed earlier...\n\nTestcase, execute the parent pom, with maven-core and it fails, then build maven-core with the supplied patch and rebuild the parent pom.",
        "${maven.repo.local} in settings.xml doesn't work. I can't use ${maven.repo.local} parameter inside settings.xml file. The parameter is simply ignored.\n\n<settings>\n    <localRepository>c:\\base_repo_location</localRepository>\n\n    <profiles>\n         <profile>\n            <id>my-profile</id>\n             <properties>\n                 <maven.repo.local>C:\\alternative_repo_location</maven.repo.local>\n             </properties>     \n          </profile>\n    </profiles>\n</settings>\n\nWhen I run \n\"mvn -P my-profile package\" \nall downloaded artifacts are stored under \"c:\\base_repo_location\" not \"C:\\alternative_repo_location\".\n\nWhen I run \n\"mvn -Dmaven.repo.local=C:\\alternative_repo_location package\" package\nartifacts are stored under \"C:\\alternative_repo_location\" as I expected.\n"
    ],
    [
        "MNG-4856",
        "MNG-2845",
        "DefaultReportingConverter create incorrect site plugin configuration for child pom mvn help:effective-pom displays \n{code}\n          <artifactId>maven-site-plugin</artifactId>\n          <version>3.0-beta-3-SNAPSHOT</version>\n          <executions>\n            <execution>\n              <id>default-site</id>\n              <phase>site</phase>\n              <goals>\n                <goal>site</goal>\n              </goals>\n              <configuration>\n                <reportPlugins>\n                  <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-jxr-plugin</artifactId>\n                    <version>2.1</version>\n                    <configuration>\n                      <dependencyLocationsEnabled>false</dependencyLocationsEnabled>\n                    </configuration>\n                    <reportSets>\n                      <reportSet>\n                        <reports>\n                          <report>summary</report>\n                          <report>index</report>\n                          <report>cim</report>\n                          <report>issue-tracking</report>\n                          <report>scm</report>\n                        </reports>\n                      </reportSet>\n                    </reportSets>\n                  </plugin>\n...\n{code}\nwhich is not the jxr plugin configuration defined in the child pom for the site plugin.\ntest project attached.",
        "Unwanted creation of repository directories My pom contain a convenience repo:\n\n<repository>\n<id>local (Maven 1)</id>\n<name>Local module repository (lib)</name>\n<url>file://lib</url>\n..etc..\n\nRunning mvn eclipse:eclipse with maven 2.0.5 will create that directory in the filesystem; maven 2.0.4 will not. IMHO creating directories without explicit instruction is a no-no.\n\nDiscussion:\nhttp://www.nabble.com/New-%22feature%22-in-2.0.5%3A-maven-creates-repo-directories-%21-tf3261881s177.html\n"
    ],
    [
        "MNG-5178",
        "MNG-4048",
        "Substitute environment variable M2_HOME by M3_HOME Maven 3 uses the environment variable {{M2_HOME}} to point to it's installation directory. This variable should be replaced by {{M3_HOME}} to allow users to have parallel installations of Maven 2 and Maven 3 without any special handling of the environment variable {{M2_HOME}}.",
        "Allow to resolve dependencies using version range from reactor Currently, the reactor can only resolve dependencies that are specified using a simple version like \"1.1-SNAPSHOT\". If a consumer declares the dependeny version as \"[1.0,)\", reactor resolution is no longer possible."
    ],
    [
        "MNG-2126",
        "MNG-4136",
        "Snapshot plugin repositories are not searched for plugins that do not explicitly specify a snapshot version. Only release repositories are queried for version-unscoped plugins. \n\nDeploy a plugin (say x-maven-plugin, version 1-SNAPSHOT) to a snapshot repository via mvn -P performRelease deploy.\n\nclear local repository so client has no copy of the snapshot.\n\nBuild a project that tries to use the x-maven-plugin but does not specify the plugin's version.\n\nResults in client searching release respository only, does not query the snapshot repository or attempt to merge the metadata in any way.\n\nIs this as designed?",
        "Regression: Environment Variables With Parenthesis Can't Be Referenced in POM It looks like Maven can longer use environment variables with parenthesis e.g. ProgramFiles(x86). The attached pom.xml emits the following with Maven 2.1.0:\n\nProgramFiles(x86) = ${env.ProgramFiles(x86)}\n\nWith Maven 2.0.10 we correctly get the following:\n\nProgramFiles(x86) = C:\\Program Files (x86)\n\nThis is a pain since ProgramFiles(x86) is standard environment variable on 64-bit Windows."
    ],
    [
        "MNG-4617",
        "MNG-3214",
        "Incorrect/misleading error message when typo in module section I have a module in a folder called \"tests\"\n\nIn the parent folder I put a pom with:\n\n<module>test</module>\n\ni.e. the folder name does not actually exist and the error received is:\n\n[ERROR] The build could not read 1 project -> [Help 1]\n[ERROR]   The project  (/Users/max/Documents/code/jbosstools/modular_build/test) has 1 error\n[ERROR]     Non-parseable POM /Users/max/Documents/code/jbosstools/modular_build/test: only whitespace content allowed before start tag and not [ (position: START_DOCUMENT seen [... @1:1) -> [Help 2]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException\n[ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/ModelParseException\n\nI would say it would make better sense to check if the file actually exists and report the file as not there instead of a parse error which send me on to a hunt for a typo in tests/pom.xml (since I didn't spot the missing 's' for a while :)\n",
        "Coping with SUN JARs Add a link reference to the sun repository with jars.\n\nhttps://maven-repository.dev.java.net/repository/"
    ],
    [
        "MNG-1952",
        "MNG-5930",
        "Give equal footing to all m2 plugins and add Cargo plugin to the list Right now there are several plugin lists (3) making it harder to find a given plugin as this breaks the alphabetical order. In addition plugins that come later on the page get less visibility. I am sending a patch that lists all the plugins in the same table. If it's required we could create another column mentioning where the plugin comes from but I don't think that's required.\n\nI have also added the Cargo m2 plugin which was missing from the list.\n\n",
        ".mvn/maven.config does not expand environmental variables environmental variables used in .mvn/maven.config are not expanded out.\r\n\r\nrunning \r\nmvn clean install -Dmaven.repo.local=$HOME/.m2/otherRepo\r\ncorrectly creates and uses the local repo in /home/user/.m2/otherRepo\r\n\r\nif the argument -Dmaven.repo.local=$HOME/.m2/otherRepo, is placed in the .mvn/maven.config file, then the local repo used is\r\ncurrent working directory/$HOME/.m2/otherRepo"
    ],
    [
        "MNG-4637",
        "MNG-4000",
        "-pl switch negates recursion into sub projects I have a project with several sub projects, each of which has sub projects. \n\nIf I use:\n   mvn -pl sub1\n\nI expect sub1 to be built as well as all its sub projects and if I use -am, all their dependencies. Unfortunately, maven will build only sub1. \n\nWhen using just -pl, I can instead cd to sub1 and build from there, but when using -am I can't since any dependencies on projects outside of sub1 will not be found.",
        "[regression] Plugin executions without id are lost when multiple executions are defined Input POM:\n{code:xml}\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.its.plugins</groupId>\n      <artifactId>maven-it-plugin-log-file</artifactId>\n      <version>2.1-SNAPSHOT</version>\n      <configuration>\n        <logFile>target/exec.log</logFile>\n        <string>exec-/string>\n      </configuration>\n      <executions>\n        <execution>\n          <id>exec-1</id>\n          <phase>validate</phase>\n          <goals>\n            <goal>log-string</goal>\n          </goals>\n        </execution>\n        <execution>\n          <!-- NOTE: <id> deliberately omitted here! -->\n          <phase>validate</phase>\n          <goals>\n            <goal>log-string</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n{code}\nEffective POM:\n{code:xml}\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.its.plugins</groupId>\n      <artifactId>maven-it-plugin-log-file</artifactId>\n      <version>2.1-SNAPSHOT</version>\n      <configuration>\n        <logFile>target/exec.log</logFile>\n        <string>exec</string>\n      </configuration>\n      <executions>\n        <execution>\n          <id>exec-1</id>\n          <phase>validate</phase>\n          <goals>\n            <goal>log-string</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n{code}\nNote that the execution without {{<id>}} is missing."
    ],
    [
        "MNG-766",
        "MNG-3084",
        "\"provided\" scoped dependencies is not made available during tests, making the tests fail with errors. ",
        "mvn.bat in maven 2.0.7 does not return the correct error code. As noted here[1], mvn.bat does not return its error code correctly. This causes continuum to not detect failed builds.\n\n[1] http://www.nabble.com/result-code-for-mvn.bat-on-windows-broken-t3970169s177.html"
    ],
    [
        "MNG-5430",
        "MNG-4422",
        "use wagon 2.4 Release Notes - Maven Wagon - Version 2.3\n\n** Bug\n    * [WAGON-367] - Very large number of temporary files \"http-wagon.*.tmp\" if wagon is used in a long time running JVM (like a CI server)\n    * [WAGON-369] - wagon http doesn't follow HTTP 302 redirects for PUT\n    * [WAGON-370] - Adding additional wagon provider as dependency does not work\n    * [WAGON-371] - for security reason preemptive must be off by default for GET\n    * [WAGON-379] - webdav site deployement fail with mvn 2.2.1\n\n** Improvement\n    * [WAGON-368] - Support NTLM authentication in webdav\n    * [WAGON-380] - webdav wagon 1.6 requires\n\n\nRelease Notes - Maven Wagon - Version 2.4\n\n** Bug\n    * [WAGON-372] - SSL client-side certificates stopped working in maven 3.0.4\n    * [WAGON-383] - Regression for SSLv3\n    * [WAGON-385] - some securities check are disabled per default (change the off per default)\n    * [WAGON-386] - build failure with jdk 1.7\n    * [WAGON-387] - Remove default easy ssl mode\n\n",
        "[regression] Property expansion does not work for phase of plugin executions As originally reported by Marc Rohlfs in MNG-4319, something like\n{code:xml}\n<execution>\n  <phase>${someProperty}</phase>\n  ...\n</execution>\n{code}\nis no longer interpolated in Maven 2.1+."
    ],
    [
        "MNG-4495",
        "MNG-675",
        "mvnUpdate attempts to use a non-existent .cd directory 1) Set up M2_HOME to point to apache-maven (containing 3.0-alpha-5)\n2) Put M2_HOME/bin on the $PATH\n3) Type mvnUpdate\n\nError:\n[~]> mvnUpdate\nUsing Java version: 1.6\nUnable to access jarfile /Applications/Dev/apache-maven/bin/.cd/bin/*.jar",
        "Improve 'dependencies.dependency.version is missing' error message When leaving out a <version> from at least one dependency, the following\nerror message appears. With a lot of dependencies, where all versions are managed\nin dependencyManagement in the parent pom, it's hard to tell which version is missing:\n\n[INFO] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] Reason: Failed to validate POM for 'm:\\qwesken_adm_1.0_dev_inc2\\spf\\products\\adm\\design\\application\\pom.xml'.\n\n  Reason(s):\n  [0]  'dependencies.dependency.version' is missing.\n\n"
    ],
    [
        "MNG-5757",
        "MNG-395",
        "update aether to 1.0.2 ",
        "Improve ease of use of project metadata in client applications Place\n\nMETA-INF/maven/${artifactId}/${artifactId}/pom.xml\n\nand place the properties file\n\nMETA-INF/maven/${artifactId}/${artifactId}/pom.properties\n\nin the generated JAR so that apps using maven tools can access the POM, and make it easy for applications that can't/won't use maven tools to access metadata by providing a simple properties file."
    ],
    [
        "MNG-4909",
        "MNG-5824",
        "Emit warning when dependency with scope import but inproper type is declared Import of managed dependencies works only if the managed depencency uses scope {{import}} and is of type {{pom}}. The latter condition is easily forgotten/overlooked by users which then wonder why the import doesn't work. Maven should emit a validation warning to help troubleshoot this typo.",
        "Support MAVEN_ARGS environment variable as a way of supplying default command line arguments I would like to be able to specify default Maven command line arguments using the MAVEN_ARGS environment variable, similarly to how I can use MAVEN_OPTS to specify default JVM args."
    ],
    [
        "MNG-5271",
        "MNG-2078",
        "Cannot resolve active profile name at build time I have a maven profile defined in my pom.  It's not active by default, so I run -P <profilename>.\nWhen the profile is running, I want to construct a path that includes the name of the profile.  I've looked online  and it appears that\n\nhttp://stackoverflow.com/questions/2012198/maven-can-i-reference-profile-id-in-profile-definition\n\nwould have the answer.  Alas, it doesn't work for me at build time.  If I do a mvn help:evaluate -P <profilename> and use ${projects.activeProfiles[0].id}, I get the value I would expect.  When I run in the build, though, it doesn't resolve and just uses the literal value in the path.",
        "Fixup super pom to activate the profile only when -DperformRelease=true. Current the profile is activated by any value including empty string\n\n\nhttp://jira.codehaus.org/browse/MRELEASE-66"
    ],
    [
        "MNG-5189",
        "MNG-5680",
        "Provide a way to specify module ordering when they are activated in profiles. In our project, sub-modules are activated in profiles.\nHowever, due to unflexible way Maven orders profiles, it's not possible to enforce certain submodule being run last. Only possibility is to move it one level above.\n\nMy suggestion is to allow specifying modules order in which they would run iif they are activated:\n\n{code}\n<modulesOrder>\n  <module>module1<module>\n  <module>module2<module>\n  <otherModules/>\n  <module>lastButOneModule</module>\n  <module>lastModule</module>\n</modulesOrder>\n{code}",
        "java.lang.UnsupportedOperationException on DefaultProjectBuilder.build {code}\nProjectBuildingRequest request = ...\nProjectBuilder builder = plexus.lookup(ProjectBuilder.class);\nbuilder.build(file, request);\n{code}\n\nWhen the build method is called, the following exception is thrown: \n{code}\njava.lang.UnsupportedOperationException\n\tat java.util.AbstractMap.put(AbstractMap.java:209)\n\tat org.apache.maven.project.DefaultProjectBuilder.initProject(DefaultProjectBuilder.java:815)\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:174)\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:118)\n{code}\n\nThe code should be reviewed. This is the offending code inside DefaultProjectBuilder: \n{code}\n                    Artifact artifact = repositorySystem.createDependencyArtifact( d );\n\n                    if ( artifact == null )\n                    {\n                        map = Collections.emptyMap();\n                    }\n\n                    map.put( d.getManagementKey(), artifact );\n\n{code}"
    ],
    [
        "MNG-5391",
        "MNG-4413",
        "Update the default WAR plugin version to avoid version 2.3 Change the default version due to: http://jira.codehaus.org/browse/MWAR-295",
        "[regression] Repositories discovered in dependency POMs are not subject to mirroring Build logs revealed that trunk does not use mirrors for those repositories that are contributed by POMs of dependencies during transitive dependency resolution."
    ],
    [
        "MNG-548",
        "MNG-5774",
        "Add the reactor projects to MavenSession I've made a patch to add the projects from the 'reactor' as discovered by DefaultMaven.collectProjects\nto MavenSession, the plexus Context and make it available to the PluginParameterExpressionEvaluator.\n\nThis is needed for the maven-eclipse-plugin to be able to make references to other projects\n(and not to their installed artifacts).\n\nNow you can do the following:\n\n  /**\n   * @parameter expression=\"${reactorProjects}\"\n   * @required\n   * @readonly\n   */\n  private List reactorProjects; // List of MavenProject objects, ordered for dependencies.\n\nI've had a discussion with trygve about this and he said there was no idea what to do with the reactor.\nI think for the mean time, this is an elegant enough solution.",
        "Provide an extension point to provide alternate CLI configuration mechanism Currently the only way to configure an execution session is the settings.xml file mechanism. In essence the code currently works to read the settings.xml file(s) and stuffs a bunch of values in the MavenExecutionRequest. It should be possible to easily use different sources of values and use different logic to populate those values."
    ],
    [
        "MNG-1098",
        "MNG-515",
        "Add reactor summary when m2 fails Actually we have it only on sucess",
        "Add the possibility to define an i18n menu in site descriptor. "
    ],
    [
        "MNG-326",
        "MNG-4168",
        "better defined module ordering  It should be in the following order:\n- dependencies\n- parent relationships\n- module ordering in pom",
        "String index out of range: 43807 the issue occurs with the versions:display-plugin-updates. It throws :\n\n{code}\n[INFO] [versions:display-plugin-updates]\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] String index out of range: 43807\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.StringIndexOutOfBoundsException: String index out of range: 43807\n        at java.lang.StringBuffer.charAt(StringBuffer.java:163)\n        at org.codehaus.mojo.versions.rewriting.ModifiedPomXMLEventReader.c(ModifiedPomXMLEventReader.java:444)\n        at org.codehaus.mojo.versions.rewriting.ModifiedPomXMLEventReader.hasNext(ModifiedPomXMLEventReader.java:369)\n        at org.codehaus.mojo.versions.DisplayPluginUpdatesMojo.findPluginsWithVersionsSpecified(DisplayPluginUpdatesMojo.java:471)\n        at org.codehaus.mojo.versions.DisplayPluginUpdatesMojo.execute(DisplayPluginUpdatesMojo.java:247)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:483)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:678)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:553)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:523)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:371)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:332)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:181)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:356)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:356)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n{code}\nI'll try to isolate the problem to see if it's due to the pom or to the maven version."
    ],
    [
        "MNG-2305",
        "MNG-2975",
        "only first active proxy considered/used With the attached settings.xml\nall https connects fail (doing mvn -U).\nIf i reverse the order (https first http second) all http connects fail.\nQuestions:\nDoes https tunneling over http proxies work at all with Maven2 (sending HTTP CONNECT <remote address> to the proxy is needed)?\nWhy is the Java system configuration (in Application Data\\Sun\\Java\\Deployment\\deployment.properties) not used to detect proxies?\n\n",
        "test scope does not work with pom dependency I have a project A with pom packaging (<packaging>pom</packaging>) that use this dependency : \n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-mock</artifactId>\n\t\t\t<version>2.0</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\n\nIn project B , I try to use the project A like a dependency like this :\n\t<dependency>\n\t\t\t<groupId>xxx</groupId>\n\t\t\t<artifactId>SOFFWK_LIBS</artifactId>\n\t\t\t<version>1.0</version>\n\t\t\t<type>pom</type>\t\t\t\n\t\t</dependency>\n\n\n I don't get the spring-mock transitive dependency when I compile or test project B.\nIs it because it has a test scope? \n\n\n\n"
    ],
    [
        "MNG-3077",
        "MNG-851",
        "NullPointerException, if MojoExecutionException has no message It seems, that you get a NPE, when a throwable passed to MojoExecutionExceptionDiagnoser.diagose(Throwable error) has no message, which means the message is null. \n\njava.lang.NullPointerException\n        at org.apache.maven.usability.MojoExecutionExceptionDiagnoser.diagnose(MojoExecutionExceptionDiagnoser.java:64)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:84)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:727)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:672)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:131)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:280)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nLine 64 --> if ( directCauseMessage != null && mee.getMessage().indexOf( directCauseMessage ) < 0 )\n(Source: Revision 495147)",
        "Hardcoded pom.xml name in InstallMojo.java Just ran the install lifecycle against a pom with a made-up name but the code eventually looks for a file called pom.xml. Here's the command I ran\n\nm2 -f testpom.xml install\n\nand got an exception:\n\nCaused by: java.io.FileNotFoundException: /Users/developer/projects/java-source-repository/home/pom.xml (No such file or directory)\n        at java.io.FileInputStream.open(Native Method)\n        at java.io.FileInputStream.<init>(FileInputStream.java:106)\n        at java.io.FileReader.<init>(FileReader.java:55)\n        at org.apache.maven.project.artifact.ProjectArtifactMetadata.storeInLocalRepository(ProjectArtifactMetadata.java:82)\n\na quick check of the source code reveals a hardcoded reference to pom.xml in InstallMojo.execute line 92 in my version:\n\n    public void execute()\n        throws MojoExecutionException\n    {\n        // TODO: push into transformation\n        boolean isPomArtifact = \"pom\".equals( packaging );\n\n        File pom = new File( basedir, \"pom.xml\" );\n        if ( !isPomArtifact )\n...\n\nJust renamed the file back to pom.xml again and this time the install worked.\n"
    ],
    [
        "MNG-346",
        "MNG-4145",
        "Periodic cleanup of logs and builds the m2-build-logs and distributions from ci.sh are a bit out of control in /home/projects/maven/public_html/ - setup a periodic purge.",
        "switch to released versions of plexus-sec-dispatcher (and by ext. plexus-cipher) once they're available "
    ],
    [
        "MNG-3141",
        "MNG-363",
        "Build not working if pom.xml is a symbolic link We are running on Ubuntu and our environment is as follows:\n\n./pom.xml                        (is a symbolic link to /baseline/pom.xml)\n./module/pom.xml         (is a symbolic link to /baseline/module/pom.xml)\n\nIf you go into the module directory and run a compile (mvn compile), everything works fine.\n\nIf you try to run a compile from the parent pom, maven does not resolve the basedir correctly when it tries to compile the module.  It tries to create the target directory in /baseline/module/target, rather than in the local module directory.\n\nEverything works as expected in release 2.0.6.  Something changed with the symbolic link resolution in 2.0.7 that breaks my builds.\n\n-Rob\n",
        "old code cleanup - cli, messages, etc there are some lingering things to be cleaned up:\n\n- the CLI should be upgraded to a newer commons-cli, or perhaps plexus-cling?\n- the messages files are out of date. keep whatever is used, but possibly just eliminate until proper internationalisation is done\n- look through some of the old plugin and lifecycle phase stuff that no longer exists - there may be classes left over. IDEA inspector may help.\n"
    ],
    [
        "MNG-2022",
        "MNG-469",
        "What is the Difference between project.getDependencies() and project.getDependencyArtifacts? The difference between project.getDependencies() and project.getDependencyArtifacts() is that project.getDependencies()\nalso returns transitive dependencies, while project.getDependencyArtifacts returns only the direct dependencies, and also includes things in the test scope.\n",
        "implement report configuration notes:\n- if in <reports> the configuration applies to the report, which may be different to the mojo in <build/> if the plugin is executed there. So we need that separate section.\n- currently, the report is not configured at all, as we use a map lookup\n\nimplementation:\n- similar to executeMojo, a getReport method should get a configured MavenReport\n- remove the MavenConfiguration inline with this, AbstractMavenReport should have a outputDirectory and project field. due to the way locales are done, this will moving the output directory creation into the abstract report where it can concat the locale\n- reports should be configured from the <reports/> whether they are being executed or as part of the site, not in <build/> like normal plugins\n- design as shown here:  http://docs.codehaus.org/display/MAVEN/Multiple+Goal+Declaration, ie:\n<report>\n <g/a/v>\n <configuration />\n <reportSets>\n   <reportSet>\n     <id />\n     <configuration />\n     <reports>\n       <report>...</report>\n       <report>...</report>\n     </reports>\n   </reportSet>\n </reportSets>\n</report>\n\n\n\n\n    "
    ],
    [
        "MNG-4717",
        "MNG-2175",
        "Repository Ids containing \":\" will lead to checksum errors on Windows machines If a repositorys id element contains a \":\" character, maven tries to create a {{repository-metadata-<<repositoryId>>.xml}} file under certain circumstances (in our case when version ranges are used). Under windows this is not possible and will lead to an error looking like this:\n{code}\n[WARNING] *** CHECKSUM FAILED - Invalid checksum file - RETRYING\n[WARNING] *** CHECKSUM FAILED - Invalid checksum file - IGNORING\n[WARNING] repository metadata for: 'artifact XX:XX' could not be retrieved from repository: YY:YY due to an error: Error copying temporary file to the final destination: Die Syntax f\u00fcr den Dateinamen, Verzeichnisnamen oder die Datentr\u00e4gerbezeichnung ist falsch\n{code} \n\nThe Problem is in org.apache.maven.artifact.repository.metadata.AbstractRepositoryMetadata#getLocalFilename.\n\nBetter Logging, robustness check or documentation of this issue would be helpfull.",
        "Require an schema to be specified in the configuration block of a plugin Require an schema to be specified in the configuration block of a plugin.  e.g.\n\n<plugins>\n  <plugin>\n    <configuration xmlns=\"http://maven.apache.org/plugins/maven-eclipse-plugin/2.0/\">\n\nThis will ensure that all configuration data is valid for the plugin.  It allows pom authors to use the XML editors' autocomplete function as well."
    ],
    [
        "MNG-3574",
        "MNG-5791",
        "RELEASE versions cause build failures See: http://www.netbeans.org/issues/show_bug.cgi?id=135070",
        "slf4-api dissapears from classpath with 3.3.1 I have a plugin where I fetch the classpath from the current thread's classloader: https://github.com/gatling/gatling-maven/blob/gatling-maven-parent-2.1.2/gatling-maven-plugin/src/main/java/io/gatling/mojo/GatlingMojo.java#L256\n\nslf4j-api is in the project's compile scope:\n[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ gatling-sample21\n...\n[INFO] |  |  +- org.slf4j:slf4j-api:jar:1.7.10:compile\n...\n\nUntil maven 3.2.5 included, the slf4j-api is indeed in the current thread's classloader:\nuri=/Users/slandelle/.m2/repository/org/slf4j/slf4j-api/1.7.10/slf4j-api-1.7.10.jar\n\nBut it's missing when running when 3.3.1. I checked that the parent Classloader is null. \n\nThis happens ONLY with slf4j-api! All the other project dependencies jars are properly passed.\n\nPlease advise."
    ],
    [
        "MNG-2405",
        "MNG-4729",
        "Put the docck plugin in the plugin-parent pom ci profile ",
        "Mirrors and servers not accessed properly by plugin on a build We are using the <groupId>org.scala-tools</groupId><artifactId>maven-scala-plugin</artifactId> plugin.  This makes a call into org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, boolean allowStubModel ).  While trying to download dependencies, this call was not using the username and password from a server when accessing a repository.  Furthermore it was also not replacing the repository with a mirror.\n\nWhen I added the following code into that method, it fixed my problem:\n{code:java}\n        if ( session != null )\n        {\n-->         Settings settings = session.getSettings();\n-->         configuration.setServers( settings.getServers() );\n-->         configuration.setMirrors( settings.getMirrors() );\n-->         configuration.setProxies( settings.getProxies() );\n\n            configuration.setSystemProperties( session.getSystemProperties() );\n            configuration.setUserProperties( session.getUserProperties() );\n        }\n{code}\nSince I don't know the purpose for this method or the reasons for why this code was left out, I don't know if this is an appropriate fix, but it does fix my problem."
    ],
    [
        "MNG-2651",
        "MNG-4408",
        "POM interpolator treats ${pom.something} like ${something} and prefers system properties The POM interpolator (RegexBasedModelInterpolator) removes all leading \"pom.\", \"project.\" and \"env.\" portions of an expression before evaluating it.  then searching for values happens in the following order: system properties, project properties, pom bean properties.\n\nAn example: Although ${pom.version} is more specific than ${version}, version wins. That's the problem in MNGECLIPSE-20.\n\nIMHO the interpolation strategy should be changed.\n",
        "Missing settings.xml is silently ignores I have not checked maven 2.x behaviour, but recent 3.0-SNAPSHOT silently ignores settings.xml specified by -s or -gs cli parameters. Maven should fail the build the build if it can't read settings file explicitly requested by the user."
    ],
    [
        "MNG-2030",
        "MNG-2599",
        "Make -X show maven version as first thing output of mvn -X needs to include the version number so when an user posts the output we should be able to identify which version is he running against",
        "Repository Mirrors in settings.xml need to specify layout Mirrors are different sites from the main one. Since they could be arranged in almost any directory structure and still be a logical mirror of the artifacts on the original site, and since we now support <mirrorOf>*</mirrorOf> in the mirror specification, they also need to allow/require the <layout/> element from the repository, to specify how the mirrored artifact repository should be constructed/accessed."
    ],
    [
        "MNG-2973",
        "MNG-5775",
        "Cannot specify a version range for build extensions When specifying a version range in a build extension, I get the following:\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.6\n[DEBUG] Building Maven user-level plugin registry from: '/Users/tmeighen/.m2/plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: '/Users/tmeighen/maven/conf/plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Initialising extension: junit:junit\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] An invalid artifact was detected.\n\nThis artifact might be in your project's POM, or it might have been included transitively during the resolution process. Here is the information we do have for this artifact:\n\n    o GroupID:     junit\n    o ArtifactID:  junit\n    o Version:     <<< MISSING >>>\n    o Type:        pom\n\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.artifact.InvalidArtifactRTException: For artifact {junit:junit:null:pom}: The version cannot be empty.\n        at org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:147)\n        at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:122)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:158)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:117)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:111)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:40)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createProjectArtifact(DefaultArtifactFactory.java:95)\n        at org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:94)\n        at org.apache.maven.extension.DefaultExtensionManager.addExtension(DefaultExtensionManager.java:98)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.findExtensions(DefaultLifecycleExecutor.java:158)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:141)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue May 01 17:53:00 PDT 2007\n[INFO] Final Memory: 2M/1016M\n[INFO] ------------------------------------------------------------------------\n\nNote that this works with Maven 2.0.5.  Also the same version range works with 2.0.6 when specified in the dependencies section (i.e. not a build extension).",
        "Provide extension point for alternate implementations to construct build graph "
    ],
    [
        "MNG-3203",
        "MNG-3214",
        "maven should execute compiler:compile and :test-compile in separate executions, to allow separate configuration Currently, it's impossible to configure the two default maven-compiler-plugin mojos in the jar lifecycle (:compile and :test-compile) separately without the configuration for one affecting both. This is because they are both executed in the same (default) execution. We should be assigning these to different execution id's, to allow separate configuration.",
        "Coping with SUN JARs Add a link reference to the sun repository with jars.\n\nhttps://maven-repository.dev.java.net/repository/"
    ],
    [
        "MNG-464",
        "MNG-3399",
        "confusing error reported when using a non writable local directory I was trying to share a repository between 2 users, and tried to do so before setting the repository permissions correctly.\nuser1 created the repository\nuser2 tried to do a build without having write access to repository\n\nthe build failed with a confusing error. Something like:\n\nCaused by: java.io.FileNotFoundException: /usr/local/tools/share/m2/org/codehaus/cargo/cargo/0.6-SNAPSHOT/cargo-0.6-SNAPSHOT.version.txt (No such file or directory)\n\n(I don't have the exact log unfortunately, but it shouldn't be too hard to reproduce)\n\nI think a previous failure (e.g. couldn't write in a directory) was silently discarded. That error if treated appropriately could help better diagnose the issue.",
        "Maven shows fake network error until the next updatePolicy period Hi,\n\nThe default updatePolicy is daily.\n\nIf it has any problems in updating it marks that plugin as checked and keeping showing the same error message without trying to hit the server again.\n\nAt my work they changed the proxy configuration making the build fail, we started to have the following message:\n\nThe plugin 'org.apache.maven.plugins:maven-clean-plugin' does not exist or no valid version could be found.\n\nEven after they rollback the network configuration, maven still showing the same error.\n\nTo solve the problem I had to put this lines\n    <pluginRepository>\n      <releases>\n        <updatePolicy>always</updatePolicy>\n      </releases>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <id>central</id>\n      <name>Maven Plugin Repository</name>\n      <url>http://repo1.maven.org/maven2</url>\n    </pluginRepository>\n\nas the first pluginRepository and run for every developer just to force the update.\n\nThis workaround works fine but until I realized that this is the behavior of maven it generated a lot problems trying setup the network configuration (it was not trying to hit the network, but it still showing the same error, so all configuration attempts were worthless).\n\nShow a network error that was not checked against the current configuration is a bug.\n\nMy suggestion for an easy solution is to update timestamp of the latest hit in the repository *after* it has a success, if it fails does not update the timestamp and updatePolicy will make it keep trying for every execution until it finally hit with success. This way you don't need to verify any extra condition to see if the previous try resulted in an error. This way will make the debug of network problems much easier for the users that have the same problem.\n\nI didn't look your sources, so maybe this solution is not practical in your architecture. Feel free to use another route to solve this bug.\n\nThanks for your excellent work in maven (it is first bug in years),\nJonas Fagundes"
    ],
    [
        "MNG-4778",
        "MNG-3805",
        "NPE when executing javadoc:aggregate in 3.0-beta2 Running mvn javadoc:aggregate -X produces:\n\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n        at org.apache.maven.lifecycle.internal.BuilderCommon.handleBuildError(BuilderCommon.java:140)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:98)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:58)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:252)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:100)\n        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:443)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:166)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:130)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey.<init>(DefaultPluginDescriptorCache.java:148)\n        at org.apache.maven.plugin.DefaultPluginDescriptorCache.createKey(DefaultPluginDescriptorCache.java:61)\n        at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getPluginDescriptor(DefaultMavenPluginManager.java:125)\n        at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getMojoDescriptor(DefaultMavenPluginManager.java:245)\n        at org.apache.maven.plugin.DefaultBuildPluginManager.getMojoDescriptor(DefaultBuildPluginManager.java:199)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateLifecycleMappings(LifecycleExecutionPlanCalculatorImpl.java:309)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateForkedLifecycle(LifecycleExecutionPlanCalculatorImpl.java:546)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateForkedExecutions(LifecycleExecutionPlanCalculatorImpl.java:520)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.setupMojoExections(LifecycleExecutionPlanCalculatorImpl.java:160)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateExecutionPlan(LifecycleExecutionPlanCalculatorImpl.java:123)\n        at org.apache.maven.lifecycle.internal.BuilderCommon.resolveBuildPlan(BuilderCommon.java:97)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:82)\n        ... 16 more",
        "Ordering of extension class path is indeterministic One part of Maven where class path ordering hasn't already been fixed in the past is the extension class path. Apart from a proposed patch, two logs from our IT testmng3599useHttpProxyForWebDAV are attached. Both were run against Maven 2.0.10-RC1, with the only difference being one using JDK 1.4 and the other one 1.6. Not only do these logs substantially differ, the build on JDK 1.6 even fails due to picking up the wrong extension classes."
    ],
    [
        "MNG-4308",
        "MNG-4409",
        "Excluded non-existent artifacts produces no warnings or errors When an <exclusion> specifies a dependency that does not exist, it is quietly ignored. I think this poses a problem because the exclusion never takes place despite the explicit configuration to do so. My recommendation is to at least emit a warning, but really I hope this would be an error condition. It should be treated like a dependency that can't be resolved and fail the build.",
        "NPE when reporting command line error for non-existent option If I type in a command option that does not exist, this results:\njava.lang.NullPointerException\n        at org.apache.maven.cli.CLIReportingUtils.showError(CLIReportingUtils.java:194)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:132)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:104)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)"
    ],
    [
        "MNG-1899",
        "MNG-175",
        "[patch] site.xml broken link There is a link to #installation which should be #Installation",
        "add modules handling to reactor <modules>\n  <module>foo</module>\n  <module>bar</module>\n</modules>\n"
    ],
    [
        "MNG-96",
        "MNG-5835",
        "Define a clear best practice for dependency version management Currently in m1 this can be accomplished with entities (which is awful), the regular properties file coupled with standard interpolation and the JAR override feature.",
        "Maven-Plugin's getLog() ignores -Dorg.slf4j.simpleLogger.defaultLogLevel=warn Hi,\r\nsince Maven should supports slf4j-Logging combined with the SLF4J Simple implementation from Maven 3.1.0 onward (http://maven.apache.org/maven-logging.html).\r\nI'm kind of wondering why the default getLog() called from a Plugin ignores the Environment-Variable ``-Dorg.slf4j.simpleLogger.defaultLogLevel=warn``\r\n\r\nI'm currently using:\r\nApache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T22:58:10+02:00)\r\nMaven home: /usr/share/maven-3.2.3\r\nJava version: 1.7.0_80, vendor: Oracle Corporation\r\nJava home: /usr/lib/jvm/java-7-oracle/jre\r\nDefault locale: de_DE, platform encoding: UTF-8\r\nOS name: \"linux\", version: \"3.16.0-33-generic\", arch: \"amd64\", family: \"unix\"\r\n\r\nTested with different Maven-Versions and different maven-plugin-api Versions, still no success.\r\nAny help is highly appreciated.\r\nThanks,\r\n\r\n\r\nPS: Hopefully I can attach my Example-Project which can be executed by using:\r\nmvn clean install && mvn clean package -Pdemo -Dorg.slf4j.simpleLogger.defaultLogLevel=warn\r\n\r\n"
    ],
    [
        "MNG-2495",
        "MNG-700",
        "Javadocs for the test harness plugin would be very useful There is no javadoc report at http://maven.apache.org/shared/maven-plugin-testing-harness. ",
        "Update Maven Plugin Matrix to reflect availability of maven XML Beans Plugin. The XML Beans plugin code has been committed to the codehaus repo. Once it's available in the ibiblio repo the Maven Plugin Matrix should be updated to reflect its release."
    ],
    [
        "MNG-3320",
        "MNG-615",
        "Avoid perm gen space out of memory errors Each maven embedder instance is using his own classworld, the problem is that the creation of multiple maven embedder instances can lead to perm gen space errors, since each embedder classworld is filling the perm gen space memory area with new classes, out of memory  errors can occurs quite easily. For some unknown reasons, this memory is never garbaged collected (at least on an MacOSX 1.5.0 JVM). A Shared classworld between all embedder object instances could avoid this potential problem. A modification of the 2.1 embedder API to choose between these 2 modes (own classworld or shared) could be a good thing.",
        "Implement repository POM confidence levels let's add a source to the distributionManagement in the POM which is rewritten by the repository tool:\n\"none\" - there is no information about the POM's confidence level (the default)\n\"converted\" - converted from a Maven 1.x POM, so we can be sure the format is valid but the data within it may be incomplete\n\"partner\" - synced in directly from a partner site (and was a Maven2 POM, current partners will be converted instead)\n\"deployed\" - deployed to the repository directly using deploy:deploy\n\"verified\" - hand verified the information in the POM\n\nI think this is a sliding scale of confidence in the data. I think each should be able to have an interval attached to it to check for metadata updates (but not updates to the JAR itself - this is just about redownloading the POM). By default, I would check none and converted daily and the rest never. Once again, a CLI switch could check them all again. Your releases could requires a certain level of confidence - if you accept anything less than verified, you might risk a reproducibility problem in the future. One change that might be needed is to get maven-proxy to recognise this.\n\nThere have been more than one instance of a jar getting corrupted in the repository too. Because once compromised this might be propogated to multiple levels we do need a way to do integrity checks of local and internal repositories against the main one by checking that the sha1's match up and match what is local. This can be something added at a later date, just wanted to keep it in mind.\n\n"
    ],
    [
        "MNG-3709",
        "MNG-4196",
        "Be sure source distro has the same name as the binary distro in the repository. I'll see if this is feasible for 2.0.10, but may push it to 2.0.11 since the source is, in fact, making it out to the repository...just in a different artifact-id.",
        "[regression] Exclusions in project-level plugin dependencies are ignored For\n{code:xml}\n<plugin>\n  <groupId>org.apache.maven.its.plugins</groupId>\n  <artifactId>maven-it-plugin-class-loader</artifactId>\n  <version>2.1-SNAPSHOT</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.maven.its.plugins.class-loader</groupId>\n      <artifactId>dep-b</artifactId>\n      <version>2.1-SNAPSHOT</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.apache.maven.its.plugins.class-loader</groupId>\n          <artifactId>dep-a</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n</plugin>\n{code}\nthe plugin class path still contains the transitive dependency {{dep-a}} despite the exclusion."
    ],
    [
        "MNG-3128",
        "MNG-5534",
        "Enforcer Plugin Messes Up Dependencies When using the enforcer plugin, it somehow messes up the dependencies in a reactor-based build.  The attached zip file exhibits the problem.  Our project structure is a bit weird.  We have one top-level project which contains a bunch of modules.  One of the modules is a pom-based \"tempalte\" project which sets up all of our build settings (src/target for the compiler, turns on the aspectj compiler, etc.).  All of the other modules extend the \"template\" project and they themselves have multiple sub-project.  ",
        "Update to Sisu 0.3.0M1 and Guice 3.2.3 Please update to Eclipse Sisu 0.1.0 and Sisu Guice 3.1.6.\n\nSisu depends on Guice, but dependency scope changed from \"compile\" to\n\"provided\" in Sisu 0.1.0.  As a Sisu user, Maven needs to have runtime\ndependency on Guice."
    ],
    [
        "MNG-3484",
        "MNG-3825",
        "INT_MAVEN_OPTS are not quoted in mvnDebug which causes issues on some shells INT_MAVEN_OPTS are not quoted in mvnDebug which causes issues on some shells\n\nI ran into this problem for 2.0.8 on Leopard.",
        "Dependencies with classifier should not always require a version. If I have two dependencies one with a classifier and one without, that look something like this:\n{code:xml}\n<dependency>\n  <groupId>com.mycompany</groupId>\n  <artifactId>project1</artifact>\n  <version>1</version>\n</dependency>\n<dependency>\n  <groupId>com.mycompany</groupId>\n  <artifactId>project1</artifact>\n  <classifier>client</classifier>\n  <version>1</version>\n</dependency>\n{code}\n\nCurrently I need to specify versions for both of them.  If I specify the versions in dependency management, I should only have to specify the non-classifier version.  The dependency with the classifier should default to the same version as the one without the dependency.  This would save a lot of extra configuration for some projects.\n\n"
    ],
    [
        "MNG-312",
        "MNG-1848",
        "add test artifacts to repository -a 'dotted' project to test that logic\n-something without an extension\n-something with a \".txt\" extension\n-some classifier examples",
        "Cannot execute \"mvn clean\" on plugins \"mvn clean\" on plugins trunk throws error. Eclipse plugin uses Surefire in its pom, and in the reactor Surefire is prior to Eclipse, but \"clean\" does not create Surefire artifact. Workaround is to \"install\" Surefire first, and then \"clean\" all plugins ;-)\n\nEclipse plugin pom:\n...\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <configuration>\n          <excludes>\n            <exclude>**/Abstract*TestCase.java</exclude>\n            <exclude>**/EclipsePluginMasterProjectTest.java</exclude>\n          </excludes>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n...\n\nExecution log:\n...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Eclipse Plugin\n[INFO]    task-segment: [clean]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Skipping disabled repository central\n[DEBUG] maven-surefire-plugin: using locally installed snapshot\n[DEBUG] Trying repository snapshots\nDownloading: http://snapshots.maven.codehaus.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.1.2-SNAPSHOT/maven-surefire-plugin-2.1.2-SNAPSHOT.jar\n[WARNING] Unable to get resource from repository snapshots (http://snapshots.maven.codehaus.org/maven2)\n[DEBUG] Skipping disabled repository central\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] A required plugin was not found: Plugin could not be found - check that the goal name is correct: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2)\n\n  org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2)\n\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.BuildFailureException: A required plugin was not found: Plugin could not be found - check that the goal name is correct: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2)\n\n  org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2)\n\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:460)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:303)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:270)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:139)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.PluginNotFoundException: Plugin could not be found - check that the goal name is correct: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2)\n\n  org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  snapshots (http://snapshots.maven.codehaus.org/maven2)\n\n\tat org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:246)\n\tat org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:182)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1174)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifecycle(DefaultLifecycleExecutor.java:1139)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:948)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:450)\n\t... 14 more\nCaused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to download the artifact from any repository\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:260)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:124)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n\tat org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:209)\n\t... 19 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 29 seconds\n[INFO] Finished at: Thu Dec 15 16:24:22 CET 2005\n[INFO] Final Memory: 3M/6M\n[INFO] ----------------------------------------------------------------------------\n"
    ],
    [
        "MNG-1982",
        "MNG-5449",
        "wagons should be tolerant of incorrect configurations in <server/> entries within settings.xml basically, we need to soften the reaction to invalid configuration of a wagon...make it a warning instead of an exception.",
        "Conflicting dependencies and NoClassDefFoundError h3. Overview\n\nI have conflicting transitive dependencies that lead to a runtime {{NoClassDefFoundError}} without any warning. \n\nh3. Details\n\nI have a project whose transitive dependencies include two versions of {{org.apache.maven/maven-artifact}}, 3.0.4 and 2.2.1.\n\n{code:xml|title=pom.xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>demo</groupId>\n  <artifactId>demo</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>demo</name>\n  <dependencies>\n  \t<dependency>\n  \t\t<groupId>org.antlr</groupId>\n  \t\t<artifactId>antlr4-maven-plugin</artifactId>\n  \t\t<version>4.0</version>\n  \t\t<type>maven-plugin</type>\n  \t</dependency><dependency>\n  \t\t<groupId>org.apache.maven.plugin-tools</groupId>\n  \t\t<artifactId>maven-plugin-tools-generators</artifactId>\n  \t\t<version>3.2</version>\n  \t</dependency>\n  </dependencies>\n</project>\n{code}\n\nThese artifacts have conflicting transitive dependencies:\n\n{code}\n$ mvn dependency:tree -Dverbose -Dincludes=org.apache.maven:maven-artifact\n[INFO] demo:demo:jar:0.0.1-SNAPSHOT\n[INFO] +- org.antlr:antlr4-maven-plugin:maven-plugin:4.0:compile\n[INFO] |  +- org.apache.maven:maven-plugin-api:jar:3.0.4:compile\n[INFO] |  |  \\- org.apache.maven:maven-artifact:jar:3.0.4:compile\n[INFO] |  \\- org.apache.maven:maven-project:jar:2.2.1:compile\n[INFO] |     +- org.apache.maven:maven-artifact-manager:jar:2.2.1:compile\n[INFO] |     |  \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n[INFO] |     \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n[INFO] \\- org.apache.maven.plugin-tools:maven-plugin-tools-generators:jar:3.2:compile\n[INFO]    +- org.apache.maven.plugin-tools:maven-plugin-tools-api:jar:3.2:compile\n[INFO]    |  \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n[INFO]    \\- org.apache.maven:maven-plugin-descriptor:jar:2.2.1:compile\n[INFO]       \\- (org.apache.maven:maven-artifact:jar:2.2.1:compile - omitted for conflict with 3.0.4)\n{code}\n\nHere's some simple code importing a class from one of the direct dependencies:\n\n{code:java|title=Main.java}\npackage demo;\nimport org.apache.maven.tools.plugin.generator.GeneratorUtils;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(GeneratorUtils.toText(\"{@code demo}\"));\n\t}\n}\n{code}\n\nWhen run, it gives the following traceback:\n\n{code}\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/maven/artifact/DependencyResolutionRequiredException\n\tat demo.Main.main(Main.java:6)\nCaused by: java.lang.ClassNotFoundException: org.apache.maven.artifact.DependencyResolutionRequiredException\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n\t... 1 more\n{code}\n\nIt turns out that {{DependencyResolutionRequiredException}} is present in maven-artifact 2.x, but not in 3.x.\n\nGiven the above, I would have expected a warning of some kind about the conflicting transitive dependencies if they can't be resolved automatically."
    ],
    [
        "MNG-3402",
        "MNG-506",
        "MavenArtifactFilterManager needs to not filtering doxia-sink-api A plugin (like pdf-plugin) needs to use the most recent sink API and not the API embedded in maven. ",
        "Plugin registry prompt does not read from stdin on cygwin M2, when finding new plugin versions, will prompt about wheter to install these.\n\nWhen running m2 in cygwin, however, providing an answer (Y for instance) \njust displays the text on screen - nothing happens. The jre has to be killed\nto stop m2.\n\nversion.DefaultPluginVersionManager uses a plexus InputHandler. So actually it's\na bug in plexus, but it affects m2 (there might be an alternate approach to the InputHandler..)\n\nIn the mean time i'll check whether it's due to \\n\\r issues.\n"
    ],
    [
        "MNG-2242",
        "MNG-3924",
        "mvn command gives a Null Pointer Exception when a plugin is invalid I tried to use xdoclet with Maven 2.0.2 by adding those lines in pom.xml:\n\n  <build>\n    <finalName>bookstore-web</finalName>\n    <plugins>\n       <plugin>\n         <groupId>xdoclet</groupId>\n         <artifactId>maven-xdoclet-plugin</artifactId>\n         <version>1.2</version>\n         <executions>\n\t      <execution>\n\t        <id>generate-deployment-decriptor</id>\n\t        <phase>generate-sources</phase>\n\t        <configuration>\n\t          <fileset dir=\"src/main/java\">\n\t            <include name=\"**/*.java\"/>\n\t          </fileset> \n\t          <webdoclet>\n\t             <destinationFile>web.xml</destinationFile>\n\t             <destDir>src/main/webapp/WEB-INF</destDir>\n\t          </webdoclet>\n\t         </configuration>\n\t        <goals>\n\t          <goal>webdoclet</goal>\n\t        </goals>\n\t      </execution>\n\t    </executions>\n      </plugin>\n     </plugins>\nAfter I saved the file and run mvn (mvn install and mvn clean), it gives me Null Pointer Exception:\nDownloading: http://repo1.maven.org/maven2/xdoclet/maven-xdoclet-plugin/1.2/mave\nn-xdoclet-plugin-1.2.pom\n159b downloaded\nDownloading: http://repo1.maven.org/maven2/xdoclet/maven-xdoclet-plugin/1.2/mave\nn-xdoclet-plugin-1.2.jar\n34K downloaded\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] FATAL ERROR\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] null\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginM\nanager.java:295)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(De\nfaultPluginManager.java:200)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPlug\ninManager.java:165)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(Defa\nultLifecycleExecutor.java:1218)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifec\nycle(DefaultLifecycleExecutor.java:1182)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycl\neMappings(DefaultLifecycleExecutor.java:950)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Defau\nltLifecycleExecutor.java:450)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHan\ndleFailures(DefaultLifecycleExecutor.java:303)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmen\nts(DefaultLifecycleExecutor.java:270)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLi\nfecycleExecutor.java:139)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] -------------------------------------------------------------------------\n---\n\nLooks like something is screwed up when maven attempts to run the plugin for generating the web.xml of my servlet.  I didn't do anything on the settings.xml, does that matter?\n\nAlso the documentation is por and in worse case the poor documentation offsets the benefits of the tool.",
        "FATAL ERROR if a variable contains &lt; or &gt; Try to use a variable with content like:\n    <properties>\n        <xmlHeader>&lt;?xml version=\"1.0\" ?&gt;</xmlHeader>\n    </properties>\n\nThen maven fails with\n\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] 9262\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.ArrayIndexOutOfBoundsException: 9262\n        at org.codehaus.plexus.util.xml.pull.MXParser.parsePI(MXParser.java:2447)\n        at org.codehaus.plexus.util.xml.pull.MXParser.nextImpl(MXParser.java:1245)\n        at org.codehaus.plexus.util.xml.pull.MXParser.next(MXParser.java:1093)\n        at hidden.org.codehaus.plexus.util.xml.Xpp3DomBuilder.build(Xpp3DomBuilder.java:187)\n        at hidden.org.codehaus.plexus.util.xml.Xpp3DomBuilder.build(Xpp3DomBuilder.java:94)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.parsePlugin(MavenXpp3Reader.java:2955)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.parseBuild(MavenXpp3Reader.java:753)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.parseModel(MavenXpp3Reader.java:2224)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(MavenXpp3Reader.java:4422)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(MavenXpp3Reader.java:4433)\n        at org.apache.maven.project.interpolation.RegexBasedModelInterpolator.interpolate(RegexBasedModelInterpolator.ja\nva:105)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.processProjectLogic(DefaultMavenProjectBuilder.java:1016)\n\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:878)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMavenProjectBuilder.ja\nva:506)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:198)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:583)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:461)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:292)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Fri Dec 19 10:47:09 CET 2008\n[INFO] Final Memory: 1M/2M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-2740",
        "MNG-2946",
        "maven-core has compile errors under src/test I tried building with both maven-2.0.4 and maven-2.1-SNAPSHOT to no avail....\n\n[INFO] [compiler:testCompile]\nCompiling 5 source files to D:\\sources\\maven\\components\\maven-core\\target\\test-classes\n[INFO] Error for project: Maven Core (during install)\n[INFO] ------------------------------------------------------------------------\n[INFO] Compilation failure\n\nD:\\sources\\maven\\components\\maven-core\\src\\test\\java\\org\\apache\\maven\\plugin\\PluginParameterExpressionEvaluatorTest.java:[202,33] cannot find symbol\nsymbol  : constructor ReactorManager(java.util.List)\nlocation: class org.apache.maven.execution.ReactorManager",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n"
    ],
    [
        "MNG-1446",
        "MNG-3913",
        "unable to config goals that are not bound to part of the standard lifecycle My QALab plugin has three different goals and only a few of their config params are in common with each other.  so each goal must have its own config. \n\nSo right now, for simplicity's sake, I just want the qalab:merge goal to work when i enter %mvn qalab:merge\n\nmy build section is as follows: \n\n<build> \n    <plugins> \n        <plugin> \n            <groupId>net.objectlab</groupId> \n            <artifactId>maven-qalab-plugin</artifactId> \n            <executions> \n                <execution> \n                    <configuration> \n                        <handler>net.objectlab.qalab.parser.CheckstyleStatMerge</handler> \n                        <inputFile>${project.build.directory}/checkstyle-result.xml</inputFile> \n                    </configuration> \n                    <goals> \n                       <goal>merge</goal> \n                    </goals> \n                </execution> \n             </executions> \n        </plugin> \n    </plugins> \n</build> \n\nwhen I try %mvn qalab:merge \n\ni get \n\n[ERROR] BUILD ERROR \n[INFO] ---------------------------------------------------------------------------- \n[INFO] One or more required plugin parameters are invalid/missing for 'qalab:merge' \n\n[0] inside the definition for plugin: 'maven-qalab-plugin'specify the following: \n\n<configuration> \n  ... \n  <handler>VALUE</handler> \n</configuration>. \n\n[1] inside the definition for plugin: 'maven-qalab-plugin'specify the following: \n\n<configuration> \n  ... \n  <inputFile>VALUE</inputFile> \n</configuration>. \n\nif i move the config from the executions block such that it is like so: \n\n<plugin> \n    <groupId>net.objectlab</groupId> \n    <artifactId>maven-qalab-plugin</artifactId> \n    <configuration> \n        <handler>net.objectlab.qalab.parser.CheckstyleStatMerge</handler> \n        <inputFile>${project.build.directory}/checkstyle-result.xml</inputFile> \n    </configuration> \n</plugin> \n\nthen the params are accepted, but now I can't have different params for the different goals, indeed i can't see how i'd go about specifying different configs for the different goals in such a case.  I need goal specific parameter config, not plugin-wide config.  or should I make these goals into totally different plugins instead? \n",
        "Figure out why MavenEmbedderExampleTest fails on the grid and reenable when fixed. "
    ],
    [
        "MNG-5873",
        "MNG-4513",
        ".mvn/extensions.xml ignored under Cygwin Suppose I download example maven projects that use .mvn/extensions.xml and do mvn install:\r\n\r\n{code}\r\ngit clone https://github.com/takari/polyglot-maven-examples\r\ncd polyglot-maven-examples/yaml\r\nmvn install\r\n{code}\r\n\r\nunder Cygwin the extensions.xml is not accounted for:\r\n\r\n{code:title=Cygwin error}\r\n[INFO] Scanning for projects...\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD FAILURE\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 0.187 s\r\n[INFO] Finished at: 2015-08-19T10:07:05+03:00\r\n[INFO] Final Memory: 4M/75M\r\n[INFO] ------------------------------------------------------------------------\r\n[ERROR] The goal you specified requires a project to execute but there is no POM in this directory (D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml). Please verify you invoked Maven from the correct directory. -> [Help 1]\r\n[ERROR]\r\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r\n[ERROR]\r\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\r\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MissingProjectException\r\n{code}\r\n\r\nUnder Windows CMD mvn install works fine.\r\n\r\n{code:title=Windows CMD success}\r\n[INFO] Scanning for projects...\r\nD:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml\\.polyglot.pom.yml\r\n[INFO]\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Building YAML Maven Love 0.0.1-SNAPSHOT\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO]\r\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ yaml-project ---\r\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platfo\r\nrm dependent!\r\n[INFO] skip non existing resourceDirectory D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyg\r\nlot-maven-examples\\yaml\\src\\main\\resources\r\n[INFO]\r\n[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ yaml-project ---\r\n[INFO] Nothing to compile - all classes are up to date\r\n[INFO]\r\n[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ yaml-project ---\r\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platfo\r\nrm dependent!\r\n[INFO] skip non existing resourceDirectory D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyg\r\nlot-maven-examples\\yaml\\src\\test\\resources\r\n[INFO]\r\n[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ yaml-project ---\r\n[INFO] No sources to compile\r\n[INFO]\r\n[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ yaml-project ---\r\n[INFO] No tests to run.\r\n[INFO]\r\n[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ yaml-project ---\r\n[INFO] Building jar: D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yam\r\nl\\target\\yaml-project-0.0.1-SNAPSHOT.jar\r\n[INFO]\r\n[INFO] --- maven-install-plugin:2.4:install (default-install) @ yaml-project ---\r\n[INFO] Installing D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml\\t\r\narget\\yaml-project-0.0.1-SNAPSHOT.jar to C:\\Users\\Domas\\.m2\\repository\\io\\takari\\polyglot\\yaml-proje\r\nct\\0.0.1-SNAPSHOT\\yaml-project-0.0.1-SNAPSHOT.jar\r\n[INFO] Installing D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml\\.\r\npolyglot.pom.yml to C:\\Users\\Domas\\.m2\\repository\\io\\takari\\polyglot\\yaml-project\\0.0.1-SNAPSHOT\\yam\r\nl-project-0.0.1-SNAPSHOT.pom\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD SUCCESS\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 10.038 s\r\n[INFO] Finished at: 2015-08-19T10:10:15+03:00\r\n[INFO] Final Memory: 13M/178M\r\n[INFO] ------------------------------------------------------------------------\r\n{code}",
        "Add \"additions\"/\"depedencies\" to \"dependency\" element in \"dependencyManagement\". Quite often we need ugly hacks in our poms because of broken dependencies in artifacts we depend on.\n\nFor example, org.apache.ws.security:wss4j depends on xalan:xalan, but that dependency is outdated or badly maintained (not sure now, but irrelevant); so we need to exclude it and replace it with org.apache.xalan:xalan.  Only; we can't do this from our dependencyManagement section for all our project modules, no, we can exclude xalan:xalan, but for EACH module that uses wss4j, we need to MANUALLY specify the dependency on org.apache.xalan:xalan; even though this SHOULD be a transitional dependency from wss4j.  This is dirty and causes unacceptable bugs and maintenance when artifact dependencies change or artifacts are distributed to third parties.\n\nTo fix this, we need to either host our own fixed version of wss4j, or Maven would have to introduce a method of doing BOTH the exclusion of xalan:xalan AND the addition of org.apache.xalan:xalan to the wss4j artifact from the dependencyManagement section.  Personally; I'm not sure it makes much sense supporting only one of the two.\n\nIn this example, I'd like to see the following in my project's parent pom:\n\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n        <groupId>org.apache.ws.security</groupId>\n        <artifactId>wss4j</artifactId>\n        <version>${wss4j.version}</version>\n\n        <exclusions>\n            <!-- We use org.apache.* instead -->\n            <exclusion>\n                <groupId>xalan</groupId>\n                <artifactId>xalan</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>xerces</groupId>\n                <artifactId>xercesImpl</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>xml-security</groupId>\n                <artifactId>xmlsec</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>xml-apis</groupId>\n                <artifactId>xml-apis</artifactId>\n            </exclusion>\n        </exclusions>\n\n        <dependencies>\n            <dependency>\n                <groupId>org.apache.xalan</groupId>\n                <artifactId>xalan</artifactId>\n                <version>${xalan.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.xerces</groupId>\n                <artifactId>xercesImpl</artifactId>\n                <version>${xercesImpl.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.santuario</groupId>\n                <artifactId>xmlsec</artifactId>\n                <version>${xmlsec.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.santuario</groupId>\n                <artifactId>xmlsec</artifactId>\n                <version>${xmlsec.version}</version>\n            </dependency>\n        </dependencies>\n\n    </dependency>\n  </dependencies>\n</dependencyManagement>"
    ],
    [
        "MNG-5468",
        "MNG-5251",
        "Allow mojos to access the user properties There does not seem to be any way to obtain the user properties in a mojo. The mojo can get the model properties from the project, but not the user properties specified on the Maven command line. This is problematic for mojos that want to consult them for additional configuration to pass on to other things (user classes, scripts, etc.).",
        "Cannot use version range for plugin There's no way for use version ranges for plugins in POM, like this:\n{code:xml}\n<project ...>\n  ...\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>jboss-packaging-maven-plugin</artifactId>\n        <version>[2.1, 2.2]</version>\n        <extensions>true</extensions>\n      </plugin>\n    </plugins>\n  </build>\n  ...\n</project>\n{code}\n\nI've also tried use of version range in {{<pluginManagement />}}, but still doesn't work.\n\nConsole output after {{mvn package}}:\n{code}\n[ERROR] Plugin org.codehaus.mojo:jboss-packaging-maven-plugin:[2.1, 2.2] or one of its dependencies could not be resolved: Failed to read ar\ntifact descriptor for org.codehaus.mojo:jboss-packaging-maven-plugin:jar:[2.1, 2.2]: Could not transfer artifact org.codehaus.mojo:jboss-pac\nkaging-maven-plugin:pom:[2.1, 2.2] from/to Custom-repo-plugins (http://nexus:8080/nexus/content/groups/custom): IllegalArgumentException: Ille\ngal character in path at index 93: http:/nexus:8080/nexus/content/groups/custom/org/codehaus/mojo/jboss-packaging-maven-plugin/[2.1, 2.2\n]/jboss-packaging-maven-plugin-[2.1, 2.2].pom -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException\n{code}"
    ],
    [
        "MNG-321",
        "MNG-2042",
        "when packaging = pom, the repository should store it in the groupID directory eliminate the artifactId from the path when packaging is pom, so the repository matches the source tree and is easier to browse, avoiding directories like:\norg/apache/maven/maven/maven-2.0-alpha-1.pom\n\nTo allow migration, we should have the repo tools copy these into both locations if found in either, then stop that and clean up at the release of alpha-3 (allowing users to remain a release behind).",
        "maven-site-plugin/howto.html : replace \"m2\" with \"mvn\" http://maven.apache.org/plugins/maven-site-plugin/howto.html : replace \"m2\" with \"mvn\""
    ],
    [
        "MNG-4911",
        "MNG-3646",
        "ArtifactVersion.parseVersion should not exist (forces impls to be mutable) It looks like a design flaw that {{ArtifactVersion.parseVersion}} exists; this should just be a private method in {{DefaultArtifactVersion}}, or simply inlined into its constructor, so that versions are immutable as one might expect. Can submit patch if interested.",
        "project's output directory cannot be set to absolute path I want to be able to set the output (target) directory to some absolute path outside of the source tree. What I'm trying to do is set <build><directory> to ${output}/${project.artifactId}/${project.groupId}, where 'output' is passed from the command line. \n\nLooking at the 2.0.8 code, this is what happens:\n* DefaultMavenProjectBuilder.buildInternal calls pathTranslator.alignToBaseDirectory( project.getModel(), projectDescriptor.getParentFile() );\n* DefaultPathTranslagor.alignToBaseDirectory calles build.setDirectory,  build.setSourceDirectory and build.setTestSourceDirectory all with calling the method alignToBaseDirectory(String, File) where the string is the current value of the above and File is the base directory\n* alignToBaseDirectory(String, File) calls requiresBaseDirectoryAlignment with the string\n* requiresBaseDirectoryAlignment constructs a File on top of the string and then calls File.isAbsolute to find if the path is absolute\n* since a path in the form of \"${something}\" is not considered by File to be absolute, alignToBaseDirectory adds basedir to the path.\n\nSo the final result is that passing -Doutput=/tmp results in the output directory being set to something like /home/ittayd/dev/tmp/com.company/artifact which is not what I intended. \n\nI can go around this in linux by using '/${output}/${project.artifactId}/${project.groupId}', but this won't work in windows (for two reasons: 1. '/' is not interpreted as a path separator (in Win32FileSystem) and 2. even if it did, it will not allow setting output to 'D:\\TEMP')\n\n"
    ],
    [
        "MNG-5452",
        "MNG-312",
        "${maven.build.timestamp} should use UTC instead of local timezone (or be configurable) The {{maven.build.timestamp}} property currently uses the default local timezone. This can lead to problems when this is used in a build, as the output is dependent on the local timezone.\n\nIt would be nice if it defaulted to UTC, or if it could be configured (maybe similar to {{maven.build.timestamp.format}}.\n\nSee also [Eclipse bug 367945|https://bugs.eclipse.org/bugs/show_bug.cgi?id=367945] where this is also discussed.",
        "add test artifacts to repository -a 'dotted' project to test that logic\n-something without an extension\n-something with a \".txt\" extension\n-some classifier examples"
    ],
    [
        "MNG-315",
        "MNG-209",
        "resurrect the Wagon Ant tasks from CVS, and wrap them around maven-artifact These have been neglected for a while. Now that we've had a public release, we should get them up to scratch again and release them also.",
        "lifecycle is not cleared on successive runs, leaving behind cruft currently, the lifecycle is only initialised once, and then the bindings are all gathered up.\n\nAs a result of this, new bindings for projects previously executed in the reactor are used on subsequent projects, whereas the lifecycle bindings should be fresh each time."
    ],
    [
        "MNG-5650",
        "MNG-3974",
        "Allow better profile support including custom profile activators It is no longer possible to create custom profile activators in Maven 3.x. This is something that can be restored as part of a new format for the POM. The profiles can be put in the <build/>.",
        "New mirror syntax is not stopping on first match The first match of a pattern should be returned, but the last one is being found.\n\nExact matches should always supercede a pattern."
    ],
    [
        "MNG-3503",
        "MNG-261",
        "Shade MX* classes from plexus-utils The Maven uber JAR currently ships with unshaded {{MXParser}} and {{MXSerializer}}, preventing plugins from using their recent implementations from plexus-utils. My initial question on the [dev list|http://www.nabble.com/Shade-MX*-classes-from-plexus-utils--tc16080800s177.html] showed now immediate objections and the core ITs also smile so here we go with the proposed patch.",
        "don't create parent directories when artifact not downloaded directories are created first - it should only be done by wagon, at the point it is actually needed"
    ],
    [
        "MNG-2510",
        "MNG-2375",
        "Maven 2.0.4 is failing at Getting-Started-Tour Followed the Getting-Started-Tour, everything worked well until the following command:\n\nmarkus@localhost:~/my-app> mvn idea:idea\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'idea'.\n[INFO] artifact org.apache.maven.plugins:maven-idea-plugin: checking for updates from central\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-idea-plugin/2.0/maven-idea-plugin-2.0.pom\n2K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-plugins/1/maven-plugins-1.pom\n3K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-parent/1/maven-parent-1.pom\n6K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/apache/1/apache-1.pom\n3K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-idea-plugin/2.0/maven-idea-plugin-2.0.jar\n37K downloaded\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Quick Start Archetype\n[INFO]    task-segment: [idea:idea]\n[INFO] ----------------------------------------------------------------------------\n[INFO] Preparing idea:idea\n[INFO] No goals needed for project - skipping\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-project/2.0.1/maven-project-2.0.1.pom\n1K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven/2.0.1/maven-2.0.1.pom\n11K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-model/2.0.1/maven-model-2.0.1.pom\n2K downloaded\nDownloading: http://repo1.maven.org/maven2/org/codehaus/plexus/plexus-utils/1.0.5/plexus-utils-1.0.5.pom\n918b downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-profile/2.0.1/maven-profile-2.0.1.pom\n1K downloaded\nDownloading: http://repo1.maven.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9/plexus-container-default-1.0-alpha-9.pom\n1K downloaded\nDownloading: http://repo1.maven.org/maven2/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom\n492b downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-artifact-manager/2.0.1/maven-artifact-manager-2.0.1.pom\n1K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-repository-metadata/2.0.1/maven-repository-metadata-2.0.1.pom\n1K downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-artifact/2.0.1/maven-artifact-2.0.1.pom\n765b downloaded\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/maven-plugin-api/2.0.1/maven-plugin-api-2.0.1.pom\n643b downloaded\nDownloading: http://repo1.maven.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.pom\n6K downloaded\nDownloading: http://repo1.maven.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.pom\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: xml-apis:xml-apis\n\nReason: Error getting POM for 'xml-apis:xml-apis' from the repository: Error transferring file\n  xml-apis:xml-apis:pom:1.0.b2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  snapshots (http://snapshots.maven.codehaus.org/maven2)\n\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13 seconds\n[INFO] Finished at: Thu Aug 17 13:45:18 CEST 2006\n[INFO] Final Memory: 2M/4M\n[INFO] ------------------------------------------------------------------------\n",
        "Generate docs for mojo goals should list whehter or not each parameter is read-only This should be included in the generated docs, so it's not necessary to look at source code or use trial and error to figure out which parameters are read-only.\n"
    ],
    [
        "MNG-4537",
        "MNG-4554",
        "--update-snapshots command line option flag is misleading, as it actually updates releases too Had a discussion with Brett Porter, Brian Fox, and Benjamin Bentmann on IRC about how the --update-snapshots command line option is misleading.  I, as well as some of my students, we using -up, expecting downloads that previously failed to be tried again.  However, that flag only checks for metadata updates to see if a newer version of the plugin has been released.  What we were after is the -U flag (synonymous with --update-snapshots) which also checks again remotely for SNAPSHOT and RELEASE downloads that previously failed.\n\nBrett and Brian suggested that we either deprecate the old --update-snapshots long option, but that's not entirely possible since the short and long options are tied together.  So, as a compromise solution, I'm indicating that the --update-snapshots option flag (name) may go away in the future and adding a migrate-to option called --update-all which was suggested in the above IRC conversation.  Functionally, this long flag performs the same operation as --update-snapshots, but the name much more effectively communicates that it updates all artifacts from remote repos, not just snapshots.",
        "[regression] plugin updates are requested on every build regardless of policies I'm not sure if this is an intentional change that I've missed or not, but running something like:\n\n{code}\nmvn archetype:generate\n{code}\n\nwill retrieve the metadata from the repository on every build:\n\n{code}\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-metadata.xml\n9 KB downloaded at 17.1 KB/sec\n{code}\n\nThis is in contrast to Maven 2.2.1 which always continues to use the first version encountered until you use -U:\n\n{code:xml}\n  <pluginRepositories>\n    <pluginRepository>\n      <releases>\n        <updatePolicy>never</updatePolicy>\n      </releases>\n{code}\n\nWhile that remains in the super POM of Maven 3, it seems that the metadata is retrieved regardless."
    ],
    [
        "MNG-4919",
        "MNG-2300",
        "Plugin execution contributed by lifecycle mapping gets lost when same goal is bound multiple times When a plugin goal is implicitly bound twice from lifecycle mappings, the two goal executions get the same id and clash. This clash can eventually lead to all but one goal execution being lost (during model merging).\n\nOriginally reported as [TYCHO-546|https://issues.sonatype.org/browse/TYCHO-546] where {{org.apache.maven.plugins:maven-clean-plugin:clean}} is bound once for the {{clean}} lifecycle (from Maven core) and once for the {{default}} lifecycle (from the build extension), both times using the execution id {{default-clean}}.",
        "broken links on  http://maven.apache.org/plugins/ e.g. to changes "
    ],
    [
        "MNG-1982",
        "MNG-1141",
        "wagons should be tolerant of incorrect configurations in <server/> entries within settings.xml basically, we need to soften the reaction to invalid configuration of a wagon...make it a warning instead of an exception.",
        "document <relativePath /> tag, and where we plan to go with USD and workspace definitions "
    ],
    [
        "MNG-3970",
        "MNG-5075",
        "[regression] Repositories injected by profiles are not used for dependency resolution {code:xml}\n<profile>\n  <id>profile</id>\n  <!-- to be activated explicitly on the CLI by its id -->\n  <repositories>\n    <repository>\n      <id>maven-core-it</id>\n      <url>file:///${basedir}/repo</url>\n      <releases>\n        <checksumPolicy>ignore</checksumPolicy>\n      </releases>\n      <snapshots>\n        <checksumPolicy>ignore</checksumPolicy>\n      </snapshots>\n    </repository>\n  </repositories>\n</profile>\n{code}\ndependencies from the above repo are not resolvable even if the profile is active.",
        "MavenProject.getParent throws undocumented ISE http://bugzilla-attachments-197994.netbeans.org/bugzilla/attachment.cgi?id=107899 shows a stack trace encountered when calling {{MavenProject.getParent}} on a project with some errors (probably POMs missing in the local repository).\n\nThis method has no Javadoc comment, so it is hard to know exactly what it is permitted/supposed to do, but {{hasParent}} implies that {{null}} is a valid return value, and there is no {{throws IllegalStateException}} clause. The attached patch brings the behavior in line with that signature. (I think I got the {{PlexusTestCase}} infrastructure working with all the required wiring but it may be possible to simplify the test case.)\n\nCleaner might be to just declare {{getParent}} (and also {{hasParent}}?) to throw {{ProjectBuildingException}}, though this would be a source-incompatible change. (Only binary-incompatible for clients which are already catching {{IllegalStateException}}!)"
    ],
    [
        "MNG-2727",
        "MNG-3285",
        "Fix Logging in threadsafe components ",
        "Cached plugins are used, even when different versions are specifically declared  In the attached project, you can build module A, then build module B, but the top level aggregator project will fail at B.\n\nThe reason this happens is that maven seems to cache plugins. When B is built in isolation, all things are fine - but when built in aggregation, one of the plugins that it uses has already been instantiated, and so it uses that one. This is incorrect, since the declared version is different in B, and is relying on functionality not present in the version declared in A.\n\nI have seen similar behaviour when a plugin relies on other plugins to get work done - all of a sudden a build mysteriously stops working, because of a completely unrelated plugin.\n\nThis is pretty painful because\n- it's possible to get into a 'no solution', where one project relies on one behaviour so can't upgrade, and one project relies on new behaviour, so can't downgrade.\n- you get builds that work OK in isolation, but not in their project. This is bad. Also builds tied together in bigger aggregator projects can fail in mysterious ways (mysterious because the user /has/ specified the plugin version, and maven has ignored them, or it's a plugin dependency that got there first)\n- subtle build ordering changes can cause new failures (the example has B depend on A - but the bug might only manifest itself in certain build orders that change even when B and A don't).\n\n"
    ]
]