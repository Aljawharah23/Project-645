[
    [
        "WICKET-3985",
        "WICKET-4753",
        "Ajax calls does not support IPad Safari Our website is on Apache Wicket 1.4.8. I am trying to see our website works on iPad. The website loads fine however wherever I have Ajax calls on the application Safari is either frozen or it doesn't load the data from database or doesn't make the Ajax calls. \r\nI have tested \"drop down choice example\" on http://wicketstuff.org/wicket14/ajax/ which is failing too. Ajax request is successful, but i think the response is generated by wicket IPad safari is not able to understand/parse. \r\n \r\nP.S The website works fine in iPhone without the above issues.",
        "Resource bundles are not resolved on PriorityHeaderItems If a bundle X provides resource A, and resource A is rendered as priority header item, the resource A is rendered, not bundle X."
    ],
    [
        "WICKET-2463",
        "WICKET-2944",
        "Ajax miltipart form submitting ignores setDefaultFormProcessing(false) http://www.nabble.com/defaultFormProcessing-is-no-longer-considered-when-processing--multipart-form-in-ajax-request-td25376538.html",
        "Application addRenderHeadListener causing error  \r\nwhen i try to use addrenderheaderlistener in application  with header contributor using methods other than renderonloadjavascript and\r\n renderOnDomReadyJavascript,i get the  exception as ajaxrequesttarget expects \r\n\r\n \"Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascript\r\n\r\nattaching a quickstart that shows the behavior where ajaxselfupdatingtimer is  used. \r\n\r\nexception as follows :-\r\n\r\nOnly methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascript\r\norg.apache.wicket.WicketRuntimeException: Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascript\r\n\tat org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.checkHeaderRendering(AjaxRequestTarget.java:872)\r\n\tat org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.renderJavascriptReference(AjaxRequestTarget.java:915)\r\n\tat com.mycompany.WicketApplication$1.renderHead(WicketApplication.java:28)\r\n\tat org.apache.wicket.Application.notifyRenderHeadListener(Application.java:1250)\r\n\tat org.apache.wicket.markup.html.internal.HeaderResponse.<init>(HeaderResponse.java:56)\r\n\tat org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.<init>(AjaxRequestTarget.java:951)\r\n\tat org.apache.wicket.ajax.AjaxRequestTarget.getHeaderResponse(AjaxRequestTarget.java:1018)\r\n\tat org.apache.wicket.ajax.AbstractAjaxTimerBehavior.respond(AbstractAjaxTimerBehavior.java:163)\r\n\tat org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:286)\r\n\tat org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:119)\r\n\tat org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92)\r\n\tat org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1250)\r\n\tat org.apache.wicket.RequestCycle.step(RequestCycle.java:1329)\r\n\tat org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428)\r\n\tat org.apache.wicket.RequestCycle.request(RequestCycle.java:545)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:479)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:312)\r\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\r\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)\r\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\r\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\r\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)\r\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)\r\n\tat org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)\r\n\tat org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\r\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\r\n\tat org.mortbay.jetty.Server.handle(Server.java:326)\r\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\r\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)\r\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547)\r\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)\r\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\r\n\tat org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)\r\n\tat org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\r\n"
    ],
    [
        "WICKET-684",
        "WICKET-5325",
        "JavaScript complains if an AjaxButton has the name \"submit\" When using an AjaxButton (former AjaxSubmitButton) with id \"submit\", the generated name attribute on the HTML tag is \"submit\" and it causes problems when trying to submit the form, because submit is already a function.  There is code to handle that in FormComponent, but sadly fieldName.equals(\"submit\") does not return true because PrependingStringBuffer.equals() is not implemented.",
        "ComponentRenderer.renderComponent does not render markup for ListView ComponentRenderer.renderComponent does not return HTML markup for a ListView component, only wicket tags. Attaching a quickstart demonstrating the issue that will print the following output to console:\r\n\r\nListView markup with wicket tags stripped: null\r\nLabel markup with wicket tags stripped: Example\r\nListView markup with wicket tags included: <wicket:container wicket:id=\"list\"></wicket:container><wicket:container wicket:id=\"list\"></wicket:container><wicket:container wicket:id=\"list\"></wicket:container>\r\nLabel markup with wicket tags included: <wicket:container wicket:id=\"text\">Example</wicket:container>"
    ],
    [
        "WICKET-108",
        "WICKET-2799",
        "onDetach in HtmlHeaderContainer isn't being called -> java.io.NotSerializableException: wicket.response.StringResponse Am rudely assigning this one to Eelco without consultation, as I think he broke it. ;)\n\nHtmlHeaderContainer is keeping its reference to headerResponse, which isn't serializable, causing a java.io.NotSerializableException: wicket.response.StringResponse.\n\nIt should be throwing away the reference on #onDetach(). For some reason #onDetach() isn't being called when presumably it should be. I'm still getting up to speed with how all this stuff works, so hopefully you'll be able to chase this one more efficiently than I can.\n\nIn case it's useful, the stack trace for creating the HtmlHeaderContainer is something like this:\n\tHtmlHeaderResolver.resolve(MarkupContainer, MarkupStream, ComponentTag) line: 79\t\n\tMyRandomPage(MarkupContainer).renderNext(MarkupStream) line: 1359\t\n\tMyRandomPage(MarkupContainer).renderAll(MarkupStream) line: 942\t\n\tMyRandomPage(Page).onRender(MarkupStream) line: 978\t\n\tMyRandomPage(Component).render(MarkupStream) line: 1521\t\n\tMyRandomPage(Page).renderPage() line: 413\t\n\tBookmarkablePageRequestTarget.respond(RequestCycle) line: 226\t\n\tDefaultResponseStrategy.respond(RequestCycle) line: 47\t",
        "@RequireHttps not switching to https when setting response page to non-bookmarkable page When navigating to a @RequireHttps annotated page using setResponsePage(new HttpsAnnotatedPage()); the redirection to https does not occur, see mailing list for full description:\r\nhttp://old.nabble.com/%40RequireHttps---forms-misbehaving-ts26845496.html\r\nUsing \"setRedirect(true);\" does not seem to have any effect.\r\n"
    ],
    [
        "WICKET-3197",
        "WICKET-4099",
        "getMarkupId() can be used only if the component's markup is attached With change r1037139 Component#getMarkupImpl() first tries to get the markup id from the component's markup.\r\nIf the markup is not available/attached yet for this component the call ends with :\r\norg.apache.wicket.markup.MarkupException: Can not determine Markup. Component is not yet connected to a parent. [Component id = label]\r\n",
        "SmartLinkLabel doesn't recognize already tagged links The SmartLinkLabel works as expected for the texts without <a>..</a> tag. \r\nfor text like\r\nextensions @ http://www.wicketframework.org/wicket-extensions/index.html are cool!!\r\nSmartLinkLabel generates the html - \r\nextensions @ <a href=\"http://www.wicketframework.org/wicket-extensions/index.html\">http://www.wicketframework.org/wicket-extensions/index.html</a> are cool!!\r\n\r\nbut for the text like\r\nextensions @ <a href='http://www.wicketframework.org/wicket-extensions/index.html'>http://www.wicketframework.org/wicket-extensions/index.html</a> are cool!!\r\nSmartLinkLabel generates the html - \r\nextensions @ <a href='<a href=\"http://www.wicketframework.org/wicket-extensions/index.html\">http://www.wicketframework.org/wicket-extensions/index.html</a>'><a href=\"http://www.wicketframework.org/wicket-extensions/index.html\">http://www.wicketframework.org/wicket-extensions/index.html</a></a> are cool!!\r\n\r\nI think this is a bug & needs a fix.\r\n"
    ],
    [
        "WICKET-23",
        "WICKET-3506",
        "introduce @OnAttach, @OnDetach,  @OnBeforeRender, @OnAfterRender http://mail-archives.apache.org/mod_mbox/incubator-wicket-dev/200610.mbox/browser\n\nwe have a couple of great candidate callbacks to be implemented with\nannotations instead of template methods. namely onattach/detach,\nonbegin/endrender\n\nwhat makes them great candidates is this\n\n1) when implementing one you must always call super()\nthis is not _always_ true. when extending a core component you dont need to\nbecause we have our own internalattach() we can use and onattach() is just\nan empty template.\n\nbut when extending a non-core component you must call super() because you\nnever know if that component uses it or not and it is very very unlikely\nthat it is a behavior you want to override\n\n2) implementors of onattach(), if they are good, will make it final and\nprovide another breakout template to ensure their onattach code cannot be\nmessed with. this leads you to have\n\npublic final void onAttach(){ dosomething(); onAttach2(); } public void\nonAttach2() {}\n\nthis is the general java pattern that i find very ugly personally, take a\nlook at our Component.internalAttach() impl :)\n\nso what i propose is that we provide some annotations\n@OnAttach @OnDetach @OnBeforeRender @OnAfterRender\n\nusers can annotate any number of methods with these and have them called.\n\nim sure there are other places that can benefit from this, but for now we\ncan cleanup the mess that is internalAttach(), internalOnAttach()\nonAttach(), etc\n\nof course this is wicket 2.0 only",
        "ResourceMapper doesn't work: mapHandler() always returns null ResourceMapper#mapHandler uses the following code test whether a particular ResourceReferenceRequestHandler should be mapped:\r\n\r\n// see if request handler addresses the resource we serve\r\nif (resourceReference.getResource().equals(handler.getResource()) == false)\r\n{\r\n\treturn null;\r\n}\r\n\r\nUnfortunately this if statement always evaluates to true and thus null is returned.\r\n\r\nThe problem is that IResource implementations do not provide an equals() method. In practice this means that the default Object#equals() implementation is used, which nearly always results in false for the equality test.\r\n\r\nI see two possible solutions:\r\n\r\n1. Implement equals() for all IResource classes.\r\n\r\n2. Compare the ResourceReference objects instead, which already have a meaningful equals() implementation. In other words:\r\n\r\n\r\n// see if request handler addresses the resource we serve\r\nif (resourceReference.equals(handler.getResourceReference()) == false)\r\n{\r\n\treturn null;\r\n}\r\n\r\nI'm attaching a quickstart that illustrates this bug."
    ],
    [
        "WICKET-4250",
        "WICKET-3217",
        "Checks in IRequestMapper.mapHandler should be on page instance, if available AbstractBookmarkableMapper and MountedMapper only check if a the page class match that of the mount, even when a page instance is available. This makes it difficult to use the classes as superclass in a single-page application, where the same page can be mounted at different urls. The attached patch allows checks on the page instance to be implemented in subclasses.",
        "DatesPage test LocaleDropDownChoice getObject calls getSelectedLocale(), does not use result In the DatesPage test, the LocaleDropDownChoice.getObject() method calls\r\ngetSelectedLocale() but does not use the result:\r\n\r\n        public List<Locale> getObject()\r\n        {\r\n          getSelectedLocale();\r\n          List<Locale> locales = new ArrayList<Locale>(LOCALES);\r\n          Collections.sort(locales, new Comparator<Locale>()\r\n          {\r\n            public int compare(Locale o1, Locale o2)\r\n            {\r\n              return o1.getDisplayName(selectedLocale).compareTo(\r\n                  o2.getDisplayName(selectedLocale));\r\n            }\r\n          });\r\n          return locales;\r\n        }\r\n\r\nI would guess that the call getSelectedLocale() could be removed"
    ],
    [
        "WICKET-4663",
        "WICKET-453",
        "LazyInitProxyFactory uses wrong ClassLoader in OSGi environment The method LazyInitProxyFactory#createProxy use Thread.currentThread().getContextClassLoader() to create a new proxy instance. It seems that this is not correct in an OSGi environment.\r\n\r\nPreferred is to use the ClassLoader provided by the AbstractClassResolver class (getClassResolver is not part of IClassResolver). \r\n\r\nThen it will be something like:\r\n\r\n\r\n\t\t\tClassLoader classLoader;\r\n\t\t\tif (Application.exists())\r\n\t\t\t{\r\n\t\t\t\tAbstractClassResolver classResolver = (AbstractClassResolver) Application.get()\r\n\t\t\t\t\t.getApplicationSettings()\r\n\t\t\t\t\t.getClassResolver();\t\t\t\r\n\r\n\t\t\t\tclassLoader = classResolver.getClassLoader();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\treturn Proxy.newProxyInstance(classLoader, new Class[] { type, Serializable.class,\r\n\t\t\t\t\t\tILazyInitProxy.class, IWriteReplace.class }, handler);\r\n\t\t\t}\r\n",
        "EditableLabel is broken Try wicket-examples (http://localhost:8080/wicket-examples/ajax/?wicket:bookmarkablePage=%3Awicket.examples.ajax.builtin.EditableLabelPage) and see exception:\n\njava.lang.IllegalStateException: No model found for this component, either pass one explicitly or make sure an inheritable model is available\n\tat wicket.extensions.ajax.markup.html.AjaxEditableLabel.getParentModel(AjaxEditableLabel.java:441)\n\tat wicket.extensions.ajax.markup.html.AjaxEditableLabel.<init>(AjaxEditableLabel.java:169)\n\tat wicket.examples.ajax.builtin.EditableLabelPage.<init>(EditableLabelPage.java:52)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:494)\n\tat java.lang.Class.newInstance0(Class.java:350)\n\tat java.lang.Class.newInstance(Class.java:303)\n\tat wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:57)\n\tat wicket.request.target.component.BookmarkablePageRequestTarget.newPage(BookmarkablePageRequestTarget.java:256)\n\tat wicket.request.target.component.BookmarkablePageRequestTarget.getPage(BookmarkablePageRequestTarget.java:275)\n\tat wicket.request.target.component.BookmarkablePageRequestTarget.processEvents(BookmarkablePageRequestTarget.java:204)\n\tat wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:89)\n\tat wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:962)\n\tat wicket.RequestCycle.step(RequestCycle.java:1035)\n\tat wicket.RequestCycle.steps(RequestCycle.java:1114)\n\tat wicket.RequestCycle.request(RequestCycle.java:474)\n\tat wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:248)\n\tat wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:122)\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1065)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:185)\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:689)\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:391)\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)\n\tat org.mortbay.jetty.Server.handle(Server.java:285)\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:457)\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:751)\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:500)\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:209)\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:357)\n\tat org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:329)\n\tat org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:475)\n"
    ],
    [
        "WICKET-4627",
        "WICKET-4339",
        "Change Url#parse() methods to accept CharSequence instead of String RequestCycle#urlFor() methods return CharSequence.\r\nBy making org.apache.wicket.request.Url#parse() methods accepting CharSequence instead of j.l.String the user will save some typing (adding .toString()).",
        "Possible bug with 1.5 and WiQuery (might be a WiQuery problem) See attached quickstart + unit tests.  Unsure if this is a Wicket or a WiQuery problem."
    ],
    [
        "WICKET-2582",
        "WICKET-2773",
        "org.apache.wicket.markup.html.form.Check should call Component.isEnabledInHierarchy() The Implementation of  onComponentTag() in org.apache.wicket.markup.html.form.Check should call Component.isEnabledInHierarchy() instead of  \r\n\"if (!isActionAuthorized(ENABLE) || !isEnabled() || !group.isEnabled())\". This would pass-through the ancestors \"enabled\"-flag to the Check Component.\r\n\r\nFor example component path: \" WebMarkupContainer : CheckGroup : Check \"\r\nWhereas the WebMarkupContainer is disabled. In the current implementation the Check ignores WebMarkupContainer \"enabled\"-flag.\r\n",
        "yui DatePicker based wicket component  truncates years to the 0-99 interval even if 'yyyy' is set as year pattern See last comment at http://issues.apache.org/jira/browse/WICKET-2648 - I open this new ticked because that one is closed.\r\n\r\nBug is still in the \"wicket-date.js\", line 137. \r\n\r\nThe wrong code is: \r\n\r\nif(datePattern.match(/yy+/)) year = Wicket.DateTime.padDateFragment(year % 100); \r\n\r\nThis line also makes the module 100 on the year, when the year pattern is \"yyyy\". \r\n\r\nThe fixed code is: \r\n\r\nif(datePattern.match(/yyyy+/)) { \r\n\r\n    year = year; \r\n\r\n  } else if(datePattern.match(/yy+/)) year = Wicket.DateTime.padDateFragment(year % 100); "
    ],
    [
        "WICKET-5638",
        "WICKET-5119",
        "Use handlebar-like templating syntax Apologies for my ignorance to processes. This is my first issue i've ever created for Apache Wicket. Love some feedback. I've been only lurking this issue queue for a short while. So i have a lot to learn and looking forward to responses:\r\n\r\nAs a new feature, I'd like to see Wicket introduce a handlebar-like syntax to wicket templates.\r\n\r\nInstead of wrapping <div>'s and mapping those divs to a particular output utilize a handlebar syntax to render the contents.\r\n\r\nThis has several advantages:\r\n- No longer coupled to HTML. One use wicket to render json, xml, svg in response to a behavior.\r\n- Syntax is commonplace and provides lower barrier to entry. Many other languages/frameworks implement this syntax: handlebars, twig (PHP), liquid, jinja, etc.\r\n- IMHO, easier to implement into web components spec because of markup decoupling.",
        "PopupSettings IE8 - dosen't work second time a link is clicked. Hi,\r\n\r\nThe popup functionality causes a script error in IE8, if the popup window is already open. As a result the link's default behaviour is executed instead - as ' return false; ' never is reached.\r\n\r\nClass: org.apache.wicket.markup.html.link.PopupSettings\r\n\r\nThe problem exists in line: 188 //  if(w.blur) w.focus();\r\n\r\nIn IE8 blur and focus isen't defined - secound time a popup link is called and therefore the logic breaks.\r\n\r\n//An alternative: (test if w.blur is defined)\r\nscript.append(\"'); if( jQuery.isFunction( w.blur ) && w.blur ) { w.focus(); } \").append(\" return false;\");\r\n\r\nBr,\r\nUffe."
    ],
    [
        "WICKET-3957",
        "WICKET-139",
        "PackageResource file locking problem After moving from 1.4.x to 1.5-RC5.1, updates to resources loaded via IHeaderContributor.renderHead() cause file and/or directory locking problems on individual files and/or at the base package directory level. The resulting locking problems disallow changes to resources without stopping the server, followed by a project refresh, rebuild, and server restart. This obviously slows down development time quite severely.\r\n\r\nComparable quick starts generated from 1.4.17 and 1.5-SNAPSHOT demonstrate the problem in 1.5 but no problem in 1.4.17. Similar testing in Linux reveals no problems, nor does there appear to be a problem when using the generated quick starts with Jetty. This seems to be a JBoss and Windows with Wicket 1.5 specific problem.",
        "DefaultTreeState allowSelectMultiple == false not evaluated when selecting node already selected selectNode will not process the change from allowSelectMultiple == true to allowSelectMultiple == false when selectNode is called on a TreeNode that is already in the selectedNodes set"
    ],
    [
        "WICKET-2945",
        "WICKET-3889",
        "Filters and a application have different contexts I'm not familiar with multi-threaded applications, but in the Wicket 1.4.7 my example works correctly. Now it's broken.\r\nLooks like filter and wicket application lives in the different contexts and has different threads.\r\n\r\nAny thoughts on what is causing this problem?\r\n\r\nThanks,\r\nDmitry.",
        "Updating the html when refreshing a page does not work for the basepage, child is ok. With getResourceSettings().addResourceFolder(\"c:/projects/wicket/WicketTest/src/java\");\r\nwhen the html file is modified the result is visible by refreshing the page.\r\nWhen the page is composed of a parent page with a child page the html of the child is properly updated when the page is refreshed but the html of the parent page is not.\r\nIn wicket 1.4 both were updated. "
    ],
    [
        "WICKET-3783",
        "WICKET-3461",
        "Rework AttributeModifier, SimpleAtttributeModifier, AttributeAppender to simplify working with them Transcript of a short IRC chat:\r\n\r\n17:54 dashorst\r\nivaynberg: martin-g: I made SimpleAttributeModifier not to keep less\r\nstate but to lessen the stuff needed to instantiate a\r\nAttributeModifier\r\nif you're concerned about the state of AM, then override oncomponenttag\r\n\r\n17:54 ivaynberg\r\nonce we have the factories why not deprecate simple?\r\n\r\n17:54 dashorst\r\nI want to deprecate simple\r\n\r\n17:54 ivaynberg\r\nsometimes that cant be done\r\nif it could we wouldnt need AM\r\nanyways\r\ni think we should remove AM#replaceIfNotPresent\r\ni cant come up with a good usecase when it should be false\r\n\r\n17:56 dashorst\r\nneither can I\r\n\r\n17:56 ivaynberg\r\nnuke it and that will partially remove the need for simple* as well\r\n\r\n17:56 dashorst\r\nAM is usable for reuse, overriding oncomponenttag not\r\nthough the component in question could be reusable\r\n\r\n17:57 ivaynberg\r\nmake replaceModel Object\r\nso we can take simple values\r\nand instanceof it to see if its a model\r\nthat will also save state\r\nthe pattern thing can also go\r\n\r\n17:59 dashorst\r\nthe pattern thing got me confused... no docs on what gets actually replaced\r\nthe matched pattern? everything?\r\n\r\n17:59 ivaynberg\r\nyeah. nuke it.\r\nit seems like a very edgy edgecase\r\nalso the enabled boolean\r\nit seems rather strange\r\nyou would have to keep a reference to AM to toggle it\r\ni think people are much more likely to override isenabled()",
        "org/apache/wicket/util/tester/BaseWicketTester getWicketAjaxBaseUrlFromLastRequest null tag In the BaseWicketTester getWicketAjaxBaseUrlFromLastRequest's do-while loop,\r\nwhat happens if the tag variable actually is null? Gracefully exit the do-while loop?\r\nI think not."
    ],
    [
        "WICKET-3601",
        "WICKET-1413",
        "org/apache/wicket/util/tester/TagTester createTagByAttribute elm isA XmlTag In method createTagByAttribute\r\n\r\n        XmlTag elm = null;\r\n        XmlTag openTag = null;\r\n        XmlTag closeTag = null;\r\n        int level = 0;\r\n        while ((elm = parser.nextTag()) != null && closeTag == null)\r\n        {\r\n// BUG: elm isA XmlTag so there is no need for this test\r\n          if (elm instanceof XmlTag)\r\n          {\r\n",
        "RequestUtils.toAbsolutePath() has a bug regarding to UTF-8 encoded page parameter. It seems RequestUtils.toAbsolutePath() has a bug regarding to UTF-8 encoded page parameter :\n\nI have a bookmarkable page  , which takes a UTF-8 encoded parameter \"place\" :\n\nprivate PageParameters pps;\npps.put(\"place\", URLEncoder.encode(place , \"UTF-8\"));\n\nIn this Page , I have a TextField that prints the URL for this page (for users to copy) :\nString url = RequestUtils.toAbsolutePath(\"\");\n    TextField resultUrl;\n    resultUrl = new TextField(\"resultUrl\");\n    resultUrl.setModel(new Model( url ));\n    resultUrl.setEscapeModelStrings(false);\n    resultUrl.setOutputMarkupId(true);\n    add(resultUrl);\n\n\nFor example , \"\u53f0\u5317\u5e02\" (Chinese word : \"Taipei\" ) is encoded correctly to :\nplace/%25E5%258F%25B0%25E5%258C%2597%25E5%25B8%2582\nAnd it is correctly shown in the browser URL bar.\n\nBut it is incorrectly shown in the textfield :\nplace/%E5%8F%B0%E5%8C%97%E5%B8%82"
    ],
    [
        "WICKET-5075",
        "WICKET-1814",
        "When modal window is closed page scrolls to top the current function passed to onCloseButton() does not abort the current event, which navigates to # since that is whats in the href of the link, which in turn scrolls the page to the top.",
        "In IE6, a hash string is automatically appended to an ajax request In IE6, a hash string is automatically appended to an ajax request if the page from which the ajax request originates, was invoked with that specific hash string.\n\nFor example, a page that contains an AjaxLink is requested with an hash string in the url (url + #topfocus). \n\nWhen the page is displayed, and the AjaxLink on that page is clicked (and the ajax request is sent to the server),\nthe request url invoked by xmlhttp still contains the hashstring, wich causes an error (404: Not found). \n\nI made a workaround  by adding an extra test in the WicketFilter, in method \"getRelativePath(HttpServletRequest request)\" to remove the hash string.\n\nif (Boolean.valueOf(request.getHeader(\"wicket-ajax\")).equals(Boolean.TRUE)) {\n    int idx = path.indexOf(\"%23\");\n    if (idx > -1)  {\n        path = path.substring(0, idx);\n    }\n}\n\nCan this or another viable workaround be included within Wicket?"
    ],
    [
        "WICKET-4825",
        "WICKET-3053",
        "Odd Javascript behavior with 6.1.1 See attached quickstart. I expect the <div> to toggle colors between red and green on every click. This doesnt happen (latest Chrome browser). The panel only toggles color on the first click. \r\n\r\nIssuing the returned javascript directly in Chrome's dev tools correctly toggles the panel colors as expected:\r\n\r\n$('#wmc').toggleClass('expanded').toggleClass('expandable');\r\n[<div id=\u200b\"wmc\" wicket:id=\u200b\"wmc\" class=\u200b\"expandable\">\u200bClick Me\u200b</div>\u200b]\r\n$('#wmc').toggleClass('expanded').toggleClass('expandable');\r\n[<div id=\u200b\"wmc\" wicket:id=\u200b\"wmc\" class=\u200b\"expanded\">\u200bClick Me\u200b</div>\u200b]\r\n$('#wmc').toggleClass('expanded').toggleClass('expandable');\r\n[<div id=\u200b\"wmc\" wicket:id=\u200b\"wmc\" class=\u200b\"expandable\">\u200bClick Me\u200b</div>\u200b]\r\n\r\nLooking really closely at the element inspector in Chrome, it looks like the panel's class attributes do get toggled but then they seem to get overwritten.",
        "WicketTester does not preserve the form component values when submitting with AjaxSubmitLink See this thread:\r\nhttp://apache-wicket.1842946.n4.nabble.com/Url-parameters-removed-onClick-wrong-url-encoding-td2541831.html\r\n\r\nAgain you can take a legup project (with Guice 2.0) and substitute the wicket versions -> the test \r\n\r\ntester.assertModelValue(\"text\", \"sayHello\");\r\n\r\nwill fail: expected:<sayHello> but was:<Hello null>"
    ],
    [
        "WICKET-1909",
        "WICKET-5365",
        "Wrong translation for StringValidator.range in Application_pl.properties  This:\nStringValidator.range='${input}' nie jest poza zakresem d\\u0142ugo\\u015bci znak\\u00f3w od ${minimum} do ${maximum}.\n\nshould be replaced with this:\n\nStringValidator.range='${input}' jest poza zakresem d\\u0142ugo\\u015bci znak\\u00f3w od ${minimum} do ${maximum}.\n\n",
        "AtmosphereBehavior should also log X-Forwarded-For Servlet/Wicket apps are usually deployed behind a reverse proxy such as nginx. AtmosphereBehavior logs should also include X-Forwarded-For header (when it exists), in addition to remote_host, e.g. :\r\n\r\n{code}\r\nlogger\t  \torg.apache.wicket.atmosphere.AtmosphereBehavior\r\nmessage\t  \tSuspending the streaming response from ip 127.0.0.1:41992\r\n\r\nlogger\t  \torg.apache.wicket.atmosphere.AtmosphereBehavior\r\nmessage\t  \tstreaming connection dropped from ip 127.0.0.1:41850\r\n\r\nlogger\t  \torg.apache.wicket.atmosphere.AtmosphereBehavior\r\nmessage\t  \tResuming the websocket response from ip 127.0.0.1:41360\r\n{code}\r\n"
    ],
    [
        "WICKET-403",
        "WICKET-3810",
        "Move Wicket Portlet support from core to wicket-stuff project The Wicket Porlet support is highly experimental and used by a small subset of our community. The number of committers that have time and actual experience with the portlets are minimal. Therefore we opted to move the portlet support from core to a Wicket Stuff project.",
        "Fix Generic(Panel|WebPage)'s getModel() method GenericPanel#getModel() returned the model object instead of the model.\r\nThe same for GenericWebPage (copy/paste error)."
    ],
    [
        "WICKET-2339",
        "WICKET-3442",
        "Fix : testSignIn2(org.apache.wicket.examples.signin2.Signin2Test) MockHttpServletRequest is broken when used with CryptedUrlWebRequestCodingStrategy\r\n\r\nMockHttpServletRequest.getQueryString() line: 714 returns the QueryString like this: (in the specific Test Case of SignIn2Test)\r\n\r\nusername=wicket&password=wicket&rememberMeRow:rememberMe=true&x=6*:1:signInPanel:signInForm::IFormSubmitListener::\r\n\r\nCryptedUrlWebRequestCodingStrategy decodeURL(final String url) cant read that \r\n\r\nit expexts the paramter 'x=' at the very beginning of the QueryString of the URL.\r\n\r\nsorry no patch file.\r\n(in my current mood I'd throw the CryptedUrlWebRequestCodingStrategy away)\r\n\r\nmf",
        "setResponsePage() to mounted Page fails to redirect correctly calling setResponsePage() within a Form#onSubmit( ) to a mounted Page will:\r\n\r\n1.  Not redirect to the mounted URI\r\n2.  Screw up path rewriting for all elements on the rendered page.\r\n\r\nI have attached a quickstart zipfile in which I am able to reproduce the issue.   Here's a quick description of what happens:\r\n\r\nPageOne.class is mounted to /pageone\r\nPageTwo.class is mounted to /pagetwo\r\n\r\nPageOne has a Form with a single setResponsePage( PageTwo.class ); in its onSubmit( );\r\n\r\nWhen PageOne's form is submitted, instead of redirecting to /pagetwo, the page uri is something like /wicket/page?0-1.IFormSubmitListener-form\r\n\r\nAny subsequent path references on the rendering of PageTwo are broken, since the browser thinks the relative path origin is /wicket/, whereas wicket likely thinks it's /\r\n"
    ],
    [
        "WICKET-2568",
        "WICKET-5155",
        "Unnecessary method calls in IDataProvider Referring to the post on the mailinglist (http://old.nabble.com/Unnecessary-method-calls-in-IDataProvider--ts26266771.html), here's a quick summary of the problem:\r\n\r\nIf the size() method of an IDataProvider returns zero, the iterator(int,int) method should not be called. Calling this method with value zero as second parameter (== count)  _always_ results in returning an empty iterator. Therefore a lot of unnecessary method calls (and thus a lot of unnecessary database hits) could be saved if an empty iterator would be used by the DataView whenever size() returns an int <= 0.\r\n\r\nPlease find a project attached with a junit test that illustrates the problem. I tested it with all major releases from 1.4.3. down to 1.3.0. with the same result.",
        "cookies should expire "
    ],
    [
        "WICKET-2078",
        "WICKET-2149",
        "WICKET-2058 does not support IBM Websphere Portal Server 6.1 First of all I want to say thanks a lot for resolving the issue WICKET-2058 to Ate, Thijs and Antony!\nI checked out the revision 739543 from trunk and experimented/tested a lot with the wicket examples within IBM Websphere Portal 6.1.\n\nI had to add the following lines into web.xml to get the first example-portlets visible in my browser:\n\n  <context-param>\n    <param-name>org.apache.wicket.detectPortletContext</param-name>\n    <param-value>true</param-value>\n  </context-param>\n\nThe next problem I stumbled over was that the generated links (e.g. BookmarkablePageLink<Void>(\"link\", PageXY.class) ) did not work at all.\nI traced the problem down to the point that the generated wicketURL in PortletRequestContext.encodeRenderURL includes all query-parameters but the PortletFilter does \nnot get them as parameters, just the path-part.\n\n\nWicketPortlet.processRequest:\n\n\tPortletRequestDispatcher rd = getPortletContext().getRequestDispatcher(wicketURL);\n\n\tif (rd != null)\n\t{\n\t\t// delegate to wicket filter - this is where the magic happens\n\t\trd.include(request, response);\n\t\t...\n\nLet's assume wicketURL has the value of \"/repeater/?wicket:interface=:8:oir:17:toggleHighlite:2:ILinkListener::\", the result would be the same as the value of \"/repeater/\".\nI was able to fix it by applying the query parameters as \"real\" parameters to the javax.portlet.PortletURL for Action and Render-URLs (see Patch for PortletRequestContext).\n\nAfter that I had the same problem with form-submission. The form-values came in perfectly to the model, but after leaving the ACTION-PHASE the state was all gone in RENDER-PHASE. \nSo I did the same in WicketPortlet.processActionResponseState and applied all wicketURL-query parameteters to the response (setRenderParameter). see Patch for WicketPortlet.\n\nAnother solution could be a PortletRequestWrapper within the WicketFilter implementation. Or does anybody have a better idea?\n\nIt would be really great to see this issue fixed in wicket 1.4!\n\nI'll keep on testing the next days with the ajax examples (some worked already with the provided patch applied) and WPS 6.1...",
        "Relative path calculation goes wrong in construction phase for a hybrid-mounted page When a page is mounted using a hybrid strategy, calculating the relative path to the context goes wrong during the construction of components because when the page is constructed during a request and then redirected to using the hybrid mounting strategy, the original calculation is off.\n\nFor example:\n\nGET /app/?wicket:interface=:9:layHeader:mainmenu:mainMenuItems:1:mainMenuItem:div:link::ILinkListener::\n\nGives an empty relative path to the Wicket handler, which is correct. Now if this link sets the response page to a new page instance (not a bookmarkable one), this will result in a redirect after render to:\n\n/app/mount/path.13\n\nHowever, the string retrieved  during the construction of the page will point to ../img/foo.png instead of the correct ../../img/foo.png\n\n"
    ],
    [
        "WICKET-2573",
        "WICKET-4182",
        "Allow applications to chose not to use CGLIB proxies for @SpringBean injections Spring beans fetched from the spring context and injected into wicket components are currently proxied using CGLIB before being injected. These proxies are serializable, as required by the Servlet specification.\r\n\r\nHowever, this proxying puts restrictions on the beans being injected. If CGLIB cannot create the proxy (e.g. if the class to proxy has no default constructor, although there are other scenarios), then this technique does not work. Given that Spring beans can take on many obscure forms (Spring is less restrictive than CGLIB), this means that not all Spring beans can be injected.\r\n\r\nThe simplest solution to this problem is to allow applications to specify that the injected Spring beans should not be proxied. Clearly, this should not be the default behaviour, since there's no guarantee that Spring beans are properly serializable. However, in many cases the developer knows this not to be an issue, either because they know the Spring beans are serializable (and will not drag half the appcontext along with them in the process), or because they know their container does not serialize sessions. In these situations, non-serializable objects are acceptable.\r\n\r\nIt is trivial to modify SpringComponentInjector to support this behaviour. See attached patch.",
        "Back button and multiple tabs with forms There are two issues I want to report. If they are bugs og features, I don't know, but they cause trouble for our application if we are supposed to upgrade from 1.4.18 to 1.5.2.\r\n\r\nIssue 1 - Multiple tabs: We have two pages with forms, open up PageA in one tab and PageB in a second tab (in this order). Then we fill in data in PageA and submit, and then open tab with PageB and fill in data. If we check the model and domain objects none of the submits have been attached to the model. Only the newest opened tab is actually submitting data to the model.\r\n\r\nIssue 2 - Back button: We have two pages with forms - fill in data in PageA and submit - this redirects to PageB (also has a form) and use the back button to get to PageA. Now we change values and submit again. The new values are not submitted to the model.\r\n\r\nI'll attach a quickstart on this."
    ],
    [
        "WICKET-2564",
        "WICKET-5293",
        "Modify wicket-devutils DebugBar so it emits valid XHTML It would be nice if the DebugBar would emit valid XHTML.\r\n\r\nIn its current form, it emits img elements that lack the necessary alt attribute. This means that when you include a DebugBar on your page, it will cause XHTML validation of that page to fail.\r\n\r\nThis is a minor issue, but the fix is also very simple: just add alt attributes to the DebugBar img elements.\r\n\r\nI will attach a patch.",
        "MessageSource resource key traversal logic short-circuited and throws exception when useDefaultOnMissingResource is false and throwExceptionOnMissingResource is true MessageSource, when dealing with a validation error, will traverse resource keys from most specific to most general. This mechanism allows you to use one resource across multiple validators.\r\n\r\nHowever, as it uses a Localizer to check for the existence of the most specific message, it will never try any more general resource keys when getApplication().getResourceSettings().getUseDefaultOnMissingResource is false and getApplication().getResourceSettings().getThrowExceptionOnMissingResource is true - the Localizer throws the exception which MessageSource.getMessage does not handle.\r\n\r\nThis means that you cannot reuse resources by giving them generalised keys. \r\n\r\nPlease see the attached quick starts for working demonstrations."
    ],
    [
        "WICKET-1139",
        "WICKET-216",
        "Wicket html files do not have xml prolog We want to enforce all our pages to explicitly specify xml prolog in order to avoid troubles with encodings (unfortunately we are not ASCII-speaking). We want to do that by specifying invalid defaultMarkupEncoding. This way we will get exceptions for all htmls that didn't declare encoding. However it is not possible at the moment because many wicket built-in html files do not have xml prolog.\n\nFix is very simple: just add <?xml version=\"1.0\" encoding=\"UTF-8\" ?> to your html files.",
        "ajax requests increment page version Ajax requests increase page version. Johan promised to fix this soon.   here's the incentive!"
    ],
    [
        "WICKET-1214",
        "WICKET-5288",
        "WicketTester#startPanel does not work (correctly) WicketTester#startPanel(class<? extends Panel>) does not work with the assertions:\n\nWicketTester tester = new WicketTester();\ntester.startPanel(HelloWorldPanel.class);\ntester.assertLabel(\"message\", \"Hello, World!\");\n\nWill throw an exception because \"message\" can't be found. In the response page the panel is added with component identifier \"panel\". However as a tester I expect to be able to assert the components directly without having to know what happens internally.\n\n",
        "Allow <script>-Tags act as WebMarkUpContainer to add Child-Components Since JQuery Templates are more and more commonly used, it could be a nice feature to let <script>-Tags act as WebMarkUpContainer.\r\n\r\ne.g. adding an InputField with an AjaxEventBehavior...\r\n{code:html}\r\n\r\n<script type=\"text/x-jquery-template\" wicket:id=\"scriptMarkUpContainer\">\r\n  <input wicket:id=\"inputXYZ\" type=\"text\" />\r\n</script>\r\n\r\n{code}\r\n\r\n{code:java}\r\n\r\nWebMarkUpContainer scriptAsTemplate = new WebmarkUpContainer(\"scriptMarkUpContainer\");\r\n\r\nTextField t = new TextField(\"inputXYZ\");\r\nt.add(new AjaxEventBehavior(\"click\"){...});\r\n\r\nscriptAsTemplate.add(t);\r\n\r\n{code}"
    ],
    [
        "WICKET-1801",
        "WICKET-3210",
        "Make AbstractDefaultAjaxBehavior.findIndicatorId() protected When adding an AJAX behavior to a component it is sometimes awkward to have to implement IAjaxIndicatorAware since it can't be done with an anonymous inner class. It would be handy to simply override AbstractDefaultAjaxBehavior.findIndicatorId() and return the ID of the indicating component directly.",
        "Wrong text encoding when receiving multipart forms data There is problem with getting data from multipart forms in proper encoding (e.g. UTF-8). When user puts his national characters in such form,  he gets them messed - more descriptive information: http://www.mail-archive.com/users@wicket.apache.org/msg58119.html"
    ],
    [
        "WICKET-2496",
        "WICKET-1076",
        "problems with ISO-8859-1 to UTF-8 convertion With WICKET-2451was introduced new logic that allows to create property files on UTF-8. Old property files in ISO-8859-1 are supposed to be converted on the fly to UTF-8. Don't know exactly what is failing but the result is that pages that displayed fine with wicket-1.4.1 no longer do with 1.4.2. I attach a quick-start showing the problem.  ",
        "SubmitLink component does not render markup id wicket.markup.html.form.SubmitLink component does not render markup id (even if setOutputMarkupId(true) was used), because it doesn't use a super method onComponentTag."
    ],
    [
        "WICKET-1916",
        "WICKET-5682",
        "setResponsePage(Application#getHomePage()) mounted as / (default) vs. ajax requests Hi,\n\nI'm using a week old version of wicket 1.4-SNAPSHOT and there is one ugly bug ... in ajax request cannot be send redirect to homepage ... setResponsePage(Application#getHomePage()) because there is return onlu one byte as the response a in Ajax Debug Console I see this: \n\n---\nINFO: Using XMLHttpRequest transport\nINFO: \nINFO: Initiating Ajax POST request on ?wicket:interface=:3:loginSwitchPanel:loginPanel:form:submit::IActivePageBehaviorListener:0:&wicket:ignoreIfNotActive=true&random=0.03614674718119204\nINFO: Invoking pre-call handler(s)...\nINFO: Received ajax response (1 characters)\nINFO: \n \nERROR: Error while parsing response: Could not find root <ajax-response> element\nINFO: Invoking post-call handler(s)...\nINFO: Invoking failure handler(s)...\n---\n\nIf I mount the homepage to for example /home then is all ok.\n\nI can try to compile last trunk version of wicket 1.4-SNAPSHOT but there is 7 failed tests:\n\nFailed tests:\n  testAjaxHeaderContribution(org.apache.wicket.ajax.AjaxHeaderContributionTest)\n  testDoubleAjaxHeaderContribution(org.apache.wicket.ajax.AjaxHeaderContributionTest)\n  testBufferedExceptionErrorPage(org.apache.wicket.protocol.http.WebResponseExceptionsTest)\n  testExceptionErrorPage(org.apache.wicket.protocol.http.WebResponseExceptionsTest)\n  testExpirePage(org.apache.wicket.protocol.http.WebResponseExceptionsTest)\n  testInternalErrorPage(org.apache.wicket.protocol.http.WebResponseExceptionsTest)\n  testDomReadyOrder(org.apache.wicket.ajax.DomReadyOrderTest)\n\nTests run: 722, Failures: 7, Errors: 0, Skipped: 0\n---\n\nThx for help!\nH.\n",
        "AbstractAjaxTimerBehavior fails to trigger AbstractAjaxTimerBehavior fails to trigger in some circumstances. Wicket.Event.add is called to trigger Wicket.Timer.set on the load event. The code in Wicket.Event.add adds a domready listener, which registers the onload listener as soon as the dom is ready. However, the browser fires onload before it fires domready, therefore the registered listener is never triggered and Wicket.Timer.set is not called.\r\n\r\nI'm not sure if this behavior is specific to recent versions of Google Chrome, but it happens quite consistently (but not always). I think a special case for onload is needed:\r\n$(window).load(function() {\r\n    $(document).ready(function() { ... });\r\n});"
    ],
    [
        "WICKET-2412",
        "WICKET-5028",
        "Add dev time check for empty src=\"\" attribute that can cause problems aka: <img src=\"\" ...> tags are truely evil!\r\n\r\nhttp://www.nabble.com/%3Cimg-src%3D%22%22-...%3E-tags-are-truely-evil!-td24792349.html",
        "Update Spring dependency because of classpath conflicts with cglib Scenario:\r\nI'm using Groovy (2.1.0) in my Wicket application which has a dependeny to asm 4.0. Wicket itself depends on cglib 2.2.2 which brings asm 3.3.1.\r\n\r\n-> multiple versions of asm on the classpath -> not amused ;-)\r\n\r\nSo, I learned that Spring inlines cglib (3.0) and asm (4.0) since Spring 3.2. Would it be possible that Wicket - i.e. wicket-spring and/or wicket-ioc - depends on Spring 3.2.x, so that the dependeny to cglib can be dropped?\r\n\r\nI'm attaching a patch to demonstrate what this could mean. Only drawback I discovered so far: wicket-ioc whould then depend on spring-core, currently there's no dependeny on Spring in wicket-ioc.\r\n\r\nAs an alternative we could also inline the required cglib/asm libs - as Spring also does - to avoid classpath conflicts with different version."
    ],
    [
        "WICKET-1665",
        "WICKET-589",
        "TabbedPanel gives \"Page expired\"  In Firefox, clicking a TabbedPanel Link quickly several times leads to\na \"Page expired\" error. In IE things work as expected.",
        "problem with Ajax and rendering Problem description copied from the mailing list:\nAfter upgrading from wicket 1.3 beta 1 to a build based on revision 540588, I get the following error message:\n18:49:19.245 [btpool0-2] ERROR org.apache.wicket.RequestCycle - The\ncomponent(s) below failed to render. A common problem is that you have\nadded a component in code but forgot to reference it in the markup\n(thus the component will never be rendered).\n\n1. [MarkupContainer [Component id = progressBarStylesheet, page =\norg.xoocode.xooctory.web.pages.dashboard.Dashboard, path =\n2:projects-panel:projects:6:leftTimePanel:progressBar:progressBarStylesheet.StyleSheetReference,\nisVisible = true, isVersioned = false]]\n\nThe problem is that the component is properly added, and it worked\nbefore upgrading, so...\n\nSo I've tried to track down the problem, and I've not found the source\nof the problem. As a workaround I disable check rendering with:\ngetDebugSettings().setComponentUseCheck(false);\nThen everything works properly, and the component (a style sheet) is\nproperly rendered.\n\nLet me explain a little bit more the situation in which the problem occurs.\nThe component which is causing the problem is a StyleSheetReference\nadded to a panel. The markup contains the corresponding link in a\nwicket:head section.\nThe panel is invisible when the page is loaded, but then I use an ajax\nlink to trigger an action, which later triggers the visibility of this\ncomponent to true. Then this component is refreshed by an AjaxTimer\n(actually I use wicket-contrib-push, but I don't think it really makes\na difference, since it's using a simple AbstractAjaxTimerBehavior\nunderneath). And that's when the component is rendered that the check\nrendering is failing. Some analysis shown that there's a\nStyleSheetReference with the good id in the renderedComponent\nattribute of Page, but it isn't the exact same StyleSheetReference\ninstance as the one checked by the checkRendering method. For the\nmoment I haven't managed to really see why I have two instances, what\ndoesn't help is that it seems that when I debug, the problem goes away\ndepending on the occurence of other timer based ajax requests.\n\nFor more details the sources are available here:\nProgressBar.java\nhttp://www.xoocode.org/wsvn/xoocode/org.xoocode.xooctory/trunk/xooctory/src/main/java/org/xoocode/xooctory/web/component/ProgressBar.java?op=file&rev=189&sc=0\nProgressBar.html\nhttp://www.xoocode.org/wsvn/xoocode/org.xoocode.xooctory/trunk/xooctory/src/main/java/org/xoocode/xooctory/web/component/ProgressBar.html?op=file&rev=166&sc=0"
    ],
    [
        "WICKET-3499",
        "WICKET-2703",
        "org/apache/wicket/request/cycle/RequestCycleListenerTest MockRequestCycle setResponse In org/apache/wicket/request/cycle/RequestCycleListenerTest MockRequestCycle is this \r\nmethod correct:\r\n\r\n  \r\n    public Response setResponse(Response response)\r\n    {\r\n      return response;\r\n    } \r\n",
        "DisplayTag library and wicket - sort  doesn't work Used:\r\n- Use wicket 1.4.1 or higher (also tried on 1.4.3 and 1.4.5)\r\n- Use DisplayTag library 1.2\r\n- No changes made to wicket example files, such as ExampleSorting.java, ExampleSorting.html, etc...\r\n\r\n- Download Wicket-examples\r\n- Open Wicket examples display tag page. Should look like this http://wicketstuff.org/wicket12/displaytag\r\n- And then \"Auto-sorting by columns\"\r\n- Click on any column header. For example \"email\"\r\n\r\n\r\nResult:\r\n\r\n-URL became: http://localhost:8888/es?wicket:interface=:13:header:email:actionLink::ILinkListener::\r\n- Error: org.apache.wicket.WicketRuntimeException: component header:email:actionLink not found on page [...].test.ExampleSorting[id = 13], listener interface = [RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()]\r\n- StackTrace:\r\norg.apache.wicket.protocol.http.request.InvalidUrlException: org.apache.wicket.WicketRuntimeException: component header:email:actionLink not found on page org.jbei.ice.web.test.ExampleSorting[id = 13], listener interface = [RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()] at org.apache.wicket.protocol.http.WebRequestCycleProcessor.resolve(WebRequestCycleProcessor.java:262) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1310) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428) at org.apache.wicket.RequestCycle.request(RequestCycle.java:545) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:468) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:301) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:722) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:404) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450) Caused by: org.apache.wicket.WicketRuntimeException: component header:email:actionLink not found on page org.jbei.ice.web.test.ExampleSorting[id = 13], listener interface = [RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()] at org.apache.wicket.request.AbstractRequestCycleProcessor.resolveListenerInterfaceTarget(AbstractRequestCycleProcessor.java:426) at org.apache.wicket.request.AbstractRequestCycleProcessor.resolveRenderedPage(AbstractRequestCycleProcessor.java:471) at org.apache.wicket.protocol.http.WebRequestCycleProcessor.resolve(WebRequestCycleProcessor.java:144) ... 20 more "
    ],
    [
        "WICKET-968",
        "WICKET-1619",
        "Wicket Calendar Not Appearing When A Validation Error Occurs. After loading a page, I encounter no errors.\nThe calendar appears properly.\n\nHowever,\n\n\nMy problem is that whenever I encounter a validation error in my form, the wicket calendar does not show up already.\nIt will not appear at all in the screen already.\n\nI'm using the latest repository snapshots.\n\n\nimport org.wicketstuff.calendar.markup.html.form.DateField;\n\nThis field is what I'm using.",
        "PagingNavigator.setEnabled(false) doesn't work  1. Create paging navigator PagingNavigator \n2. call PagingNavigator.setEnabled(false)\n3. navigator will be rendered as enabled, if click on any link (\"1\", \"2\" etc) - content of the data view will be changed.\n\nIn many cases it's necessary disable navigator, for example, when user need to edit only single line of DataView other controls need to be disabled. "
    ],
    [
        "WICKET-2625",
        "WICKET-5409",
        "WICKET-2478 correction are break By increasing the array before checking with 1 the code will work when user add only one tab to component...\r\nThe applied solution break the correction made for the issue WICKET-2478\r\nI propose:\r\n++\t\tif (tabsVisibilityCache == null || tabsVisibilityCache.length != tabs.size())\r\n\t\t{\r\n\t\t\ttabsVisibilityCache = new Boolean[tabs.size()];\r\n\t\t}\r\n\r\n--\t\tif (tabsVisibilityCache.length < tabIndex + 1)\r\n--\t\t{\r\n--\t\t\tBoolean[] resized = new Boolean[tabIndex + 1];\r\n--\t\t\tSystem.arraycopy(tabsVisibilityCache, 0, resized, 0, tabsVisibilityCache.length);\r\n--\t\t\ttabsVisibilityCache = resized;\r\n--\t\t}",
        "wicket-native-websocket does not work with Safari/Safari iOS I noticed issue when tried this sample app: https://github.com/martin-g/blogs/tree/master/wicket6-websocket-broadcast\r\n\r\nBrowsers I tried:\r\nFirefox v25.0\r\nChrome v30.0.1599.101\r\nSafari v6.1\r\n\r\nBroadcast example seems to be not working with Safari:\r\nFirefox - works (broadcast messages displayed),\r\nChrome - works,\r\nSafari - no broadcast messages displayed, console shows error: WebSocket connection to 'ws://localhost:8080/feed?0&pageId=0&wicket-ajax-baseurl=feed?0' failed: Error during WebSocket handshake: 'Connection' header value is not 'Upgrade'\r\n\r\nAfter bunch of different tests, decided to create basic wicket quickstart app - one home page with WebSocketBehaviour added, got same results:\r\nFirefox - works (no errors in console, websocket connection estabished),\r\nChrome - works,\r\nSafari - websocked connection fails, console shows error: WebSocket connection to 'ws://localhost:8080/?0&pageId=0&wicket-ajax-baseurl=?0' failed: Error during WebSocket handshake: 'Connection' header value is not 'Upgrade'\r\n\r\nAnother example (jetty chat app on websockets, unrelated to wicket) that I tested with minor fixes (upgraded to 7.6.9 jetty): http://webtide.intalio.com/wp-content/uploads/2011/08/example-websocket.zip\r\nChat example works for all three browsers: Firefox, Chrome and Safari.\r\n\r\nSeems that wicket-native-websocket integration has issues with Safari."
    ],
    [
        "WICKET-4745",
        "WICKET-341",
        "Allow to set initial state of DebugBar to expanded / collapsed The current implementation of DebugBar initially loads in expanded state and can be collapsed by clicking on it. \r\n\r\nIf possible I would like to be able to set the initial state of the DebugBar from code.\r\n\r\nRight now I'm using \r\n\r\n@Override\r\npublic void renderHead(final IHeaderResponse response) {\r\n   super.renderHead(response);\r\n   response.renderOnLoadJavaScript(\"wicketDebugBarCollapse();\");\r\n}\r\n\r\nas a workaround.",
        "[Patch] AjaxServerAndClientTimeFilter either throws an exception or displays a wrong text When IResourceSettings.getThrowExceptionOnMissingResource() is true (the default value), the AjaxServerAndClientTimeFilter throws MissingResourceException instead of displaying a default message \"Server parsetime: X, Client parsetime: Y\".\n\nMoreover, when \"ServerAndClientTimeFilter.statustext\" and \"ajax.ServerAndClientTimeFilter.statustext\" resource keys are defined, it does not throw the exception, but a wrong message is displayed --- ${servertime} and ${clienttime} variables in the resource string are not interpolated.\n\nThe attached patch fixes both bugs."
    ],
    [
        "WICKET-3709",
        "WICKET-3309",
        "SignInPanel shouldn't hard code input field size Both the username and password input fields have a hard coded size attribute of 30. This should be removed and left up to the developer how to style and size these fields.",
        "unable to add nodes to an empty rootless Tree (e.g. LinkTree) 2 scenarios which adding new nodes (via ajax) to a rootless Tree is not working as expected.\r\nthe node is getting added to the treemodel but non is displayed.\r\n\r\n1) adding a node to the rootnode. the newly added node is not displayed.\r\n2) the rootless tree already has a node. if you add additional nodes to the root node, they will be displayed (compare to 1), if you add an additional node to one of the added nodes, the complete tree will disappear.\r\n\r\nsee attached quickstart"
    ],
    [
        "WICKET-626",
        "WICKET-4312",
        "profile Wicket for 1.4.0 We should profile Wicket and search for (and fix) new bottlenecks we may have introduced since 1.2. We should give memory consumption a very good look and see if there is still room for optimizing.",
        "Do not strip the jsessionid from the url for resources Wicket should not strip the jsessionid from resources' url before rendering them in the header.\r\nIf the application is configured to use url rewriting instead of cookie based storage of the jsessionid this strip causes a new WebSession for each request to a resource.\r\n\r\nThis is a revert of the change for WICKET-3724."
    ],
    [
        "WICKET-413",
        "WICKET-4089",
        "Switch tree implementations for 1.3 I think we should switch implementations of the tree in core and in extensions. This was done for 2.0, so this can be considered a back port.",
        "Maven project created with maven archetype broken in chrome. The content div is compressed and unreadable. Opened the site with firefox and it was ok."
    ],
    [
        "WICKET-4581",
        "WICKET-5487",
        "AJAX autocomplete of wicket-examples not working The autocomplete is not working on wicket-6.0.0-beta2 on Firefox 12 and it was working on wicket-6.0.0-beta1.\r\n\r\nI've traced and the problem started with this commit:\r\nhttps://github.com/apache/wicket/commit/a1d5ef35b5167fffa2b7fb6ff718e72e2a29b431\r\n\r\nA simple workaround is to revert this commit (git revert a1d5ef3) and rebuild wicket, and everything seems to work fine (at least on Firefox 12).\r\n",
        "Request-scoped @SpringBean scoped-proxy throws IllegalStateException inside Atmosphere @Subscribe handler method Request-scoped {{@SpringBean}}'s work well in plain {{WebPage}}s. Where the bean is powered by a scoped-proxy.\r\n\r\nHowever, something like this:\r\n\r\n{code}\r\nimport org.apache.wicket.atmosphere.Subscribe;\r\n\r\n\t@SpringBean\r\n\tprivate TenantRef tenant;\r\n\r\n\t@Subscribe\r\n\tpublic void updatePlaceProgress(AjaxRequestTarget target, PlaceProgressGenerated ev) {\r\n\t\tif (ev.getTenantId().equals(tenant.getTenantId())) {\r\n\t\t\tlog.debug(\"[{}] updating placeProgressTable due to PlaceProgressGenerated {} with {} places\",\r\n\t\t\t\t\ttenant.getTenantId(), ev.getGenerationTime(), ev.getPlaceCompletions().size());\r\n\t\t\ttarget.add(placeProgressTable);\r\n\t\t}\r\n\t}\r\n{code}\r\n\r\nwill throw:\r\n\r\n{code}\r\njava.lang.IllegalStateException\r\n\r\nNo thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.\r\n\r\nat\u00a0org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131)\u00a0~[spring-web-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n\r\nat\u00a0org.soluvas.commons.tenant.RequestOrCommandScope.currentRequestAttributes(RequestOrCommandScope.java:42)\u00a0~[classes/:na]\r\n\r\nat\u00a0org.soluvas.commons.tenant.RequestOrCommandScope.get(RequestOrCommandScope.java:51)\u00a0~[classes/:na]\r\n\r\nat\u00a0org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:330)\u00a0~[spring-beans-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n\r\nat\u00a0org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\u00a0~[spring-beans-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n\r\nat\u00a0org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:34)\u00a0~[spring-aop-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n\r\nat\u00a0org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:184)\u00a0~[spring-aop-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n\r\nat\u00a0com.sun.proxy.$Proxy35.getTenantId(Unknown Source)\u00a0~[$Proxy35.class:na]\r\n\r\nat\u00a0sun.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)\u00a0~[na:na]\r\n\r\nat\u00a0sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0java.lang.reflect.Method.invoke(Method.java:606)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0org.apache.wicket.proxy.LazyInitProxyFactory$JdkHandler.invoke(LazyInitProxyFactory.java:435)\u00a0~[wicket-ioc-6.13.0.jar:6.13.0]\r\n\r\nat\u00a0com.sun.proxy.$Proxy162.getTenantId(Unknown Source)\u00a0~[$Proxy162.class:na]\r\n\r\nat\u00a0com.quikdo.guardian.web.GuardianOverviewPage.updatePlaceProgress(GuardianOverviewPage.java:98)\u00a0~[classes/:na]\r\n\r\nat\u00a0sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)(NativeMethodAccessorImpl.java)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0java.lang.reflect.Method.invoke(Method.java:606)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0com.zeroturnaround.javarebel.uV.invoke(JRebel:1078)\u00a0~[na:201312230953]\r\n\r\nat\u00a0java.lang.reflect.Method.invoke(Method.java)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0org.apache.wicket.atmosphere.SubscribeAnnotationEventSubscriptionInvoker.invoke(SubscribeAnnotationEventSubscriptionInvoker.java:43)\u00a0~[wicket-atmosphere-0.16.jar:0.16]\r\n\r\nat\u00a0org.apache.wicket.atmosphere.AtmosphereRequestHandler.invokeMethod(AtmosphereRequestHandler.java:104)\u00a0~[wicket-atmosphere-0.16.jar:0.16]\r\n\r\nat\u00a0org.apache.wicket.atmosphere.AtmosphereRequestHandler.executeHandlers(AtmosphereRequestHandler.java:81)\u00a0~[wicket-atmosphere-0.16.jar:0.16]\r\n\r\nat\u00a0org.apache.wicket.atmosphere.AtmosphereRequestHandler.respond(AtmosphereRequestHandler.java:70)\u00a0~[wicket-atmosphere-0.16.jar:0.16]\r\n\r\nat\u00a0org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861)\u00a0~[wicket-core-6.13.0.jar:6.13.0]\r\n\r\nat\u00a0org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)\u00a0~[wicket-request-6.13.0.jar:6.13.0]\r\n\r\nat\u00a0org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261)\u00a0~[wicket-core-6.13.0.jar:6.13.0]\r\n\r\nat\u00a0org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218)\u00a0~[wicket-core-6.13.0.jar:6.13.0]\r\n\r\nat\u00a0org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)\u00a0~[wicket-core-6.13.0.jar:6.13.0]\r\n\r\nat\u00a0org.apache.wicket.atmosphere.EventBus.post(EventBus.java:372)\u00a0~[wicket-atmosphere-0.16.jar:0.16]\r\n\r\nat\u00a0org.apache.wicket.atmosphere.EventBus.postToSingleResource(EventBus.java:348)\u00a0~[wicket-atmosphere-0.16.jar:0.16]\r\n\r\nat\u00a0org.apache.wicket.atmosphere.EventBus.post(EventBus.java:323)\u00a0~[wicket-atmosphere-0.16.jar:0.16]\r\n\r\nat\u00a0org.soluvas.web.site.AtmosphereApplication.bridgeToAtmosphere(AtmosphereApplication.java:58)\u00a0~[classes/:na]\r\n\r\nat\u00a0sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)(NativeMethodAccessorImpl.java)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0java.lang.reflect.Method.invoke(Method.java:606)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0com.google.common.eventbus.EventHandler.handleEvent(EventHandler.java:74)\u00a0~[guava-15.0.jar:na]\r\n\r\nat\u00a0com.google.common.eventbus.SynchronizedEventHandler.handleEvent(SynchronizedEventHandler.java:47)\u00a0~[guava-15.0.jar:na]\r\n\r\nat\u00a0com.google.common.eventbus.EventBus.dispatch(EventBus.java:314)\u00a0~[guava-15.0.jar:na]\r\n\r\nat\u00a0com.google.common.eventbus.AsyncEventBus.access$001(AsyncEventBus.java:34)\u00a0~[guava-15.0.jar:na]\r\n\r\nat\u00a0com.google.common.eventbus.AsyncEventBus$1.run(AsyncEventBus.java:100)\u00a0~[guava-15.0.jar:na]\r\n\r\nat\u00a0java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\u00a0~[na:1.7.0_25]\r\n\r\nat\u00a0java.lang.Thread.run(Thread.java:724)\u00a0~[na:1.7.0_25]\r\n{code}\r\n\r\nIt's understandable because the original web request had already been gone at the time the {{@Subscribe}} triggered.\r\n\r\nHowever, if this works as intended, what is the proper way to access beans \"as it was during the original request\"?"
    ],
    [
        "WICKET-4370",
        "WICKET-21",
        "HttpSession getSession() in MockHttpServletRequest is not compliant with the j2ee servlet spec The implementation of\r\nhttpRequest.getSession();\r\nfor MockHttpServletRequest seems not correct since it can return null when\r\nthe servler api specs\r\n(http://docs.oracle.com/javaee/1.4/api/) says:\r\n\r\npublic HttpSession getSession()\r\nReturns the current session associated with this request, or if the request\r\ndoes not have a session, creates one.\r\n\r\nSo as far as I understand\r\nhttpRequest.getSession(); and httpRequest.getSession(true); are equivalent\r\n\r\nThe MockHttpServletRequest implementation is\r\n\r\n   public HttpSession getSession()\r\n   {\r\n       if (session instanceof MockHttpSession &&\r\n((MockHttpSession)session).isTemporary())\r\n       {\r\n           return null;\r\n       }\r\n       return session;\r\n   }\r\n\r\nI think it should be \r\n   public HttpSession getSession()\r\n   {\r\n       return getSession(true);\r\n   }\r\n\r\n",
        "Inherit authorisation rules from base class Please make authorisation rules inheritable from the base class(es) of a component.\n\nThe following change will allow you to define authorization rules on some class. All sub-classes will automatically inherit these authorization rules.\nIt is easy to override this by explicitly adding authorization rules for a subclass.\n\nChange InstantiationPermissions#authorizedRoles to:\n\n    // TODO: make java 5 code by inserting generics again\n    public Roles authorizedRoles(final Class componentClass) {\n        if (componentClass == null) {\n            throw new IllegalArgumentException(\"Argument componentClass cannot be null\");\n        }\n\n        Class c = componentClass;\n        while (Component.class.isAssignableFrom (c) && !rolesForComponentClass.containsKey(c)) {\n            c = c.getSuperclass();\n        }\n        return (Roles) rolesForComponentClass.get(c);\n    }\n\nThis has been tested under a jrocket 1.4 jvm."
    ],
    [
        "WICKET-2662",
        "WICKET-2033",
        "Form.setMultiPart(true) doesn't work in IE8 I have a wizard. The wizard contains an initially hidden file upload, and a link that opens a ModalWindow. The Form inside the ModalWindow has setMultiPart(true), and the Form from the wizard has setMultiPart(true). When I click the buttons inside the ModalWindow, they work correctly in Firefox and Chrome. But in IE8, it fails with this error.\r\n\r\n2010-01-06 11:22:11,431 | http-8080-2 | ERROR | org.apache.wicket.RequestCycle | ServletRequest does not contain multipart content. One possible solution is to explicitly call Form.setMultipart(true), Wicket tries its best to auto-detect multipart forms but there are certain situation where it cannot.\r\njava.lang.IllegalStateException: ServletRequest does not contain multipart content. One possible solution is to explicitly call Form.setMultipart(true), Wicket tries its best to auto-detect multipart forms but there are certain situation where it cannot.\r\n\tat org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest.<init>(MultipartServletWebRequest.java:113)\r\n\tat org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest.<init>(MultipartServletWebRequest.java:83)\r\n\tat org.apache.wicket.extensions.ajax.markup.html.form.upload.MultipartRequest.<init>(MultipartRequest.java:41)\r\n\tat org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadWebRequest.newMultipartWebRequest(UploadWebRequest.java:66)\r\n\tat org.apache.wicket.markup.html.form.Form.handleMultiPart(Form.java:1661)\r\n\tat org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:853)\r\n\tat org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:135)\r\n\tat org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:177)\r\n\tat org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:299)\r\n\tat org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:119)\r\n\tat org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92)\r\n\tat org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1250)\r\n\tat org.apache.wicket.RequestCycle.step(RequestCycle.java:1329)\r\n\tat org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428)\r\n\tat org.apache.wicket.RequestCycle.request(RequestCycle.java:545)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:479)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:312)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\r\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845)\r\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\r\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\r\n\tat java.lang.Thread.run(Thread.java:619)\r\n",
        "&amp; instead of & in javascript the non httpsessionstore part of:\nhttps://issues.apache.org/jira/browse/WICKET-1971\n\nis that \n\nin the \nwicket:ignoreIfNotActive actually becomes\n\namp;wicket:ignoreIfNotActive=true\n\nin:\n\n\tprotected CharSequence encode(RequestCycle requestCycle,\n\t\t\tIListenerInterfaceRequestTarget requestTarget)\n\nof WebRequestCodingStrategy on the line:\n\n\t\t\turl.append(url.indexOf(\"?\") > -1 ? \"&amp;\" : \"?\").append(\n\t\t\t\t\tIGNORE_IF_NOT_ACTIVE_PARAMETER_NAME).append(\"=true\");\n\n\nso when this happens in \n\tpublic final RequestParameters decode(final Request request) {\n\n---\n\t\tif (request.getParameter(IGNORE_IF_NOT_ACTIVE_PARAMETER_NAME) != null)\n\t\t{\n\t\t\tparameters.setOnlyProcessIfPathActive(true);\n\t\t}\n---\n\nthis never actually happens.\n\n\nthen if you have a throttle, ajaxlazyloadpanel etc with onlyprocessifpathactive set to true, and you logout, but go to another wicket page, then the original session is destroyed and a new one is created\n\nif this is worked around in the way the  guys on WICKET-1971 suggest,\nWebRequestCycleProcessor\n\nmethod\n\n\tpublic IRequestTarget resolve(final RequestCycle requestCycle,\n\t\t\tfinal RequestParameters requestParameters)\n\n\n\t\t\t\tif (requestParameters.isOnlyProcessIfPathActive())\nlast branch falls through:\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// TODO also this should work..\n\t\t\t\t\t}\n\n\nand it throws PageExpiredException because the request component/page/behavior does not exist in this new session.   even though onlyprocessifpathactive was set to true, and it's purpose is precisely to avoid pageexpiredexception."
    ],
    [
        "WICKET-1003",
        "WICKET-5065",
        "Modal Window Does Not Close When Using IndicatingAjaxButton I have  a panel in my modal window. I have a button in my panel that closes the modalwindow.\nIf I use an indicatingajaxbutton for that button, the modalwindow does not close properly.\n\nHowever if i use an ajaxlink, things go smoothly.",
        "Improve UrlRenderer to be able to render urls without scheme and/or host  UrlRenderer can be improved to support rendering urls like:\r\n- //hostname:1234/a/b\r\n- //hostname/a/b\r\n- /a/b"
    ],
    [
        "WICKET-242",
        "WICKET-312",
        "Modal Window always creates new cookies Unless window.setCookieName is called manually, every instance of modal window creates new browser cookie. After some time, certain browsers can lose jsessionid cookie resulting in session expiration exception.",
        "AjaxFormComponentUpdatingBehavior doesn't call onError when FormComponent is not valid in onEvent method, FormComponent is validated and when it is valid, model is updated. But when component is invalid onUpdate method is still called. I would be expecting onError method to be called when FormComponent is invalid such as in AjaxFormSubmitBehavior."
    ],
    [
        "WICKET-2907",
        "WICKET-2217",
        "CSRF vulnerability when enabling AutomaticMultiWindowSupport and using AJAX and BookmarkablePageLink features When using the default URL coding strategy, along with automaticmultiwindowsupport set to true, any bookmarkablepagelink may be modified to enable injection of arbitrary javascript code.  ",
        "Add MD5 checksum to FileUpload component for uploaded files Would be nice if the FileUpload component provided the MD5 checksum of the file uploaded. "
    ],
    [
        "WICKET-580",
        "WICKET-2415",
        "add EmptyPanel class add EmptyPanel class\n\nThis class was discussed on wicket-dev:  http://www.nabble.com/EmptyPanel--tf3692546.html\n",
        "Estonian translation for StringValidator.minimum contains ${mimimum} instead of ${minimum} apache-wicket-1.4.0\\src\\wicket\\src\\main\\java\\org\\apache\\wicket\\Application_et.properties\r\nEstonian translation for StringValidator.minimum contains ${mimimum} instead of ${minimum}. This causes the application to crash when using this validator and active language is Estonian.\r\n\r\n(Older versions should also be affected by this, maybe since the version that added Estonian translation.)"
    ],
    [
        "WICKET-50",
        "WICKET-4893",
        "Fix license headers in all source files Apache license headers are needed in all files containing any creativity. This is a rather vague criterium. Discussion is still open on what to do with the headers when an application is deployed for javascript, css and html files.",
        "AutoCompleteTextField removes DropDownChoice from Page Following Situation with Internet Explorer 8:\r\n\r\nI add two Components on a Page.\r\n\r\nA AutoCompleteTextField and beneath a DropDownChoice\r\n\r\nIf i type something into the AutoCompleteTextField, a suggestionlist appears and hides the DropDownChoice.\r\nThe DropDownChoice disappears from the Page and is not visible anymore.\r\n\r\nNote: In Firefox and Chrome the DropDownChoice doesn't disappear from the page."
    ],
    [
        "WICKET-1297",
        "WICKET-2108",
        "PasswordTextField.onComponentTag helpful if not final PasswordTextField.onComponentTag is final, unlike the other form components I've seen, which removes a good hook for adding different behaviour.",
        "wicket-extensions demos out of service The demo section of wicket extensions seems to be out of services.\n-> The page you requested has expired.\nThis comes on a fresh session.\n\nThe overview page renders\nhttp://www.wicketstuff.org/wicket13/ajax/\nbut the demos dont work, and the source code is not available.\n\nSorry for bugging this forum, but the example code is the only resource for me to learn about using the components."
    ],
    [
        "WICKET-550",
        "WICKET-4859",
        "Use WebRequestEncoder everywhere a query string is constructed ",
        "Integer overflow in AbstractToolbar private static int counter = 0;\r\n\r\nThis counter will overflow anytime... Please remove static."
    ],
    [
        "WICKET-590",
        "WICKET-2380",
        "RelativePathPrefixHandler and WicketMessageTagHandler conflict \nWe have a bit of an issue with IMarkupFilter implementations, in that you can't currently layer two different IComponentResolvers if they both want to alter the same thing.\n\nThis is currently an issue for SimplePageTest for testRenderHomePage_7, which is why that's failing.\n\nSpecifically, it goes:\n<input type=\"image\"\n       src=\"test.gif\"\n       wicket:message=\"attr-name:i18n-key\">test 2</input>\n\nCorrect behaviour here is:\n - Prepend the src attribute with \"../\" links to make it\n   context-relative.\n - Add an attribute \"attr-name\" with the appropriate i18n message.\n\nMarkupParser adds WicketMessageTagHandler is before the RelativePathPrefixHandler, so currently that \"wins\" and resolves the component first. It doesn't get added as a RelativePathPrefixHandler auto-add component, so the behaviour to prefix URLs isn't added, so the src attribute remains \"test.gif\", not \"../test.gif\" and the test fails.\n\nWe need to somehow support chaining these things together, but I'm not sure how - it's really not obvious. ",
        "Simplify settings API There are a million and one settings for wicket and I normally don't have the faintest idea in where to look for them.  Content assist does not help much because the Application API is enormous.  I suggest making a single Application getter getSettings() which then has getSessionSettings(), getDebugSettings, getFrameworkSettings(), getResourceSettings() ...\r\n\r\nWhat would really make it easier for me to use is if there was also a combined option: getAllSettings() that returned a delegate object that implements all of the settings interfaces ISessionSettings etc.\r\n\r\nThis uber-settings \"view\" would make it a lot easier to find a setting which you know the name of but not wether of which type it is.\r\n\r\nJust an idea."
    ],
    [
        "WICKET-2814",
        "WICKET-3168",
        "Complete Support of Separation of Markup from Java Files First sentence on wicket.apache.org:\r\n\"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML,\r\nApache Wicket makes developing web-apps simple and enjoyable again.\"\r\n\r\nThis mark-up/logic separation is indeed quite good and there is no doubt about it.\r\n\r\nHowever, its default configuration, and this is the only one that the excellent IDE plugin for NetBeans supports, requires that HTML files are stored in the same Java package directory as the corresponding Java source files.\r\n\r\nOne reason for this request is that I want to use IDE support for HTML files not only for Java files. The other reason is that the disadvantages of storing HTML files in Java packages keep piling up, because it is just bad practice and it is an uphill battle to get tools to cooperate.\r\n\r\nRequests for information about alternate storage locations are responded to with a reference to Wicket's extension mechanisms that indeed allow the HTML files to be stored anywhere.\r\n\r\nPlease refer to \"Control where HTML files are loaded from\" at http://cwiki.apache.org/WICKET/control-where-html-files-are-loaded-from.html\r\n\r\nWhile this extension mechanism seems elegant at first, it exists only in theory because it does not achieve the results that developers have in mind - in fact it creates additional problems and finally some developers who try it don't use it.\r\n\r\nEditors cannot resolve paths of resources e.g. style sheets, script files referred to by source attributes. It is inconvenient to not find resource files e.g. JavaScript files in the same directory structure as the HTML/Java files because an editor cannot resolve a relative path in the src attibute. Example: <script src=\"jslib/jquery-1.3.2.min.js> does not exist in java packages.\r\n\r\nNew IDE markup editing features such as HTML code completion and refactoring cannot be used in this configuration.\r\n\r\nThere are other heavy disadvantages of the current default such as performance issues with deploy on save.\r\n\r\nThe \"Deploy on Save\" feature in IDE development is a great time saver as it reduces the\r\nredeployment after single file changes to the redeployment of single files. HTML file changes\r\nhave neglegible impact on the development process because they are only copied from the web directory.\r\n\r\nHowever if web files are in the java package directory then due to assumptions that the IDE makes, the whole application has to be reloaded which is an expensive, irritating process.\r\n\r\nThis is a request to make file separation the default, and implement a change to make it work.\r\n\r\nThe default should be a HTML package structure that mirrors the Java package structure.\r\nThe default location in the document root should be masked by the url-pattern entry in the filter mapping in the web.xml file e.g. /wicket so that the static content is invisible by the web server.\r\n\r\nResolve paths such as \"../../style.css\" relative to the package structure not root as present e.g, \"style.css\".\r\n",
        "No Application in the thread when the web server destroys WicketFilter Playing with Wicket 1.5 + Google AppEngine I saw this exception after modifying appengine-web.xml:\r\n\r\nWARNING: EXCEPTION \r\norg.apache.wicket.WicketRuntimeException: There is no application attached to current thread Timer-2\r\n\tat org.apache.wicket.Application.get(Application.java:250)\r\n\tat org.apache.wicket.Session.get(Session.java:154)\r\n\tat org.apache.wicket.page.DefaultPageManagerContext.getSessionAttribute(DefaultPageManagerContext.java:63)\r\n\tat org.apache.wicket.pageStore.memory.HttpSessionDataStore.getPageTable(HttpSessionDataStore.java:130)\r\n\tat org.apache.wicket.pageStore.memory.HttpSessionDataStore.destroy(HttpSessionDataStore.java:116)\r\n\tat org.apache.wicket.pageStore.DefaultPageStore.destroy(DefaultPageStore.java:66)\r\n\tat org.apache.wicket.page.PersistentPageManager.destroy(PersistentPageManager.java:374)\r\n\tat org.apache.wicket.page.PageManagerDecorator.destroy(PageManagerDecorator.java:86)\r\n\tat org.apache.wicket.Application.internalDestroy(Application.java:839)\r\n\tat org.apache.wicket.protocol.http.WebApplication.internalDestroy(WebApplication.java:440)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.destroy(WicketFilter.java:437)\r\n\tat org.mortbay.jetty.servlet.FilterHolder.destroyInstance(FilterHolder.java:127)\r\n\t....\r\n\r\nI.e. the asynchronous thread that destroys WicketFilter has no ThreadContext thread local and thus this exception.\r\n\r\nI see two problems/solutions:\r\n1) HttpSessionDataStore should have noop #destroy() - the Application is being destroyed, so all its http sessions will be deleted and there is no need to clean the special attribute which stores session's pages\r\n2) WicketFilter#destroy() can set/unset the application in ThreadContext, so other functionality in all #destroy() methods will have access to the Application via Application.get()\r\n\r\nAny objections ?"
    ],
    [
        "WICKET-2332",
        "WICKET-1274",
        "Open up Markup ctor and MarkupContainer#renderNext -1- Change org.apache.wicket.markup.Markup#Markup(): from default to public\r\n-2- Change org.apache.wicket.MarkupContainer#renderNext(MarkupStream): from private to protected (it stays final)\r\n\r\nRationale from the dev e-mail list:\r\n\r\nErik van Oosten wrote:\r\n-----------\r\nHi,\r\n\r\nI am writing a Swing like layout manager (with MIG layout manager's API \r\nas inspiration). The layout manager will generate HTML, but also has the \r\nability to override this with HTML defined by the user. I have a \r\nprototype that does this. It takes elements from the current \r\nMarkupstream, adds the elements that are missing, and then some more to \r\nfacilitate the layouting (well the last step is next on my todo list). \r\nThese elements are then put in a new markupstream that is used to drive \r\nonComponentTagBody of the layout component.\r\n\r\nFor this to work I had to open up 2 things:\r\n- org.apache.wicket.markup.Markup#Markup(): from default to public\r\n  I could have written my own implementation of IMarkup, but that seems \r\na bit overkill as I need exactly what is in Markup.\r\n\r\n- org.apache.wicket.MarkupContainer#renderNext(MarkupStream): from \r\nprivate to protected (don't care if it stays final)\r\n  My onComponentTagBody implementation is loosely based on method \r\norg.apache.wicket.MarkupContainer#renderAssociatedMarkup(String,String). \r\nOne of the methods I need to call to render children seems to be renderNext.\r\n\r\nCould these two be opened up?\r\n-----------\r\n\r\nJuergen Donnerstag wrote:\r\n-----------\r\nI don't mind open up both, as long as renderNext() stays final and we\r\ntag it as \"THIS IS WICKET INTERNAL\".\r\n-----------\r\n",
        "Only properties from first panel-implementation loaded when using different implementations of an abstract panel on the same page Extract from the Mailinglist entry on: http://www.nabble.com/wrong-properties-displayed-to14753907.html\n\nOn a WebPage, I'm using a TabbedPanel containing different implementations of MyAbstractPanel. MyAbstractPanel.html contains a <wicket:message key=\"panelHeadline\"></wicket:message>. Now I want a different headline for each of my implementations of MyAbstractPanel.\nSo I made a properties file for each. E.g. PanelImplOne.properties with panelHeadline=First panel headline, PanelImplTwo.properties with panelHeadline=Second panel\n\nWhen the page gets displayed the first Tab displays the right value. When I navigate to other tabs however, the displayed message is the same as on the first tab. The same happens if I use a <span wicket:id=\"headline\" with a ResourceModel. "
    ],
    [
        "WICKET-2602",
        "WICKET-4727",
        "Display upload progress bar only when a file is selected When the UploadProgressBar is part of a larger form structure where not all submits actually start a file upload, it is disturbing to see the 'upload starting...' message.",
        "ThreadContext should be detached before each subscribed page gets notified Since the event subscriptions may cross different sessions, before entering request cycles of notified page, the ThreadContext should be detached except application instance.\r\n\r\nIn EventBus#post(Object event), ThreadContext.detach() should be placed inside the for-loop block of atmosphere resources,\r\notherwise Session().get() may return previous page's session."
    ],
    [
        "WICKET-5081",
        "WICKET-4990",
        "FormTester does not set submitting component. When testing Form#findSubmittingButton() does not behave correctly, because the submitting component is not set in the FormTester. Because of this the behavior in test and at runtime is not the same. This bug is new to Wicket 6. In Wicket 4 the test worked as expected.\r\n\r\nThere was some discussion on this topic in this thread: http://apache-wicket.1842946.n4.nabble.com/AjaxRequestAttributes-setSubmittingComponentName-td4655895.html \r\n\r\n",
        "Problem using AutoCompleteBehavior with AjaxFormComponentUpdatingBehavior(\"onchange\") \r\nGiven a text field that uses the following behaviors: \r\nA.  AjaxFormComponentUpdatingBehavior(\"onchange\"); \r\nB.  AutoCompleteBehavior\r\n\r\nSay I enter an letter 'U' into the text field, and an auto-suggest list pops up.\r\nWhen I select an item (e.g. USD) from the auto-suggest list using a mouse, the onchange event from behavior A  is fired twice. The 1st onchange event is for 'U' and the 2nd onchange event is for 'USD'. \r\n\r\nThis issue is mentioned as a regression by Sven Meier and related to WICKET-1280."
    ],
    [
        "WICKET-5958",
        "WICKET-5624",
        "PageNumberEvictionStrategy(1) crashes application if using ajax callback behaviours in Pages.... As I promised in http://apache-wicket.1842946.n4.nabble.com/Howto-have-just-currently-viewed-page-in-session-td4671631.html , here is the promised demo.\r\n\r\nYou've got there two pages, HomePage and RedirectPage, both with Ajax timer. First page is with redirect link. If you press that redirect link you're redirected to RedirectPage page, but that page is recreated without pageparameters eventually and application crashes with:\r\n\r\nCaused by: java.lang.IllegalArgumentException: Page parameters cannot be empty!\r\n\tat com.mycompany.myproject.RedirectedPage.<init>(RedirectedPage.java:26)\r\n\r\nIf I look at PageProvider class and resolvedPageInstance method, it's clear why it crashes....\r\n\r\nBut guys, as a page store developer, I want to have just currently viewed page in session, nothing more! When redirecting I don't care about previous page ajax callbacks...\r\n\r\nThis bug is critical for us, so please do not lower the priority and please help us with it. \r\n\r\nBtw, yes, raising number of saved pages solves the problem, but this is not preferred solution for us, because we support multiple opened browser tabs.,,And it's causing me problems in page management...\r\n\r\nLooking forward for solution or at least tips...",
        "Do not throw when WebSocket is not supported When the browser does not support WebSocket, /wicket-websocket-jquery.js throws an \"is not supported\" string from the initialize() method, which runs in the DOM ready event. This break any other initialization of the page that takes place after the WebSocket initialization, leading to less than graceful degradation of functionality."
    ],
    [
        "WICKET-2526",
        "WICKET-3118",
        "ConcurrentModification Exception in TreeState When the TreeState ist saved in the session, pressing F5 (refresh) in browser many times, leds to an ConcurrentModificationException. Example project is submitted.",
        "ConverterLocator should be class hierarchy aware Currently ConverterLocator does return Converters only for those type they are explicitly registered. Specifically, when trying to convert a class that does not have registered converter but one of its superclasses has registered converter, the DefaultConverter is obtained. It would be nice if the super classe's converted is returned instead.\r\n\r\nI am proposing that ConverterLocator is changed to understand class hierarchies, or alternatively, a new ConverterLocator implementation is added that is class hierarchy aware.\r\n\r\nSomething like this. Definitely not production ready, but should give the idea:\r\n\r\npublic class ClassHierarchyAwareConverterLocator implements IConverterLocator {\r\n\tprivate static final long serialVersionUID = 1L;\r\n\tprivate ConverterLocator converterLocator;\r\n\tpublic ClassHierarchyAwareConverterLocator() {\r\n\t\tconverterLocator = new ConverterLocator();\r\n\t}\r\n\r\n\tpublic IConverter getConverter(Class<?> type) {\r\n\t\tIConverter exactConverter = converterLocator.get(type);\r\n\t\tif(exactConverter != null) {\r\n\t\t\treturn exactConverter;\r\n\t\t}\r\n\t\t\r\n\t\tClass<?> currentType = type;\r\n\t\twhile(currentType.getSuperclass() != null) {\r\n\t\t\tcurrentType = currentType.getSuperclass();\r\n\t\t\tIConverter superClassConverter = converterLocator.get(currentType);\r\n\t\t\tif(superClassConverter != null) {\r\n\t\t\t\treturn superClassConverter;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn converterLocator.getConverter(type);\r\n\t}\r\n\t\r\n\tpublic final IConverter set(final Class<?> c, final IConverter converter) {\r\n\t\tconverterLocator.set(c, converter);\r\n\t\treturn converter;\r\n\t}\r\n\tpublic final IConverter remove(Class<?> c)\r\n\t{\r\n\t\treturn converterLocator.remove(c);\r\n\t}\t\r\n}"
    ],
    [
        "WICKET-4815",
        "WICKET-3002",
        "Interface to mark components with type safe models Could we please have an interface to tag components that support type safe default models (Think Link, GenericPanel etc). This would help enforce consistency across these types of components.\r\n\r\nSomething like: \r\n\r\npublic interface IGenericComponent<T>\r\n{\r\n    IModel<T> getModel();\r\n    void setModel(IModel<T> model);\r\n    void setModelObject(T object);\r\n    T getModelObject();\r\n}\r\n\r\nIt may also be a good idea to implement a helper utility that does all the casting etc, and takes an additional Component argument per method.",
        "Resource.getResourceStream() javadoc improvements (patch) Please review attached patch and apply if so desired.\r\n\r\nAs posted on the mailing list:\r\nhttp://mail-archives.apache.org/mod_mbox/wicket-dev/201008.mbox/<AANLkTikCaZB725DNXEPEUb3N-QjvjMuv7GfeQOOKPAM4@mail.gmail.com>"
    ],
    [
        "WICKET-2537",
        "WICKET-2952",
        "Problem with wicket:extend / wicket:child and ListView on not visible component I have two panels: ChildPanel extends from ParentPanel.\r\nParentPanel has a WebMarkupContainer with a <wicket:child>.\r\nChildPanel has <wicket:extend> and a repeater like listView of Loop.\r\n\r\nWhen the WebMarkupContainer from ParentPanel is not visible (setVisible(false)), I receive an error with as message that I have added components in code, but forgot to reference it in markup. He only gives the components from the ChildPanel (in the errorMessage), so the label in the WebMarkupContainer on ParentPanel is no problem. It is also only a problem when it's a repeater, with a label on ChildPanel, there is no problem (when repeater and label, also the label is mentioned in the errorMessage)\r\n\r\nI've made a simple example to make it more clear.",
        "Exposes Application DebugSettings related functionality for JMX I think it would be cool if the DebugSettingsMBean exposes every IDebugSettings properties for JMX, I'm sending an patch with the code.\r\n\r\n- outputComponentPath\r\n- outputMarkupContainerClassName\r\n- linePreciseReportingOnAddComponentEnabled\r\n- linePreciseReportingOnNewComponentEnabled\r\n- developmentUtilitiesEnabled"
    ],
    [
        "WICKET-5948",
        "WICKET-692",
        "wicket-ajax.js probably doesn't traverse the children of <div> or <span> I tried to add AjaxFormComponentUpdatingBehavior (with onchange event) to a DateTimePicker from wicket-jquery-ui. It ends with following error when I change input value from browser:\r\n\r\n{code}\r\nValue of variable [[date]] could not be resolved while interpolating [[Error while parsing datetime: date was '${date}' and time was '${time}']]\r\n{code}\r\n\r\nWicket probably does not update input values with Ajax, more discussion here:\r\n\r\nhttps://groups.google.com/forum/#!topic/wicket-jquery-ui/ZKzfPkm51WQ",
        "upgrade YUI dependencies to version 2.2.2 for wicket-datetime Upgrade YUI dependencies to version 2.2.2 for wicket-datetime"
    ],
    [
        "WICKET-5110",
        "WICKET-225",
        "File upload and Ajax buttons bug I found problem with file upload and ajax buttons in Opera 12.14 for wicket 6.6.0. Its same problem like here: https://issues.apache.org/jira/browse/WICKET-4711\r\n\r\nI download quickstart from old issue reworked to my version of form where is fileuploadfield and ajaxbutton. Same error message in wicket debug like in the old issue.\r\n\r\nIn quickstart is used Ajax button. I tested AjaxSubmitLink and it has same problem. IE and Firefox working normal.",
        "MockWebApplication initializes application twice To be convinced, try to use mountBookmarkablePage() in the init() method of your application.  That will fail because application is already initialized by WicketFilter.  See attached patch."
    ],
    [
        "WICKET-5797",
        "WICKET-2263",
        "Convenience method to call setResponsePage with forward option Implement a convenience method to be able to setResponsePage with FORWARD option (instead of REDIRECT), without changing the Application level RENDER_STRATEGY\r\n\r\nBackground discussion in:\r\nhttp://apache-wicket.1842946.n4.nabble.com/setResponsePage-forward-solution-options-td4668893.html",
        "contextPath problem with the inline CSS-es Hi,\r\n\r\nI have some component, which uses images as background CSS. The image is stored outside under the \"/WEB-INF/images\" so it is accessible on the $contextPath/images/ path. Now I have this in the HTML markup of my component:\r\n\r\n{{{\r\n<style type=\"text/css\">\r\n\timg.arrow {\r\n\t\tbackground-image: url(\"images/arrow.png\");\r\n\t}\r\n</style>\r\n\t<img src=\"images/arrow.png\"></img>\r\n\t<img class=\"arrow\"></img>\r\n}}}\r\n\r\nWhich renders in the browser as:\r\n{{{\r\n    <style type=\"text/css\">\r\n\t  img.arrow {\r\n\t\tbackground-image: url(\"images/arrow.png\");\r\n         }\r\n   </style>\r\n   <img src=\"../images/arrow.png\"/>\r\n   <img class=\"arrow\"/>\r\n}}}\r\n\r\nAs visible in the <img> tag the \"src\" gets correcly modified , and the context-relative path is changed from the \"images/arrow.png\" to \"../images/arrow.png\", so the image will be found by the browser.\r\nOn the other hand the \"url\" or the background-image is left unchanged, so the browser can not find the image.\r\n\r\nI have tried many things, like hacking the <wicket:messages> tag to add contextPath like this (note; the contextPath got resolved using a custom IStringResourceLoader):\r\n\r\n{{{\r\n    <style type=\"text/css\">\r\n\t  img.arrow {\r\n\t\tbackground-image: url(<wicket:message key=\"contextPath\"/>images/arrow.png);\r\n         }\r\n   </style>\r\n}}}\r\n\r\nbut this does not work either. Any hints how to solve this situation?\r\n"
    ],
    [
        "WICKET-1784",
        "WICKET-5597",
        "Enhance IDataProvider to support applications using the Transfer Object J2EE pattern In some environments searches are performed in 'single call' fashion, using a transfer object.\nE.g. two queries performed by the data services tier before returning combined results to the UI tier:\ni. Query for paged search results\nii. Query for a 'count' value representing total possible results\n\nThe contract between DataView and IDataProvider does not support a 'single call' environment as the give/take relationship between these classes is biased towards DataView.\nDataView expects IDataProvider to provide it's size before providing IDataProvider with its offset and count.\n* DataView may have good reasons for needing size before it can provide offset/count.\n* But IDataProvider has equally good reasons for needing offset/count before it can provide size.\n\nThe circular dependency:\n1. DataView calls IDataProvider.size()\n2. IDataProvider cannot return size as it cannot start a query until it receives offset/count from DataView\n3. These it does not receive until DataView calls IDataProvider.iterator() later on\n\nOthers who experienced this problem (with CODE examples):\n* http://www.nabble.com/IDataProvider-and-Hibernate-Search-td15546101.html\n* http://www.mail-archive.com/users@wicket.apache.org/msg14266.html\n\n---\nThe suggested solution of caching the combined search results and count value does not work if the search cannot begin until offset and count are available. And writing a custom DataView is not feasible either time wise as I understand that it cannot be done without needing to write a number of other classes too.",
        "button behaviour changed The behaviour of a <button> component with no type=\"button\" attribute has changed between 6.15 and 7 M1.   \r\n\r\nWhen the button is connected to an AjaxLink.\r\nIn 6.15 there is no form submit\r\nIn 7 M1 the form is submitted.\r\n\r\nI think the code should control if the form is submitted or not, using AjaxSubmitLink or AjaxLink not the markup.\r\n"
    ],
    [
        "WICKET-159",
        "WICKET-978",
        "Default code for popups should always try to bring the popped up window to the top (focus) The default implementation of popups (the script generated by PopupSettings) should always try to focus on the popped up window.",
        "log4j.properties in quickstart archetype uses old wicket package name In src/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/log4j.properties:\n\nlog4j.logger.wicket=INFO\nlog4j.logger.wicket.protocol.http.HttpSessionStore=INFO\nlog4j.logger.wicket.version=INFO\nlog4j.logger.wicket.RequestCycle=INFO\n\nIt should be:\n\nlog4j.logger.org.apache.wicket=INFO\nlog4j.logger.org.apache.wicket.protocol.http.HttpSessionStore=INFO\nlog4j.logger.org.apache.wicket.version=INFO\nlog4j.logger.org.apache.wicket.RequestCycle=INFO\n"
    ],
    [
        "WICKET-4695",
        "WICKET-3411",
        "Javascript error when closing a ModalWindow with IE 8 Closing a ModalWindow in IE 8 may cause following javascript error to console:\r\n\r\n  'win.current' is null or not an object\r\n\r\nThis doesn't happen with Chrome or Firefox and software seems to work correctly: ModalWindow closes correctly etc. This doesn't happen with all ModalWindows in my application, but if it happens, it will happen every time. I don't know what triggers this behavior, but a work around is to add null checks to ModalWindow.java and modal.js, currently there are only check for undefined variables.\r\n\r\nModalWindow.java, getCloseJavacriptInternal(), line 416 in wicket-1.5.5 source\r\n\r\n+ \"if (typeof(win) != \\\"undefined\\\" && typeof(win.current) != \\\"undefined\\\" && win.current != null) {\\n\"\r\n\r\nmodal.js, Window.close, line 258\r\n\r\n\tif (typeof(win) != \"undefined\" && typeof(win.current) != \"undefined\" && win.current != null) {",
        "Incorrect URL handling of mounted pages Exception:\r\norg.apache.wicket.WicketRuntimeException: unable to find component with path homePageLink on stateless page [Page class = test.HomePage, id = 0, version = 0] it could be that the component is inside a repeater make your component return false in getStatelessHint()\r\n\r\nFor full stack trace please run the example.\r\nSteps:\r\n1. go to home page\r\n2. click on link which is the point to the test page\r\n3. restart the jetty server (simulation of session expired)\r\n4. click on link from the test page ~ exception\r\n\r\nProblem description:\r\n1.\r\nIf you mount some page to any point. But there is no backslash on the end of URL. The other links created on the same page has the relative url e.g.: \"?...\".\r\nIt means there is the home page with URL: http://localhost:8082/home?wicket:bookmarkablePage=:test.TestPage\r\n\r\n2.\r\nYou click on the link and the URL of browser will be as: http://localhost:8082/home?wicket:bookmarkablePage=:test.TestPage\r\nThere is some other link/interface listener/.... with the relative URL again as the ?....\r\nTest page with URL: http://localhost:8082/home?wicket:interface=:5:homePageLink::ILinkListener::\r\n\r\nIt is really bad, because interface is pointed to different page, it will be no problem if the session is still valid, but what about if the session was already expired?\r\nThe wicket procession find stateless page, but there is no link, it is on different page.\r\n\r\nIt can be fixed on the level of processing of stateless pages, or it can be fixed with the redirection to the URL which still ends with '/'.\r\nThe second thing is more transparent, because URL is still valid, with the direction to the valid page. \r\n\r\nI tried multiple hacks, but only redirection is working for me. The problem is, that if I change something, probably I corrupt URL of error pages, or resources, ..."
    ],
    [
        "WICKET-1206",
        "WICKET-1750",
        "Change BaseWicketTester.getTagByXXX return value from TagTester to TagTester[] When using the org.apache.wicket.markup.repeater.data.DataView, each row in the table has the same wicket:id.  I am trying to use the TagTester to ensure that each <tr> tag has the correct attributes, in this case class=\"odd\" and class=\"even\".  Since getTagByWicketId and getTagById only return a single TagTester, a tester for the same markup tag is returned each time, making it impossible to test any row other than the first.\n\nExample HTML output:\n\n<table>\n\t<tr class=\"even\" wicket:id=\"table\">   <--------- TagTester returned is always for this tag\n\t</tr>\n        <tr class=\"odd\" wicket:id=\"table\">\n\t</tr>\n        <tr class=\"even\" wicket:id=\"table\">\n\t</tr>\n        <tr class=\"odd\" wicket:id=\"table\">\n\t</tr>\n        <tr class=\"even\" wicket:id=\"table\">\n\t</tr>\n</table>\n\n\nProposed solution:  change the return value to TagTester[] so that one call will return all of the tags with that wicket:id",
        "Inconsisting Handling of id mismatch on wicket:container   Given this simple case:\n\n\npublic class Home extends WebPage {\n\n    public Home() {\n        add(new EmptyPanel(\"test\"));\n    }\n}\n\n\nand the following HTML page:\n\n<span wicket:id='test2'/>\n\nPlease notice that the ids do not match.\n\nExecuting this app will give the following Exception:\n\n\nWicketMessage: Unable to find component with id 'test2' in [Page class =\ncom.myapp.wicket.Home, id = 0, version = 0]. This means that you declared\nwicket:id=test2 in your markup, but that you either did not add the\ncomponent to your page at all, or that the hierarchy does not match.\n\n\nWhereas when using a wicket:container instead of a HTML tag, like this:\n\n\n<wicket:container wicket:id='test2'/>\n\n\nAnd when the ids doesn't match, Wicket throws the following exception:\n\n\nWicketMessage: Failed to handle: <wicket:container wicket:id='test2'/>\n\n\nWhich is quite cryptic at the first glance.\n\n\nOriginal: http://mail-archives.apache.org/mod_mbox/wicket-dev/200803.mbox/%3c15908468.post@talk.nabble.com%3e\n\nWe ran across same problem too."
    ],
    [
        "WICKET-1859",
        "WICKET-2860",
        "Fail fast if super.init() is not called in MyApplication#init() Add a check whether \"super.init()\" is called in MyApplication#init().\nSomething similar to Component#onBeforeRender().\n\nFrom Wicket Users mailing list:\nOn Thu, 2008-10-02 at 09:35 -0700, Jonathan Locke wrote:\n>\n> btw, shouldn't we fail init if super isn't called in this case like those\n> other protections we built in?",
        "Wrong name for swiss Application.properties A 'Application_ch.properties' was generated due fixing Issue: WICKET-743 but the correct language-extension for German/Swiss is '_de_CH' and not '_ch' (witch stands for Chamorro).\r\n\r\nFix: rename 'Application_ch.properties' to 'Application_de_CH.properties'.\r\n"
    ],
    [
        "WICKET-5372",
        "WICKET-3145",
        "Cache Disable Headers Break IE8 Under HTTPS I am serving up a non-cached PDF resource from Wicket with:\r\n\r\ngetRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceRequestHandler(pdfResource, null));\r\n\r\nAll is fine for most users.  However, our IE8 users cannot perform the download.  The get a dialog saying that the resource cannot be downloaded.  I did some testing and found that it works fine over HTTP but not HTTPS.\r\n\r\nI found this stack overflow article that explains:\r\nhttp://stackoverflow.com/questions/1038707/cant-display-pdf-from-https-in-ie-8-on-64-bit-vista\r\n\r\nI see in WebResponse that Wicket is setting the Cache-Control and Pragma values incorrectly as far as IE8 is concerned.  This explains the behavior.\r\n\r\nTo prove, I changed the resource in wicket to have a cache duration of one second and the resource downloads over SSL just fine.  Not the worst workaround but I was hoping this could be addressed.",
        "MockWebApplication does not allow to manually clear cookiesOfThisSession MockWebApplication does not allow to manually clear cookiesOfThisSession\r\n\r\nOften it is needed for testing various cookie scenarios to have the ability to clear cookiesOfThisSession and sort of start fresh. Especially when reusing WicketTester between junit tests for faster performance and less initialization overhead.\r\n\r\nWorkaround:\r\n      Collection<?> cookiesOfThisSession = Utils.getFieldValue(\"cookiesOfThisSession\", Collection.class, wicketTester);\r\n      cookiesOfThisSession.clear();\r\n"
    ],
    [
        "WICKET-5770",
        "WICKET-3088",
        "PageParametersEncoder should not decode parameters with no name From dev@ mailing list: http://markmail.org/message/khuc2v37aakzyfth\r\n\r\nPageParametersEncoder should ignore query parameters like \"&=&\" and \"&=value\" because they make no sene and lead to exceptions later at PageParameters#add() call.",
        "\"split-package\" problem for wicket bundles started in an osgi container Referring to the thread in user mailing list: http://apache-wicket.1842946.n4.nabble.com/Wicket-1-5-and-OSGi-td2847734.html\r\n\r\nThere is a problem when the wicket bundles are started in an osgi envirionment because of split packages"
    ],
    [
        "WICKET-2461",
        "WICKET-1423",
        "AjaxPagingNavigationIncrementLink does not work without AjaxPagingNavigator component If the AjaxPagingNavigationIncrementLink should be use with a pagable component without the AjaxPagingNavigator then a WicketRuntimeException is thrown when the link is clicked. The documentation says:\r\n\"\r\nAn incremental Ajaxian link to a page of a PageableListView. Assuming your list view navigation looks like\r\n \r\n                 [first / << / <] 1 | 2 | 3 [> / >> /last]\r\n \r\nand \"<\" meaning the previous and \"<<\" goto the \"current page - 5\", than it is this kind of incremental page links which can easily be created. This link will update the pageable and itself or the navigator the link is part of using Ajax techniques, or perform a full refresh when ajax is not available. \r\n\"\r\n\r\nFrom that description I understand, that the AjaxPagingNavigationIncrementLink component should work without a AjaxPagingNavigator too, like the non Ajax variant PagingNavigationIncrementLink.\r\n\r\nReason for this is the implementation of the AjaxPagingNavigationBehavior which explicitly searches for the navigator component and throws the exception.\r\n",
        "AuthenticatedWebApplication uses deprecated constructor of AuthenticatedWebSession In changing from 1.3.1 to 1.3.2 the AuthenticatedWebSession(AuthenticatedWebApplication, Request) method became deprecated, but AuthenticatedWebApplication#newSession still searches for this one.\n\nSimply a matter of changing lines 114-116 of AuthenticatedWebApplication.java from:\n\nreturn webSessionClassRef.get().getDeclaredConstructor(\n\t\tAuthenticatedWebApplication.class, Request.class).newInstance(\n\t\tAuthenticatedWebApplication.this, request);\n\nto:\n\nreturn webSessionClassRef.get().getDeclaredConstructor(\n\t\tRequest.class).newInstance(\n\t\trequest);"
    ],
    [
        "WICKET-1783",
        "WICKET-1905",
        "Improve TabbedPanel component by adding the ability to individually style (CSS) to each tab (for the purpose differentiating) Currently all the Tabs of a TabbedPanel look identical (except for the link title). \n\nIn many situations, however, it is useful to group (and style accordingly) the tabs according to their purpose (e.g., general-purpose, admin-purpose, etc.). Currenlty the Tabs are styled in the TabbedPanel constructor which makes it very difficult to parametrize the behavior on a tab-per-tab basis.\n\nThe TabbedPanel component should be improved by adding the ability to individually style (CSS) to each tab.",
        "Component.getPageFactory() vs. Session.getPageFactory() and Session.getPageFactory(Page) I was found strange code:\n\nIn Session:\n\n\tpublic final IPageFactory getPageFactory()\n\t{\n\t\treturn getApplication().getSessionSettings().getPageFactory();\n\t}\n\n\tpublic final IPageFactory getPageFactory(final Page page)\n\t{\n\t\tif (page != null)\n\t\t{\n\t\t\treturn page.getPageFactory();\n\t\t}\n\t\treturn getPageFactory();\n\t}\n\nBoth method are 'final', the first gets PageFactory from SessionSettings and the second uses Page#PageFactory (defined in Component) or uses the Session#getPageFactory() (the first method).\n\nIn Component:\n\n\t/**\n\t * @return The page factory for the session that this component is in\n\t */\n\tpublic final IPageFactory getPageFactory()\n\t{\n\t\treturn getSession().getPageFactory();\n\t}\n\nAnd again 'final' and gets the PageFactory by Session#getPageFactory() too.\n\nWhy is there this code? I think that the final word in Component#getPageFactory() should be removed (i need it:-)).\n\nThx,\nH."
    ],
    [
        "WICKET-5206",
        "WICKET-5579",
        "Provide default messages for upload exceptions Error message keys for upload exceptions are prefixed with the form's markup id currently. If we let the Localizer do this, Wicket can provide default messages for different locales. ",
        "wicket:enclosure on wicket:extend - Detach called on component with id '0' while it had a non-empty queue A page with wicket:extend and wicket:enclosure leads to a runtime exception\r\n\r\n    <wicket:extend>\r\n        <wicket:enclosure child=\"label\">\r\n            The label: <span wicket:id=\"label\">[label]</span>\r\n        </wicket:enclosure>\r\n    </wicket:extend>\r\n\r\n--\r\nERROR - RequestAdapter             - Error detaching page\r\norg.apache.wicket.WicketRuntimeException: Detach called on component with id '0' while it had a non-empty queue: ComponentQueue{queueSize=1, queue=[[Enclosure [Component id = wicket_enclosure0]], null, null, null, null, null, null, null]}\r\n    at org.apache.wicket.MarkupContainer.onDetach(MarkupContainer.java:1961)\r\n    at org.apache.wicket.Page.onDetach(Page.java:868)\r\n    at org.apache.wicket.Component.detach(Component.java:1145)\r\n    at org.apache.wicket.page.RequestAdapter.commitRequest(RequestAdapter.java:156)\r\n    at org.apache.wicket.page.AbstractPageManager.commitRequest(AbstractPageManager.java:82)\r\n    at org.apache.wicket.page.PageManagerDecorator.commitRequest(PageManagerDecorator.java:73)\r\n    at org.apache.wicket.page.PageAccessSynchronizer$2.commitRequest(PageAccessSynchronizer.java:258)\r\n    at org.apache.wicket.Application$2.onDetach(Application.java:1648)\r\n    at org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify(RequestCycleListenerCollection.java:105)\r\n    at org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify(RequestCycleListenerCollection.java:101)\r\n    at org.apache.wicket.util.listener.ListenerCollection$1.notify(ListenerCollection.java:120)\r\n    at org.apache.wicket.util.listener.ListenerCollection.reversedNotify(ListenerCollection.java:144)\r\n    at org.apache.wicket.util.listener.ListenerCollection.reversedNotifyIgnoringExceptions(ListenerCollection.java:113)\r\n    at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onDetach(RequestCycleListenerCollection.java:100)\r\n    at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:645)\r\n    at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:594)\r\n    at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:297)\r\n    at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)\r\n    at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)\r\n    at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)\r\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\r\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\r\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\r\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\r\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\r\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\r\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)\r\n    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:928)\r\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\r\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\r\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)\r\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:539)\r\n    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:298)\r\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\r\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\r\n    at java.lang.Thread.run(Thread.java:722)\r\n"
    ],
    [
        "WICKET-1055",
        "WICKET-2580",
        "Add ability to have Radio and RadioGroup not related via component hierarchy I was working on an application that needed to be able to support a Radio button that wasn't nested within a RadioGroup.   Here's an illustration of the component hierarchy I needed to support:\n\n<span wicket:id=\"radioGroup1\"></span>\n<input type=\"radio\"  wicket:id=\"option1A\"/>\n<input type=\"radio\"  wicket:id=\"option1B\"/>\n\nThe existing RadioGroup/Radio code relies on the component hierarchy, so the only way to render a radio group would be:\n\n<span wicket:id=\"radioGroup1\">\n  <input type=\"radio\" wicket:id=\"option1A\"/>\n  <input type=\"radio\" wicket:id=\"option1B\"/>\n</span>\n\nThe following patch to Radio and RadioGroup adds the ability to provide an explicit relationship between Radio and RadioGroup - bypassing the component hierarchy.\n\nWhy did I need this?   The application I'm working on creates a form based on meta-data about a specific object.   There were a few situation where I needed to render two radio options in different parts of a form, and then only way to support this was to violate the hierarchy requirement of Radio/RadioGroup.   ",
        "Javadoc of Component#setOutputMarkupPlaceholderTag is wrong The javadoc of Component#setOutputMarkupPlaceholderTag uses the term \"componentid\" where it should use \"markupid\".\r\n\r\nPlease update the javadoc from:\r\n\r\n  The tag is of form: &lt;componenttag style=\"display:none;\" id=\"componentid\"/&gt;.\r\n\r\nto\r\n\r\n  The tag is of form: &lt;componenttag style=\"display:none;\" id=\"markupid\"/&gt;.\r\n"
    ],
    [
        "WICKET-5264",
        "WICKET-221",
        "CDI Injection no longer working on anonymous classes The changes made for WICKET-5226 (no longer injecting anonymous inner classes) breaks our applications badly, and I suspect we are not the only one. The following pattern is quite common:\r\n\r\nadd(new Link<Void>(\"rest\") {\r\n\t@Inject\r\n\tprivate AccountRestResourceClient accountClient;\r\n\r\n\t@Override\r\n\tpublic void onClick() {....}\r\n}\r\n\r\nIn Wicket 6.9.0, this no longer works: accountClient will not get injected because the Link is an anonymous inner class. To make things worse, even in concrete classes, you can't rely on injection to work, because someone could subclass your class as an anonymous inner class and injection will again not work.\r\n\r\nThis change was made because Weld 2.0 throws an exception when trying to create an InjectionTarget for anonymous classes. This will be reduced to a log-warning in 2.0.2: https://issues.jboss.org/browse/WELD-1441",
        "http://foo/app/ doesn't work, but http://foo/app does, with WicketFilter. As summary.\n\nChuckDeal's take on it is this:\n\nWhen tracing through the WicketFilter code, it looks like isWicketRequest() can't deal with it so it delegates to webApplication.getRequestCycleProcessor().getRequestCodingStrategy().urlCodingStrategyForPath(path) which returns null because it specifically excludes the '/'.  You can't mount '/' because mount(...) will throw IllegalArgumentException(\"The mount\npath '/' is reserved for the application home page\").  Is this a loophole, or have I missed something.  "
    ],
    [
        "WICKET-4448",
        "WICKET-2784",
        "Update russian localization  Add PagingNavigator localization",
        "wicket-datetime not compatible with YUI menu In IE8 I the DatePicker component does not popup the calendar if using wicketstuff-YUI menu for 1.4. In Chrome the DatePicker works and the YUI menu does not render the drop down menus."
    ],
    [
        "WICKET-5744",
        "WICKET-6009",
        "Multiple AjaxSelfUpdatingTimerBehaviour objects conflict with each other When multiple AjaxSelfUpdatingTimerBehaviour objects are created on a single page, one of them will outrule all the others.\r\n\r\n2014-10-31 11:46:29,058 DEBUG [FiberBranchViewPage] Creating CollectionUpdater: [ProgressInfoPanel [Component id = collectionStatus]]\r\n2014-10-31 11:46:29,063 DEBUG [FiberBranchViewPage] Creating ServiceDiagnosisUpdater: [ProgressInfoPanel [Component id = serviceDiagnosisStatus]]\r\n2014-10-31 11:46:31,460 DEBUG [FiberBranchViewPage] CollectionUpdater post process target: [AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]\r\n2014-10-31 11:46:31,486 DEBUG [FiberBranchViewPage] CollectionUpdater FiberBranchViewPage$12@184acf6 interval set: 3 seconds\r\n2014-10-31 11:46:31,547 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater post process target: [AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]\r\n2014-10-31 11:46:31,570 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater FiberBranchViewPage$14@d44e89 interval set: 3 seconds\r\n2014-10-31 11:46:34,749 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater post process target: [AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]\r\n2014-10-31 11:46:34,766 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater FiberBranchViewPage$14@d44e89 interval set: 3 seconds\r\n2014-10-31 11:46:37,937 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater post process target: [AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]\r\n2014-10-31 11:46:37,967 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater FiberBranchViewPage$14@d44e89 interval set: 3 seconds\r\n2014-10-31 11:46:41,148 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater post process target: [AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]\r\n2014-10-31 11:46:41,179 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater FiberBranchViewPage$14@d44e89 interval set: 3 seconds\r\n2014-10-31 11:46:44,382 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater post process target: [AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]\r\n2014-10-31 11:46:44,407 DEBUG [FiberBranchViewPage] ServiceDiagnosisUpdater stopped: FiberBranchViewPage$14@d44e89\r\n\r\n{code:title=FiberBranchViewPage.java}\r\nimport org.apache.wicket.markup.html.WebPage;\r\nimport org.apache.wicket.markup.html.panel.Panel;\r\n\r\npublic class FiberBranchViewPage extends WebPage {\r\n    public static final Duration FAST_REFRESH_INTERVAL = Duration.milliseconds(100);\r\n    public static final Duration NORMAL_REFRESH_INTERVAL = Duration.seconds(3);\r\n\r\n    private Panel collectionStatus;\r\n    private Panel serviceDiagnosisStatus;\r\n\r\n    public FiberBranchViewPage(PageParameters parameters) {\r\n        super(parameters);\r\n        addOrReplace(collectionStatus);\r\n        addOrReplace(serviceDiagnosisStatus);\r\n\r\n        if (!isLiveCollectionFinished()) {\r\n            createCollectionUpdater();\r\n        }\r\n        if (!isVlanCollectionFinished()) {\r\n            createServiceDiagnosisUpdater();\r\n        }\r\n    }\r\n\r\n    private void createCollectionUpdater() {\r\n        log.debug(\"Creating CollectionUpdater: {}\", collectionStatus);\r\n        final AjaxSelfUpdatingTimerBehavior ajaxSelfUpdatingTimerBehavior = new AjaxSelfUpdatingTimerBehavior (FAST_REFRESH_INTERVAL) {\r\n            @Override\r\n            protected void onPostProcessTarget(AjaxRequestTarget target) {\r\n                log.debug(\"CollectionUpdater post process target: {}\", target);\r\n                super.onPostProcessTarget(target);\r\n                if (isLiveCollectionFinished()) {\r\n                    this.stop(target);\r\n                    log.debug(\"CollectionUpdater stopped: {}\", this);\r\n                } else {\r\n                    this.setUpdateInterval(NORMAL_REFRESH_INTERVAL);\r\n                    log.debug(\"CollectionUpdater {} interval set: {}\", this, NORMAL_REFRESH_INTERVAL);\r\n                }\r\n            }\r\n        };\r\n        collectionStatus.add(ajaxSelfUpdatingTimerBehavior);\r\n    }\r\n\r\n    private void createServiceDiagnosisUpdater() {\r\n        log.debug(\"Creating ServiceDiagnosisUpdater: {}\", serviceDiagnosisStatus);\r\n        final AjaxSelfUpdatingTimerBehavior ajaxSelfUpdatingTimerBehavior = new AjaxSelfUpdatingTimerBehavior (FAST_REFRESH_INTERVAL) {\r\n            @Override\r\n            protected void onPostProcessTarget(AjaxRequestTarget target) {\r\n                log.debug(\"ServiceDiagnosisUpdater post process target: {}\", target);\r\n                super.onPostProcessTarget(target);\r\n                if (getModel().isVlanCollectionFinished()) {\r\n                    this.stop(target);\r\n                    log.debug(\"ServiceDiagnosisUpdater stopped: {}\", this);\r\n                } else {\r\n                    this.setUpdateInterval(NORMAL_REFRESH_INTERVAL);\r\n                    log.debug(\"ServiceDiagnosisUpdater {} interval set: {}\", this, NORMAL_REFRESH_INTERVAL);\r\n                }\r\n            }\r\n        };\r\n        serviceDiagnosisStatus.add(ajaxSelfUpdatingTimerBehavior);\r\n    }\r\n}\r\n{code}",
        "Massive creation of dynamic classes causes OutOfMemory (PermGen) After upgrading Wicket from 6.19 to 6.20 we are discovering massive unnecessary creation of CGLIB-Classes. After debugging the issue occurs every time an old page version is requested from PageStore that has an injected (@SpringBean) - member . If this happens a new proxy will be created every time. This leads to permgen waste and in the end to OutOfMemoryErrors and crashes. In 6.19. this error doesn't occur. For reproducing load any older version of a versioned page and a new class is loaded in ClassLoader (WICKET_WICKET_<anyInjectedSpringBean>$$EnhancerByCGLIB...<anyHash>) \r\n\r\nIn the attached screenshots you can see the difference between the two versions in one example (GarageService - a functional, injected service). The behaviour of the images occurs after restarting the Glassfish-server, deploy of the application. After visiting one site, using it and pressing the back button there are multiple GarageServices in the permgen available.\r\n\r\nBefore update (6.19):\r\n!wicket_spring_6_19.PNG!\r\n\r\nAfter update (6.20):\r\n!wicket_spring_6_20.PNG!\r\n\r\nMaybe this happens in Wicket 7, too. But currently not checked. \r\n"
    ],
    [
        "WICKET-1092",
        "WICKET-633",
        "IndexedParamUrlCodingStrategy creates a parameter in PageParameters when there is no parameter in the URL If you mount a page like this:\n mount(new IndexedParamUrlCodingStrategy(\"/page\", MyPage.class));\n\nMyPage is a class with a contructor that accepts PageParameters.\n\nWhen you try to access the page with any of these URLs:\n http://myserver/page/\nor\n http://myserver/page\n\nthe PageParameters contains a single parameter \"0\" / \"\".\n\nBut when you try:\n http://myserver/page//\nor\n http://myserver/page///\n\nthen the PageParameters is empty. ",
        "Tree components cleanup Remove old tree from wicket-extensions.\nMove tree and tree-table from core to extension.\nCommit new tree components to core."
    ],
    [
        "WICKET-3858",
        "WICKET-4262",
        "AsynchronousDataStore needs  to stop - make thread a daemon I don't know how most run the unit tests, but in my ant-base testing environment, the AsynchronousDataStore\r\nthread does not stop and so the testing JVM does not exit. Consider changing:\r\nnew Thread(savingRunnable, \"Wicket-PageSavingThread\").start();\r\nto\r\nThread t = new Thread(savingRunnable, \"Wicket-PageSavingThread\");\r\nt.setDaemon(true);\r\nt.start();",
        "Wicket autocomplete should try to select the real selected value in the list if preselect property is true instead of just always 0 "
    ],
    [
        "WICKET-1277",
        "WICKET-905",
        "When no component is focused on AjaxRequestTarget, wicket tries to focus element with id 'null' ",
        "[nsIXMLHttpRequest.open] nsresult: 0x80004005 after calling behavior from iframe Below is a description copy pasted from the irc channel. Please take into account that you must mount the attached example at a depth-2 path (as <context>/<app>/iframe/wicket) or otherwise fix the url from hideBehavior.getCallback().replace(\"../\", \"\") (line 60 of WicketAjaxPage, I don't know of a better way of doing this, adding the behavior to the iframe doesn't work either).\n\n>igor, do you remember that a couple of days ago i asked you about calling an ajax behavior from an iframe?\n>i managed to do it using a vanilla XmlHttpRequest to reenter wicket through the behavior and then parsing the wicket response \"by hand\"\n> but i tried a lot of combinations to avoid that hack to, the closer i got was patching the behavior url a bit, to get it relative to the main page, not the iframe, and spitting out a bit of javascript on the top window to be called by the iframe\n> the behavior is executed and the ajax reponse is correctly handled, but then every other ajax request fail\n> with this: uncaught exception: [Exception... \"Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIXMLHttpRequest.open]\" nsresult: \"0x80004005 (NS_ERROR_FAILURE)\" location: \"JS frame :: javascript: eval(__firebugTemp__); :: anonymous :: line 1\" data: no]\n> I have a quickstart for this, do you think it's a bug in wicket?"
    ],
    [
        "WICKET-2099",
        "WICKET-359",
        "NullPointerException after jetty restart with persistent sessions I start Jetty with a savePeriod (HashSessionManager) of 4 seconds. When I restart it, a NPE is logged each 4s. After some (not all) page loads, the exception stop.\n\nSince NPE is never a feature, I suggest to apply that patch. Or something else more appropriate, if you understand the problem better.\n\nIndex: wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java\n===================================================================\n--- wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java\t(revis\u00e3o 740670)\n+++ wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java\t(c\u00f3pia de trabalho)\n@@ -1165,7 +1165,7 @@\n \t\telse if (page instanceof SerializedPageWithSession)\n \t\t{\n \t\t\tSerializedPageWithSession serialized = (SerializedPageWithSession)page;\n-\t\t\tif (serialized.page.get() == SerializedPageWithSession.NO_PAGE)\n+\t\t\tif (serialized.page != null && serialized.page.get() == SerializedPageWithSession.NO_PAGE)\n \t\t\t{\n \t\t\t\t// stripped page, need to restore it first\n \t\t\t\tresult = restoreStrippedSerializedPage(serialized);\n",
        "Allowing to Construct an Image with a distant resource The attach patch allows to use Image(String, String) or Image(String, Model) with a distant resource.\n\nie : \nImage img2 = new Image(\"img2\", \"http://wicket.sourceforge.net/css/banner-bg.png\");\n\t\t"
    ],
    [
        "WICKET-1927",
        "WICKET-1193",
        "WicketTester.assertErrorMessages uses wrong encoding WicketTester.assertErrorMessages returns FeedbackMessages in iso-8859-1 encoding.\nBecause of this all tests fail when they are using non standard ascii characters  (like polish, german etc) in messages.\n\nWicket should AFAIK use UTF-8 encoding or one that was specified by getApplication().getMarkupSettings().setDefaultMarkupEncoding(..).\n\nExample:\n\nWicketTester tester = new WicketTester(new MyApp());\ntester.getApplication().getMarkupSettings().setDefaultMarkupEncoding(\"UTF-8\");\ntester.getWicketSession().setLocale(new Locale(\"pl\", \"PL\"));\ntester.setupRequestAndResponse();\n\nFormTester formTester = tester.newFormTester(\"someForm\");\n[...]\nformTester.submit(\"process\");\ntester.assertErrorMessages(new String[] { \"Pole 'domena' musi zawiera\u0107 od 3 do 32 znak\u00f3w.\" };\n\ngives:\n\njunit.framework.AssertionFailedError:\nexpect (1):\n   Pole 'domena' musi zawiera\u0107 od 3 do 32 znak\u00f3w.\nbut was (1):\n   Pole 'domena' musi zawiera\u00c4\u0087 od 3 do 32 znak\u00c3\u00b3w. \n",
        "i18n: Translation of resource files in Korean I'd like to upload a patch for Korean resource files."
    ],
    [
        "WICKET-4604",
        "WICKET-4842",
        "Improve Wicket code to not use static caches We need to check Wicket code for any static fields which may cause problems when Wicket jars are put in Web container's shared libraries folder.\r\n\r\nFor example caches implemented with static fields should be reworked to use Application's metadata.\r\n\r\nSee http://markmail.org/thread/kd2anekvs4xlm4q4\r\n",
        "WicketRuntimeException when Tomcat cleans up a session later on When I let my tomcat 6 sit around for a couple hours, a session will expire after a while.\r\nExactly 4 hours after the last request, I then get this stacktrace on system out:\r\n\r\n{quote}\r\n     [exec] 25.10.2012 19:59:08 org.apache.catalina.core.ContainerBase backgroundProcess\r\n     [exec] WARNUNG: Exception processing manager org.apache.catalina.session.StandardManager@b3f7eb background process\r\n     [exec] org.apache.wicket.WicketRuntimeException: There is no application attached to current thread ContainerBackgroundProcessor[StandardEngine[Catalina]]\r\n     [exec] \tat org.apache.wicket.Application.get(Application.java:231)\r\n     [exec] \tat org.apache.wicket.protocol.http.AbstractRequestLogger.<init>(AbstractRequestLogger.java:111)\r\n     [exec] \tat org.apache.wicket.protocol.http.RequestLogger.<init>(RequestLogger.java:45)\r\n     [exec] \tat org.apache.wicket.Application.newRequestLogger(Application.java:759)\r\n     [exec] \tat org.apache.wicket.Application.getRequestLogger(Application.java:439)\r\n     [exec] \tat org.apache.wicket.protocol.http.WebApplication.sessionUnbound(WebApplication.java:511)\r\n     [exec] \tat org.apache.wicket.session.HttpSessionStore$SessionBindingListener.valueUnbound(HttpSessionStore.java:454)\r\n     [exec] \tat org.apache.catalina.session.StandardSession.removeAttributeInternal(StandardSession.java:1654)\r\n     [exec] \tat org.apache.catalina.session.StandardSession.expire(StandardSession.java:756)\r\n     [exec] \tat org.apache.catalina.session.StandardSession.isValid(StandardSession.java:592)\r\n     [exec] \tat org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:680)\r\n     [exec] \tat org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:665)\r\n     [exec] \tat org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1316)\r\n     [exec] \tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601)\r\n     [exec] \tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)\r\n     [exec] \tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)\r\n     [exec] \tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590)\r\n     [exec] \tat java.lang.Thread.run(Thread.java:662)\r\n{quote}"
    ],
    [
        "WICKET-3436",
        "WICKET-5542",
        "OnChangeAjaxBehavior can render javascript before wicket-ajax.js is loaded In the current OnChangeAjaxBehavior implementation, the behavior renders javascript (Wicket.ChangeHandler)\r\nwithin the onComponentRendered() method directly to the response. Its okay in case, when wicket-ajax.js is rendered in the head of the page, but if we move javascript to the footer of the page, the inlined javascript will be broken.\r\n\r\nI think, the javascript have to be evaluated after the DOM is built.\r\n\r\n",
        "Remove final from TextArea.onComponentTagBody() I was trying to extend and alter TextArea's behavior, but this method is unnecessarily marked final.  Martin Grigorov suggested that I file an issue on it.\r\nhttp://apache-wicket.1842946.n4.nabble.com/Show-textfield-as-plaintext-when-disabled-td4664723.html"
    ],
    [
        "WICKET-1344",
        "WICKET-5435",
        "BigDecimalConverter is not precise Currently, if we use the BigDecimalConverter class, it converts the values by first letting the NumberFormat to parse the value into a Double, which the BigDecimalConverter class in turn turns into a BigDecimal.\n\nUnfortunately such an implementation loses precision, for example if we enter \"123.45\" in a form, it can be converted to \"123.45000000000001\" or \"123.44999999999999999\" thanks to the conversion to a Double.\n\nFixing the issue is rather simple: check if the NumberFormat you get is a DecimalFormat, and if yes, simply call format.setParseBigDecimal(true) and the NumberFormat will interpret the values correctly.",
        "Ajaxified version of WebSession#getClientInfo should be added It would be nice to have Ajaxified version of WebSession#getClientInfo of of the box\r\n\r\nhere is the link to the discussion: http://markmail.org/message/ex3hxtynnmnktzgy\r\n\r\nMy implementation based on wicket quickstart is here: https://github.com/solomax/ajax-client-info/blob/master/src/main/java/org/ajax/ClientInfoBehavior.java\r\n\r\nThanks in advance"
    ],
    [
        "WICKET-4886",
        "WICKET-2296",
        "Do not register Ajax timer if the component is removed I have this example to show my problem:\r\nhttps://github.com/olze/WicketPanelReplace\r\n\r\nThis kind of architecture is used in a bigger application with about 30-35 panels where about 10 use Ajax to replace itself. The problem is that after the addOrReplace() the parent to the panel get lost which will lead to findParent() returning null. And because of that, the error \"Page not found for component...\" will be displayed.\r\n\r\nIts like a \"ping pong\" application which means i dont know what to display next - i get this information from a controller in the backend. For that reason i can not create a flow-based wizard like the wizard example because i dont know yet what to display.\r\n\r\nAs adviced in the mailing list i created this jira issue. I dont know if this is a bug or a feature request.",
        "LinkTree images provided without alt text The linkTree component has gif images for folder closed, open and expanding junction. These images are provided without alt text, which AFAIK should be the case."
    ],
    [
        "WICKET-5248",
        "WICKET-2223",
        "OnEventHeaderItem is still broken in 6.9.0 WICKET-5234 didn't fix properly the problem described in it.\r\nIt used the JavaScript that handles the event instead of registering the event.",
        "DiskPageStore::convertToPage cleanup String type = page != null ? page.getClass().getName() : null;\r\nthrow new IllegalArgumentException(\"Unknown object type + type\");\r\n\r\nshould be:\r\n\r\nString type = page != null ? page.getClass().getName() : null;\r\nthrow new IllegalArgumentException(\"Unknown object type\" + type);"
    ],
    [
        "WICKET-566",
        "WICKET-6070",
        "<scope>tests</scope> should be <scope>test</scope> In pom.xml for extension, the following is a typo:\n\t\t<dependency>\n\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t<artifactId>wicket</artifactId>\n\t\t\t<classifier>tests</classifier>\n\t\t\t<scope>tests</scope><------------ should be <scope>test</scope>\n\t\t</dependency>\n\nNow when using mvn eclipse:eclipse and mvn war I get an extra unnecessary test jar",
        "Provide factory methods for WizardButtonBar buttons This ticket aims to provide factory methods for {{WizardButtonBar}} buttons so these can be easier customized/styled"
    ],
    [
        "WICKET-6007",
        "WICKET-1808",
        "PageableListView constructor argument and set/getItemsPerPage are inconsistent I bumped into a little inconsistency, PageableListView constructors want an int like this:\r\npublic PageableListView(final String id, final IModel<? extends List<T>> model, int itemsPerPage)\r\n\r\nBut the set/getItemsPerPage and the property itemsPerPage use a long:\r\npublic final long getItemsPerPage()\r\npublic final void setItemsPerPage(long itemsPerPage)\r\nprivate long itemsPerPage;\r\n\r\n\r\n\r\n",
        "Implement a simple way to detect that an AJAX call is outstanding When using an integration testing tool such as Selenium, it would be convenient to be able to detect that an AJAX call is outstanding so that a test script can pause until the call returns."
    ],
    [
        "WICKET-4154",
        "WICKET-581",
        "Add localization resources for DataTable components Add localization for DataTable components (no records and navigation toolbars)",
        "IllegalArgumentException when using ../-paths in wicket:link-area See http://www.nabble.com/autolink-problem-with-img-and-relative-path-tf3761166.html for details."
    ],
    [
        "WICKET-4122",
        "WICKET-2354",
        "Event listener not properly detached for multipart AJAX requests We are using HtmlUnit for functional testing of a wicket application. We have several issues with it but one of the more critical problems arises whenever a multipart form is submitted via AJAX. Internally wicket apparently uses an iframe to submit the request and listens for the \"load\" event of this iframe to detect the success of the request.\r\n\r\nThe problem is that HtmlUnit fires the \"load\" event twice. I am not sure if this is a HtmlUnit problem (I do suspect that it is), but when looking at the wicket code I am wondering about these lines of javascript code:\r\n\r\nHere in wicket-ajax.js:1215 the event is attached\r\n\r\n Wicket.Event.add(iframe, \"load\", this.handleMultipartComplete.bind(this));\r\n\r\n\r\nAnd later in wicket-ajax.js:1246 it is detached\r\n\r\n // remove the event\r\n if (iframe.detachEvent)  \r\n \tiframe.detachEvent(\"onload\", this.handleMultipartComplete);  \r\n else  \r\n \tiframe.removeEventListener(\"load\", this.handleMultipartComplete, false);\r\n\r\nBut because the bind function returns a new object this should never work, right? I have attached a patch that fixes the problem in my environment, please take a look at it if this makes sense.\r\n\r\n",
        "PropertyModel does not support index only property (\"[0]\") When using a PropertyModel with a list as target and an index (\"[0]\") as property the PropertyModel cannot retreive the object from the list. When getObject() is called a IndexOutOfBoundsException is thrown.\r\n\r\nExample:\r\nList addresses = new List();\r\nnew PropertyModel(addresses, \"[0]\");\r\nmodel.getObject();\r\n\r\nException:\r\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\r\n\tat java.lang.String.charAt(String.java:687)\r\n\tat org.apache.wicket.util.lang.PropertyResolver.findGetter(PropertyResolver.java:509)\r\n\tat org.apache.wicket.util.lang.PropertyResolver.getGetAndSetter(PropertyResolver.java:338)\r\n\tat org.apache.wicket.util.lang.PropertyResolver.getObjectAndGetSetter(PropertyResolver.java:224)\r\n\tat org.apache.wicket.util.lang.PropertyResolver.getValue(PropertyResolver.java:91)\r\n\tat org.apache.wicket.model.AbstractPropertyModel.getObject(AbstractPropertyModel.java:113)\r\n\r\nI have attached a QuickStart (with 2 test; 1 with the current PropertyResolver and 1 with the patched PropertyResolver) and a patch file."
    ],
    [
        "WICKET-4108",
        "WICKET-912",
        "Define behavior of o.a.w.request.Url.isAbsolute() WICKET-4104 showed a problem in BaseWicketTester when the redirectLocation is checked whether it relative or absolute.\r\nThe check in Url.isAbsolute() returns false (i.e. it is relative) for url like 'http://example.com'.",
        "shink of resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax.js // general JS in wicket // JS loading by loaderclass Currently, when using basic ajax, a JS resource like \"resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax.js\" is included in head and called - this should short and/ or be replaced by fewer JS calls.\n\nAn aproach like the one the YUI team made would be much nicer in regards to header-size and downloaddata. So i would recommend to have wicket taken the same way as YUI and instead of adding several JS paths to the header only 1 loader class and this class then could feed the rest (same as for YUI in 2.3.0 now)."
    ],
    [
        "WICKET-2669",
        "WICKET-4133",
        "DataTable mutiple bottom toolbars are misplaced because of bad html DataTable mutiple bottom toolbars are misplaced because multiple <tfoot></tfoot> elemenst are generated. <tfoot> should be outside of the the RepeatingView.\r\n\r\nSOLUTION:\r\nIn DataTable.html change:\r\n-----------------------------------------------------------\r\n    <thead wicket:id=\"topToolbars\">\r\n\t    <wicket:container wicket:id=\"toolbar\"></wicket:container>\r\n    </thead>\r\n    <tfoot wicket:id=\"bottomToolbars\">\r\n\t    <wicket:container wicket:id=\"toolbar\"></wicket:container>\r\n    </tfoot>\r\n------------------------------------------------------------\r\nto\r\n------------------------------------------------------------\r\n    <thead><span wicket:id=\"topToolbars\">\r\n        <wicket:container wicket:id=\"toolbar\"></wicket:container>\r\n    </span></thead>\r\n    <tfoot><span wicket:id=\"bottomToolbars\">\r\n        <wicket:container wicket:id=\"toolbar\"></wicket:container>\r\n   </span></tfoot>\r\n------------------------------------------------------------",
        "Re-Open - Memory leak in Localizer (Just trying to get some attention to this issue as my heap dump still shows a massive amount of Localizer growing until out of mem)\r\n\r\nI noticed recently (and told on IRC) a problem with the Localizer and the way the getCacheKey() method works.\r\n\r\nI uses the component id of all component in the path to the component to create the key. But each page generation has a different id. This has been fixed recently by breaking outside of the loop which creates the key if the component's parent is a Page instance. This partially solves the always increasing cache. But it still has some issues:\r\n- with the page completely outside of the path, it could introduce some rare bugs when searching for keys defined in the page properties file (it shouldn't break but skip the \"buffer.append(\":\").append(cursor.getId())\" when the cursor is on a Page instance).\r\n- there is still a bunch of ids generated when you loop over a repeater (the component of type Item has a new id for every item in the list). this is mitigated by the fact that when doing a normal refresh of the view, the starting id restarts at 1, but if you have an Ajax paging view, it's not restarted and starts again to fill the cache with unwanted keys.\r\n\r\nthere are multiple options:\r\n- never include the id in the key (I'm not convinced it is necessary; is it really used in the String loader?)\r\n- don't include the id in the key if the cursor is on a component of type Page or Item\r\n- don't include the id if it's numeric (is this costly?)\r\n\r\nIn the meantime, I'll make a small fix in my local checkout of Wicket, not including the id if the cursor is on Page or Item"
    ],
    [
        "WICKET-3538",
        "WICKET-1285",
        "Checkboxes of the CheckBoxMultipleChoise do not get checked. Hi,\r\n\r\nThis issue is related to the mailthread regarding chekcing the checkboxes of the CheckBoxMultipleChoise list. Basically the checkboxes are not checked when the details object is loaded.\r\n\r\nhttp://mail-archives.apache.org/mod_mbox/wicket-users/201103.mbox/%3CAANLkTimzbY2XnCiqwdNa3NEpRoyVbntL0r4sbSb+4XwV@mail.gmail.com%3E\r\n\r\nAttached a quickstrat",
        "Choice components do not propery update models if type is set formcomponent.convertinput() checks if type is set and if it is it bypasses convertvalue() and uses a converter directly - which means if type is set choice component's choice renderer is bypassed and the submitted id value is set as the model object instead of the choice it represents."
    ],
    [
        "WICKET-4127",
        "WICKET-3949",
        "WicketTester / FormTester does not process addOrReplace properly when invoked from within a DropDownChoice onSelectionChanged handler ",
        "ClassCastException: IOException cannot be cast to NotSerializableException I've a page which was throwing NotSerializableException. So I just naively added \"implements Serializable\", and this is what I get now:\r\n\r\n{code}\r\n16:53:26,922 ERROR [lang.Objects] Error serializing object class org.jboss.jawabot.plugin.logger.web._pg.ChannelLogPage [object=[Page class = org.jboss.jawabot.plugin.logger.web._pg.ChannelLogPage, id = 0, version = 0]]\r\njava.lang.ClassCastException: java.io.IOException cannot be cast to java.io.NotSerializableException\r\n\tat org.apache.wicket.util.io.IObjectStreamFactory$DefaultObjectStreamFactory$2.writeObjectOverride(IObjectStreamFactory.java:129)\r\n\tat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326)\r\n\tat org.apache.wicket.util.lang.Objects.objectToByteArray(Objects.java:1124)\r\n\tat org.apache.wicket.protocol.http.pagestore.AbstractPageStore$PageSerializer.getPageReplacementObject(AbstractPageStore.java:285)\r\n\tat org.apache.wicket.Page.writeReplace(Page.java:1401)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n\tat java.lang.reflect.Method.invoke(Method.java:597)\r\n\tat java.io.ObjectStreamClass.invokeWriteReplace(ObjectStreamClass.java:1032)\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1115)\r\n\tat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1518)\r\n\tat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1483)\r\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1400)\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1158)\r\n\tat java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1346)\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1154)\r\n\tat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1518)\r\n\tat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1483)\r\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1400)\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1158)\r\n\tat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:330)\r\n\tat org.apache.wicket.util.io.IObjectStreamFactory$DefaultObjectStreamFactory$2.writeObjectOverride(IObjectStreamFactory.java:121)\r\n\tat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326)\r\n\tat org.apache.wicket.util.lang.Objects.objectToByteArray(Objects.java:1124)\r\n\tat org.apache.wicket.protocol.http.pagestore.AbstractPageStore.serializePage(AbstractPageStore.java:203)\r\n\tat org.apache.wicket.protocol.http.pagestore.DiskPageStore.storePage(DiskPageStore.java:840)\r\n\tat org.apache.wicket.protocol.http.SecondLevelCacheSessionStore$SecondLevelCachePageMap.put(SecondLevelCacheSessionStore.java:332)\r\n\tat org.apache.wicket.Session.requestDetached(Session.java:1435)\r\n\tat org.apache.wicket.RequestCycle.detach(RequestCycle.java:1176)\r\n\tat org.apache.wicket.RequestCycle.steps(RequestCycle.java:1462)\r\n\tat org.apache.wicket.RequestCycle.request(RequestCycle.java:545)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:486)\r\n\tat org.apache.wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:138)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:707)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\r\n\tat org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)\r\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:401)\r\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\r\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)\r\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\r\n\tat org.mortbay.jetty.Server.handle(Server.java:326)\r\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\r\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:928)\r\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:549)\r\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)\r\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\r\n\tat org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)\r\n\tat org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\r\n{code}\r\n\r\nBefore that, page rendering fails due to a NPE in my code.\r\n\r\n{code}\r\n16:53:26,808 ERROR [wicket.RequestCycle] Error attaching this container for rendering: [MarkupContainer [Component id = channelLogPanel]]\r\norg.apache.wicket.WicketRuntimeException: Error attaching this container for rendering: [MarkupContainer [Component id = channelLogPanel]]\r\n\tat org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1769)\r\n\tat org.apache.wicket.Component.onBeforeRender(Component.java:3966)\r\n\tat org.apache.wicket.Component.internalBeforeRender(Component.java:1066)\r\n\tat org.apache.wicket.Component.beforeRender(Component.java:1100)\r\n\tat org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1757)\r\n\tat org.apache.wicket.Component.onBeforeRender(Component.java:3966)\r\n\tat org.apache.wicket.Page.onBeforeRender(Page.java:1550)\r\n\tat org.apache.wicket.Component.internalBeforeRender(Component.java:1066)\r\n\tat org.apache.wicket.Component.beforeRender(Component.java:1100)\r\n\tat org.apache.wicket.Component.prepareForRender(Component.java:2292)\r\n\tat org.apache.wicket.Page.prepareForRender(Page.java:1540)\r\n\tat org.apache.wicket.Component.prepareForRender(Component.java:2329)\r\n\tat org.apache.wicket.Page.renderPage(Page.java:911)\r\n\tat org.apache.wicket.protocol.http.WebRequestCycle.redirectTo(WebRequestCycle.java:201)\r\n\tat org.apache.wicket.request.target.coding.HybridUrlCodingStrategy$HybridBookmarkablePageRequestTarget.respond(HybridUrlCodingStrategy.java:983)\r\n\tat org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:105)\r\n\tat org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1258)\r\n\tat org.apache.wicket.RequestCycle.step(RequestCycle.java:1329)\r\n\tat org.apache.wicket.RequestCycle.steps(RequestCycle.java:1436)\r\n\tat org.apache.wicket.RequestCycle.request(RequestCycle.java:545)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:486)\r\n\tat org.apache.wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:138)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:707)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\r\n\tat org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)\r\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:401)\r\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\r\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)\r\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\r\n\tat org.mortbay.jetty.Server.handle(Server.java:326)\r\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\r\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:928)\r\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:549)\r\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)\r\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\r\n\tat org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)\r\n\tat org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\r\nCaused by: java.lang.NullPointerException\r\n\tat org.jboss.weld.environment.se.jpa.EntityManagerDelegate.createQuery(EntityManagerDelegate.java:125)\r\n\tat org.jboss.jawabot.plugin.logger.bus.ChannelLogManager.getEventsByCriteria(ChannelLogManager.java:36)\r\n\tat org.jboss.jawabot.plugin.logger.bus.org$jboss$weld$bean-classpath-ManagedBean-class_org$jboss$jawabot$plugin$logger$bus$ChannelLogManager_$$_WeldSubclass.getEventsByCriteria(org$jboss$weld$bean-classpath-ManagedBean-class_org$jboss$jawabot$plugin$logger$bus$ChannelLogManager_$$_WeldSubclass.java)\r\n\tat org.jboss.jawabot.plugin.logger.bus.ChannelLogManager.getEventsByCriteria(ChannelLogManager.java:26)\r\n\tat org.jboss.jawabot.plugin.logger.bus.org$jboss$weld$bean-classpath-ManagedBean-class_org$jboss$jawabot$plugin$logger$bus$ChannelLogManager_$$_WeldSubclass.getEventsByCriteria(org$jboss$weld$bean-classpath-ManagedBean-class_org$jboss$jawabot$plugin$logger$bus$ChannelLogManager_$$_WeldSubclass.java)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n\tat java.lang.reflect.Method.invoke(Method.java:597)\r\n\tat org.jboss.interceptor.proxy.SimpleInterceptionChain.invokeNextInterceptor(SimpleInterceptionChain.java:114)\r\n\tat org.jboss.interceptor.proxy.InterceptorMethodHandler.executeInterception(InterceptorMethodHandler.java:133)\r\n\tat org.jboss.interceptor.proxy.InterceptorMethodHandler.invoke(InterceptorMethodHandler.java:112)\r\n\tat org.jboss.weld.bean.proxy.CombinedInterceptorAndDecoratorStackMethodHandler.invoke(CombinedInterceptorAndDecoratorStackMethodHandler.java:65)\r\n\tat org.jboss.jawabot.plugin.logger.bus.org$jboss$weld$bean-classpath-ManagedBean-class_org$jboss$jawabot$plugin$logger$bus$ChannelLogManager_$$_WeldSubclass.getEventsByCriteria(org$jboss$weld$bean-classpath-ManagedBean-class_org$jboss$jawabot$plugin$logger$bus$ChannelLogManager_$$_WeldSubclass.java)\r\n\tat org.jboss.jawabot.plugin.logger.web.IrcEventCriteriaLDM.load(IrcEventCriteriaLDM.java:40)\r\n\tat org.jboss.jawabot.plugin.logger.web.IrcEventCriteriaLDM.load(IrcEventCriteriaLDM.java:19)\r\n\tat org.apache.wicket.model.LoadableDetachableModel.getObject(LoadableDetachableModel.java:120)\r\n\tat org.apache.wicket.Component.getDefaultModelObject(Component.java:1724)\r\n\tat org.apache.wicket.markup.html.list.ListView.getViewSize(ListView.java:220)\r\n\tat org.apache.wicket.markup.html.list.ListView.onPopulate(ListView.java:511)\r\n\tat org.apache.wicket.markup.repeater.AbstractRepeater.onBeforeRender(AbstractRepeater.java:131)\r\n\tat org.apache.wicket.Component.internalBeforeRender(Component.java:1066)\r\n\tat org.apache.wicket.Component.beforeRender(Component.java:1100)\r\n\tat org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1757)\r\n\t... 36 more\r\n{code}"
    ],
    [
        "WICKET-3405",
        "WICKET-854",
        "POST fails if request.getParameter called by ServletFilter 1.5-RC1 implementation of the ServletWebRequest generatePostParameters method that calls request.getReader().\r\n\r\nThe result is that the POST fails in both jetty and Tomcat.\r\n\r\nThe ServletWebRequest.generatePostParameters method implementation attempts to handle this situation with a try catch that catchs IOException. If an IOException is thrown with the request.getReader() call then it uses request.getParameter() to get the POST parameters. However, in both jetty and tomcat 6, it is not an IOException that is thrown but an IllegalStateException.",
        "ModalWindow.setTitle needs to accept a model ModalWindow.setTitle() should accept a model so that it can have a ResourceModel passed to it for localization.  Right now only a String is allowed, but this would be desirable:\n\nmodalWindow.setTitle(new ResourceModel(\"title\"));\n\nSee for more details:\nhttp://www.nabble.com/Localizing-title-of-ModalWindow-tf4283094.html"
    ],
    [
        "WICKET-261",
        "WICKET-2109",
        "UploadProgressBar is unable to find component with id 'javascript' The following error is encountered since updating Wicket to the latest revision in branch 1.x:\n\n{noformat}\nUnable to find component with id 'javascript' in [MarkupContainer [Component id = _UploadProgressBarnullHeader1, page = com.caraldi.dashboard.FileUploadPage, path = 21:<auto>_header:_UploadProgressBarnullHeader1.HeaderPartContainer, isVisible = true, isVersioned = true]]. This means that you declared wicket:id=javascript in your markup, but that you either did not add the component to your page at all, or that the hierarchy does not match.\n[markup = file:/usr/home/jbq/var/repos/wicket/branches/wicket-1.x/wicket-extensions/target/classes/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.html, index = 3, current = '<script wicket:id=\"javascript\" type=\"text/javascript\">' (line 18, column 2)]\nwicket.markup.MarkupException: Unable to find component with id 'javascript' in [MarkupContainer [Component id = _UploadProgressBarnullHeader1, page = com.caraldi.dashboard.FileUploadPage, path = 21:<auto>_header:_UploadProgressBarnullHeader1.HeaderPartContainer, isVisible = true, isVersioned = true]]. This means that you declared wicket:id=javascript in your markup, but that you either did not add the component to your page at all, or that the hierarchy does not match.\n[markup = file:/usr/home/jbq/var/repos/wicket/branches/wicket-1.x/wicket-extensions/target/classes/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.html, index = 3, current = '<script wicket:id=\"javascript\" type=\"text/javascript\">' (line 18, column 2)]\n{noformat}\n\nAttached patch removes <wicket:head> and adds the JS as header contributor.",
        "IResourceStream.close is not called by ResourceStreamRequestTarget ResourceStreamRequestTarget.detach does nothing."
    ],
    [
        "WICKET-1843",
        "WICKET-6027",
        "Disabling RadioGroup via authorization strategy does not disable contained Radio buttons If you apply an authorization strategy to a RadioGroup which denies it ENABLE rights, it's corresponding Radio buttons do not also disable.",
        "Nested TransparentWebMarkupContainer, markup of inner component not found In the attached example page a FeedbackPanel should be rendered on AJAX-Request by pressing an AjaxButton. If you submit the form with empty input in TextField  'username\" you get a MarkupNotFoundError for the FeedbackPanel:\r\n\r\n\"org.apache.wicket.markup.MarkupNotFoundException: Markup not found for Component: [FeedbackPanel [Component id = feedback]]\r\n     at org.apache.wicket.Component.internalRender(Component.java:2348)\r\n     at org.apache.wicket.Component.render(Component.java:2308)\r\n     at org.apache.wicket.page.XmlPartialPageUpdate.writeComponent(XmlPartialPageUpdate.java:119)\r\n     at org.apache.wicket.page.PartialPageUpdate.writeComponents(PartialPageUpdate.java:245)\"\r\n\r\nThe MarkupNotFoundError is associated to the two TransparentWebMarkupContainer's in the page. If you remove one of them for example, the problem is gone.  \r\n  "
    ],
    [
        "WICKET-2163",
        "WICKET-4838",
        "Make Palette's \"Choices\" Model More Generics Friendly The Palette class suffers from the same issues as ListView and DropDownChoice.  It should be fixed similarly.",
        "TableTree duplicates after every expand/collapse I tried to create TableTree adopting example from google.code TableTree but using 6.1.1 Wicket and the TableTree which is now included in extensions.\r\n\r\nWhenever I click on a tree node in the table to expand/collapse it, creates another div with wicket:id=\"table\" and add it to the page. So then I have two tables the previous one and the new with changed node. If I repeat that it consequently adds  respective times many tables bellow. If I click to one of these old tables I get exception. If I refresh I got just the one correct tables and the page reloads.\r\n  \r\nI checked what Ajax response it generates and it looks correct - single correctly generated table. It seems to me that it does not replace correctly the old table and adds new one to the page.\r\n\r\nI'm very new to Wicket so there might be some trivial error I do which explains this behavior. "
    ],
    [
        "WICKET-945",
        "WICKET-5333",
        "WicketTester requiring itself to be serializable Similar to https://issues.apache.org/jira/browse/WICKET-727, in BaseWicketTester, it creates objects of anonymous classes as pages (DummyPanelPage). By definition, they refer to the tester itself and will try to drag it in when they're serialized.\n\npublic final Panel startPanel(final Class panelClass)\n\t{\n\t\treturn (Panel)startPage(new ITestPageSource()\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic Page getTestPage()\n\t\t\t{\n\t\t\t\treturn new DummyPanelPage(new TestPanelSource()\n\t\t\t\t{\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;",
        "wicket-bean-validation french translation French transalation for wicket-bean-validation to put in org\\apache\\wicket\\bean\\validation directory"
    ],
    [
        "WICKET-4599",
        "WICKET-1125",
        "Ajax request attributes should be passed to the dynamic parameters Ajax Editable components doesn't work because 'attrs' is not passed to the generated JavaScript function for the dynamic extra parameters for the Ajax call.",
        "SmartLinkLabel parser error new SmartLinkMultiLineLabel(\"l\", \"http://localhost http://localhost\") looks in browser like\n\nhttp://localhost\">http://localhost http://localhost\">http://localhost\n\nwhere http://localhost are links."
    ],
    [
        "WICKET-5712",
        "WICKET-4534",
        "SecuritySettings.setEnforceMounts() does not work when the mounted mapper is not in the root compound mapper BookmarkableMapper.isPageMounted() assumes that all mounted mappers are in Application.getRootRequestMapperAsCompound(). Sometimes the mappers make a tree structure, with multiple compounds existing, sometimes separated by wrappers, like HttpsMapper and CryptoMapper.\r\n\r\nBecause of this, BookmarkableMapper fails to realise that a page is mounted and so does not enforce mounting.",
        "Please add my book to the list of Wicket-Books Hey,\r\na few weeks ago my book on Wicket 1.5 got released:\r\nhttp://www.amazon.de/Wicket-Komponentenbasiert-objektorientiert-alternative-Java-Webframework/dp/3868020810\r\n\r\nIt's written in German and has been published by Entwickler Press.\r\n\r\n\r\nTitel\tWicket: Komponentenbasiert und objektorientiert- das alternative\r\nJava-Webframework\r\nAutor\tJochen Mader\r\nVerlag\tSoftware + Support, 2012\r\nISBN\t3868020810, 9783868020816\r\nL\u00e4nge\t219 Seiten\r\n\r\nKurzinfo\r\nApache Wicket ist ein komponentbasiertes Webframework, das sich in den\r\nletzten Jahren zu einem der beliebtesten Vertreter seiner Gattung\r\ngemausert hat. Man k\u00f6nnte diese Beliebtheit mit der einfachen\r\nIntegration von Ajax oder der rigorosen Trennung von Markup und Logik\r\nerkl\u00e4ren. Aber was Wicket wirklich \u00fcber die Masse konkurrierender\r\nFrameworks erhebt, sind der Verzicht auf eine eigene Markup-Sprache\r\nund das objektorientierte Programmiermodell. Dadurch r\u00fccken Java und\r\nseine Sprachmittel stark in den Vordergrund. Das erm\u00f6glicht es\r\nerfahrenen Entwicklern, sehr schnell in die Kernkonzepte von Wicket\r\neinzusteigen und auch komplexeste Anwendungen umzusetzen.\r\n\r\nZiel dieses Buchs ist es, die grundlegenden Konzepte von Wicket zu\r\nvermitteln und im weiteren Verlauf auf fortgeschrittene Aspekte\r\neinzugehen. Hierzu wird eine Beispielanwendung entwickelt und Schritt\r\nf\u00fcr Schritt erweitert. Anhand detaillierte Codebeispiele werden\r\nSachverhalte wie der Wicket Request Cycle, Models, Validierung und\r\nJUnit Testing erkl\u00e4rt. Des Weiteren werden Themen wie\r\nDeplyoment-Szenarien (JEE6, Spring, ...) , jQuery-Integration und\r\nPerformance-Tuning in separaten Kapiteln behandelt. Durch Studium\r\ndieses Buchs soll ein Entwickler bef\u00e4higt werden, skalierbare,\r\nwartbare Webanwendungen in Wicket zu bauen, und er soll lernen,\r\neigene, wiederverwendbare Komponenten zu entwickeln und fremde\r\nKomponenten zu erweitern.\r\nZielgruppe\r\nEntwickler mit soliden Java-Kenntnissen und einem Grundverst\u00e4ndnis der\r\nwichtigen Webtechnologien wie HTML und CSS\r\nDer Autor\r\nJochen Mader hat \u00fcber zehn Jahre Erfahrung  im Bereich Architektur und\r\nEntwicklung. Derzeit ist er bei der Senacor Technologies AG f\u00fcr\r\nverschiedene Wicket-Projekte als Technical Lead verantwortlich."
    ],
    [
        "WICKET-4562",
        "WICKET-4851",
        "Incorrect bookmarkable link to home page when using HttpsMapper and named parameter A page mounted with a named parameter and annotated with @RequireHttps has a bookmarkable link back to the application HomePage, the generated URL is incorrect and links back to the inner page minus the named parameter.\r\nInner page mounted with:\r\nmountPage(\"/innerpage/${idCode}\", InnerPage.class);\r\n\r\nThis link results in \"/innerpage\" and not \"/\" as would be expected.\r\nadd(new BookmarkablePageLink<Void>(\"homePageLink\", HomePage.class));",
        "IE8, IE7 javascript errors with Wicket 6 I am having problems with Javascript in IE8 and IE7. \r\nI am getting a flood of \r\nSCRIPT5007: Unable to get value of the property 'jQuery17209514285345432955': object is null or undefined \r\njquery-ver-1348220874405.js, line 3405 character 3 \r\nerrors to the console.\r\n\r\nThe problem can also be observed in the simple example \r\nwww.wicket-library.com/wicket-examples-6.0.x/ajax/modal-window \r\nJust open a modal window and close it by the X in the corner. Observe how the console is flooded with error messages. IE9 in IE8 mode will also do. \r\n\r\nTried it with wicket 6.2. Line numbers are for development mode javascript."
    ],
    [
        "WICKET-4529",
        "WICKET-1508",
        "AjaxEditableLabel not selecting text or moving cursor on Firefox 11.0 or Safari 5.0.5 The class Javadoc for AjaxEditableLabel says:\r\n\"\"\"\r\nonEdit(AjaxRequestTarget) is called when the label is clicked and the editor is to be displayed. The default implementation switches the label for the editor and places the caret at the end of the text.</li>\r\n\"\"\"\r\n\r\nHowever this does not happen on Firefox or Safari.\r\nLooking at the code, it is actually trying to place the caret at the end of the line _and_ selecting the text in the form field. (This -selecting the text- is what I also want, and also the most common behavior of such ajax-editable fields on other big websites on the Internet)\r\n\r\n\r\n// put focus on the textfield and stupid explorer hack to move the\r\n// caret to the end\r\ntarget.appendJavaScript(\"{ var el=wicketGet('\" + editor.getMarkupId() + \"');\" +\r\n\t\"   if (el.createTextRange) { \" +\r\n\t\"     var v = el.value; var r = el.createTextRange(); \" +\r\n\t\"     r.moveStart('character', v.length); r.select(); } }\");\r\ntarget.focusComponent(editor);\r\n\r\nHowever the \"stupid explorer hack\" as the code calls it, probably _only_ works on explorer, because the el.createTextRange method is quite old and deprecated (it's only needed on MSIE <9)\r\nI'm getting good results by just calling select() on the DOM element. I don't have MSIE available to test there but I think it will work there too.\r\n\r\n\r\n// put focus on the textfield and stupid explorer hack to move the\r\n// caret to the end\r\ntarget.appendJavaScript(\"{ var el=wicketGet('\" + editor.getMarkupId() + \"');\" +\r\n\t\"   el.select(); \" +\r\n        \" }\");\r\ntarget.focusComponent(editor);\r\n\r\n",
        "EmptyStackException parsing HTML \nI do not have an easy repro case for this, but it might be worth looking at whether the code should be more defensive.\n\njava.util.EmptyStackException\n\tat org.apache.wicket.util.collections.ArrayListStack.peek(ArrayListStack.java:101)\n\tat org.apache.wicket.util.collections.ArrayListStack.pop(ArrayListStack.java:84)\n\tat org.apache.wicket.markup.parser.filter.HtmlHandler.nextTag(HtmlHandler.java:134)\n\tat org.apache.wicket.markup.parser.filter.WicketRemoveTagHandler.nextTag(WicketRemoveTagHandler.java:60)\n\tat org.apache.wicket.markup.parser.filter.WicketLinkTagHandler.nextTag(WicketLinkTagHandler.java:94)\n\tat org.apache.wicket.markup.parser.AbstractMarkupFilter.nextComponentTag(AbstractMarkupFilter.java:82)\n\tat org.apache.wicket.markup.parser.filter.WicketNamespaceHandler.nextTag(WicketNamespaceHandler.java:72)\n\tat org.apache.wicket.markup.parser.AbstractMarkupFilter.nextComponentTag(AbstractMarkupFilter.java:82)\n\tat org.apache.wicket.markup.parser.filter.WicketMessageTagHandler.nextTag(WicketMessageTagHandler.java:81)\n\tat org.apache.wicket.markup.parser.AbstractMarkupFilter.nextComponentTag(AbstractMarkupFilter.java:82)\n\tat org.apache.wicket.markup.parser.filter.HtmlHeaderSectionHandler.nextTag(HtmlHeaderSectionHandler.java:77)\n\tat org.apache.wicket.markup.parser.filter.HeadForceTagIdHandler.nextTag(HeadForceTagIdHandler.java:77)\n\tat org.apache.wicket.markup.parser.AbstractMarkupFilter.nextComponentTag(AbstractMarkupFilter.java:82)\n\tat org.apache.wicket.markup.parser.filter.OpenCloseTagExpander.nextTag(OpenCloseTagExpander.java:51)\n\tat org.apache.wicket.markup.parser.AbstractMarkupFilter.nextComponentTag(AbstractMarkupFilter.java:82)\n\tat org.apache.wicket.markup.parser.filter.EnclosureHandler.nextTag(EnclosureHandler.java:76)\n\tat org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler.nextTag(RelativePathPrefixHandler.java:116)\n\tat org.apache.wicket.markup.MarkupParser.getNextTag(MarkupParser.java:302)\n\tat org.apache.wicket.markup.MarkupParser.parseMarkup(MarkupParser.java:322)\n\tat org.apache.wicket.markup.MarkupParser.parse(MarkupParser.java:270)\n\tat org.apache.wicket.markup.loader.SimpleMarkupLoader.loadMarkup(SimpleMarkupLoader.java:52)\n\tat org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader.loadMarkup(InheritedMarkupMarkupLoader.java:62)\n\tat org.apache.wicket.markup.loader.DefaultMarkupLoader.loadMarkup(DefaultMarkupLoader.java:55)\n\tat org.apache.wicket.markup.MarkupCache.loadMarkup(MarkupCache.java:433)\n\tat org.apache.wicket.markup.MarkupCache.loadMarkupAndWatchForChanges(MarkupCache.java:523)\n\tat org.apache.wicket.markup.MarkupCache.getMarkup(MarkupCache.java:319)\n\tat org.apache.wicket.markup.MarkupCache.getMarkupStream(MarkupCache.java:215)\n\tat org.apache.wicket.MarkupContainer.getAssociatedMarkupStream(MarkupContainer.java:343)\n\tat org.apache.wicket.Page.onRender(Page.java:1453)\n\tat org.apache.wicket.Component.render(Component.java:2315)\n\tat org.apache.wicket.Page.renderPage(Page.java:906)\n\tat org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:231)\n\tat org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:104)\n\tat org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1172)\n\tat org.apache.wicket.RequestCycle.step(RequestCycle.java:1243)\n\tat org.apache.wicket.RequestCycle.steps(RequestCycle.java:1331)\n\tat org.apache.wicket.RequestCycle.request(RequestCycle.java:493)\n\tat org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:363)\n\tat org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:194)\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1089)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)\n\tat org.mortbay.jetty.Server.handle(Server.java:291)\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:503)\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:841)\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:639)\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:210)\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:379)\n\tat org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:361)\n\tat org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)"
    ],
    [
        "WICKET-4126",
        "WICKET-5537",
        "Automatic Image Linking broken for images in base packages Automatic linking seems to be broken when used in conjunction with base classes and referencing relative images located in a different package.\r\n\r\nThe attached quickstart application contains a base page wicket.bugs.autolink.page.base.BasePage whose HTML references an image located at <BasePage Package>/theme/logo.png: <img src=\"theme/logo.png\" ...>\r\nWhen accessing this page via http://localhost:8080/base the image is rendered as expected.\r\n\r\nThe application contains a second page wicket.bugs.autolink.page.home.HomePage extending the BasePage and that adds a second reference to this image via <img src=\"../base/theme/logo.png\" ...>  => this kind of references used to work in Wicket 1.4\r\nWhen accessing this page via http://localhost:8080/home none of the two images (the one inherited from the base page and the one added) is displayed.\r\n\r\nThe inherited image reference is rendered as:\r\n   <img src=\"theme/logo.png\" border=\"1\" onclick=\"window.location.href=&#039;theme/logo.png&#039;;return false;\"/>\r\n  => theme/logo.png seems not to be an auto link\r\n  => I have no idea why an onclick event is rendered by Wicket\r\n\r\nand the explicitly added image reference is rendered as\r\n   <img src=\"wicket/resource/wicket.bugs.autolink.page.home.HomePage/../base/theme/logo-ver-1318516450215.png\" />\r\n  => accessing the URL http://localhot:8080/wicket/resource/wicket.bugs.autolink.page.home.HomePage/../base/theme/logo-ver-1318516450215.png results in:\r\n\r\nWARN  - WicketObjects              - Could not resolve class [base]\r\njava.lang.ClassNotFoundException: base\r\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:200)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\r\n\tat org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:424)\r\n\tat org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:377)\r\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\r\n\tat java.lang.Class.forName0(Native Method)\r\n\tat java.lang.Class.forName(Class.java:242)\r\n\tat org.apache.wicket.application.AbstractClassResolver.resolveClass(AbstractClassResolver.java:110)\r\n\tat org.apache.wicket.util.lang.WicketObjects.resolveClass(WicketObjects.java:68)\r\n\tat org.apache.wicket.request.mapper.BasicResourceReferenceMapper.resolveClass(BasicResourceReferenceMapper.java:143)\r\n\tat org.apache.wicket.request.mapper.BasicResourceReferenceMapper.mapRequest(BasicResourceReferenceMapper.java:120)\r\n\tat org.apache.wicket.request.mapper.ParentPathReferenceRewriter.mapRequest(ParentPathReferenceRewriter.java:83)\r\n\tat org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:130)\r\n\tat org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:179)\r\n\tat org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:204)\r\n\tat org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:251)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218)\r\n",
        "Wicket.DOM.toggleClass is called with additional \"#\" inside AutoLabelResolver With WICKET-5411 (commit 484415796aab76fc4f635b375cbf2b0cd604457f) JavaScript calls in AutoLabelResolver.updateFrom() where changed to use Wicket.DOM.toggleClass().\r\n\r\nIn one instance the leading \"#\" has been removed. The other two Wicket.DOM.toggleClass() calls still start with '#%s' which leads to double hashmarks and JS errors like the following in the browser:\r\n\r\nWicket.Ajax: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: Error: Syntax error, unrecognized expression: ##myComponentId7e-w-lbl, text"
    ],
    [
        "WICKET-1056",
        "WICKET-4290",
        "CreditCardValidator does not handle spaces or dashes The CreditCardValidator assumes that the provided input only contains numbers without spaces, dashes, etc.\n\nThe validator should be extended to properly handle these common input scenarios, perhaps with an optional attribute around stripping these unwanted characters from the input.",
        "Confusion between a form component's wicket:id and a PageParameter in Wicket 1.5.x A Form has a strange behavior when a component has the same wicket:id than a page parameter.\r\n\r\nTo create a Bookmarkable link after a form is submited, setResponsePage is called, and a PageParameter object is given as a parameter : \r\n\t\t\tPageParameters params = new PageParameters();\r\n\t\t\tparams.add(\"searchString\", searchField.getValue());\r\n\t\t\tsetResponsePage(SomePage.class, params);\r\n\r\nIn Wicket 1.5, if \"searchString\" is also a form-component's wicket:id, the form will only be submitted once : \r\nsearchField.getValue() will always return the first value entered by the user.\r\n\r\n\r\nHere's an example : \r\n\r\npublic class SearchPanel extends Panel {\r\n\r\n\tpublic SearchPanel(String id) {\r\n\t\tsuper(id);\r\n\t\tadd(new SearchForm(\"searchForm\"));\r\n\t}\r\n\r\n\tprivate class SearchForm extends Form<String> {\r\n\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\tprivate TextField<String> searchField;\r\n\r\n\t\tpublic SearchForm(String id) {\r\n\t\t\tsuper(id);\r\n\t\t\tsearchField = new TextField<String>(\"searchString\", new Model<String>(\"\"));\r\n\t\t\tadd(searchField);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onSubmit() {\r\n\t\t\tPageParameters params = new PageParameters();\r\n\t\t\tparams.add(\"searchString\", searchField.getValue());\r\n\t\t\tsetResponsePage(ListContactsPage.class, params);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nI tested the same application with Wicket 1.4.17 and it was fine. I only had this problem in Wicket 1.5.2 and 1.5.3."
    ],
    [
        "WICKET-4364",
        "WICKET-1954",
        "Think of a way to reintroduce show|hideIncrementally with the new Ajax impl Wicket.DOM.(show|hide)Incrementally functions are not used in current wicket-ajax-jquery.js impl.\r\nWe need to see whether this is needed and how to implement it.",
        "Component.isVisibilityAllowed() not consulted before calling onBeforeRender() I have a component whose parent does this:\n\nclass Parent extends Panel\n\nprivate Component child;\n\nonBeforeRender()\n{\nchild.setVisibilityAllowed(false);\nsuper.onBeforeRender();\n}\n\nI would expect child's onBeforeRender() to not be executed but it is, because Component.internalBeforeRender calls isVisible() rather than determineVisibility().\n\nShouldn't the following line in Component.internalBeforeRender():\n\n                if ((isVisible() || callOnBeforeRenderIfNotVisible()) && !getFlag(FLAG_RENDERING) &&\n                        !getFlag(FLAG_PREPARED_FOR_RENDER))\n\nbe this:\n\n                if ((determineVisibility() || callOnBeforeRenderIfNotVisible()) && !getFlag(FLAG_RENDERING) &&\n                        !getFlag(FLAG_PREPARED_FOR_RENDER))\n"
    ],
    [
        "WICKET-4544",
        "WICKET-5490",
        "FeedbackMessage.getReporter() returns null at accept(final FeedbackMessage message) overriding After migratin from 1.5.5 to 6 beta I've got a nullpointerExc. trying to execute feadback message filter. \r\nThat is my code: \r\n public final class SignInForm extends Form\r\n    {\r\n        private final ValueMap properties = new ValueMap();\r\n\r\n        final FeedbackPanel feedback = new FeedbackPanel(\"loginfeedback\"\r\n                , new IFeedbackMessageFilter()\r\n        {\r\n            public boolean accept(final FeedbackMessage message) {\r\n                if(SignInForm.this==message.getReporter())\r\n                    return true;\r\n                else return \"loginForm\".equals(message.getReporter().getId());\r\n            }\r\n        }\r\n        );\r\n\r\n        AjaxFallbackLink loginButton = new AjaxFallbackLink(\"loginbutton\")\r\n        {\r\n            @Override\r\n            public void onClick(AjaxRequestTarget target) {\r\n                if (target != null) {\r\n                    process(null);\r\n                }\r\n            }\r\n        };\r\n\r\n        public SignInForm(final String id)\r\n        {\r\n            super(id);\r\n            add(feedback);\r\n            TextField<String> loginField= new TextField<String>(\"login\", new PropertyModel<String>(properties, \"username\"));\r\n            TextField passwordField= new PasswordTextField(\"password\", new PropertyModel<String>(properties, \"password\"));\r\n\r\n            loginField.setRequired(true);\r\n            add(new Label(\"lll\",(new ResourceModel(\"LoginPanel.login\"))));\r\n            add(loginField);\r\n\r\n            passwordField.setRequired(true);\r\n            add(new Label(\"lpl\", new ResourceModel(\"LoginPanel.password\")));\r\n            add(passwordField);\r\n\r\n            add(loginButton);\r\n        }\r\n\r\n        @Override\r\n        public final void onSubmit()\r\n        {\r\n            super.onSubmit();\r\n\r\n            SignInSession session = (SignInSession)getPage().getSession();\r\n            // Sign the user in\r\n            if (session.authenticate(properties.getString(\"username\"), properties.getString(\"password\")))\r\n            {\r\n                if (session.getUser() != null\r\n                        && (session.getUser().getRole()==3))\r\n                    setResponsePage(ValidationPage.class);\r\n                else\r\n                    setResponsePage(MasterPage.class);\r\n\r\n            }\r\n            else\r\n            {\r\n                //  final String errmsg = getLocalizer().getString(\"loginError\", this, \"Unable to sign you in\");\r\n                error(\"Unable to sign you in\");\r\n                // continueToOriginalDestination();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n",
        "AuthenticatedWebApplication#onUnauthorizedPage() should work with Component, not Page As discussed at http://markmail.org/message/o2ayjxt7vb7dyjvf org.apache.wicket.authroles.authentication.AuthenticatedWebApplication#onUnauthorizedPage() should have a parameter with type 'Component', not 'Page' because this Page is partially constructed - on the constructor of org.apache.wicket.Component is executed.\r\nAll other super constructors (e.g. MarkupContainer, Page, WebPage, YourPage) are not."
    ],
    [
        "WICKET-5387",
        "WICKET-330",
        "Page#onInitialize called after an exception in the constructor of Page Page#onInitialize is called when the constructor of Page throws an exception, i.e. when the Page is not initialized correctly. This can cause additional exceptions which are usually added to an error log even in cases in which the exception in the constructor is handled (by Wicket). This issue is possibly related to WICKET-5083.\r\n\r\nAnother case of the problem occurs when setResponsePage(...) is used in the constructor to navigate away from a page that can't be initialized correctly.\r\n\r\nI'm attaching a quickstart.",
        "CheckBox incorrectly converts its model value when a custom Boolean converter is installed When I use a custom localized Boolean converter (using my custom IConverterLocator) that converts \"Ano\" to true and \"Ne\" to false (Czech words for \"yes\" and \"no\") the CheckBox with 'true' getModelObject() will render unchecked. The problem is that CheckBox uses Strings.isTrue() to convert a value returned by getModelObjectAsString() which uses converters. The result is that true is incorrectly converted to false...\n\ntrue -> convertToString() -> \"Ano\" -> Strings.isTrue() -> false"
    ],
    [
        "WICKET-3394",
        "WICKET-6010",
        "org.apache.wicket.request.mapper.parameter.PageParameters Comment org.apache.wicket.request.mapper.parameter.PageParameters \r\nChange:\r\n@deprecated use varios setter methods to set parameters\r\nto\r\n@deprecated use various setter methods to set parameters\r\n",
        "Downloading filenames containing ',' or ';' gives problems Since WICKET-4934 the \"filename\" in the Content-Disposition header is encoded in both ASCII and UTF-8 to show the filename in a cross browser compatible way. However, the implementation is not completely correct, and specifically causes problems when the filename contains ',' or ';' characters. Depending on the browser, the characters after the ',' or ';' are ignored, or an error is throwed.\r\n\r\nDownloading of a file \"Test; '\u00e4'.txt\" gives the following Content-Disposition header:\r\n{code}\r\nattachment; filename=\"Test;%20%27%C3%A4%27.txt\"; filename*=UTF-8''Test;%20%27%C3%A4%27.txt\r\n{code}\r\n\r\nI am not completely familiar with the standards and current browser support, but http://greenbytes.de/tech/tc2231/ suggests that the ASCII \"filename\" field should not be URL encoded, just specified using plain ISO-8859-1, surrounded by double quotes, escaping double quotes by '\\'. But this is not my biggest concern.\r\n\r\nThe UTF-8 \"filename*\" field is (correctly) not surrounded by quotes. As a result, all characters except ALPHA / DIGIT / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\" [should be URL encoded|https://tools.ietf.org/html/rfc5987#section-3.2.1]. This includes ',' and ';'. Wicket's (PATH) UrlEncoder however does not encode '*', ',', ':', '@', '=' and ';'. Not encoding the ';' or ',' causes browsers to ignore the remainder of the filename or even to throw errors.\r\n"
    ],
    [
        "WICKET-1444",
        "WICKET-4220",
        "AbstractDecimalConverter has a numberFormats fields that holds NumberFormats, But those are not thread save... We really should remove that map because now they can be used multi threaded because for example the DoubleConverter has a static INSTANCE variable..\n\nThe AbstractIntegerConverter doesnt do that caching for example, that returns a new Format instance everytime.\n\nThe problem is that we can remove that map just fine, expects that we have setNumberFormat(Locale,Format) method\nthats is a method that is very wrong because ot the caching, And they should use/override getNumberFormat when you call setNumberFormat..\n",
        "Clarify the behavior of Url#isAbsolute() and Url#toString() and Url#toAbsoluteString() "
    ],
    [
        "WICKET-2083",
        "WICKET-5510",
        "NPE when clearing DateTimeField  setDate() doesn't properly handle null values for the date parameter. When date is null the instance date field is properly set to null but the hours and minutes fields remain untouched, so if hours had previously been set, a NPE is thrown by line 239. I'll attach a test case to demonstrate the behavior and a proposed patch.",
        "Avoid using jQuery.text() when possible. It is very slow in IE WICKET-5132 explains a new performance problem with jQuery#text() function.\r\nIt would be good to use the same solution from the original problem in WICKET-5132 instead of jQuery.text() when possible."
    ],
    [
        "WICKET-611",
        "WICKET-2508",
        "AbstractRequestTargetUrlCodingStrategy ignores query parameters if there is no parameter in the path In AbstractRequestTargetUrlCodingStrategy in the decodeParameters() method, if there is no parameter specified in the path such as http://localhost:8080/Hello/app/foo?p1=def (assuming the page has been mounted as /foo), then it will immediately return an empty map, ignoring the possible query parameters (p1):\n\n\tprotected ValueMap decodeParameters(String urlFragment, Map urlParameters)\n\t{\n\t\t// Hack off any leading slash\n\t\tif (urlFragment.startsWith(\"/\"))\n\t\t{\n\t\t\turlFragment = urlFragment.substring(1);\n\t\t}\n\n\t\tif (urlFragment.length() == 0)\n\t\t{\n\t\t\treturn new ValueMap();  // RETURN IMMEDIATELY\n\t\t}\n\t\t...\n\t\tif (urlParameters != null)\n\t\t{\n\t\t\tparameters.putAll(urlParameters);  // THIS CODE IS NOT REACHED\n\t\t}\n\t\treturn parameters;\n\t}\n",
        "NullPointerException in BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:96) When had the following exception occurring in a production system, while running :\r\n\r\njava.lang.NullPointerException\r\n\tat org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:96)\r\n\tat org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92)\r\n\tat org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1241)\r\n\tat org.apache.wicket.RequestCycle.step(RequestCycle.java:1320)\r\n\tat org.apache.wicket.RequestCycle.steps(RequestCycle.java:1419)\r\n\tat org.apache.wicket.RequestCycle.request(RequestCycle.java:545)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:456)\r\n\tat org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:289)\r\n\tat com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87)\r\n\tat org.codesmell.jpsak.servlet.EntityManagerFilter.doFilter(EntityManagerFilter.java:40)\r\n\tat com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87)\r\n\tat com.softculture.services.errornotification.wicket.ENFilter.doFilter(ENFilter.java:45)\r\n\tat com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87)\r\n\tat com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:187)\r\n\tat com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:266)\r\n\tat com.caucho.server.hmux.HmuxRequest.handleRequest(HmuxRequest.java:452)\r\n\tat com.caucho.server.port.TcpConnection.handleConnection(TcpConnection.java:563)\r\n\tat com.caucho.server.port.TcpConnection$KeepaliveTask.run(TcpConnection.java:1177)\r\n\tat com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:759)\r\n\tat com.caucho.util.ThreadPool$Item.run(ThreadPool.java:681)\r\n\tat java.lang.Thread.run(Thread.java:619)\r\n\r\nAt least checking for null when doing \"if (behaviors.size() > idAsInt)\" in BehaviorRequestTarget would be good, maybe more is to be done (?)."
    ],
    [
        "WICKET-3107",
        "WICKET-4027",
        "DatePicker invisible inside Border -> JavaScript error 1. Add a DatePicker to a DateTextField.\r\n2. Add another DatePicker to a DateTextField inside a BoxBorder.\r\n3. Set the BoxBorder's body container invisible.\r\n4. Load the page.\r\n\r\nThere is a JavaScript error (Meldung: Objekt erforderlich Zeile: 1573 Zeichen: 3 Code: 0 URI: http://.../wicket/resources/org.apache.wicket.extensions.yui.YuiLib/calendar/calendar.js),\r\nand clicking the visible DatePicker has no effect.\r\n\r\n",
        "Consider dropping MockPageManager and use mock IPageStore instead Currently WicketTester setups custom IPageManager (MockPageManager) which has several problems:\r\n1) it saves stateless pages - touchPage(statelessPage) shouldn't be stored\r\n2) it calls #detach() for all pages ever stored in the map. it should call it only on the pages stored in the last request.\r\n\r\nIf we fix these problems then we are going to reimplement the default IPageManager (StorePageManager). So I suggest to drop MockPageManager and setup inmemory IPageStore behind it instead. This way we can test PageStoreBehavior as well."
    ],
    [
        "WICKET-209",
        "WICKET-5177",
        "Fixing AjaxLinkTest -------------------------------------------------------------------------------\nTest set: wicket.ajax.markup.html.ajaxLink.AjaxLinkTest\n-------------------------------------------------------------------------------\nTests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.19 sec <<< FAILURE!\ntestPage_2(wicket.ajax.markup.html.ajaxLink.AjaxLinkTest)  Time elapsed: 0.027 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: wicket/ajax/markup/html/ajaxLink/AjaxPage2-1_ExpectedResult.html expected:<...2...> but was:<...0...>\n\tat junit.framework.Assert.assertEquals(Assert.java:81)\n\tat wicket.util.diff.DiffUtil.validatePage(DiffUtil.java:103)\n\tat wicket.WicketTestCase.executedBehavior(WicketTestCase.java:122)\n\tat wicket.ajax.markup.html.ajaxLink.AjaxLinkTest.testPage_2(AjaxLinkTest.java:76)\n\nThe attached patch fixes issues with markup ids used in the AjaxRequestTarget.",
        "(Simple)FormComponentLabel could output \"required\", \"disabled\" and \"error\" classes when its form component has the same (Simple)FormComponentLabel could output \"required\", \"disabled\" and \"error\" classes when its form component is either required, disabled or invalid. This way it will be easier to style the label depending on its form component"
    ],
    [
        "WICKET-4919",
        "WICKET-1545",
        "AjaxLazyLoadPanel needs a method to add components to the AjaxRequestTarget when the component is rendered A component may need to update other components on a page when lazy load completes in same RequestCycle.  For example,  a component takes 5 seconds to load and then a feedback panel on the page needs to be updated summarizing the state of the lazily loaded component.\r\n\r\nIt would be intuitive to use if there was a method like:\r\n\r\npublic void onComponentLoaded(AjaxRequestTarget)\r\n\r\nIt may be possible to override getLoadingComponent(String markupId)  get to the AjaxRequestTarget but I was not able to do this for my test.  It may also be possible to override handleCallbackScript(IHeaderResponse response, String callbackScript) but that would require another round trip to the server. ",
        "problems with stateless forms and radiogroups/checkgroups I'm trying to use radiogroup/checkgroup with stateless form, and it is not possible at the moment. I get the following exception:\n\nsubmitted http post value [radio4] for RadioGroup component [0:form:whatever] is illegal because it does not contain relative path to a Radio componnet. Due to this the RadioGroup component cannot resolve the selected Radio component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission.\n\nI think the problem lies inside Check & Radio components, which use Page.getAutoIndex()  and that value is different before and after page submission for Check/Radio components.\n\nNow, it is not possible to override getValue() on Check/Radio components, so I'm kind of stuck now..."
    ],
    [
        "WICKET-3319",
        "WICKET-5411",
        "AjaxEditableMultilineLabel generates invalid HTML When using an AjaxEditableMultilineLabel, the generated markup looks like:\r\n\r\n<span onclick=\"[...]\">\r\n<p>1st paragraph</p>\r\n<p>2nd paragraph</p>\r\n</span>\r\n\r\nThis is invalid according to HTML spec (block elements (p) are not allowed within inline elements (span)).\r\n\r\nAjaxEditableMultilineLabel should be using a <div> element instead of the <span>.",
        "Improve AutoLabels by updating their CSS classes automatically during Ajax requests The problem with auto labels is that once they are rendered the only way to update their `error`/`required` css classes during ajax requests is to update some parent since auto components cannot be targeted directly. however, when dealing with forms we may not necessarily want to repaint components because we may lose state.\r\n\r\nThis issue solves the problem by tracking state changes in form components that have auto labels and updating their css classes on all ajax requests.\r\n\r\ndisabled by default in 6.13 (to enable override WebApplication#getUpdateAutoLabelsOnAjaxRequests() ), always enabled in 7.0"
    ],
    [
        "WICKET-2607",
        "WICKET-312",
        "Required fields remain required when enclsoure containing field is hidden ",
        "AjaxFormComponentUpdatingBehavior doesn't call onError when FormComponent is not valid in onEvent method, FormComponent is validated and when it is valid, model is updated. But when component is invalid onUpdate method is still called. I would be expecting onError method to be called when FormComponent is invalid such as in AjaxFormSubmitBehavior."
    ],
    [
        "WICKET-2512",
        "WICKET-5151",
        "executeAjaxEvent \"onclick\" does not cause RequestCycle.onBeginRequest() to be called I have a form with AjaxSubmitLink added. I generate the ajax \"onclick\" event to trigger the submit that is indeed triggered, in fact Form.onSubmit is called but wihout calling before a onBeginRequest so I cannot open the database transaction.",
        "Page param with same name as component on page If page has parameter with same name as component on the page, on submit field has value as array.\r\nSo just only first element of array is processed.\r\nIt's very difficult to investigate such problems, may be log as warning?\r\n\r\nFormComponent.convertValue(String[] value) and successors\r\nIf value has more than 1 value output warning.\r\n"
    ],
    [
        "WICKET-5643",
        "WICKET-2440",
        "WebPageRenderer should bind a Session if redirect is required and the session is temporary. WebApplication.storeBufferedResponse does not check if sessionId is null. This could lead to wrong behaviors as it happens  in the quickstart project. Let's say we have a stateless home page with page parameters that are populated inside page constructor. Under these conditions class WebPageRenderer will call storeBufferedResponse and will redirect the response to the final URL (line 289). But as the session is temporary, the buffered response is not consumed and  WebPageRenderer will rise a warning (line 194).\r\n\r\nI think we should check for null sessionId inside WebApplication or inside WebPageRender.\r\n",
        "ReuseIfModelObjectsEqualStrategy - Reuse Strategy for repeaters based on model objects Add new reuse strategy that allows reuse models if model objects have not changed. The existing ReuseIfModelsEqualStrategy can also be used to accomplish this, you must override the model's equals/hashcode for proper implementation. Using ReuseIfModelObjectsEqualStrategy will require provide equals/hashcode methods only for model objects.  Models themselves do not have to be changed.  There are only tiny changes required to the ReuseIfModelsEqualStrategy to create this new strategy"
    ],
    [
        "WICKET-3706",
        "WICKET-1521",
        "add message level 'success' to feedback messages It's very common that users request some action and the page finally report the outcome of the action using message level 'info'. However this is a little annoying since there is no obvious separation between informal messages like 'your input is valid', 'your account is not overdrawn', 'the operation took 3.5 seconds' and usually one success message like 'data has been saved', 'record has been deleted'. \r\n\r\nQuite a common use case is that the success message should be first in the feedback messages list, preferrably with some fancy checkmark style icon and info messages are subsequent  with some info-style icon.\r\n\r\nBy introduction of message level 'success' this task will be accomplished much easier.\r\n",
        "ClassCastException in MixedUrlCodingStrategy Line 154 expect a String. Sometimes a String is returned, sometimes String[] is returned.\n\nGuess this has something to do with the javax.servlet api."
    ],
    [
        "WICKET-4377",
        "WICKET-1312",
        "Deprecate Component#onMarkupAttached() Component#onMarkupAttached() is has the same semantics as Component#onInitialize() so it can be dropped. ",
        "Generic inter-component event mechanism The attached patch provides a generic mechanism for transmitting inter-component events within a page. This has grown primarily from the need to repaint all relevant ajax components after an event, but can be used also in non-ajax environments such as after normal form submits.\n\nThe basic idea is to fire an IVisitor on the page of the component sending an event, giving as an argument an event-specific listener interface that must be implemented by the components willing to receive the events. They can then do whatever they need such as add themselves to the AjaxRequestTarget that can be supplied in the event.\n\nSometimes the basic Wicket mechanisms such as sharing a model are not enough; particularly repainting all relevant components in Ajax events gets tedious if the components are far away from each other in a complex DOM tree.\n\nThe benefits of this approach are\n- loose coupling between the sending and receiving end\n- however, because of strong static typing it's easy enough to find with an IDE from where the events are broadcasted and where they are received\n- good testability (EventBroadcaster can be mocked on the sending end, and event handlers tested directly on the receiving end, possibly with mock events)\n- no need the keep references to Component instances or their paths (which could have been problematic on repeaters)\n\n(This is not a real observer or listener pattern implementation because the components cannot register and unregister themselves dynamically, but \"registering\" is handled statically on a class basis by implementing the relevant event receiver interface.)"
    ],
    [
        "WICKET-3914",
        "WICKET-3184",
        "Wicket 1.5 violates servlet standard, Glassfish spews warnings This seems to be a re-occurance of WICKET-1816.\r\n\r\nDeploying wicket-examples to Glassfish produces tens of warnings on each request in the server log with the following text:\r\nWARNING: PWC4011: Unable to set request character encoding to UTF-8 from context /wicket-examples, because request parameters have already been read, or ServletRequest.getReader() has already been called\r\n\r\nAccording to Glassfish faq http://wikis.sun.com/display/glassfish/FaqWebAppUnableToSetRequestCharEncoding:\r\n\"\"\"\r\nThis warning message means that the web container is complaining about the fact that the web application deployed at /your_webapp is trying to set the request encoding too late in the request's lifecycle, when it is impossible for the container to honor it.\r\n\r\nSee the javadocs of javax.servlet.ServletRequest.setCharacterEncoding():\r\n\r\n  This method must be called prior to reading request parameters or reading input using getReader(). Otherwise, it has no effect.\r\n\r\nThe container issues a warning to let you know that a call to ServletRequest.setCharacterEncoding() by your_webapp has no effect and is being ignored, because one of the above conditions is met.\r\n\r\nTo avoid this warning, your_webapp should move its invocation of ServletRequest.setCharacterEncoding() to an earlier stage, before it acquires any input reader from the request, or before it reads any request parameters. In case your_webapp is not responsible for this warning, one if its dependencies might be, in which case that library needs to be fixed.\r\n\"\"\"",
        "Make method getContentId of ModalWindow static My proposal is to make the method getContentId of the class ModalWindow STATIC to simplify a creation of the panel class that would serve as a base class for content components. It's always necessary to specify a content ID when we create a component which can be added as a window component. This content ID can be obtained only from an instance of the modal window which often is not convenient neither neccesary since it's just a constant kept in sync with the id in the window markup. Also there is no obvious reason to override this method."
    ],
    [
        "WICKET-831",
        "WICKET-377",
        "Return response status 404 when a mapper cannot decode a request url in a real production environment, you will get crawlers and users poking at urls and when that happens to produce an invalid request it's probably better to 404 the request than throw the current IllegalStateException we throw.  we might want to step back and think in general about invalid requests in production versus development mode.  i also think i suggested fairly recently that we should add an exception that 404s a request.  these two things could work together.\n\n\n",
        "Editing an AjaxEditableLabel, going to a new page, clicking the back button and editing the label again makes the page expire. Hi there,\nbasically I have a Listview that produces AjaxEditableLabels. Changing the label works fine. However, if you go on to a new page and then click the back button and try to edit that Label again, you get a \"Page Expired\" error message.\n\nQuickstart will follow"
    ],
    [
        "WICKET-3807",
        "WICKET-1954",
        "DataTable javadoc is just a bit incomplete The javadoc starts:\r\n\"A data table builds on data grid view to introduce toolbars (...) This makes it very simple to add a datatable to the markup, however, some flexibility.\"\r\n\r\n...and I guess some final words like \"is lost due to not being able to set your own html easily\" or something alike would do.",
        "Component.isVisibilityAllowed() not consulted before calling onBeforeRender() I have a component whose parent does this:\n\nclass Parent extends Panel\n\nprivate Component child;\n\nonBeforeRender()\n{\nchild.setVisibilityAllowed(false);\nsuper.onBeforeRender();\n}\n\nI would expect child's onBeforeRender() to not be executed but it is, because Component.internalBeforeRender calls isVisible() rather than determineVisibility().\n\nShouldn't the following line in Component.internalBeforeRender():\n\n                if ((isVisible() || callOnBeforeRenderIfNotVisible()) && !getFlag(FLAG_RENDERING) &&\n                        !getFlag(FLAG_PREPARED_FOR_RENDER))\n\nbe this:\n\n                if ((determineVisibility() || callOnBeforeRenderIfNotVisible()) && !getFlag(FLAG_RENDERING) &&\n                        !getFlag(FLAG_PREPARED_FOR_RENDER))\n"
    ],
    [
        "WICKET-719",
        "WICKET-1733",
        "[WICKET-673] breaks AbstractPageableView with AjaxPagingNavigator AbstractBehavior#isEnabled modification on WICKET-673 breaks the AbstractPageableView + AjaxPagingNavigator functionality.\n\nHere's a stack trace:\n\nUserList(AbstractPageableView).getRowCount() line: 231\t\nUserList(AbstractPageableView).getPageCount() line: 301\t\nAjaxPagingNavigationLink(PagingNavigationLink).getPageNumber() line: 84\t\nAjaxPagingNavigationLink(PagingNavigationLink).linksTo(Page) line: 126\t\nAjaxPagingNavigationLink(Link).isEnabled() line: 186\t\nAjaxPagingNavigationBehavior(AbstractBehavior).isEnabled(Component) line: 157\t\nAjaxPagingNavigationLink(Component).isBehaviorAccepted(IBehavior) line: 3124\t\nAjaxPagingNavigationLink(Component).detachBehaviors() line: 938\t\nAjaxPagingNavigationLink(Component).detachModels() line: 964\t\n\nThe call of AjaxPagingNavigationLink.isEnabled() when detaching the behaviors causes the AbstractPageableView.getRowCount to be called, and this causes the AbstractPageableView to cache the current number of the rows on the list. (@see setCachedItemCount(count) ). \n\nWhen the page is rendered again the list may not be rendered properly because of the old value found from the cache.\n\nNasty.\n\nIs the best way to fix this to clear the cache on AbstractPageableView.onAttach?\n\n",
        "WicketTester doesn't include form submitting component id in form submissions When submitting a form with an AJAX link (or other AJAX-based control), WicketTester doesn't include the id of the component that 'submitted' the form, meaning that in situations with nested forms, the wrong form's onSubmit() method may be called.\n\nWe're working around this problem by overriding the clickLink() and executeAjaxEvent() methods as follows:\n\n    @Override\n    public void clickLink(String path, boolean isAjax) {\n        Component linkComponent = getComponentFromLastRenderedPage(path);\n        if (linkComponent instanceof AjaxSubmitLink) {\n            AjaxSubmitLink link = (AjaxSubmitLink) linkComponent;\n            Map<String, Object> requestParams = getParametersForNextRequest();\n            requestParams.put(link.getInputName(), \"x\");\n        }\n        super.clickLink(path, isAjax);\n    }\n\n    @Override\n    public void executeAjaxEvent(Component component, String event) {\n        // Code borrowed from BaseWicketTester.\n\n        // Run through all the behavior and select the LAST ADDED behavior which\n        // matches the event parameter.\n        AjaxEventBehavior ajaxEventBehavior = null;\n        List behaviors = component.getBehaviors();\n        for (Iterator iter = behaviors.iterator(); iter.hasNext();) {\n            IBehavior behavior = (IBehavior) iter.next();\n\n            // AjaxEventBehavior is the one to look for\n            if (behavior instanceof AjaxEventBehavior) {\n                AjaxEventBehavior tmp = (AjaxEventBehavior) behavior;\n\n                if (event.equals(tmp.getEvent())) {\n                    ajaxEventBehavior = tmp;\n                }\n            }\n        }\n\n        // Workaround: If the behaviour is an AjaxFormSubmitBehavior then add the\n        // component's input name.\n        if (ajaxEventBehavior instanceof AjaxFormSubmitBehavior\n                && component instanceof FormComponent) {\n            String inputName = ((FormComponent) component).getInputName();\n            Map<String, Object> requestParams = getParametersForNextRequest();\n            requestParams.put(inputName, \"x\");\n        }\n\n        super.executeAjaxEvent(component, event);\n    }\n\n"
    ],
    [
        "WICKET-1657",
        "WICKET-540",
        "AjaxFallbackDefaultDataTable gives misleading error when fragment markup cannot be found If you call cellItem.add(new Fragment(\"foo\",\"bar\", myPage, model), but the fragment markup for \"bar\" isn't found in the markup for myPage, AjaxFallbackDefaultDataTable complains, \"failed to add a\n component with id [cell] to the provided [cellItem] object.\"  The error suggests making sure that cellItem.add was called.\n\nThis error can be misleading, especially since cellItem.add was called.  What really happened was the fragment with a given ID wasn't found, which should really have been an error in its own right.\n\nIt would be nice if the error message gave a better description indicating the reason why the component failed to add (e.g., an error in handling the Fragment).",
        " ServletWebRequest.getContextPath() ignores ContextPath as set by user (accesses HttpServletRequest directly) I'm running Wicket behind a front-end proxy. To fix certain issues with this I have set the ContextPath value in my application settings (and/or in Web.xml),  However, when using functions that attempt to get at the context path (e.g. continueToOriginalDestination()) the app does not respect my setting.\n\nThis is because in ServletWebRequest, getContextPath() directly accesses HttpServletRequest without checking the application settings.\n\nI believe it should first check the application settings, and only if ContextPath is /not/ set, then access the HttpServletRequest."
    ],
    [
        "WICKET-5970",
        "WICKET-3737",
        "UrlRenderer does not render fragments UrlRenderer does not render fragments in its urls. This turns out to be problematic when implementing the OAuth2 implicit grant flow, which requires are redirect to an url with a fragment.",
        "Remove DynamicImport-Package header from Wicket bundles Hi,\r\n\r\nWicket can be used in an OSGi container, out of the box it seems to work quite well. However, we experience some problems because of having multiple bundles which depend on Wicket.\r\n\r\nProblem: bundle refreshes caused by DynamicImport-Package\r\nAll Wicket bundles have a DynamicImport-Package: * entry in their manifests. This makes class loading easy, because the class loaders of the Wicket bundles have access to any exported packages from all bundles. This approach has one drawback; the Wicket bundles become implicitly dependent of all bundles which are used at least one time by a Wicket class loader. According to the OSGi specification, when a bundle is refreshed, all bundles which (explicitly or implicitly) depend on that bundle will also be refreshed. \r\n\r\nExample case: there is an OSGi container with some Wicket bundles loaded, and 2 bundles (bundleA and bundleB), both contain some Wicket components, so they import Wicket packages, they do not import packages from each other. Now we refresh BundleA, we expect only a refresh of only bundleA. In practice all Wicket bundles, bundleA and bundleB are refreshed. This is caused by the DynamicImport-Package, which makes the Wicket bundles implicitly import exported packages from bundleA and bundleB. When bundleA is refreshed, it will refresh also the Wicket bundles. Because of bundleB depends on Wicket, bundleB will also be refreshed. In a small project with a few bundles, this may not be a problem, but it can become a problem when the projects gets larger and you refresh bundles frequently (e.g. when using an OSGi container during development).\r\n\r\nSolution: delegate class loading to another bundle\r\nWhile deserializing components, Wicket uses its IClassResolver implementation to load the classes. The DefaultClassResolver uses the thread's context class loader (TCCL) and the classloader of the wicket core bundle (with the DynamicImport-Package). My idea is to remove the DynamicImport-Package header from all Wicket bundles and delegate class loading to another bundle. This bundle exports its OsgiClassResolver (implements IClassResolver) via the OSGi service registry (or a service and reference of Spring DM / Blueprint). This bundle will refresh when bundleA or bundleB is refreshed. Because of there are no bundles which depend on classes from the classResolver bundle, a refresh will not refresh other bundles and will be fast.\r\n\r\nIssues: A few class loading issues\r\nThere are a few spots where we experienced class loading issues. One of the problems is a missing implementation of resolveProxyClass in ObjectInputStream subclasses. Some work is done to solve class loading issues, e.g. by overriding the resolveClass method, but this works for normal classes, proxy classes are handled differently. This is a problem on 2 locations in org.apache.wicket.util.lang.Objects and in org.apache.wicket.util.io.IObjectStreamFactory. Last known issue is in org.apache.wicket.proxy.LazyInitProxyFactory (wicket-ioc), but this one is more complicated. To be able to create a new proxy instance, it needs a classLoader, which can access all interfaces used for the proxy. In a bundle with a DynamicImport, it is safe to pass the classloader of any class in that bundle, but when the DynamicImport-Package is removed, not all classes are visible, and it will throw an exception when one of the classes is not visible. To solve this, I had to extend the IClassResolver interface with one method: getClassLoader(); this classLoader is used when generating the proxy.\r\n\r\nSo summarized, the complete solution (based on Spring Dynamic Modules) looks like:\r\n\r\n// applicationContext.xml:\r\n...\r\n<osgi:reference id=\"classResolver\" interface=\"org.apache.wicket.application.IClassResolver\" />\r\n...\r\n<bean id=\"wicketApplication\" class=\"com.company.WicketApplication\"\r\n\tp:classResolver-ref=\"classResolver\"\r\n\t...\r\n/>\r\n...\r\n\r\n// set up application\r\npublic class WicketApplication extends Application {\r\n  private IClassResolver classResolver;\r\n\r\n  public void setClassResolver(IClassResolver classResolver) {\r\n    this.classResolver = classResolver;\r\n  }\r\n\r\n  @Override\r\n  public void init() {\r\n    super.init();\r\n\r\n    IApplicationSettings settings = getApplicationSettings();\r\n    settings.setClassResolver(this.classResolver);\r\n  }\r\n}\r\n\r\n\r\n// ClassResolver bundle:\r\n\r\n<bean id=\"classResolver\" class=\"com.company.osgi.OSGiClassResolver\" />\r\n\r\n<osgi:service ref=\"classResolver\">\r\n  <osgi:interfaces>\r\n    <value>org.apache.wicket.application.IClassResolver</value>\r\n  </osgi:interfaces>\r\n</osgi:service>\r\n\r\npublic class OSGiClassResolver extends org.apache.wicket.application.DefaultClassResolver {\r\n  @Override\r\n  public ClassLoader getClassLoader() {\r\n    return OSGiClassResolver.class.getClassLoader();\r\n  }\r\n}\r\n\r\nWhat do you think about this approach? Attached patch is created based on 1.4.10, seems to be compatible with versions up to 1.4.16. \r\n\r\nbest regards,\r\nDani\u00ebl"
    ],
    [
        "WICKET-2447",
        "WICKET-2611",
        "AjaxEditableLabel: newPanel - use Component instead of WebComponent for easier subclassing With the current implementation, subclasses are artifically limited to simple WebComponents.\r\n",
        "Class Cast Exception when combining UploadRequest, MultiPartForm, and MultiWindowSupport See the quick start.\r\n\r\nI get an error in the test case, but it is different than what I see in the web app, so I would recommend looking at the web app first.\r\n\r\nYou will find instructions on the home page of the quick start for recreating the issue.\r\n\r\nNote: I believe that is possible to recreate this with multi-window support off, but it seems more difficult and there are also situations where the exception isn't throw but there are url becomes mangled and includes parameters like this : org.apache.wicket.markup.html.WicketEventReference/wicket-event.js"
    ],
    [
        "WICKET-2232",
        "WICKET-1260",
        "org.apache.wicket.util.io.SerializableChecker StackOverflow Exception We are running into this error: org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.springframework.beans.factory.support.DefaultListableBeanFactory\r\n\r\nBut the problem is that once that error occurs it displays the Field hierarchy which literally looks like it's running into an infinite loop.  It goes on for miles in the log files.  Eventually it runs into a StackOverflowException or OutOfMemory exception.\r\n\r\nThere needs to be a way to limit the hierarchy or something.  It just keeps displaying the same thing over and over and over.\r\n",
        "CheckBox.setRequired() is not picked up in 1.3-final I found that when upgrading from 1.3-rc2 to 1.3-final, the setRequired() on a CheckBox I had was no longer registered as a field-error when posting the form with no value in the checkbox.\n\nSteps to reproduce:\n\nCreate a quickstrart project and put the following in the HomePage.java:\n\npublic class HomePage extends WebPage {\n    public HomePage(final PageParameters parameters) {\n    \tadd(new FeedbackPanel(\"feedback\"));\n    \t\n    \tForm f = new Form(\"f\");\n    \tadd(f);\n    \t\n    \tCheckBox agree = new CheckBox(\"agree\", new Model());\n    \tagree.setRequired(true);\n    \tf.add(agree);\n    \t\n    \tButton submit = new Button(\"submit\");\n    \tf.add(submit);\n    }\n}\n\n\nThen HomePage.html:\n\n<html xmlns:wicket=\"http://wicket.apache.org\">\n    <body>\n    \t<div wicket:id=\"feedback\">Feedback</div>\n    \t\n        <form wicket:id=\"f\">\n\t\t\t<label>Agree</label>\n\t\t\t<input type=\"checkbox\" wicket:id=\"agree\" />\n\t\t\t\n\t\t\t<input type=\"submit\" wicket:id=\"submit\" />        \t\n        </form>\n    </body>\n</html>\n\nWith 1.3-final I don't get a feedback/error message. With 1.3-rc2, the feedback message \"Field 'agree' is required.\" shows up when I post the form."
    ],
    [
        "WICKET-1622",
        "WICKET-4085",
        "expose the IItemFactory in RefreshingView I have modified the RefreshingView to expose the IItemFactory to facilitate dynamic row additions using the IItemFactory impl that was used to create the original rows onPopulate.  This allows code to use the protected methods of RefreshingView (newChildId(), newItem(), populateItem()) that they would normally have access to as well as promote code resue for this activity.",
        "Formatted label component A component that can be used to display formatted text. Especially numbers example Currency. "
    ],
    [
        "WICKET-2930",
        "WICKET-930",
        "Method isSelected in Select should be public Please change the scope of the method isSelected in the class  org.apache.wicket.extensions.markup.html.form.select.Select  to public so that it can be called from elsewhere or even overridden in subclasses elsewhere.\r\n\r\nBackground: In our current project we came to the conclusion that the Choice classes of the Wicket core are not suitable to implement panels with radio buttons, where the radio buttons need to be rendered from an EnumSet or from Collection. We particularly needed to be able to define the markup of each option in a template. Moreover we needed to be able to define the CSS classes on the option tag itself. Another requirement was Ajax support, in which the selection of a radio button is immediately submitted to the server. We had a look at the class org.apache.wicket.extensions.markup.html.form.select.Select which we knew was doing a good job for drop-down boxes in the way we needed it. We made the decision to create additional classes around it to support radio buttons. Our approach worked, but we had to use Java Reflection because the crucial method isSelected in the Select class is package local. Will there be changes in the Wicket core or in wicket-extensions to improve the support for radio buttons? I heard that in 1.5 there may be improvements.\r\n",
        "Wrap Guice-Injector with proxying for Objects Since the GuiceComponentInjector already has proxying support build in, I'd like to use this to inject other Objects besides from Components.\n\nA function like\n\nguiceComponentInjector.inject( Object xy )\n\nwould be great!\n\n"
    ],
    [
        "WICKET-5130",
        "WICKET-1197",
        "AutoCompleteTextField hides combo boxes - remove setting When I have AutoCompleteTextField in form and there are DropDowns below the autocomplete text field, AutoCompleteTextField drop down hides components below.\r\n\r\nSteps to simulate the behaviour:\r\n\r\n1.) I created maven project\r\nmvn archetype:generate -DarchetypeGroupId=org.apache.wicket -DarchetypeArtifactId=wicket-archetype-quickstart -DarchetypeVersion=6.6.0 -DgroupId=net.betlista -DartifactId=bugs-dropdown -DarchetypeRepository=https://repository.apache.org/ -DinteractiveMode=false\r\n\r\n2.) in pom.xml I enabled extensions\r\n\r\n3.) I changed getHomePage() in WicketApplication application to show my new test page\r\n\r\n4.) page markup is\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n\t<html>\r\n\t\t<head>\r\n\t\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n\t\t\t<title>Insert title here</title>\r\n\t\t</head>\r\n\t<body>\r\n\r\n\t\t<form>\r\n\t\t\t<input type=\"text\" wicket:id=\"auto\"/><br>\r\n\t\t\t<select wicket:id=\"drop1\"></select><br>\r\n\t\t\t<select wicket:id=\"drop2\"></select><br>\r\n\t\t\t<input type=\"text\" wicket:id=\"text\"/><br>\r\n\t\t</form>\r\n\r\n\t</body>\r\n</html>\r\n\r\n5.) Java class for page is\r\n\r\npackage net.betlista;\r\n\r\nimport java.util.Iterator;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\nimport org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\r\nimport org.apache.wicket.markup.html.WebPage;\r\nimport org.apache.wicket.markup.html.form.DropDownChoice;\r\nimport org.apache.wicket.markup.html.form.TextField;\r\n\r\npublic class AutoCompleteAndDropDownTestPage extends WebPage {\r\n\r\n    public AutoCompleteAndDropDownTestPage() {\r\n        add(new AutoCompleteTextField<Integer>(\"auto\") {\r\n            @Override\r\n            protected Iterator<Integer> getChoices(final String input) {\r\n                return getNewList(20).iterator();\r\n            }\r\n        });\r\n\r\n        add(new DropDownChoice<Integer>(\"drop1\", getNewList(15)));\r\n        add(new DropDownChoice<Integer>(\"drop2\", getNewList(10)));\r\n        add(new TextField<String>(\"text\"));\r\n    }\r\n\r\n    private static List<Integer> getNewList(final int upTo) {\r\n        final LinkedList<Integer> list = new LinkedList<Integer>();\r\n        for (int i = 0; i < upTo; i++) {\r\n            list.add(i);\r\n        }\r\n        return list;\r\n    }\r\n}\r\n",
        "add/remove all buttons in Palette component It would be nice if the Palette component had buttons to move all of the items from one side of the selectable options to the other.\n\nMany desktop applications with this style of data manipulation have these buttons to greatly speed up the process of adding large numbers of items to the selected items\n\n\neg:\n\n[ item ]      ( add all )                        [item]\n[ item ]      ( add selected)              [item]\n[ item ]      ( remove selected )      [item]\n[ item ]      ( remove all )                 [item]\n"
    ],
    [
        "WICKET-1737",
        "WICKET-306",
        "wicketTester does not find HTML mark-up if custom location is used. If a custom HTML mark-up location is used as described in the ApacheWicket Wiki  the wicketTester does not find mark-up to render pages.\n\nrefer to:\nhttp://cwiki.apache.org/WICKET/control-where-html-files-are-loaded-from.html#ControlwhereHTMLfilesareloadedfrom-InWicket1.3\n\nNevertheless running the application with ApacheTomcat 6.0.16 everything renders fine.\n\nRemark:\nwicketTester has been instanciated using custom test application extended from the application used, overriding newSession for different purpose.\n",
        "XML License Header Tests fail with Unicode BOM License header tests use FileReader, which is subject to a JDK bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n\nNamely, if the XML file is encoded using UTF-8 *and* has a BOM (this is optional), license check fails.\n\nWe might integrate Unicode Reader from http://koti.mbnet.fi/akini/java/unicodereader/ provided that the license is ASL compatible.\n\nA workaround is to remove the optional Unicode BOM.  I do that in Vim by using \"set nobomb\" and writing the file."
    ],
    [
        "WICKET-5246",
        "WICKET-3190",
        "Use ModalWindow settings for unloadConfirmation By digging in the code I found that Wicket.Window.unloadConfirmation is said to be replaced into / for Wicket 7.0 in profit of using settings of the ModalWindow.",
        "NPE in WicketFilter when a Page is requested via websocket Trying to add push capability to Wicket using atmosphere framework. Created a Page that generates async responce on request. When the Page is requested using long-polling or streaming technique via HTTP it works OK, but trying to get responce via WebSocket causes NPE in org.apache.protocol.WicketFilter. \r\n\r\nProject ZIP is attached. \r\n\r\nRun it with mvn jetty:run and try to connect to \"http://localhost:8080/atmosphere-wicket/\" using web socket-enabled browser (e.g. the Chrome) and Firefox 3.6 that does not support web sockets. You should see NPE in console in first case."
    ],
    [
        "WICKET-274",
        "WICKET-858",
        "ICLA from Stefan Kanev - DateTextField ",
        "warning note when using DefaultDataTable This error shows up in the logs:\nWARN   resolve, Please consider to change your java code to something like: orderByLink.add(getBodyContainer()); for the component hierarchy to better reflect the markup hierarchy."
    ],
    [
        "WICKET-361",
        "WICKET-5042",
        "junit dependency should be marked as 'provided' the wicket pom has junit marked as a \"compile\" dependency.  This really isn't necessary, and isn't desired as this will cause wicket webapps to package junit in the war file.\n\n{code:xml}\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>3.8.1</version>\n\t\t\t<type>jar</type>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n{code}\n\nWicket provides the WicketTester code for projects, but junit should either be marked as \"provided\" or \"optional\" to get around this.  Another option would be to create a \"wicket-tester\" module so that users would have to explicitly add that dependency to use this junit dependency.",
        "Cleanup FilteringHeaderResponseTest to make it more readable The Test for FilterHeaderResponse is difficult to read.\r\nThis is due to the fact that most of the TestCase is simply not used and marked with @Ignore.\r\nPlease apply the attached Patch that deletes all unused stuff.\r\nThank you."
    ],
    [
        "WICKET-5170",
        "WICKET-2640",
        "introduce add(index,Component)  in MarkupContainer Hi,\r\ncurrently the only way to add new items at any index(apart from end) is removing all children and then adding/recreating new children ,this might be ok for listview/dataview since the ideal way of using them is to reconstruct at render ,this though ok for them but will not be good for a repeater whose size is big/growing  . fortunately markupcontainer provides everything to introduce a method like add(index,component) which will have functionality like List#add(index,element). \r\nthe advantages of introducing this method will be in places like an infinite scroll repeater which can prevent the growing size by removing elements at start/end depending on scroll position and later can add the items back at start or end .\r\n",
        "SignIn2 Example Has Bad Source Code Link When you are on the SignIn2 Example (http://www.wicket-library.com/wicket-examples/signin2/?x=7*:org.apache.wicket.examples.signin2.SignIn2) and you click the \"Source Code\" link, you get a HTTP 404 error.\r\n\r\nLooks like the URL that the link is pointing to:\r\n\r\nhttp://www.wicket-library.com/wicket-examples/signin2/?x=7*sources:org.apache.wicket.examples.source.SourcesPage%26SourcesPage_class%3Dorg.apache.wicket.examples.signin2.SignIn2\r\n\r\nShould be pointing to:\r\n\r\nhttp://www.wicket-library.com/wicket-examples/signin2/?wicket:bookmarkablePage=sources:org.apache.wicket.examples.source.SourcesPage&SourcesPage_class=org.apache.wicket.examples.signin2.SignIn2\r\n\r\nThanks"
    ],
    [
        "WICKET-5027",
        "WICKET-5637",
        "FormTester#getInputValue() does not support Select/SelectOption nor other custom components The huge if-else statement in FormTester#getInputValue() is not extensible.",
        "Fix the encoding of the Chinese translations for Wizard component Reported on the users@ mailing lists: http://markmail.org/message/wbdffw5llrxfjqlq"
    ],
    [
        "WICKET-46",
        "WICKET-5062",
        "create new DatePicker in 1.3 ",
        "Update the list of HTML void elements with the latest HTML5 ones org.apache.wicket.markup.parser.filter.HtmlHandler#doesNotRequireCloseTag is a list of all HTML elements which do not require close tag.\r\n\r\nhttp://www.w3.org/TR/html5/syntax.html#void-elements defines several more than the ones we have at the moment."
    ],
    [
        "WICKET-500",
        "WICKET-1872",
        "org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation. org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.\n\nThe situation:\nmarkup:\n<span wicket:id=\"arrivalDateProperty\" id=\"arrivalDateProperty\"\n\t\t\t\t\ttype=\"text\" size=\"15\"></span>\n\nthe code:\n\t\t\tfinal DateField arrivalDatePropertyTextField = new DateField(\n\t\t\t\t\t\"arrivalDateProperty\");\n\t\t\tarrivalDatePropertyTextField.add(DateValidator\n\t\t\t\t\t.minimum(new DateMidnight().toDate()));\n\t\t\tadd(arrivalDatePropertyTextField);\n\nthe generated markup:\n<span id=\"arrivalDateProperty\" name=\"arrivalDateProperty\" type=\"text\" size=\"15\">\n  <span style=\"white-space: nowrap;\">\n    <input id=\"date0\" name=\"arrivalDateProperty:date\" value=\"25.04.07\" type=\"text\" size=\"8\"/>\n<span>&nbsp;<div style=\"display:none;z-index: 99999;position:absolute;\" id=\"date0Dp\"></div><img style=\"cursor: pointer; border: none;\" id=\"date0Icon\" src=\"resources/org.apache.wicket.extensions.yui.calendar.DatePicker/icon1.gif\" /></span><input type=\"hidden\"/>\n  </span>\n</span>\n\n\nThe stacktrace\nDateConverter.convertToObject(String, Locale) line: 37\t\nDateField(FormComponent).convert() line: 803\t\nForm$13.validate(FormComponent) line: 1051\t\n[...]\nshows that DateField 's convert() is called, which in this situation is looking for the parameter \"arrivalDateProperty\" whereas it probably should look for the parameter \"arrivalDateProperty:date\"\n\nProbably its DateTextField value should be validated.\n\nMy first shot would be delegating the the DateField 's convert() method to its DateTextField ' s convert() method,\nbut maybe the wicket way is different.\n\nmf",
        "Url for behaviour and isTemporary flag of behaviour. You add two behaviors to the Component. First behavior is temporary and the second is normal. \nNow the wicket creates the url by \"urlFor(final Component component, final IBehavior behaviour, final RequestListenerInterface listener)\" for second behavior with behaviourId=1. On the end of request the wicket removes the temporary behavior. Now the component contains only 1 but not 2 behaviors. And in the next request in method \"public final void processEvents(final RequestCycle requestCycle)\" the wicket  tries to find the behavior by its id. But the problem is with if (component.getBehaviors().size() > idAsInt) condition, and with the fact that index of behavior is incorrect.\n\nThe problematic classes with their methods:\n\n*org.apache.wicket.RequestCycle:*\n\tpublic final CharSequence urlFor(final Component component, final IBehavior behaviour,\n\t\tfinal RequestListenerInterface listener)\n\t{\n\t\tint index = component.getBehaviors().indexOf(behaviour);\n\t\tif (index == -1)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Behavior \" + this +\n\t\t\t\t\" was not registered with this component: \" + component.toString());\n\t\t}\n\t\tRequestParameters params = new RequestParameters();\n\t\tparams.setBehaviorId(String.valueOf(index));\n...\n==============================================================================================\n*org.apache.wicket.request.target.component.listener.BehaviorRequestTarget*\n\n\tpublic final void processEvents(final RequestCycle requestCycle)\n\t{\n\t\t// Preprocess like standard component request. Do all the initialization\n\t\t// necessary\n\t\tonProcessEvents(requestCycle);\n\n\t\t// Get the IBehavior for the component based on the request parameters\n\t\tfinal Component component = getTarget();\n\t\tfinal String id = getRequestParameters().getBehaviorId();\n\t\tif (id == null)\n\t\t{\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Parameter behaviorId was not provided: unable to locate listener. Component: \" +\n\t\t\t\t\t\t\tcomponent.toString());\n\t\t}\n\n\t\tfinal int idAsInt = Integer.parseInt(id);\n\t\tIBehaviorListener behaviorListener = null;\n\t\tif (component.getBehaviors().size() > idAsInt)\n"
    ],
    [
        "WICKET-4894",
        "WICKET-4382",
        "Internet Explorer fails fails to properly include conditional stylesheet links added via AjaxRequestTarget CSS references added like this\r\n\r\n  @Override\r\n  public void renderHead( IHeaderResponse response ) {\r\n    super.renderHead( response );\r\n    response.renderCSSReference( \r\n        new PackageResourceReference( getClass(), \"TestLabel.css\" ));\r\n    response.renderCSSReference( \r\n        new PackageResourceReference( getClass(), \"TestLabel-conditional.css\" ), null, null, \"gte IE 8\" );\r\n  }\r\n\r\nwill not be taken into account by Internet Explorer (tested with 8 and 9) at when rendering the document.\r\nI stepped though wicket-ajax.js and saw that the function added in Wicket.Head.Contributor.processComment will actually be executed and a new child node will be appended to the head node of the document. Unfortunately it seems IE disregards conditional comments added in this way.\r\n\r\nI encountered this using Wicket 1.5.4.\r\nI'll upload a quickstart.\r\n\r\n\r\n",
        "Attribute wicket:message not resolved within parent tag with InlineEnclosure Outer div uses Attribute wicket:enclosure. Some inner element uses Attribute wicket:message. This is not being resolved, however the tag variation is being resolved.\r\n\r\nquickstart attached:\r\nsee both h1 tags inside the inline enclosure div under \"#1\". The first h1 uses wicket:message tag, while the second uses the attribute."
    ],
    [
        "WICKET-1141",
        "WICKET-5987",
        "empty <wicket:fragment> shorthand <wicket:fragment /> does not work When making an empty fragment like so:\n\n<wicket:fragment wicket:id=\"emptyFragment\" />\n\nIt does not work, and all the html which follows the fragment until the end of the file is put into the fragment.\n",
        "StringLengthValidator does not validate, but cuts off input I have a change-password-page with a PasswordField with a StringValidator.lengthBetween( 3, 20 ).\r\n\r\nI ran into an error where I could paste a long password (>20 chars), and Wicket not throwing errors, but cutting the password to length 20.\r\n\r\nWicket version: 7.0\r\nChrome: 45\r\n\r\nThe maxlength is rendered as attribute on the element.\r\n\r\n<input id=\"password\" type=\"password\" name=\"password\" value=\"\" maxlength=\"20\" minlength=\"3\">"
    ],
    [
        "WICKET-3319",
        "WICKET-4670",
        "AjaxEditableMultilineLabel generates invalid HTML When using an AjaxEditableMultilineLabel, the generated markup looks like:\r\n\r\n<span onclick=\"[...]\">\r\n<p>1st paragraph</p>\r\n<p>2nd paragraph</p>\r\n</span>\r\n\r\nThis is invalid according to HTML spec (block elements (p) are not allowed within inline elements (span)).\r\n\r\nAjaxEditableMultilineLabel should be using a <div> element instead of the <span>.",
        "Unable to use wicket tester to simulate ajax behavior The tester is unable to simulate what happens on the browser when an ajax behaviour is attached to a dropdown choice. The test case that fails is included an is WicketTesterAjaxDropDown"
    ],
    [
        "WICKET-5445",
        "WICKET-4275",
        "Make CaptchaImageResource easier to extend and reuse Wicket-Extensions' CaptchaImageResource generates its image byte array in the private #render() method. By making this method protected it will be easy to use third-party/custom code to generate the image and re-use the invalidation logic.",
        "URL parameters containing a single quote are incorrectly escaped URL parameters containg a single quote are incorrectly escaped as e.g. \"Joe\\'s+Garage\". RFC 2396 doesn't prescribe this escaping, the resulting URL contains an unescaped backslash character (thus making it invalid), and Wicket doesn't undo this escaping when such parameters are parsed."
    ],
    [
        "WICKET-1398",
        "WICKET-3107",
        "AjaxFallbackButton not getting form AjaxFallbackButton is passing mForm instead of getForm() when calling onSubmit and onError.  Can be fixed by changing to:\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target) {\n\t\t\t\tAjaxFallbackButton.this.onSubmit(target,\n\t\t\t\t\t\tAjaxFallbackButton.this.getForm());\n\t\t\t}\n\n\t\t\tprotected void onError(AjaxRequestTarget target) {\n\t\t\t\tAjaxFallbackButton.this.onError(target, AjaxFallbackButton.this\n\t\t\t\t\t\t.getForm());\n\t\t\t}",
        "DatePicker invisible inside Border -> JavaScript error 1. Add a DatePicker to a DateTextField.\r\n2. Add another DatePicker to a DateTextField inside a BoxBorder.\r\n3. Set the BoxBorder's body container invisible.\r\n4. Load the page.\r\n\r\nThere is a JavaScript error (Meldung: Objekt erforderlich Zeile: 1573 Zeichen: 3 Code: 0 URI: http://.../wicket/resources/org.apache.wicket.extensions.yui.YuiLib/calendar/calendar.js),\r\nand clicking the visible DatePicker has no effect.\r\n\r\n"
    ],
    [
        "WICKET-6040",
        "WICKET-2148",
        "DebugBar not serializable exception After upgrading to 6.21.0 I encountered NotSerializableException when refreshing DebugBar in an ajax event. Martin Grigorov suspects this is related to https://github.com/apache/wicket/commit/562d43ccdd7f305f8ca641817f4b63a07ee8b6a6.\r\n\r\nTo reproduce this:\r\n1. start the application in development mode\r\n2. override onEvent in Application to refresh the DebugBar\r\npublic void onEvent(IEvent<?> event) {\r\n\t\tif(event.getPayload() instanceof AjaxRequestTarget) {\r\n\t\t\tAjaxRequestTarget target = (AjaxRequestTarget) event.getPayload();\t\t\t\r\n\t\t// if we are in development refresh the debugbar (if exists)\r\n\t\tif(getConfigurationType() == RuntimeConfigurationType.DEVELOPMENT) {\r\n\t\t\t\t\tComponent debugBar = page.get(\"debugBar\");\r\nif(debugBar != null) target.add(debugBar);\r\n\t\t}\r\n\t}\r\n\r\nFrom stacktrace it seems this is related to org.apache.wicket.ajax.AbstractAjaxResponse$AjaxHtmlHeaderContainer:\r\n\r\nCaused by: java.lang.RuntimeException: An error occurred while getting the model object for Component: [Component id = data, page = ro.emp.wicket.StandaloneHomePage, path = 2:debugBar:content:contributors:3:contrib:link:data.Label, isVisible = true, isVersioned = true, markup = [markup = jar:file:/home/fanfy/.m2/repository/org/apache/wicket/wicket-devutils/6.21.0/wicket-devutils-6.21.0.jar!/org/apache/wicket/devutils/debugbar/StandardDebugPanel.html\r\n<span wicket:id=\"data\"></span>, index = 0, current =  '<span wicket:id=\"data\">' (line 0, column 0)]]\r\n\tat org.apache.wicket.Component.getDefaultModelObject(Component.java:1617) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.Component.getDefaultModelObjectAsString(Component.java:1640) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.markup.html.basic.Label.onComponentTagBody(Label.java:131) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.Component.internalRenderComponent(Component.java:2536) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\t... 132 common frames omitted\r\nCaused by: org.apache.wicket.WicketRuntimeException: Internal error cloning object\r\n\tat org.apache.wicket.core.util.lang.WicketObjects.cloneObject(WicketObjects.java:361) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.core.util.lang.WicketObjects.sizeof(WicketObjects.java:425) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.devutils.debugbar.PageSizeDebugPanel$2.getObject(PageSizeDebugPanel.java:96) ~[wicket-devutils-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.devutils.debugbar.PageSizeDebugPanel$2.getObject(PageSizeDebugPanel.java:89) ~[wicket-devutils-6.21.0.jar:6.21.0]\r\n\tat org.apache.wicket.Component.getDefaultModelObject(Component.java:1612) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\t... 136 common frames omitted\r\nCaused by: java.io.NotSerializableException: org.apache.wicket.ajax.AjaxRequestHandler$1\r\n\t- field (class \"org.apache.wicket.ajax.AbstractAjaxResponse$AjaxHtmlHeaderContainer\", name: \"this$0\", type: \"class org.apache.wicket.ajax.AbstractAjaxResponse\")\r\n\t- object (class \"org.apache.wicket.ajax.AbstractAjaxResponse$AjaxHtmlHeaderContainer\", [AjaxHtmlHeaderContainer [Component id = _header_]])\r\n\t- element of array (index: 9)\r\n\t- array (class \"[Ljava.lang.Object;\", size: 18)\r\n\t- field (class \"org.apache.wicket.MarkupContainer$ChildList\", name: \"childs\", type: \"class [Ljava.lang.Object;\")\r\n\t- object (class \"org.apache.wicket.MarkupContainer$ChildList\", [[Component id = applicationTitle], [FocusComponentFeedbackPanel [Component id = feedbackPanel]], [DebugBar [Component id = debugBar]], [StackComponentContainerImpl [Component id = contentContainer]], [GlobalMenuPanel [Component id = menu]], [Fragment [Component id = customHeader]], [Fragment [Component id = customFooter]], [WebMarkupContainer [Component id = localeContainer]], [WebMarkupContainer [Component id = userInformations]], [AjaxHtmlHeaderContainer [Component id = _header_]]])\r\n\t- field (class \"org.apache.wicket.MarkupContainer\", name: \"children\", type: \"class java.lang.Object\")\r\n\t- root object (class \"ro.emp.wicket.StandaloneHomePage\", [Page class = ro.emp.wicket.StandaloneHomePage, id = 2, render count = 3])\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1180) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1377) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1173) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177) ~[na:1.7.0_80]\r\n\tat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347) ~[na:1.7.0_80]\r\n\tat org.apache.wicket.core.util.lang.WicketObjects.cloneObject(WicketObjects.java:306) ~[wicket-core-6.21.0.jar:6.21.0]\r\n\t... 140 common frames omitted",
        "AttributeModifier doesn't escape markup in model strings The AttributeModifier does not escape characters like & in model strings. \n\nExample code: \n\nitem.add(new AttributeModifier(\"title\", true, new Model(inschrijving.getOmschrijving(null))));\n\nThis will result in <element title=\"some text & some more text \" />"
    ],
    [
        "WICKET-3213",
        "WICKET-2788",
        "YuiLib private constructor but implements IClusterable and has serialVersionUID YuiLib has no non-static methods and private constructor but implements IClusterable\r\nand has a serialVersionUID.",
        "Make visitor api cleaner clean up the visitor api so we are not returning magic objects like IVisitor.CONTINUE and IVisitor.CONTINUE_BUT_DO_NOT_GO_DEEPER. it should also be possible to return null from the visitors, currently reserved for IVisitor.CONTINUE"
    ],
    [
        "WICKET-3109",
        "WICKET-2577",
        "Using PopupSettings creates page maps early See WICKET-3108 for a description of the background (and a quickstart to demonstrate)\r\n\r\nThe issue here is that whenever you create a link and add PopupSettings to it, it creates a page map.  The page map shouldn't be created until someone actually clicks the link, though.  The page map name will need to go in the URL, but the page map can be lazy-created.",
        "Cookies with special symbols in its values aren't properly saved Cookies with special symbols in its values aren't properly saved and as result of it aren't properly loaded.\r\nThe real example is usage of email name as a login in a login form with \"remember me\" feature.\r\n\r\nThe problem is that email name contains '@' symbol which is inside \"tspecials\" set according to rfc2068 (2.2), and so can't be used in cookie value.\r\nThe possible solution to this issue is to use \"quoted-string\" instead of \"token\", as described in rfc2109 (4.1).\r\n\r\nTo workaround this problem I override getValuePersister class of a Form class:\r\n\t\t@Override\r\n\t\tprotected IValuePersister getValuePersister() {\r\n\t\t\treturn new CookieValuePersister() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void save(String key, String value) {\r\n\t\t\t\t\tsuper.save(key, \"\\\"\" + value + \"\\\"\");\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\r\nWithout this workaround loaded value is just \"username\" instead of \"username@domain.name\".\r\n\r\nI believe the proper place to fix it in a Cookie class, but probably there are some historical reasons to don't follow RFC.\r\nE.g. in a jetty servlet-api-2.5-6.1.9 you can see following code:\r\n    // Note -- disabled for now to allow full Netscape compatibility\r\n    // from RFC 2068, token special case characters\r\n    // \r\n    // private static final String tspecials = \"()<>@,;:\\\\\\\"/[]?={} \\t\";\r\n\r\n    private static final String tspecials = \",; \";\r\n\r\nBut issue exists in tomcat implementation of servlet-api too and also depends on browser.\r\n\r\nSo I suggest to add workaround in wicket. Probably we should add quotes only if tspecials are contained inside cookie value, but in my workaround I don't care about two extra chars and also don't check whether value is already quoted."
    ],
    [
        "WICKET-1417",
        "WICKET-1728",
        "AjaxFormChoiceComponentUpdatingBehavior does not iterate over immediate children  The fix for issue #1258 seems to have broken the behavior in AjaxFormChoiceComponentUpdatingBehavior.  The renderHead method now emits javascript that iterates over the children of the child controls, but not the immediate children.",
        "remove obsolete check from LocalizedImageResource LocalizedImageResource contains an unnecessary check for parent-relative resources that is not needed anymore:\n\n  WicketRuntimeException: \"The 'src' attribute must not contain \n  any of the following strings: '..', './', '/.': ........\n\nSince WICKET-1428 was successfully closed wicket can handle parent-relative (..) links (in both 1.3 and 1.4).\n\nSo please remove this check:\n\n  org.apache.wicket.markup.html.image.resource.LocalizedImageResource:\n\n  private void loadStaticImage(final String path)\n  {\n\t  if ((path.indexOf(\"..\") != -1) || (path.indexOf(\"./\") != -1) || (path.indexOf(\"/.\") != -1))\n\t  {\n\t\t  throw new WicketRuntimeException(\n\t\t\t  \"The 'src' attribute must not contain any of the following strings: '..', './', '/.': path=\" + path);\n\t  }\n\n      // .... SNIP ....\n  }\n\n\nI did several tests with 1.3 and 1.4. Everything works like a charm now (once that nasty check is away :-)"
    ],
    [
        "WICKET-1013",
        "WICKET-1518",
        "spring component injection leads to deserialization error (or page expiration)  I made several tests on spring component injection and obtained the following results.\n\nThe test is simply a main page accessing a target page through a link.\n\n1/ A spring component is injected in the target page as a class field using jdk 1.5 annotation and this component is itself a Spring proxy (a POJO proxy or an EJB3 proxy).\n    a) The link is a PageLink ==> This configuration leads to a deserialization error or a page expiration error whatever Serialization scheme I use (wicket new one or Java serialization).\n    b) The link is a BookMarkablePageLink ==> it works.\n\n2/ A spring component is injected in the target page as a class field using jdk 1.5 annotation and this component is a concrete POJO.\n    a) The link is a PageLink ==> This configuration leads to a page expiration error if I use the Java Serialization scheme or alternatively a page expiration error or a serialization error with the wicket serialization scheme.\n    b) The link is a BookMarkablePageLink ==> it works.\n\n3/ A spring component is accessed through a service locator when needed (so it's not a class field)\n      It works for both  PageLink and BookMarkablePageLink \n\nThus, the spring injection can only be used in pages accessed through a BookMarkablePageLink , for other kind of  links one must use a service locator to avoid proxy serialization.\nI suspect that this is not the expected behaviour.\n\n\nVincent",
        "I am implementing IFormVisitorParticipant to a nested form to stop it from being processed, but the root form still validates the sub forms validators(ex: EqualInputValidator) I am implementing IFormVisitorParticipant to a nested form to stop it from being processed, but the root form still validates the sub forms validators(ex: EqualInputValidator).\n\nDetails: I am implementing IFormVisitorParticpant in a panel where my nested form resides,  the form has formcomponents which are set to required. When the processChildren() is set to return false everything works as normall, none of the formcomponents are visited. But, when I add a IFormValidator such as EqualInputValidator to my nested form, the root form somehow validates only the validator (EqualInputValidator ) which I add to the nested/sub form.\n\nI've tried to ask this in the Wicket forum http://www.nabble.com/Submit-a-form-and-ignore-nested-forms-td13794970.html#a16580699 "
    ],
    [
        "WICKET-2717",
        "WICKET-2083",
        "bookmarkablepagelink broken on ajaxupdate bookmarkablepagelink broken on ajax update ,i see the problem in 1.4.6,1.4.5 doesn't have it.\r\nI am attaching the quickstart for the problem.",
        "NPE when clearing DateTimeField  setDate() doesn't properly handle null values for the date parameter. When date is null the instance date field is properly set to null but the hours and minutes fields remain untouched, so if hours had previously been set, a NPE is thrown by line 239. I'll attach a test case to demonstrate the behavior and a proposed patch."
    ],
    [
        "WICKET-2166",
        "WICKET-5774",
        "Invalid nested form tag name when the form is not visible and setoutputmarkupplaceholdertag(true) has been called when the an innerform is invisible and you called setoutputmarkupplaceholdertag(true), onComponentTag not processed and an invalid form tag name results: \r\n\r\n<form wicket:id=rootform>\r\n  <form wicket:id=nestedform style=\"display: none\">\r\n</form></form>\r\n\r\nComponent.render(final MarkupStream markupStream) {\r\n\r\n...\r\n\r\nif (determineVisibility()) {\r\n\r\n // render -> replace form with div\r\n\r\n} else if (markupStream != null)\r\n{\r\n if (getFlag(FLAG_PLACEHOLDER))\r\n {\r\n final ComponentTag tag = markupStream.getTag();\r\n renderPlaceholderTag(tag, getResponse()); ///////////////////////\r\nHere form does not replace \"form\" with \"div\"\r\n}\r\nmarkupStream.skipComponent();\r\n}\r\n",
        "UrlRenderer should render full and absolute urls in their canonical form Full and context absolute urls which start with './' and/or '../' segments should be normalized.\r\nFor example: http://www.example.com:8888/./../one/two/three should be rendered as http://www.example.com:8888/one/two/three"
    ],
    [
        "WICKET-3712",
        "WICKET-1923",
        "Replace \"<single-character>\" with '<single-characte>' when appending StringBuilder I noted that someone changed a couple of places where this occurs in the RC3 to RC4 upgrade; \r\nchanging '[\" to '[', etc. Well, if someone is energetic, there are some 500 places in the\r\nwicket core code where this could be \"fixed\". Appending a character is marginally faster than\r\nappending a string with a single character and it is actually more correct - appending a character\r\nrather than a string. Running the following script:\r\nfind .  -name '*.java' -type f -exec grep --with-filename '\".\"' {} \\;\r\none can find all of the lines in the src.\r\nIf you want to write a script that fixes all places where this occurs be careful that you do not\r\nfix any of the javascript or regular expression patterns.\r\nThe other wicket modules and test code also have characters being appended as strings.\r\n\r\nA lot of effort for a little benefit.",
        "use of replaceComponentTagBody in onComponentTag MarkupException: Tag expected Test.java\n------------\npublic class Test extends WebPage {\n\n\tpublic Test() {\n\t\tadd(new WebMarkupContainer(\"test\") {\n        \t\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\treplaceComponentTagBody(getMarkupStream(), tag, \"\");\n\t\t\t}\n        \t});\n\t}\n}\n\nTest.html\n------------\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:wicket=\"http://wicket.apache.org/\">\n    <body>\n\t\t<span wicket:id=\"test\"></span>\n\t</body>\n</html>\n\nThe code above will generate a org.apache.wicket.markup.MarkupException: Tag expected. Expected behavior is to replace the component body with whatever is in the third argument of replaceComponentTagBody\n\nRegards\nPer"
    ],
    [
        "WICKET-833",
        "WICKET-5162",
        "/wicket-datetime/   org.apache.wicket.util.license.JavaScriptLicenseHeaderHandler failed. -------------------------------------------------------\n T E S T S\n-------------------------------------------------------\n[surefire] Running org.apache.wicket.util.license.ApacheLicenceHeaderTest\n\norg.apache.wicket.util.license.JavaScriptLicenseHeaderHandler failed. The following files(4) didn't have correct license header:\nNONE /home/fnk64/tmp/wicket-1.x/jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar.js\nNONE /home/fnk64/tmp/wicket-1.x/jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom.js\nNONE /home/fnk64/tmp/wicket-1.x/jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo.js\nNONE /home/fnk64/tmp/wicket-1.x/jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event.js\n\n[surefire] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0,124 sec <<<<<<<< FAILURE !! \n[INFO] ------------------------------------------------------------------------\n",
        "InlineEnclosure markup id could collide in the final page markup WICKET-5085 introduced a 'counter' variable in InlineEnclosureHandler that should make the component id of the InlineEnclosure unique in its parent.\r\nBut the component id is also used as markup id and this leads to a problem when InlineEnclosure is used in different panel because a new instance of InlineenclosureHandler is used and its 'counter' value starts from 0 again."
    ],
    [
        "WICKET-1210",
        "WICKET-3918",
        "Proposal to remove 'final' modifier for PagingNavigationIncrementLink.getPageNumber() I wish to add a special behaviour to \"PagingNavigationIncrementLink.getPageNumber()\", which is final:\nhttp://www.nabble.com/PagingNavigationIncrementLink-special-behaviour-tf4935583.html\n\nShort: I extended \"PagingNavigationIncrementLink.onClick()\" so that more data is loaded from a service. After that I still want that the Page is changed, so I call \"pageable.setCurrentPage(getPageNumber());\".\nThe \"return Math.max(0, Math.min(pageable.getPageCount() - 1, idx));\" breaks my neck because \"pageable.getPageCount()\" is missing the new added Page.\n\nIt would be very helpful if PagingNavigationIncrementLink.getPageNumber() would not be final.",
        "NPE when requesting http://example.com/app/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/ When requesting the following URL, the default caching strategy throws a NullPointerException and this is logged. This request is performed by some spider agent of Microsoft (trying to kill Wicket!) with user agent 'Microsoft Office Protocol Discovery':\r\n\r\nUrl=http://example.com/app/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/\r\n\r\njava.lang.NullPointerException: caching strategy must not return an empty filename\r\n        at org.apache.wicket.request.mapper.BasicResourceReferenceMapper.mapRequest(BasicResourceReferenceMapper.java:102)\r\n        at org.apache.wicket.request.mapper.ParentPathReferenceRewriter.mapRequest(ParentPathReferenceRewriter.java:83)\r\n        at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:129)\r\n        at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:183)\r\n        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:208)\r\n        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253)\r\n        at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:160)\r\n        at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:216)\r\n\r\nA couple of points:\r\n - the exception should log which strategy caused the empty filename\r\n - the exception might want to log the requested URL for the resource\r\n - perhaps a NullPointerException is not the best exception to throw, but rather something that results in a 404 or a 403\r\n - maybe not even throwing an exception is the best way to handle this case, instead rely on the container or another mapper to take the lead?\r\n\r\n"
    ],
    [
        "WICKET-30",
        "WICKET-4503",
        "Nice and more practical url scheme I'd like our urls to be redesigned. Currently, there are lot of issues, such as not preserving bookmarkable urls after action on page or not preserving page state when using ajax on pages with bookmarkable urls.\n\nWe should introducte hybrid urls - urls that would contains both page class and page instance id.\nExample of url of mounted page with hybrid url:  /my/page/param1/value1[25]\n\nWhen such url is entered, wicket would first try to retrieve page with id 25. If the page is found, it would check whether the class matches with given mount point. If so, it would show the page, otherwise new page instance would be created and the url would be redirected to e.g.\n/my/page/param1/value1[31]  (where 31 would be new page instance).\n\nAlso (this would be configurable per page class), after entering bookmarkable url, the browser would be automatically redirected to hybrid url. For instance user enters /my/page and gets immediately rendered to /my/page[4]   where 4 is new page instance. The benefit of this would be that ajax changes on page would be persisted after refreshing the page, which is not the case with current bookmarkable urls.",
        "org.apache.wicket.datetime.markup.html.form.DateTextField#getConverter() is final, should not be Martin on the mailing list:\r\n\r\nI see no reason why to keep the final at\r\norg.apache.wicket.datetime.markup.html.form.DateTextField#getConverter()\r\nThere are several other places where #getConverter() is overridden and\r\nit is not final there."
    ],
    [
        "WICKET-1931",
        "WICKET-163",
        "FormTester doesn't correctly submit a form when a FileUploadField was not set (which is not required) FormTester doesn't correctly submit a form when  a FileUploadField was not set.\nThis file is not required.\n\nSo it is impossible to create a real test because I am forced to always set a File to check to whole form.\n\nThere was discussion about this problem here: http://www.nabble.com/FormTester-and-FileUploadField-td18566869.html\n\n\nI will be very grateful if you can fix it :)\nArtur",
        "rating variable in RatingPanel should be of type IModel<Float> or IModel<Double> instead of IModel<Integer> In the code of the RatingPanel (259) there is a comment line with the \nfollowing text:\n// add the text label for the message 'Rating 4.5 out of 25 votes'\nwith the following code\nratingLabel = newRatingLabel(rater, \"rating\", rating, nrOfVotes);\nwhere the 'rating' variable should have the value '4.5' (see comment), but the type of this object is IModel<Integer>.\nI think this should be changed into IModel<Float> or IModel<Double>."
    ],
    [
        "WICKET-3615",
        "WICKET-3176",
        "ModalWindow does not work in Opera 11.10 and MSIE 6 ModalWindow does not work properly in Opera 11.10 (and 11.01). Instead of window content, browser's error page is displayed (\"Internal communication error: Check that the address is spelled correctly, or try searching for the site.\" There is \"http:///\" in the search bar of the error page.) In the error console there is the following message:\r\n\r\n---------------\r\n[4/14/2011 10:25:44] JavaScript - http://wicketstuff.org/wicket14/ajax/modal-window.0;jsessionid=C7287377789A7518B81C198CA3D1CE0D\r\nEvent thread: load\r\nUncaught exception: ReferenceError: Security error: attempted to write protected variable\r\nError thrown at line 414, column 0 in <anonymous function: onload>() in http://wicketstuff.org/wicket14/ajax/resources/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal.js:\r\n    this.content.contentWindow.name = this.settings.iframeName;\r\ncalled via Function.prototype.apply() from unknown location in <anonymous function: Function.prototype.bind>() in http://wicketstuff.org/wicket14/ajax/resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js:\r\n    /* no source available */\r\n---------------\r\n\r\nExample in which the error occurs (after clicking the link to open the modal window):\r\nhttp://wicketstuff.org/wicket14/ajax/modal-window\r\n\r\nI tried also other versions of Wicket (1.5-RC3, 1.4.15, and 1.4.10) - with the same result.\r\n\r\nSimilar situation is with MSIE 6 under some circumstances. If it uses a local proxy server, you get to MSIE's error page \"The page cannot be displayed\" with \"http:///\" in the address bar. If proxy server is disabled (by unchecking \"Automatically detect settings\" in Options/LAN settings; or when connecting the notebook in another network with no proxy server), the content of the modal window displays as expected.\r\n",
        "URLResourceStream loads target content twice. In PageA.class, there is an 'Include' component that tries to load http://localhost:8080/page-b.\r\nIn PageB.class, which is mounted as 'page-b', will print some dummy letters when class is initialized.\r\n\r\nWhen web server is requested to load PageA, server console will print the dummy letters twice. That is, one request will print 2 lines of dummy letters.\r\n\r\nI traced into Include.class, it uses URLResourceStream.class to load the URL. \r\nAfter reading the source, I found this URLResourceStream.class requested the URL twice: 1st in the constructor, 2nd in getInputStream().\r\n\r\nCan this be amended to request once to save some bandwith/server time?"
    ],
    [
        "WICKET-2997",
        "WICKET-1023",
        "AbstractResource should give access to the error message for http errors AbstractResource lets you set the errorCode if something goes wrong but not a custom error message. This is really annoying because the user/developer does not get any hint why something goes wrong.\r\n\r\ncurrent:\r\n\r\n\t\t\tresponse.sendError(data.getErrorCode(), null);        // <------ always null, no custom error message\r\n\r\n\r\n\r\nI attached a simple patch to fix this.\r\n\r\n",
        "Release Wicket 1.3.0-beta4 "
    ],
    [
        "WICKET-3705",
        "WICKET-3142",
        "AjaxSubmit in modal window doesn't call form.onSubmit() before ending request When a AjaxSubmitLink is used to submit a form inside a ModalWindow, and inside the AjaxSubmitLink#onSubmit() the window is closed, wicket doesn't call Form.onSubmit()\r\n\r\nSee attached quickstart for the scenario.",
        "Adding AjaxFormComponentUpdatingBehavior to dropdownchoice does not work When firing the onchange of the dropdown a nullpointer occurs on the java side. Also notice that the user are not getting displayed the exception page.\r\n\r\nPlease run the attached quickstart, and select something in the dropdown."
    ],
    [
        "WICKET-413",
        "WICKET-5162",
        "Switch tree implementations for 1.3 I think we should switch implementations of the tree in core and in extensions. This was done for 2.0, so this can be considered a back port.",
        "InlineEnclosure markup id could collide in the final page markup WICKET-5085 introduced a 'counter' variable in InlineEnclosureHandler that should make the component id of the InlineEnclosure unique in its parent.\r\nBut the component id is also used as markup id and this leads to a problem when InlineEnclosure is used in different panel because a new instance of InlineenclosureHandler is used and its 'counter' value starts from 0 again."
    ],
    [
        "WICKET-3193",
        "WICKET-4297",
        "SerializableChecker writeObjectMethodCache  Map never holds a Method In the SerializableChecker the Map writeObjectMethodCache never holds any\r\nMethod objects. In the internalCheck method, there is the following code:\r\n\r\n      Method writeObjectMethod = null;\r\n      Object o = writeObjectMethodCache.get(cls);\r\n      if (o != null)\r\n      {\r\n        if (o instanceof Method)\r\n        {\r\n          writeObjectMethod = (Method)o;\r\n        }\r\n      }\r\n      else\r\n      { .... }\r\n\r\nNo where is a Method ever put into the writeObjectMethodCache Map so the\r\ninstanceof test always fails.",
        "Wicket autocomplete when click right into the popup list without moving the mouse will not selelect the item under the mouse instead of just doing this:\r\n\r\n          \thideAutoComplete();\r\n\r\nwe need to do:\r\n\r\n          \twindow.setTimeout( hideAutoComplete, 500);\r\n\r\nso that the mouse events are handled first before the window is removed."
    ],
    [
        "WICKET-236",
        "WICKET-2442",
        "need to externalize ability to create urls targetted for behaviors into requestcycle from abstractajaxbehavior right now the url for behavior creation is only defined in abstractajaxbehavior, we need a method on request cycle that looks like this:\nrequestcycle.urlfor(component,behavior,interface)\nand on component like this:\ncomponent.urlfor(behavior, interface)\n\n",
        "Palette, NullPointer When I try to add a Palette to a Page, I get an NullPointerException.\r\n\r\nStacktrace:\r\n\r\nWicketMessage: Error attaching this container for rendering: [MarkupContainer [Component id = palette]]\r\n\r\nRoot cause:\r\n\r\njava.lang.NullPointerException\r\nat org.apache.wicket.extensions.markup.html.form.palette.component.Recorder.initIds(Recorder.java:99)\r\nat org.apache.wicket.extensions.markup.html.form.palette.component.Recorder.onBeforeRender(Recorder.java:86)\r\nat org.apache.wicket.Component.internalBeforeRender(Component.java:1061)\r\nat org.apache.wicket.Component.beforeRender(Component.java:1095)\r\nat org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1751)\r\nat org.apache.wicket.Component.onBeforeRender(Component.java:3863)\r\nat org.apache.wicket.extensions.markup.html.form.palette.Palette.onBeforeRender(Palette.java:191)\r\nat org.apache.wicket.Component.internalBeforeRender(Component.java:1061)\r\nat org.apache.wicket.Component.beforeRender(Component.java:1095)\r\nat org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1751)\r\nat org.apache.wicket.Component.onBeforeRender(Component.java:3863)\r\nat org.apache.wicket.Component.internalBeforeRender(Component.java:1061)\r\nat org.apache.wicket.Component.beforeRender(Component.java:1095)\r\nat org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1751)\r\nat org.apache.wicket.Component.onBeforeRender(Component.java:3863)\r\nat org.apache.wicket.Page.onBeforeRender(Page.java:1501)\r\nat org.apache.wicket.Component.internalBeforeRender(Component.java:1061)\r\nat org.apache.wicket.Component.beforeRender(Component.java:1095)\r\nat org.apache.wicket.Component.prepareForRender(Component.java:2232)\r\nat org.apache.wicket.Component.prepareForRender(Component.java:2269)\r\nat org.apache.wicket.Page.renderPage(Page.java:893)\r\nat org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:262)\r\nat org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:105)\r\nat org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1258)\r\nat org.apache.wicket.RequestCycle.step(RequestCycle.java:1329)\r\nat org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428)\r\nat org.apache.wicket.RequestCycle.request(RequestCycle.java:545)\r\nat org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:456)\r\nat org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:289)\r\nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\r\nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\r\nat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\r\nat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\r\nat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\r\nat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\r\nat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\r\nat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\r\nat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)\r\nat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\r\nat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)\r\nat java.lang.Thread.run(Thread.java:619)\r\n\r\nCode:\r\n\r\npublic class HomePage extends WebPage {\r\n\r\n    public HomePage() {\r\n        Form _form = new Form(\"form\");\r\n        add(_form);\r\n\r\n        List<ChoiceModelObject> _availableChoices = new ArrayList<ChoiceModelObject>();\r\n        _availableChoices.add(new ChoiceModelObject(0, \"a\"));\r\n        _availableChoices.add(new ChoiceModelObject(1, \"b\"));\r\n        _availableChoices.add(new ChoiceModelObject(2, \"c\"));\r\n        _availableChoices.add(new ChoiceModelObject(3, \"d\"));\r\n\r\n        ChoiceRenderer<ChoiceModelObject> _choiceRenderer = new ChoiceRenderer<ChoiceModelObject>() {\r\n\r\n            @Override\r\n            public Object getDisplayValue(ChoiceModelObject choiceModelObject) {\r\n                return choiceModelObject.getName();\r\n            }\r\n\r\n            @Override\r\n            public String getIdValue(ChoiceModelObject modelObject, int i) {\r\n                return String.valueOf(modelObject.getId());\r\n            }\r\n        };\r\n\r\n        _form.add(new Palette(\"palette\", new ListModel(), new CollectionModel(_availableChoices), _choiceRenderer, 10, true));\r\n    }\r\n\r\n    class ChoiceModelObject implements Serializable {\r\n        private int id;\r\n        private String name;\r\n\r\n        public ChoiceModelObject() {\r\n        }\r\n\r\n        private ChoiceModelObject(int id, String name) {\r\n            this.id = id;\r\n            this.name = name;\r\n        }\r\n\r\n        public int getId() {\r\n            return id;\r\n        }\r\n\r\n        public void setId(int id) {\r\n            this.id = id;\r\n        }\r\n\r\n        public String getName() {\r\n            return name;\r\n        }\r\n\r\n        public void setName(String name) {\r\n            this.name = name;\r\n        }\r\n    }\r\n}\r\n"
    ],
    [
        "WICKET-647",
        "WICKET-2199",
        "New Wicket Portlet support I'm providing a new solution for Wicket Portlet support, see also my initial proposal on the wicket-dev list: http://www.nabble.com/A-new-proposal-for-Wicket-Portlet-support-tf3836652.html\n\nAs this solution will require a few (but not very much) changes to Wicket core, I'll create a separate branch first to let everyone involved review and test it out.\nI'll also create separate sub tasks in JIRA to record the changes required and the new features provided so each can be reviewed individually and we can have step-by-step discussions how to proceed in bringing this solution into the main trunk.\n\nNote: as current Wicket development is getting close to the 1.3.0 release, I don't expect all of this to be merged into the trunk until after the 1.3.0 release.\nBut some of my proposed changes really are very light and non-intrusive, so I can imagine (and hope) those can be integrated in the trunk even before the 1.3.0 release.\nThat definitely would make it easier for me to provide portlet support to my own development team using the wicket core trunk and only a few additional patches.\n ",
        "org.apache.wicket.settings.Settings#addStringResourceLoader(final IStringResourceLoader loader) does not conform to its JavaDoc The JavaDoc states that:\r\n\r\n\t/**\r\n\t * Add a string resource loader to the chain of loaders. If this is the first call to this\r\n\t * method since the creation of the application settings then the existing chain is cleared\r\n\t * before the new loader is added.\r\n\t * \r\n\t * @param loader\r\n\t *            The loader to be added\r\n\t */\r\n\tvoid addStringResourceLoader(final IStringResourceLoader loader);\r\n\r\nHowever, the implementation of this in org.apache.wicket.settings.Settings does not conform to the \"If this is the first call to this method since the creation of the application settings then the existing chain is cleared before the new loader is added.\".  It simply adds it to the list of stringResourceLoaders:\r\n\t/**\r\n\t * @see org.apache.wicket.settings.IResourceSettings#addStringResourceLoader(org.apache.wicket.resource.loader.IStringResourceLoader)\r\n\t */\r\n\tpublic void addStringResourceLoader(final IStringResourceLoader loader)\r\n\t{\r\n\t\tstringResourceLoaders.add(loader);\r\n\t}\r\n\r\nThis causes issues when you're trying to add a custom resourceLoader to your application which defines a key which is already defined by some of the existing resourceLoaders."
    ],
    [
        "WICKET-4085",
        "WICKET-2496",
        "Formatted label component A component that can be used to display formatted text. Especially numbers example Currency. ",
        "problems with ISO-8859-1 to UTF-8 convertion With WICKET-2451was introduced new logic that allows to create property files on UTF-8. Old property files in ISO-8859-1 are supposed to be converted on the fly to UTF-8. Don't know exactly what is failing but the result is that pages that displayed fine with wicket-1.4.1 no longer do with 1.4.2. I attach a quick-start showing the problem.  "
    ],
    [
        "WICKET-5333",
        "WICKET-5573",
        "wicket-bean-validation french translation French transalation for wicket-bean-validation to put in org\\apache\\wicket\\bean\\validation directory",
        "FilterToolbar generics broken Once you were able to create DataTable<User> wrapped inside of\r\nFilterForm<UserFilterDto>\r\n\r\ncurrently FilterToolbar requires you for those two types to be identical:\r\n\r\n{code}\r\npublic <T, S> FilterToolbar(final DataTable<T, S> table, final\r\nFilterForm<T> form,\r\nfinal IFilterStateLocator<T> stateLocator)\r\n{code}\r\n\r\nIt looks like commit 9b3f9ca1df064fe9c6fde64ccc37fecc504b09a6\r\nintroduced a bug long time ago and it carried on:\r\n\r\n{code}\r\n-       public <T> FilterToolbar(final DataTable<?> table, final\r\nFilterForm<T> form,\r\n+       public <T> FilterToolbar(final DataTable<T> table, final\r\nFilterForm<T> form,\r\n{code}\r\n\r\nFilterToolbar constructor should state:\r\n\r\n{code}\r\npublic <T, F, S> FilterToolbar(final DataTable<T, S> table, final\r\nFilterForm<F> form,\r\nfinal IFilterStateLocator<F> stateLocator)\r\n{code}"
    ],
    [
        "WICKET-3122",
        "WICKET-1338",
        "MarkupNotFoundException happens if there's a component inside another with wicket:message attribute Hi,\r\nI am just in the process of migrating my project to 1.5(-M2.1), and discovered a problem when there's a markup like this:\r\n\r\n<span wicket:message=\"title:favoriteCount.tip\"><wicket:message key=\"favoriteCount\">FAVORITE COUNT</wicket:message><span wicket:id=\"favoriteCount\" /></span>\r\n\r\nand Java file like this:\r\n\r\n        add(new Label(\"favoriteCount\"));\r\n\r\nand appropriate resource file(s) of course,\r\nthen at render time a MarkupNotFoundException is given (Markup not found for Component: [Component id = favoriteCount]). If I remove the wicket:message=\"title:favoriteCount.tip\" part then it is fine, similar to 1.4.x.\r\n\r\nAnother small note on issue 2776: I am not sure that reopening it was a good approach but the fix for that one disappeared for 1.5-M2.1. Could you please check that one too? \r\n",
        "enclosures on nested components within wicket:extends Since 1.3.0-final the \"hidden feature\" of addressing components within an enclosure by writing the path into the child attribute (e.g. child=\"container:list\") is not supported anymore if they occur within wicket:extend tags. For further information, take a look at the mailinglist: http://www.nabble.com/enclosures-on-nested-components-within-wicket%3Aextends-to15330837.html#a15330837 \nand/or at the attached quickstart"
    ],
    [
        "WICKET-2850",
        "WICKET-3008",
        "Wicket DateTimeField / DatePicker creates a memory leak on the browser when rerenderd using ajax requests When a wicket DateTimeField is repeatedly added to a page using  AjaxRequestTarget#addComponent(..) it creates a memory leak on the browser. This will eventually cause memory starvation\r\non the client machine.\r\n\r\nThe error can be reproduced by using a DateTimeField component that updates itself using the AjaxSelfUpdatingTimeBehavior. \r\n\r\nDateTimeField field= new DateTimeField(\"field\", new Model<Date>(new Date()));\r\nfield.add(new AjaxSelfUpdatingTimerBehavior(Duration.seconds(0.5)));\r\nadd(field);\r\n\r\nRunning this for just an hour or so clearly shows that the browsers do not free up resources. The problem seems to be related to how wicket-date.js reinitializes a new Yahoo Yui Calendar widget using the same element id on each rerendering. \r\n\r\n",
        "clarify purpose of getMarkupSettings().setThrowExceptionOnMissingXmlDeclaration(true) After \"discovering\" getMarkupSettings().setThrowExceptionOnMissingXmlDeclaration(true) I checked it out just to realize that quite a few wicket pages have __no__ <?xml ...?> declaration. \r\n\r\nFor example ExceptionErrorPage has none which ends up in a pretty funny situation:\r\n\r\nI tried to render my MissingXmlPrologPage which caused wicket, due to the setting, to render ExceptionErrorPage to complain about the missing xml prolog. But ExceptionErrorPage had no xml prolog which again made wicket call the exception page to complain about \"no xml prolog\". This ended in an  cascaded exception firing and finally in a blank page :-)\r\n\r\nIs this setting supposed to be deprecated? In case it's not we should:\r\n\r\n- enforce declaration of the xml prolog in all wicket project related pages by adding a test case to the build procedure (somehow similar to the apache license header check)\r\n- communicate this to all additional wicket projects clearly\r\n- add some documentation on the benefits of using this setting (I guess it's mostly about having no encoding issues when opening the markup files in the editor or IDE)\r\n- or if it's useless, just drop it"
    ],
    [
        "WICKET-749",
        "WICKET-123",
        "ClassCastException when using ReloadingWicketFilter Reference Threads:\nhttp://www.nabble.com/Has-something-changed-in-markup-inheritance--tf3963374.html\nhttp://www.nabble.com/Classcastexception-and-getSession-tf3979399.html\n\nIn summary, in certain situations, classes that should be loaded by the ReloadingClassLoader are being loaded by the container's normal classloader. While this happens in several situations, the most obvious and repeatable is when using the browser's back button. I will attach a small app that demonstrates this issue after submitting this bug. \n\nThe steps needed to recreate this issue int he demo app are actually quite odd, so this may seem like a fringe issue, however in our real app, the situations comes up much easier and with much more frequency.\n\nSteps:\n1) Unzip the attached file.\n\n2) Assuming Maven is installed, run \"mvn jetty:run\" inside the project directory.\n\n3) Use your browser to go to http://127.0.0.1:8080/app\n\n4) Click \"Second Link\"\n\n5) Use your browser back functionality and then click \"Second Link\" again. Everything should work fine. \n\n6) You should now be be on a page with the words \"Second changed10\". If not, click \"Second Link\" to get there. Use the browser to refresh that page.\n\n7) Refreshing should have caused a \"Page Expired\" error. That's ok, that isn't the issue. Click the browser back button to go back to the first page.\n\n8) Click \"Second Link\" again. This should generate the ClassCastException.\n\nIf you disable the Reloading filter or if you comment out the include/exclude lines in the included FusionReloadingWicketFilters you can go through the same steps and not generate a ClassCastError. \n\nAs I mentioned above. This may seem like a very fringe case with all the the refreshing and back buttons, but that just because that's the first and most reliable way I found to recreate this issue in this tiny demo app. The issue occurs under all kinds of situations in my real app including almost always after I modify a java file and recompile it which is the primary use case for the ReloadingClassloader.\n\n",
        "Create site map/structure of website "
    ],
    [
        "WICKET-2428",
        "WICKET-3958",
        "AbstractSingleSelectChoice: custom resource key for null option Is it possible to refactor AbstractSingleSelectChoice like shown below? To be able to override getNullOptionKey would give a great value for us.\r\nThis would allow to have the display-values of null-options in a single properties file for whole project even if ids of some choices with different null-option display-values are equal.\r\n\r\nprotected String getNullOptionKey() {\r\n  return getId() + \".nullValid\";\r\n}\r\n\r\nif (isNullValid())\r\n      {\r\n          // Null is valid, so look up the value for it\r\n          String option = getLocalizer().getStringIgnoreSettings(getNullOptionKey(), this,\r\n              null, null);\r\n          if (Strings.isEmpty(option))\r\n          {\r\n              option = getLocalizer().getString(\"nullValid\", this, \"\");\r\n          }\r\n....",
        "Autolinks with getMarkupSettings().setAutomaticLinking(true) produce error in subpackage Project structure: BasePage, HomePage, pages.Page1.\r\n\r\nAutolinks added in the base page will produce confusing error message \"Last cause: Tag expected\" at page pages.Page1. It seems that they do not take into account where in the page hierarchy they are added (in the example, in BasePage).\r\n\r\nIf getMarkupSettings().setAutomaticLinking(true) is removed and links are wrapped into <wicket:link> then warning \"WARN - AutoLinkResolver - Did not find corresponding java class: com.mycompany.pages.HomePage\" is produced in the log when accessing pages.Page1. However, links on both pages work.\r\n\r\n"
    ],
    [
        "WICKET-1922",
        "WICKET-4449",
        "AbstractTree - setting root to null causes NullPointerException I have TreeTable with some nodes, perform some filtering of them and update tree model. If result of filtering is nothing (empty Tree) I set setRoot(null) on the tree model. This send treeStructureChanged event to all listeners (to my TreeTable) with parameter TreeModelEvent which is constructed with null TreePath parameter. This cause NullPointerException in AbstractTree (implements TreeModelListener).\nI propose this fix:\norg.apache.wicket.markup.html.tree.AbstractTree\n\n/**\n\t * @see javax.swing.event.TreeModelListener#treeStructureChanged(javax.swing.event.TreeModelEvent)\n\t */\n\tpublic final void treeStructureChanged(TreeModelEvent e)\n\t{\n                          // empty root\n                          if(e.getTreePath() == null) {\n\t\t\tinvalidateAll();\n                          } \n\t\telse {\n\t\t\t// get the parent node of changed nodes\n\t\t\tTreeNode node = (TreeNode)e.getTreePath().getLastPathComponent();\n\n\t\t\t// has the tree root changed?\n\t\t\tif (e.getTreePath().getPathCount() == 1 && node.equals(rootItem.getModelObject()))\n\t\t\t{\n\t\t\t\tinvalidateAll();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinvalidateNodeWithChildren(node);\n\t\t\t}\n\t\t}\n\t}",
        "Change IValidationError API to work with java.io.Serializable as other methods (info, error, success, ...) in Component and Session Since a while o.a.w.Component's and o.a.w.Session #info(), #error(), #success(), etc. methods accept java.io.Serializable.\r\nWith this ticket I suggest a change that will make o.a.w.validation.IValidationError in sync with this."
    ],
    [
        "WICKET-682",
        "WICKET-1718",
        "Update documentation reflecting the move (Wiki?) ",
        "WebPage#onAfterRender erroneously reports missing header In WebPage#onAfterRender() there's a check wether a header was missing on a page and header contributions would be lost.\n\nIn the following case this check erroneously barks:\n- page A was requested\n- in A's onBeforeRender() a RestartResponseAtInterceptPageException to page B is thrown\n- page A's onAfterRender() is invoked in a finally block\n- processing continues with page B\n\nPage A's onAfterRender() complains about the missing header, althought his page was never completely rendered.\n\nIMHO there's a check missing in WebPage#onAfterRender():\n\n    \tif (getRequestCycle().getResponsePage() == this) {\n\t\t.....\n\t}\n\nOr is Page A not allowed to throw RestartResponseAtInterceptPageException in onBeforeRender() at all?"
    ],
    [
        "WICKET-1775",
        "WICKET-1623",
        "AutoCompleteTextField drop-down width limited to the width of target component The AutoCompleteTextField drop-down width is limited to the width of the target <INPUT> element. This is a major limitation when you have custom renderers that display additional information about the selectable item.\n\nI've managed to create a local fix and I've submitted two screenshots that describes the difference between an unpatched and patched autocomplete component.\n\nfunction showAutoComplete(){\n        var position=getPosition(wicketGet(elementId));\n        var menu = getAutocompleteMenu();\n        var input=wicketGet(elementId);\n        var index=getOffsetParentZIndex(elementId);        \n        menu.show();\n        menu.style.zIndex=index==\"auto\"?index:Number(index)+1;\n        menu.style.left=position[0]+'px'\n        menu.style.top=(input.offsetHeight+position[1])+'px';\n        menu.style.width='auto';\n        visible=1;\n        hideShowCovered();\n}\n\nI've set menu.style.width='auto'",
        "LinkTree with IndicatingAjaxLink leaks <script> tags From mailing list:\n\nhttp://markmail.org/message/uhghojcrtq74xm63?q=list:org%2Eapache%2Ewicket%2Eusers\n\nExtending LinkTree to create IndicatingAjaxLink leaks <script> tags.\n"
    ],
    [
        "WICKET-4833",
        "WICKET-1652",
        "DateConverter is not thread-safe As described in https://issues.apache.org/jira/browse/WICKET-102 , DateConverter internally uses DateFormat to do its job, without the external synchronization DateFormat's javadoc states it need.\r\n\r\nSince DateConverter is used by Wicket in a multi-threaded scenario (converters instances can be shared between threads) it should guarantee thread-safeness.\r\nA user of DateConverter (and he could be unaware of using a DateConverter) shouldn't worry about its internal mechanics, thus DateConverter should handle the synchronization by itself.\r\n\r\nTested on v1.4.19, and just browsed v6.2.0 sources to check if something changed.\r\n\r\nThanks in advance, and sorry for my sloppy english.",
        "Hard-coded quotes in xml prologue Even if you specify a prologue as:\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n(i.e. double quoted) it gets delivered as:\n <?xml version='1.0' encoding='UTF-8'?>\n\nXML spec says either should be acceptable but I've come across one case where it would be useful to have it use the quote char that's supplied."
    ],
    [
        "WICKET-3898",
        "WICKET-3026",
        "Add CompoundClassResolver Add a CompoundClassResolver, which is a compound IClassResolver. Also, move caching and boiler plate code from DefaultClassResolver to new AbstractClassResolver, which just takes a ClassLoader. Let DefaultClassResolver extends AbstractClassResolver. Add SimpleClassResolver as a minimalist AbstractClassResolver implementation.",
        "Add onStart callback for ajax calls "
    ],
    [
        "WICKET-14",
        "WICKET-4977",
        "IBehavior.onBeginRender() I want to create a behavior that modifies the children of a Form, as such I need to be able to process the children after the form is fully populated but before it actually renders.",
        "Wicket jQueryUI integration DateField uses yui, ModalWindow - something else. It would be nice to integrate jQuery UI into wicket to use in wicket components jQuery UI and not mixing in other libraries since jQuery is already integrated. \r\n\r\nThis could be done through some interfaces, to which wicket would provide implementations using Jquery UI, yui (already existing) with the possibility to make these components later with other libraries."
    ],
    [
        "WICKET-480",
        "WICKET-2356",
        "IHeaderResponse.renderOnUnLoadJavascript(String javascript); Where there is a renderOnLoadJavascript there ought to be a renderOnUnLoadJavascript too.\n\nThis is all just copy past, so it's a little smelly.\nBeyond that I wouldn't mind to be able to specify which element an event should be added.\n\nIndex: wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java\n===================================================================\n--- wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java     (Revision 529942)\n+++ wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java     (Arbeitskopie)\n@@ -197,4 +197,19 @@\n                }\n        }\n \n+       /**\n+        * @see org.apache.wicket.markup.html.IHeaderResponse#renderOnUnLoadJavascript(java.lang.String)\n+        */\n+       public void renderOnUnLoadJavascript(String javascript)\n+       {\n+               List token = Arrays.asList(new Object[] { \"javascript-event\", \"unload\", javascript });\n+               if (wasRendered(token) == false)\n+               {\n+                       renderJavascriptReference(WicketEventReference.INSTANCE);\n+                       JavascriptUtils.writeJavascript(getResponse(),\n+                                       \"Wicket.Event.add(window, \\\"unload\\\", function() { \" + javascript + \";});\");\n+                       markRendered(token);\n+               }\n+       }\n+\n }\nIndex: wicket/src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java\n===================================================================\n--- wicket/src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java     (Revision 529942)\n+++ wicket/src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java     (Arbeitskopie)\n@@ -174,4 +174,11 @@\n         * @param javascript\n         */\n        public void renderOnLoadJavascript(String javascript);\n+\n+       /**\n+        * Renders javascript that is executed after the page is unloaded.\n+        * \n+        * @param javascript\n+        */\n+       public void renderOnUnLoadJavascript(String javascript);\n }",
        "component report more informative message on error loading model object Because at org.apache.wicket.util.lang.PropertyResolver.getGetAndSetter(PropertyResolver.java:439) throws a WicketException, the component location etc are not shown which makes it hard to track down. This patch causes the component detail to be shown shown, to help track down problems.\r\n\r\nIndex: src/main/java/org/apache/wicket/Component.java\r\n===================================================================\r\n--- src/main/java/org/apache/wicket/Component.java\t(revision 780169)\r\n+++ src/main/java/org/apache/wicket/Component.java\t(working copy)\r\n@@ -1650,7 +1650,14 @@\r\n \t\tif (model != null)\r\n \t\t{\r\n \t\t\t// Get model value for this component.\r\n-\t\t\treturn model.getObject();\r\n+\t\t\ttry\r\n+\t\t\t{\r\n+\t\t\t\treturn model.getObject();\r\n+\t\t\t}\r\n+\t\t\tcatch (Exception e)\r\n+\t\t\t{\r\n+\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t}\r\n \t\t}\r\n \t\telse\r\n \t\t{\r\n@@ -2665,7 +2672,8 @@\r\n \t\t\t{\r\n \t\t\t\tthrow re;\r\n \t\t\t}\r\n-\t\t\tthrow new WicketRuntimeException(\"Exception in rendering component: \" + this, re);\r\n+\t\t\tthrow new WicketRuntimeException(\"Exception in rendering component: \" +\r\n+\t\t\t\tthis.toString(true), re);\r\n \t\t}\r\n \t}\r\n \r\n"
    ],
    [
        "WICKET-1351",
        "WICKET-4157",
        "AutoCompleteTextField's *scrollable* suggestion list can be better if it can be scrolled using KEY_UP and KEY_DOWN In the situation described in issue [WICKET-1350],  a user always expected the suggestion list can be scrolled by using KEY_UP and KEY_DOWN. So far, the suggestion list can only be scrolled by moving the scroll bar.",
        "AjaxLazyLoadPanel not loading in IE 8 and 9 (not tested with IE 7) I have a page with 3 lazy load panels. Page works fine with FF, Chrome and Opera but not with IE 8 and 9. \r\nhttp://wicketstuff.org/wicket/ajax/lazy-loading?0  also not working.\r\nI dont know if i should re-open\r\nhttps://issues.apache.org/jira/browse/WICKET-1653\r\nso i opened a new bug report."
    ],
    [
        "WICKET-2143",
        "WICKET-39",
        "Palette in Form calls onSubmit twice, model is erased on second onSubmit in following code, onSubmit is called twice, model is erased on second submit:\n----------------------------------------------------------------\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.apache.wicket.extensions.markup.html.form.palette.Palette;\nimport org.apache.wicket.markup.html.WebPage;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.ChoiceRenderer;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\n\npublic class TestPalettePage extends WebPage\n{\n  enum TestEnum  {  E1,E2,E3,E4 };\n  \n  IModel<List<TestEnum>> _model=(IModel<List<TestEnum>>)(new Model(new ArrayList(Arrays.asList(TestEnum.values()))));\n  IModel<Collection<TestEnum>> _choices=(IModel<Collection<TestEnum>>)(new Model(new ArrayList(Arrays.asList(TestEnum.values()))));\n\n  \n  public TestPalettePage()\n  {\n    Form form=new Form(\"form\")\n    {\n      @Override\n      protected void onSubmit()\n      {\n        System.out.println(\"Selected: \"+_model.getObject());\n      }\n    };\n    \n    ChoiceRenderer<TestEnum> choiceRenderer=new ChoiceRenderer<TestEnum>(\"name\",\"ordinal\");\n    Palette<TestEnum> palette=new Palette<TestEnum>(\"palette\",_model,_choices,choiceRenderer,3,true);\n\n    form.add(palette);\n    form.add(new Button(\"submit\"));\n\n    add(form);\n  }\n}\n-------------------------------------------------------\n",
        "Text cursor not displayed in text fields in a ModalWindow (FireFox only) I have the requirement to display some data-entry fields in a ModalWindow.  While working on this problem, I have discovered that the text cursor is not displayed in text fields within a ModalWindow when running FireFox.  The text field seems otherwise fully-functional:\n\n* I can click on the text field and type - the text appears.\n* I can double-click the text-field - the browser auto-suggests previous entries correctly.\n\nI have reproduced this behaviour in FireFox 1.5 and 2.0, and have confirmed that it works as expected in IE7.\n"
    ],
    [
        "WICKET-3816",
        "WICKET-4171",
        "Patch, junit test to clean up markup files I made a patch to fix some warnings, typos, missing close tags, inconsistencies and a few encoding error in wicket's markup files. This is similar to WICKET-3717 but this time I also made a junit test to automate the checks during build.",
        "Add additional constructor to DownloadLink that accepts the filename in a Model There are cases when the file name that will be used in DownloadLink is unknown at construction time. If the filename is stored in a IModel this limitation will be solved."
    ],
    [
        "WICKET-2164",
        "WICKET-1468",
        "Referenced CSS files are locked for editing I start Jetty with my wicket application from Eclipse.\r\nI start Wicket app in DEV mode.\r\nAfter starting it up and browsing pages I may edit HTML pages, save them, refresh - effects are immediately visible in the browser.\r\n\r\nBut there is some exception to that rule.\r\nMy base page references CSS files in the wicket:head section.\r\n\r\n<wicket:head>\r\n<link rel=\"stylesheet\" href=\"css/style.css\" type=\"text/css\" />\r\n</wicket:head>\r\n\r\nThe style file is loaded with my page.\r\nBUT.\r\na) If I start the application and edit the CSS before it was loaded by any page - editing from Eclipse is permitted\r\nb) If I refresh some page and the CSS file is served - file is not writable. I must stop the application to release file lock.\r\n\r\nI believe this lock is an error.\r\nHTML files may be edited, referenced CSS resources are locked.",
        "Add downloadSources option to quickstart page would be cool to have a checkbox or a radio[yes/no] that will control -DdownloadSources=true param at http://wicket.apache.org/quickstart.html"
    ],
    [
        "WICKET-972",
        "WICKET-1732",
        "IndexedParamUrlCodingStrategy seems to have problems handling resources I will attach a testcase that demonstrates this issue.\n\nwhen using urlFor inside a component on a page that is mounted with IndexedParamUrlCodingStrategy I get:\n\norg.apache.wicket.WicketRuntimeException: Not all parameters were encoded. Make sure all parameter names are integers in consecutive order starting with zero. Current parameter names are: [wicket:interface]\n\nJust check out the testcase to see for yourself",
        "FormTester's DropDownChoice onSelectionChanged() behaviour doesn't reload page When a DropDownChoice's onSelectionChanged() notification is sent from a browser, it causes the whole page to be reloaded/redisplayed (because the form is submitted). However, when the same notification is sent through the FormTester, it doesn't submit the form and therefore other components on the page may not be updated/redisplayed.\n\nWe're working around this by overriding FormTester's select() method so that it submits the form as follows:\n\n    @Override\n    public void select(String formComponentId, int index) {\n        super.select(formComponentId, index);\n        \n        // Workaround for Wicket FormTester bug: selection changed notifications cause the page\n        // to be reloaded in a real browser, but they don't when using the Wicket tester.\n\n        FormComponent component = (FormComponent)getForm().get(formComponentId);\n\n        if (component instanceof DropDownChoice) {\n            try\n            {\n                Method wantOnSelectionChangedNotificationsMethod = DropDownChoice.class.getDeclaredMethod(\"wantOnSelectionChangedNotifications\", new Class[0]);\n                wantOnSelectionChangedNotificationsMethod.setAccessible(true);\n                boolean wantOnSelectionChangedNotifications = ((Boolean)wantOnSelectionChangedNotificationsMethod.invoke(component, new Object[0])).booleanValue();\n                if (wantOnSelectionChangedNotifications) {\n                    // Notification method call has already been made by super,\n                    // but we want to trigger the page load, as would happen in a real browser.\n                    \n                    // First, use reflection to get the form's hidden field id.\n                    Method getHiddenFieldIdMethod = Form.class.getDeclaredMethod(\"getHiddenFieldId\");\n                    getHiddenFieldIdMethod.setAccessible(true);\n                    String hiddenFieldId = (String) getHiddenFieldIdMethod.invoke(getForm());\n                    \n                    // Now set the parameter in the form\n                    // to cause it to call the callback when submitted.\n                    m_wicketTester.getServletRequest().setParameter(\n                            hiddenFieldId, component.urlFor(IOnChangeListener.INTERFACE).toString());\n                    \n                    // And finally submit the form.\n                    submit();\n                    \n                }\n            }\n            catch (Exception e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n"
    ],
    [
        "WICKET-1119",
        "WICKET-1296",
        "Strings.replaceAll giving StringIndexOutOfBoundsException When replacing & characters it craps out.. this fixes it:\n\nIndex: /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/Strings.java\n===================================================================\n--- /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/Strings.java\t(revision 589777)\n+++ /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/Strings.java\t(working copy)\n@@ -1327,7 +1327,7 @@\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tmatchIndex = s.toString().indexOf(searchString);\n+\t\t\tmatchIndex = s.toString().indexOf(searchString, pos);\n \t\t}\n \t\treturn matchIndex;\n \t}\n\n",
        "AbstractAjaxTimerBehavior gets only a \"Page Expired\" back I added a AbstractAjaxTimerBehavior to the Page without any actions.\nAfter the programmed timeout the page is showing a \"Page Expired\" page.\n\nI extracted the AJAX Call back URL from the generated Page and put in into the browser. I also received a \"Page Expired\" page.\n"
    ],
    [
        "WICKET-3545",
        "WICKET-4500",
        "Slovak version of Application_sk.properties I noticed there is no Application_sk.properties. As I need a slovak localization for one of my projects I translated the messages from default _en version and added what I could find in wicket-extensions. I'm putting it here should it be decided to include one, so this could be used.",
        "InterceptData never cleared from session after continueToOriginalDestination is called We have a scenario where single person can log in under different accounts on the same website. Different user types will typically go to different page types.\r\n\r\nA single person using different accounts is not normally required but we are demonstrating to corporate clients how the system will be used by different user types. In the demonstration we need to log in as an 'admin' user to demo the admin aspects and then we need to log in as a 'standard' user to demonstrate the aspects that will apply to a standard user.\r\n\r\nThe admin page uses RedirectToInterceptException to authentication page if no one is logged in.\r\n \r\nThe standard page uses the home page to authenticate and throws new RestartResponseException(new AuthenticatePage(parameters)) if no one is authenticated (i.e. no intercept)\r\n\r\nAfter authentication we either continue or go to the 'default' page for a standard user.\r\n\r\n \r\n\r\nCode looks like this:\r\n\r\n \r\n\r\n                        If ( authenicationSucceeded )\r\n\r\n                        {\r\n\r\n                                    if ( !continueToOriginalDestination() )\r\n\r\n                                    {\r\n\r\n                                                // Was not redirected to this authentication page so go to default destination for the home page\r\n\r\n                                                // Find default page for standard users and go to that page\r\n\r\n                                    }\r\n\r\n                        }\r\n\r\n \r\n\r\nWhat we find is that after an admin log on (with intercept/continue sequence) a subsequent standard user log on will not execute the above body because continueToOriginalDestination returns 'true' even though this page was not an intercept page. \r\n\r\nIt looks like after an intercept/continue has occurred it does not clear the 'original destination' attribute and so a subsequent call to continueToOriginalDestination will return true when it should really return false.\r\n\r\nThe quickstarts demonstrates the problem:\r\n\r\nPoint browser to localhost/app/landing\r\n\r\nClick 'logon'\r\nClick 'Click to continue' - each time you click continueToOriginalDestination is called which successfully does a continue as evidenced by the page counter incrementing. \r\n\r\nIf running in a debugger set a break point on RestartResponseAtInterceptPageException.InterceptData.clear().\r\nRestart the app and then click on 'logon' and you will never see the clear method executed.\r\n\r\n"
    ],
    [
        "WICKET-5527",
        "WICKET-3929",
        "Inefficient DefaultPageStore.SerializedPagesCache We have identified some problems in org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache.\r\n\r\nSome history first: \r\nAt https://cwiki.apache.org/confluence/display/WICKET/Page+Storage I have explained how the page storage management works in Wicket 1.5+ \r\n\r\nIn brief:\r\nFirst level cache/store is the HttpSession - here Wicket saves the live instances of all touched pages in the last request cycle.\r\nSecond level cache/store is DefaultPageStore.SerializedPagesCache - here Wicket saves the last N (org.apache.wicket.settings.StoreSettings#getInmemoryCacheSize) used pages in the whole application (by default 40 pages)\r\nThird level cache/store is DiskDataStore - here Wicket stores all pages and depending on org.apache.wicket.settings.StoreSettings#getMaxSizePerSession it will \"recycle\" the file contents\r\n\r\nThe identified problems:\r\n\r\n- org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache uses ArrayList as a data structure to keep SerializedPage instances. When the limit N (StoreSettings#getInmemoryCacheSize) is reached the ArrayList uses #remove() to remove the oldest entry. The #remove(0) operation internally uses System.arraycopy() to compact the internal array structure. As you already realize this ArrayList is constantly being recompacted in any application in production.\r\n\r\n-  DefaultPageStore.SerializedPagesCache#cache (the same ArrayList) is used as synchronization monitor for every operation (read/write/remove). I.e. we have synchronization on application level !!\r\n\r\n- at the moment DefaultPageStore.SerializedPagesCache stores org.apache.wicket.pageStore.DefaultPageStore.SerializedPage. This is a structure of {String sessionId, int pageId, byte[] data}. \r\nSince this data is stored in the application scope it is never replicated, so there is no need to serialize the live page instance to byte[] at all. Only the third level cache (IDataStore) should work with byte[]\r\n\r\n\r\nA workaround to avoid the slowness caused by this is to set 0 or negative value to org.apache.wicket.settings.StoreSettings#setInmemoryCacheSize",
        "PropertyModel/PropertyResolver breaks when using a List as the root object When using a java.util.List as the root target of a PropertyModel, and then using a property expression such as \"[0].someProperty\", PropertyResolver breaks rather badly, claiming that \"0].somePropert\" is not a valid property expression. Note the missing first and last characters.\r\n\r\nThis happens because it first replaces all opening \"[\" with \".[\", and thus we get a leading \".\" in the expression. That \".\" is then cut off, but the rest of the expression is suddenly treated as a single property name. A later step sees the leading \"[\" and thinks the whole thing is just a map/list index, and so drops the leading \"[\" and the last character (in the mistaken belief that the last character must be a \"]\".\r\n\r\nTo make a long story short: The whole thing is fixed by eating the leading dots before entering the main resolver loop. I'm attaching patches for 1.4.x and trunk(1.5)."
    ],
    [
        "WICKET-2775",
        "WICKET-2184",
        "Form Validation not triggered when doing a HTTP POST directly to a form Follow the steps below to reproduce this issue:\r\n\r\n1.) Create a StatelessForm with a RequiredTextField in a Panel\r\n2.) Do a HTTP POST to that form (e.g. by using the Firefox plug-in Poster)\r\n    2.1) In the content of the HTTP POST omit the value assignment for the required text field (i.e. do not write myTextFieldId=myTextFieldValue)\r\n\r\nThe Form is submitted though the RequiredTextField didn't contain a value.\r\n",
        "Check component id against invalid chars ':' and empty IDs Currently we are only testing a component id not to be null. However ':' and empty Ids are effectively invalid as well. \r\n\r\nComponent.java coiuld be modified as follows:\r\n\tfinal void setId(final String id)\r\n\t{\r\n\t\tif (!(this instanceof Page))\r\n\t\t{\r\n\t\t\tif (Strings.isEmpty(id))\r\n\t\t\t{\r\n\t\t\t\tthrow new WicketRuntimeException(\"Null or empty component ID's are not allowed.\");\r\n\t\t\t}\r\n\r\n\t\t\tif (id.indexOf(':') != -1)\r\n\t\t\t{\r\n\t\t\t\tthrow new WicketRuntimeException(\"The component ID must not contain ':' chars.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.id = id;\r\n\t}\r\n"
    ]
]