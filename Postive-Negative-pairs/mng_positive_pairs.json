[
    [
        "MNG-341",
        "MNG-105",
        "m2 can't work while the path with space E:\\xxxxx>set m\nM2_HOME=E:\\maven-2.0-alpha-1\nMAVEN_HOME=c:\\Program Files\\Apache Group\\maven-1.0.1\n\n\nE:\\xxxxx>m2\nException in thread \"main\" java.lang.NoClassDefFoundError: Files\\maven-2/0-alpha\n-1\\core\\boot\\classworlds-*/jar\nE:\\xxxxx>\n\n",
        "m2.bat fails when M2_HOME contains a space When M2_HOME contains spaces, CLASSWORLDS_JAR ends up with spaces.  When the Java command line is assembled, the %CLASSWORLDS_JAR% is not quoted, resulting in the command line being mangled, and a very vague error message being generated:\n\n\"and is not expected at this time.\"\n\nrelated to MNG-86."
    ],
    [
        "MNG-489",
        "MNG-355",
        "trim plugin resolution to those needed, to avoid unnecessary dep resolution for unused plugins ",
        "plugin dependencies are resolved for plugins not necessarily relevant eg, m2 clean:clean on continuum-model will resolve the dependencies of maven-jpox-plugin due to it being configured in the POM (it is being activated unnecessarily as no goals or phases relevant are used)"
    ],
    [
        "MNG-531",
        "MNG-530",
        "DefaultPluginManager does not take into account parameters defined in a custom lifecycle for report mojos I have a mojo with some required parameters that are provided by a custom lifecycle. When DefaultPluginManager.getReports() gets exectued it calls checkRequiredParameters() which reports missing parameters even though they are provided by the custom liecycle:\n\n[INFO] [site:site]\n[INFO] maven-clover-plugin: using locally installed snapshot\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Diagnosis: Error getting reports\n[INFO] ----------------------------------------------------------------------------\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error getting reports\n        at org.apache.maven.doxia.DoxiaMojo.getReports(DoxiaMojo.java:797)\n        at org.apache.maven.doxia.DoxiaMojo.execute(DoxiaMojo.java:203)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:401)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:169)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:150)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:133)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:103)\n        at org.apache.maven.DefaultMaven.processProject(DefaultMaven.java:261)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:180)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:269)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:303)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:243)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:416)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:363)\nCaused by: org.apache.maven.plugin.PluginParameterException: Invalid or missing parameters: [Mojo parameter [name: 'cloverDatabase\n'; alias: 'null'], Mojo parameter [name: 'cloverOutputDirectory'; alias: 'null']] for mojo: org.apache.maven.plugins:maven-clover-\nplugin:1.0-SNAPSHOT:instrument\n        at org.apache.maven.plugin.DefaultPluginManager.checkRequiredParameters(DefaultPluginManager.java:764)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:527)\n        at org.apache.maven.plugin.DefaultPluginManager.getReports(DefaultPluginManager.java:457)\n        at org.apache.maven.doxia.DoxiaMojo.getReports(DoxiaMojo.java:770)\n        ... 17 more",
        "Non-report mojos are added by DefaultPluginManager.getReports() I have a plugin (clover) that have both \"normal\" mojos and report mojos. getReports() adds all of them. There is a todo in the code to fix that too."
    ],
    [
        "MNG-572",
        "MNG-539",
        "surefire does not run tests I have three unit tests, one is extending BaseTestCase, in src/test/java named *Test.java.  I haven't configured surefire or any plugins in the pom.xml. I have junit as a dependency.\n\nWhen I run m2 test I see this in the console:\n[INFO] [compiler:testCompile]\nCompiling 4 source files to xxx\n\nResults :\n[surefire] Tests run: 0, Failures: 0, Errors: 0\n\nm2 compiled the tests but surefire did not run any of them. Removing two of the tests makes surefire run one of the tests. And adding \n   <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <goals>\n          <goal>  \n           <id>test</id>\n           <configuration>\n             <includes>\n               <include implementation=\"java.lang.String\">**/*Test.java</include>\n             </includes>\n           </configuration>\n         </goal>\n        </goals>\n      </plugin>\n    </plugins>\n\nMakes it run two of them, with one disabled.\n\n",
        "Error running test when the output directory is not 'target' Before I realized that output directory elements are optional, I used 'build' as the name, which somehow makes surefire think that there is no test to run.  After struggling with it thinking it is something else I need to do, I accidently deleted it and it works.\n\nYou can check out our open source project dbfixture (http://gforge.public.thoughtworks.org/projects/dbfixture/) if you want to reproduce it.  But in a nut shell:\n\nThis works:\n...\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <testResources>\n      <testResource>\n        <directory>test</directory>\n        <includes>\n          <include>**/*.txt</include>\n        </includes>\n      </testResource>\n    </testResources>\n  </build> \n...\nand this doesn't\n...\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <testResources>\n      <testResource>\n        <directory>test</directory>\n        <includes>\n          <include>**/*.txt</include>\n        </includes>\n      </testResource>\n    </testResources>\n   If uncommented, the test will show no test to run\n    <directory>build</directory>\n    <outputDirectory>build/classes</outputDirectory>\n    <testOutputDirectory>build/test-classes</testOutputDirectory>\n  </build> \n...\n"
    ],
    [
        "MNG-573",
        "MNG-558",
        "Last artifactId under project/plugins/plugin overrides project/artifactId When calling install with this pom it gets installed under $REPO/org\\apache\\maven\\plugins\\maven-surefire-plugin\\1.2.1\\maven-surefire-plugin-1.2.1.pom\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>springframework</groupId>\n  <artifactId>spring-parent</artifactId>\n  <version>1.2.1</version>\n  <packaging>pom</packaging>\n\n  <plugins>\n     <plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-compiler-plugin</artifactId>\n       <configuration>\n         <source>1.5</source>\n         <target>1.5</target>\n       </configuration>\n     </plugin>\n     <plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-surefire-plugin</artifactId>\n           <goals>\n           <goal>\n              <id>test</id>\n              <configuration>\n                 <includes>\n                    <include implementation=\"java.lang.String\">**/*Tests.*</include>\n                 </includes>\n             </configuration>\n            </goal>\n           </goals>\n     </plugin>\n   </plugins>\n\n</project>\n\nThe bug also happens when removing the packaging tag.",
        "Incorrect groupId, artifactId, version used during install When <pluginManagement> is present in pom.xml with \"pom\" packaging,\nthen the last plugin artifact information (groupId, artifactId,\nversion) is used during m2 install.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n <modelVersion>4.0.0</modelVersion>\n\n <groupId>org.example</groupId>\n <artifactId>sample</artifactId>\n <version>alpha-1</version>\n <packaging>pom</packaging>\n\n <pluginManagement>\n   <plugins>\n     <plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-compiler-plugin</artifactId>\n       <version>1.0-alpha-1</version>\n     </plugin>\n   </plugins>\n </pluginManagement>\n\n</project>\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building org.apache.maven.plugins:maven-compiler-plugin:pom:1.0-alpha-1\n[INFO] ----------------------------------------------------------------------------\n[INFO] maven-install-plugin: resolved to version 2.0-alpha-3 from\nlocal repository\n[INFO] [install:install]\n[INFO] Installing C:\\Development\\Projects\\sample\\pom.xml to\nC:\\Documents and\nSettings\\jfallows\\.m2\\repository\\org\\apache\\maven\\plugins\\maven-compiler-plugin\\1.0-alpha-1\\maven-compiler-plugin-1.0-alpha-1.pom\n[INFO] ----------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Jul 07 11:14:11 PDT 2005\n[INFO] Final Memory: 1M/3M\n[INFO] ----------------------------------------------------------------------------\n\nHowever, if <pluginManagement> is removed, giving:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n <modelVersion>4.0.0</modelVersion>\n\n <groupId>org.example</groupId>\n <artifactId>sample</artifactId>\n <version>alpha-1</version>\n <packaging>pom</packaging>\n\n</project>\n\nthen everything works as expected, as shown below:\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building org.example:sample:pom:alpha-1\n[INFO] ----------------------------------------------------------------------------\n[INFO] maven-install-plugin: resolved to version 2.0-alpha-3 from\nlocal repository\n[INFO] [install:install]\n[INFO] Installing C:\\Development\\Projects\\sample\\pom.xml to\nC:\\Documents and\nSettings\\jfallows\\.m2\\repository\\org\\example\\sample\\alpha-1\\sample-alpha-1.pom\n[INFO] ----------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Jul 07 11:15:54 PDT 2005\n[INFO] Final Memory: 1M/3M\n[INFO] ----------------------------------------------------------------------------\n\nIt doesn't appear to be limited to \"pom\" packaging, after changing to\n\"jar\" packaging, the m2 install behavior is still incorrectly\ninfluenced by the existence of <pluginManagement> in the pom."
    ],
    [
        "MNG-650",
        "MNG-645",
        "Javadoc plugin generates an almost empty apidocs/index.html Using the trunk build (rev. 225332), I launched site:site with maven-javadoc-plugin in my pom. The generated page apidocs/index.html is almost empty, i.e. it contains only the left menu. If I retry and watch what happens, I see that index.html is first created by Javadoc, but is then replaced by the \"Maven\" index.html.",
        "Allow for external reports Currently the AbstractMavenReport implementation has:\n\n    public void execute()\n        throws MojoExecutionException\n    {\n        try\n        {\n            String outputDirectory = getOutputDirectory();\n\n            XhtmlSink sink = getSiteRenderer().createSink( new File( outputDirectory ), getOutputName() + \".html\",\n                                                           outputDirectory, getSiteDescriptor(), \"maven\" );\n[...]\n\nThis means that an HTML file with the report name will always be created. However, for the Clover plugin the HTML files are generated by the Clover API itself and we don't control them. Thus we don't need this clover.html file.\n\nI believe the AbstractMavenReport class should support report mojos that have externally generated HTML files too.\n\nFor now, I've implemented MavenReport instead of extending AbstractMavenReport.\n"
    ],
    [
        "MNG-761",
        "MNG-734",
        "fallback to deployment repository for snapshots when there is no snapshot repository I believe this is what is causing the ArtifactFactory exception in deployment of snapshots",
        "java.lang.InstantiationException while deploying snapshot Setting up a project to deploy a snapshot.  From comments of others, I have a bad POM in one of my dependencies (haven't tracked that down yet).\n\nWhen I set the project's version to \"3.0\", the jar is deployed properly.\n\nWhen I set the project's version to \"3.0-SNAPSHOT\", I get the following stack dump:\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Diagnosis: Error configuring plugin for execution of 'deploy:deploy'.\n[INFO] ----------------------------------------------------------------------------\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error configuring plugin for execution of 'deploy:deploy'.\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:342)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:472)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:445)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:431)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:268)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:127)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:186)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:292)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.PluginConfigurationException: Unable to parse the created DOM for plugin configuration\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1022)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:522)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:337)\n        ... 15 more\nCaused by: org.codehaus.plexus.component.configurator.ComponentConfigurationException: Class 'org.apache.maven.artifact.repository.ArtifactRepository' cannot be instantiated\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:120)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.fromConfiguration(ObjectWithFieldsConverter.java:83)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:118)\n        at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:55)\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1017)\n        ... 17 more\nCaused by: java.lang.InstantiationException: org.apache.maven.artifact.repository.ArtifactRepository\n        at java.lang.Class.newInstance0(Class.java:335)\n        at java.lang.Class.newInstance(Class.java:303)\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:110)\n        ... 21 more"
    ],
    [
        "MNG-769",
        "MNG-760",
        "m2 eclipse:eclipse - duplicate ressources When we have a pom.xml that contains 2 ressources with the same directory (but with different includes), the eclipse plugin generate a .classpath that contains two time the same classpath entry.\n\nSuch a project can not be opened in eclipse.\n\nIt' normal to not have exactely the same behavior (eclipse doesn't suport patterns for inclusion/exclusion), but it would be better to have only one classpath entries genereted if two ressources are linked to the same directory.  The semantic stay the same as the current one, but there is no errors anymore in the .classpath.",
        "m2 eclipse plugin improvements (source download and attachment, customization of natures/builders/conclasspath, flexible project dupport) and refactoring This patch adds the following to the M2 eclipse plugin:\n- downloading of source attachments and configuration in .classpath\n- customization of project builders and natures in .project (like in the m1 plugin)\n- additional conclasspath entries in .classpath (like in the m1 plugin)\n- fix: don't add duplicate directories if main/resources directories overlap  (like in the m1 plugin)\n- support for flexible projects (.wtpmodules file generation for utility  modules, wars, ejbs)\n\nAlong with these new features the plugin has been refactored, splitting the single big EclipseWriter class to several specific classes and all the messages have been externalized in a property file.\nThere are still some todos in the code, which probably some M2 guru could look at, but anyway all the existing functionalities continue to work and some other tests have been added.\n\nDue to the refactoring the patch looks more like a complete rewrite: sorry for that, but adding new features without splitting the existing file was ugly\n\n\n"
    ],
    [
        "MNG-780",
        "MNG-734",
        "Deploying snapshot project results in exception m2 deploy in attached project A results in:\n\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Diagnosis: Error configuring plugin for execution of 'deploy:deploy'.\n[INFO] ----------------------------------------------------------------------------\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error configuring plugin for execution of 'deploy:deploy'.\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:342)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:478)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:451)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:437)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:131)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:186)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:316)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.PluginConfigurationException: Unable to parse the created DOM for plugin configuration\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1025)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:522)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:337)\n        ... 15 more\nCaused by: org.codehaus.plexus.component.configurator.ComponentConfigurationException: Class 'org.apache.maven.artifact.repository.ArtifactRepository' cannot be instantiated\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:120)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.fromConfiguration(ObjectWithFieldsConverter.java:83)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:118)\n        at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:55)\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1020)\n        ... 17 more\nCaused by: java.lang.InstantiationException: org.apache.maven.artifact.repository.ArtifactRepository\n        at java.lang.Class.newInstance0(Class.java:335)\n        at java.lang.Class.newInstance(Class.java:303)\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:110)\n        ... 21 more",
        "java.lang.InstantiationException while deploying snapshot Setting up a project to deploy a snapshot.  From comments of others, I have a bad POM in one of my dependencies (haven't tracked that down yet).\n\nWhen I set the project's version to \"3.0\", the jar is deployed properly.\n\nWhen I set the project's version to \"3.0-SNAPSHOT\", I get the following stack dump:\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Diagnosis: Error configuring plugin for execution of 'deploy:deploy'.\n[INFO] ----------------------------------------------------------------------------\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error configuring plugin for execution of 'deploy:deploy'.\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:342)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:472)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:445)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:431)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:268)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:127)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:186)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:292)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.PluginConfigurationException: Unable to parse the created DOM for plugin configuration\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1022)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:522)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:337)\n        ... 15 more\nCaused by: org.codehaus.plexus.component.configurator.ComponentConfigurationException: Class 'org.apache.maven.artifact.repository.ArtifactRepository' cannot be instantiated\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:120)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.fromConfiguration(ObjectWithFieldsConverter.java:83)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:118)\n        at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:55)\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1017)\n        ... 17 more\nCaused by: java.lang.InstantiationException: org.apache.maven.artifact.repository.ArtifactRepository\n        at java.lang.Class.newInstance0(Class.java:335)\n        at java.lang.Class.newInstance(Class.java:303)\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:110)\n        ... 21 more"
    ],
    [
        "MNG-780",
        "MNG-761",
        "Deploying snapshot project results in exception m2 deploy in attached project A results in:\n\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Diagnosis: Error configuring plugin for execution of 'deploy:deploy'.\n[INFO] ----------------------------------------------------------------------------\n[ERROR] Cause:\norg.apache.maven.plugin.MojoExecutionException: Error configuring plugin for execution of 'deploy:deploy'.\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:342)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:478)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:451)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:437)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:131)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:186)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:316)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.PluginConfigurationException: Unable to parse the created DOM for plugin configuration\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1025)\n        at org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:522)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:337)\n        ... 15 more\nCaused by: org.codehaus.plexus.component.configurator.ComponentConfigurationException: Class 'org.apache.maven.artifact.repository.ArtifactRepository' cannot be instantiated\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:120)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.fromConfiguration(ObjectWithFieldsConverter.java:83)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:118)\n        at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:55)\n        at org.apache.maven.plugin.DefaultPluginManager.populatePluginFields(DefaultPluginManager.java:1020)\n        ... 17 more\nCaused by: java.lang.InstantiationException: org.apache.maven.artifact.repository.ArtifactRepository\n        at java.lang.Class.newInstance0(Class.java:335)\n        at java.lang.Class.newInstance(Class.java:303)\n        at org.codehaus.plexus.component.configurator.converters.AbstractConfigurationConverter.instantiateObject(AbstractConfigurationConverter.java:110)\n        ... 21 more",
        "fallback to deployment repository for snapshots when there is no snapshot repository I believe this is what is causing the ArtifactFactory exception in deployment of snapshots"
    ],
    [
        "MNG-893",
        "MNG-885",
        "NPE in PluginParameterExpressionEvaluator when a mojo need the basedir and pom.xml doesn't exist m2 scm:checkout -Dmaven.scm.url=scm:cvs:pserver:<my-userid>@<my.cvs.server.com>:<my-cvs-repository>:<my-module>\n\nand receiving the following response:\n\n[INFO] Searching repository for plugin with prefix: 'scm'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Default Project\n[INFO]    task-segment: [scm:checkout]\n[INFO] ----------------------------------------------------------------------------\n---------------------------------------------------\nconstituent[0]: file:/c:/maven-2.0-alpha-3/lib/commons-cli-1.0-beta-2.jar\nconstituent[1]: file:/c:/maven-2.0-alpha-3/lib/doxia-sink-api-1.0-alpha-4-20050721.064859-1.jar\nconstituent[2]: file:/c:/maven-2.0-alpha-3/lib/jline-0.9.1.jar\nconstituent[3]: file:/c:/maven-2.0-alpha-3/lib/jsch-0.1.21.jar\nconstituent[4]: file:/c:/maven-2.0-alpha-3/lib/maven-artifact-2.0-beta-1-SNAPSHOT.jar\nconstituent[5]: file:/c:/maven-2.0-alpha-3/lib/maven-artifact-manager-2.0-beta-1-SNAPSHOT.jar\nconstituent[6]: file:/c:/maven-2.0-alpha-3/lib/maven-core-2.0-beta-1-SNAPSHOT.jar\nconstituent[7]: file:/c:/maven-2.0-alpha-3/lib/maven-model-2.0-beta-1-SNAPSHOT.jar\nconstituent[8]: file:/c:/maven-2.0-alpha-3/lib/maven-monitor-2.0-beta-1-SNAPSHOT.jar\nconstituent[9]: file:/c:/maven-2.0-alpha-3/lib/maven-plugin-api-2.0-beta-1-SNAPSHOT.jar\nconstituent[10]: file:/c:/maven-2.0-alpha-3/lib/maven-plugin-descriptor-2.0-beta-1-SNAPSHOT.jar\nconstituent[11]: file:/c:/maven-2.0-alpha-3/lib/maven-plugin-registry-2.0-beta-1-SNAPSHOT.jar\nconstituent[12]: file:/c:/maven-2.0-alpha-3/lib/maven-profile-2.0-beta-1-SNAPSHOT.jar\nconstituent[13]: file:/c:/maven-2.0-alpha-3/lib/maven-project-2.0-beta-1-SNAPSHOT.jar\nconstituent[14]: file:/c:/maven-2.0-alpha-3/lib/maven-reporting-api-2.0-beta-1-SNAPSHOT.jar\nconstituent[15]: file:/c:/maven-2.0-alpha-3/lib/maven-repository-metadata-2.0-beta-1-SNAPSHOT.jar\nconstituent[16]: file:/c:/maven-2.0-alpha-3/lib/maven-settings-2.0-beta-1-SNAPSHOT.jar\nconstituent[17]: file:/c:/maven-2.0-alpha-3/lib/plexus-input-handler-1.0-alpha-2.jar\nconstituent[18]: file:/c:/maven-2.0-alpha-3/lib/wagon-file-1.0-alpha-4.jar\nconstituent[19]: file:/c:/maven-2.0-alpha-3/lib/wagon-http-lightweight-1.0-alpha-4.jar\nconstituent[20]: file:/c:/maven-2.0-alpha-3/lib/wagon-provider-api-1.0-alpha-4.jar\nconstituent[21]: file:/c:/maven-2.0-alpha-3/lib/wagon-ssh-1.0-alpha-4.jar\n---------------------------------------------------\njava.lang.NullPointerException\n\tat org.apache.maven.plugin.PluginParameterExpressionEvaluator.evaluate(PluginParameterExpressionEvaluator.java:221)\n\tat org.apache.maven.plugin.DefaultPluginManager.checkRequiredParameters(DefaultPluginManager.java:705)\n\tat org.apache.maven.plugin.DefaultPluginManager.getConfiguredMojo(DefaultPluginManager.java:513)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:330)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:479)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:460)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:442)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:131)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:186)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:316)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)",
        "no project definition leads to NPE in plugin parameter expression evaluator there are two places this can occur:\n1) calculation of ${basedir} ro a path derived from it\n2) missing values that go to check project properties\n\nShould project be null, or should it be a skeleton instance? Either the expression evaluator needs to be fixed (set basedir to user.dir, don't look for properties), or the project needs to be populated.\n\nI encountered this attempting to use scm:checkout."
    ],
    [
        "MNG-1036",
        "MNG-951",
        "local snapshot never used when one exists remotely ",
        "issues with repository selection John has highlighted some issues in repository selected, putting in a quick fix to null it if the local one is selected.\n\nHowever, this still isn't ideal and I'm seeing times when local installation doesn't take, as well as local installation forcing an instant remote repo check. Give it a once over.\n\nI will also remove the legacy metadata handling for simplification now that the repository is fully populated."
    ],
    [
        "MNG-1208",
        "MNG-1142",
        "VersionRange.getSelectedVersion returns upper bound even if exclusive Found while searching for MNG-1207\n\na call to VersionRange.getSelectedVersion() will return the upper bound even if the upper bound is exclusive.  (and isSelectedVersionKnown would return false).  This method should throw an exception if the selectedVersion is not known.\n\n            else\n            {\n                Restriction restriction = (Restriction) restrictions.get( restrictions.size() - 1 );\n\n                version = restriction.getUpperBound();\n                if ( version == null )\n                {\n                    version = RELEASE;\n                }\n            }",
        "restriction of [1.6,) and [1.5,1.6.2) in that order results in 1.6.2 instead of 1.6.1 got this by adding ant [1.6,) to it0034, and ant [1.5,1.6.2) to one of its deps (deeper).\n\nI think this is caused by the fact that versions are resolved too early instead of retaining the restriction, but it needs a further look."
    ],
    [
        "MNG-1235",
        "MNG-1220",
        "NPE In DiagnosisUtils while using tomcat plugin null pointer exception occurs as following when executing `m2 tomcat:deploy`:\n\njava.lang.NullPointerException\n        at org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique(DiagnosisUtils.java:89)\n        at org.apache.maven.usability.MojoExecutionExceptionDiagnoser.diagnose(MojoExecutionExceptionDiagnoser.java:66)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:640)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:119)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nI'll add a test project shortly.",
        "NPE in DiagnosisUtils org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique() throws an NPE if the exception message is null [line 89: if ( rootMsg != null &&  error.getMessage().indexOf( rootMsg ) < 0 )]\n\nThe attached patch simply adds the error.getMessage() != null check"
    ],
    [
        "MNG-1318",
        "MNG-1273",
        "mvn.bat sets incorrect value to M2_HOME [Windows 2000] When running Maven 2 by calling mvn.bat on Windows 2000 (SP4) the batch file sets M2_HOME to a value including the name of the batch file itself.\nThis results in an error:\n\nERROR: M2_HOME is set to an invalid directory.\nM2_HOME = C:\\maven\\maven-2.0\\bin\\mvn.bat\\..\nPlease set the M2_HOME variable in your environment to match the location of the Maven installation\n\nWhen changing line 72 of mvn.bat to use %~dp0 instead of %~dps0 it works correctly:\nif \"%OS%\"==\"Windows_NT\" SET M2_HOME=%~dp0\\..\n\n\nLooking at the SVN history, this was changed to %~dps0 to work with spaces \nhttp://svn.apache.org/viewcvs.cgi?rev=163778&view=rev",
        "Current  installation instructions for Windows do not mention M2_HOME. It is required and cannot have spaces. Two issues:\n\n1. The installation instructions for Windows make no mention of the need to set M2_HOME. But if you try to run \"mvn --version\" after following the instructions, you are prompted to set this environment variable.\n\n2. At least on Windows 2K, M2_HOME will not work if it contains spaces. One workaround is to use the \"short\" 8.3 version of all directory names. (To see the short version of directory names, do \"dir /A:D /X\" in a DOS window.)\n\n"
    ],
    [
        "MNG-1339",
        "MNG-1337",
        "properties filtering treats idontexist.name as pom.name When trying to filter a file containing a property name xxx.name, if the xxx.name property is missing in my profile, the property will be resolved as pom.name.\n\nTest case coming",
        "Interpolation of POM values needs to be improved Currently there are a few problems with POM interpolation:\n\n1) Things like ${pom.organization.name} show with the ${pom.name}\n\n2) ${pom.build.directory} is always null\n\nI think using velocity like interpolation here would be better but performance might be an issue."
    ],
    [
        "MNG-1354",
        "MNG-1220",
        "NPE when plugins throw certain exceptions Regularly see this, although it's entirely obvious why looking at the source:\n\njava.lang.NullPointerException\n        at org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique(DiagnosisUtils.java:89)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics$PuntErrorDiagnoser.diagnose(ErrorDiagnostics.java:132)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:104)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logFatal(DefaultMaven.java:627)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:143)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nCan spend time creating a testcase if it's not immediately obvious.",
        "NPE in DiagnosisUtils org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique() throws an NPE if the exception message is null [line 89: if ( rootMsg != null &&  error.getMessage().indexOf( rootMsg ) < 0 )]\n\nThe attached patch simply adds the error.getMessage() != null check"
    ],
    [
        "MNG-1354",
        "MNG-1235",
        "NPE when plugins throw certain exceptions Regularly see this, although it's entirely obvious why looking at the source:\n\njava.lang.NullPointerException\n        at org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique(DiagnosisUtils.java:89)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics$PuntErrorDiagnoser.diagnose(ErrorDiagnostics.java:132)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:104)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logFatal(DefaultMaven.java:627)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:143)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nCan spend time creating a testcase if it's not immediately obvious.",
        "NPE In DiagnosisUtils while using tomcat plugin null pointer exception occurs as following when executing `m2 tomcat:deploy`:\n\njava.lang.NullPointerException\n        at org.apache.maven.usability.diagnostics.DiagnosisUtils.appendRootCauseIfPresentAndUnique(DiagnosisUtils.java:89)\n        at org.apache.maven.usability.MojoExecutionExceptionDiagnoser.diagnose(MojoExecutionExceptionDiagnoser.java:66)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:640)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:119)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nI'll add a test project shortly."
    ],
    [
        "MNG-1414",
        "MNG-1232",
        "Maven dies when trying to report a plugin error While trying to build an EAR with Maven 2.0.\n\n\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-ear-plugin:2.0:generate-application-xml' --\n>\n[DEBUG]   (f) displayName = wsf-runtime-ear\n[DEBUG]   (f) generatedDescriptorLocation = D:\\perforce\\depot\\modules\\cordoba\\runtime-ear\\target\n[DEBUG]   (f) groupId = wsf\n[DEBUG]   (f) artifactId = wsf-engine-web\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n---------------------------------------------------\nconstituent[0]: file:/c:/dev/maven-2.0/lib/commons-cli-1.0.jar\nconstituent[1]: file:/c:/dev/maven-2.0/lib/doxia-sink-api-1.0-alpha-4.jar\nconstituent[2]: file:/c:/dev/maven-2.0/lib/jsch-0.1.23.jar\nconstituent[3]: file:/c:/dev/maven-2.0/lib/maven-artifact-2.0-1.jar\nconstituent[4]: file:/c:/dev/maven-2.0/lib/maven-artifact-manager-2.0-1.jar\nconstituent[5]: file:/c:/dev/maven-2.0/lib/maven-core-2.0.jar\nconstituent[6]: file:/c:/dev/maven-2.0/lib/maven-error-diagnostics-2.0.jar\nconstituent[7]: file:/c:/dev/maven-2.0/lib/maven-model-2.0.jar\nconstituent[8]: file:/c:/dev/maven-2.0/lib/maven-monitor-2.0.jar\nconstituent[9]: file:/c:/dev/maven-2.0/lib/maven-plugin-api-2.0.jar\nconstituent[10]: file:/c:/dev/maven-2.0/lib/maven-plugin-descriptor-2.0.jar\nconstituent[11]: file:/c:/dev/maven-2.0/lib/maven-plugin-parameter-documenter-2.0.jar\nconstituent[12]: file:/c:/dev/maven-2.0/lib/maven-plugin-registry-2.0.jar\nconstituent[13]: file:/c:/dev/maven-2.0/lib/maven-profile-2.0.jar\nconstituent[14]: file:/c:/dev/maven-2.0/lib/maven-project-2.0-1.jar\nconstituent[15]: file:/c:/dev/maven-2.0/lib/maven-reporting-api-2.0.jar\nconstituent[16]: file:/c:/dev/maven-2.0/lib/maven-repository-metadata-2.0.jar\nconstituent[17]: file:/c:/dev/maven-2.0/lib/maven-settings-2.0.jar\nconstituent[18]: file:/c:/dev/maven-2.0/lib/plexus-interactivity-api-1.0-alpha-4.jar\nconstituent[19]: file:/c:/dev/maven-2.0/lib/wagon-file-1.0-alpha-5.jar\nconstituent[20]: file:/c:/dev/maven-2.0/lib/wagon-http-lightweight-1.0-alpha-5.jar\nconstituent[21]: file:/c:/dev/maven-2.0/lib/wagon-provider-api-1.0-alpha-5.jar\nconstituent[22]: file:/c:/dev/maven-2.0/lib/wagon-ssh-1.0-alpha-5.jar\n---------------------------------------------------\njava.lang.NullPointerException\n        at java.util.regex.Matcher.getTextLength(Matcher.java:758)\n        at java.util.regex.Matcher.find(Matcher.java:414)\n        at org.apache.maven.plugin.PluginConfigurationException.addParameterUsageInfo(PluginConfigur\nationException.java:92)\n        at org.apache.maven.plugin.PluginConfigurationException.buildConfigurationDiagnosticMessage(\nPluginConfigurationException.java:272)\n        at org.apache.maven.usability.PluginConfigurationDiagnoser.diagnose(PluginConfigurationDiagn\noser.java:49)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81\n)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:640)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:119)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n",
        "Incorrect field case triggers NPE when configurator unable to configure object Triggered working on a new plugin. The configuration error is mine, but the error message is very cryptic. I spent 15 min trying to finx the reason for the issue...\nNPE should at least be avoided. Better should the configuration error reported.\n\npom.xml extract:\n\n        <configuration>\n           <!--outputDirectory></outputDirectory--> <!-- not required?? -->\n\n           <!-- \"GLOBAL\" -->\n           <!-- dependencies to sign and distribute (runtime-sub-dependencies get signed too). -->\n           <!-- does that imply transitivity? -->\n           <dependencies>\n             <dependency>commons-logging:commons:logging</dependency>\n             <dependency>commons-cli:commons:cli</dependency>\n           </dependencies>\n\n           <jnlp>\n              ...\n             <sign>\n                ....\n               <dnameC>US</dnameC>\n\nand my Mojo:\n\npublic class JnlpMojo\n    extends AbstractMojo\n{\n    /**\n     * @parameter\n     */\n    private SignConfig sign;\n   ...\n}\n\npublic class SignConfig {\n    private String dnamec;   // note the case issue\n    ...\n}\n\nGives the following failure:\n\t\n\n[DEBUG] adding entry META-INF/maven/org.apache.maven.plugins/jar-mng-1130-0/pom.properties\n[DEBUG] org.codehaus.mojo:webstart-maven-plugin:maven-plugin:0.1-SNAPSHOT (selected for runtime)\n[DEBUG]   commons-lang:commons-lang:jar:2.1 (selected for runtime)\n[DEBUG] Configuring mojo 'org.codehaus.mojo:webstart-maven-plugin:0.1-SNAPSHOT:jnlp' -->\n[DEBUG]   (f) gzip = false\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n---------------------------------------------------\nconstituent[0]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-core-2.0.jar\nconstituent[1]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-model-2.0.jar\nconstituent[2]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-plugin-parameter-documenter-2.0.jar\nconstituent[3]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-profile-2.0.jar\nconstituent[4]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-error-diagnostics-2.0.jar\nconstituent[5]: file:/home/jerome/local/lib/maven-2.0-RC/lib/plexus-interactivity-api-1.0-alpha-4.jar\nconstituent[6]: file:/home/jerome/local/lib/maven-2.0-RC/lib/wagon-http-lightweight-1.0-alpha-5.jar\nconstituent[7]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-plugin-descriptor-2.0.jar\nconstituent[8]: file:/home/jerome/local/lib/maven-2.0-RC/lib/commons-cli-1.0.jar\nconstituent[9]: file:/home/jerome/local/lib/maven-2.0-RC/lib/wagon-ssh-1.0-alpha-5.jar\nconstituent[10]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-monitor-2.0.jar\nconstituent[11]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-repository-metadata-2.0.jar\nconstituent[12]: file:/home/jerome/local/lib/maven-2.0-RC/lib/jsch-0.1.23.jar\nconstituent[13]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-settings-2.0.jar\nconstituent[14]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-artifact-manager-2.0.jar\nconstituent[15]: file:/home/jerome/local/lib/maven-2.0-RC/lib/wagon-file-1.0-alpha-5.jar\nconstituent[16]: file:/home/jerome/local/lib/maven-2.0-RC/lib/wagon-provider-api-1.0-alpha-5.jar\nconstituent[17]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-project-2.0.jar\nconstituent[18]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-reporting-api-2.0.jar\nconstituent[19]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-plugin-api-2.0.jar\nconstituent[20]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-artifact-2.0.jar\nconstituent[21]: file:/home/jerome/local/lib/maven-2.0-RC/lib/maven-plugin-registry-2.0.jar\nconstituent[22]: file:/home/jerome/local/lib/maven-2.0-RC/lib/doxia-sink-api-1.0-alpha-4.jar\n---------------------------------------------------\njava.lang.NullPointerException\n        at java.util.regex.Matcher.getTextLength(Matcher.java:1127)\n        at java.util.regex.Matcher.reset(Matcher.java:284)\n        at java.util.regex.Matcher.<init>(Matcher.java:205)\n        at java.util.regex.Pattern.matcher(Pattern.java:879)\n        at org.apache.maven.plugin.PluginConfigurationException.addParameterUsageInfo(PluginConfigurationException.java:85)\n        at org.apache.maven.plugin.PluginConfigurationException.buildConfigurationDiagnosticMessage(PluginConfigurationException.java:272)\n        at org.apache.maven.usability.PluginConfigurationDiagnoser.diagnose(PluginConfigurationDiagnoser.java:49)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:640)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:119)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nRenaming the field from dnamec to dnameC fixes the issue."
    ],
    [
        "MNG-1414",
        "MNG-1351",
        "Maven dies when trying to report a plugin error While trying to build an EAR with Maven 2.0.\n\n\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-ear-plugin:2.0:generate-application-xml' --\n>\n[DEBUG]   (f) displayName = wsf-runtime-ear\n[DEBUG]   (f) generatedDescriptorLocation = D:\\perforce\\depot\\modules\\cordoba\\runtime-ear\\target\n[DEBUG]   (f) groupId = wsf\n[DEBUG]   (f) artifactId = wsf-engine-web\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n---------------------------------------------------\nconstituent[0]: file:/c:/dev/maven-2.0/lib/commons-cli-1.0.jar\nconstituent[1]: file:/c:/dev/maven-2.0/lib/doxia-sink-api-1.0-alpha-4.jar\nconstituent[2]: file:/c:/dev/maven-2.0/lib/jsch-0.1.23.jar\nconstituent[3]: file:/c:/dev/maven-2.0/lib/maven-artifact-2.0-1.jar\nconstituent[4]: file:/c:/dev/maven-2.0/lib/maven-artifact-manager-2.0-1.jar\nconstituent[5]: file:/c:/dev/maven-2.0/lib/maven-core-2.0.jar\nconstituent[6]: file:/c:/dev/maven-2.0/lib/maven-error-diagnostics-2.0.jar\nconstituent[7]: file:/c:/dev/maven-2.0/lib/maven-model-2.0.jar\nconstituent[8]: file:/c:/dev/maven-2.0/lib/maven-monitor-2.0.jar\nconstituent[9]: file:/c:/dev/maven-2.0/lib/maven-plugin-api-2.0.jar\nconstituent[10]: file:/c:/dev/maven-2.0/lib/maven-plugin-descriptor-2.0.jar\nconstituent[11]: file:/c:/dev/maven-2.0/lib/maven-plugin-parameter-documenter-2.0.jar\nconstituent[12]: file:/c:/dev/maven-2.0/lib/maven-plugin-registry-2.0.jar\nconstituent[13]: file:/c:/dev/maven-2.0/lib/maven-profile-2.0.jar\nconstituent[14]: file:/c:/dev/maven-2.0/lib/maven-project-2.0-1.jar\nconstituent[15]: file:/c:/dev/maven-2.0/lib/maven-reporting-api-2.0.jar\nconstituent[16]: file:/c:/dev/maven-2.0/lib/maven-repository-metadata-2.0.jar\nconstituent[17]: file:/c:/dev/maven-2.0/lib/maven-settings-2.0.jar\nconstituent[18]: file:/c:/dev/maven-2.0/lib/plexus-interactivity-api-1.0-alpha-4.jar\nconstituent[19]: file:/c:/dev/maven-2.0/lib/wagon-file-1.0-alpha-5.jar\nconstituent[20]: file:/c:/dev/maven-2.0/lib/wagon-http-lightweight-1.0-alpha-5.jar\nconstituent[21]: file:/c:/dev/maven-2.0/lib/wagon-provider-api-1.0-alpha-5.jar\nconstituent[22]: file:/c:/dev/maven-2.0/lib/wagon-ssh-1.0-alpha-5.jar\n---------------------------------------------------\njava.lang.NullPointerException\n        at java.util.regex.Matcher.getTextLength(Matcher.java:758)\n        at java.util.regex.Matcher.find(Matcher.java:414)\n        at org.apache.maven.plugin.PluginConfigurationException.addParameterUsageInfo(PluginConfigur\nationException.java:92)\n        at org.apache.maven.plugin.PluginConfigurationException.buildConfigurationDiagnosticMessage(\nPluginConfigurationException.java:272)\n        at org.apache.maven.usability.PluginConfigurationDiagnoser.diagnose(PluginConfigurationDiagn\noser.java:49)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81\n)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:693)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:640)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:119)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n",
        "Improve error handling and message I don't know yet what the problem is but the stack trace doesn't help me in solving it. It would be nice to display a more indicative error message:\n\nC:\\dev\\cargo\\trunk\\samples\\extensions\\maven2>mvn org.codehaus.cargo.maven2:cargo-maven2-plugin:start -X\n+ Error stacktraces are turned on.\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settings\\Vincent Massol\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\apps\\maven2\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: org.codehaus.cargo.samples.maven2:cargo-samples-\nmaven2:war:null\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: org.codehaus.cargo.samples:cargo-samples-extensi\nons:pom:null\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: org.codehaus.cargo.samples:cargo-samples:pom:nul\nl\n[DEBUG] cargo-maven2-plugin: resolved to version 0.7-SNAPSHOT from local repository\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-maven2-plugin: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.maven2:cargo-maven2-plugin:maven-plugin:0.7-SNAP\nSHOT\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG] cargo-maven2-plugin: using locally installed snapshot\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Cargo Sample for the Maven2 plugin\n[INFO]    task-segment: [org.codehaus.cargo.maven2:cargo-maven2-plugin:start]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] cargo-maven2-plugin: using locally installed snapshot\n[DEBUG] org.codehaus.cargo.maven2:cargo-maven2-plugin:maven-plugin:0.7-SNAPSHOT (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-generic: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-generic:jar:0.7-SNAPSHOT\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]   org.codehaus.cargo.core:cargo-core-generic:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]     ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-container: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-container:jar:0.7-SNAPSHOT\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]     org.codehaus.cargo.core:cargo-core-container:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]       ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-module: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-module:jar:0.7-SNAPSHOT\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]       org.codehaus.cargo.core:cargo-core-module:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]         ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG] Skipping disabled repository central\n[DEBUG] cargo-core-util: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:cargo-core-util:jar:0.7-SNAPSHOT\n[DEBUG] cargo-core: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: org.codehaus.cargo.core:cargo-core:jar:0.7-SNAPSHOT\n[DEBUG] cargo: using locally installed snapshot\n[DEBUG]         org.codehaus.cargo.core:cargo-core-util:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]           ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]         xml-apis:xml-apis:jar:2.0.2 (selected for runtime)\n[DEBUG]         xerces:xercesImpl:jar:2.6.2 (selected for runtime)\n[DEBUG]       geronimo-spec:geronimo-spec-j2ee-deployment:jar:1.1-rc4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: null:maven-project:jar:2.0\n[DEBUG]   org.apache.maven:maven-project:jar:2.0 (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2 (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-artifact:jar:2.0\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-model:jar:2.0\n[DEBUG]     org.apache.maven:maven-model:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-artifact-manager:jar:2.0\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8 (selected for runtime)\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-repository-metadata:jar:2.0\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0 (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5 (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: null:maven-profile:jar:2.0\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4 (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8 (selected for runtime)\n[DEBUG]       org.apache.maven:maven-model:jar:2.0 (selected for runtime)\n[DEBUG]   org.codehaus.cargo.core:cargo-core-container:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]     ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]     org.codehaus.cargo.core:cargo-core-module:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]       ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]       org.codehaus.cargo.core:cargo-core-util:jar:0.7-SNAPSHOT (selected for runtime)\n[DEBUG]         ant:ant:jar:1.5.4 (selected for runtime)\n[DEBUG]       xml-apis:xml-apis:jar:2.0.2 (selected for runtime)\n[DEBUG]       xerces:xercesImpl:jar:2.6.2 (selected for runtime)\n[DEBUG]     geronimo-spec:geronimo-spec-j2ee-deployment:jar:1.1-rc4 (selected for runtime)\n[DEBUG] Retrieving parent-POM from the repository for project: org.apache.maven:maven-plugin-api:jar:2.0\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0 (selected for runtime)\n[DEBUG] cargo-core-container: using locally installed snapshot\n[DEBUG] cargo-core-generic: using locally installed snapshot\n[DEBUG] cargo-core-util: using locally installed snapshot\n[DEBUG] cargo-core-module: using locally installed snapshot\n[DEBUG] Configuring mojo 'org.codehaus.cargo.maven2:cargo-maven2-plugin:0.7-SNAPSHOT:start' -->\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n---------------------------------------------------\nconstituent[0]: file:/c:/apps/maven2/lib/commons-cli-1.0.jar\nconstituent[1]: file:/c:/apps/maven2/lib/doxia-sink-api-1.0-alpha-6-20051021.114601-1.jar\nconstituent[2]: file:/c:/apps/maven2/lib/jsch-0.1.23.jar\nconstituent[3]: file:/c:/apps/maven2/lib/junit-3.8.1.jar\nconstituent[4]: file:/c:/apps/maven2/lib/maven-artifact-2.0.1-SNAPSHOT.jar\nconstituent[5]: file:/c:/apps/maven2/lib/maven-artifact-manager-2.0.1-SNAPSHOT.jar\nconstituent[6]: file:/c:/apps/maven2/lib/maven-core-2.0.1-SNAPSHOT.jar\nconstituent[7]: file:/c:/apps/maven2/lib/maven-error-diagnostics-2.0.1-SNAPSHOT.jar\nconstituent[8]: file:/c:/apps/maven2/lib/maven-model-2.0.1-SNAPSHOT.jar\nconstituent[9]: file:/c:/apps/maven2/lib/maven-monitor-2.0.1-SNAPSHOT.jar\nconstituent[10]: file:/c:/apps/maven2/lib/maven-plugin-api-2.0.1-SNAPSHOT.jar\nconstituent[11]: file:/c:/apps/maven2/lib/maven-plugin-descriptor-2.0.1-SNAPSHOT.jar\nconstituent[12]: file:/c:/apps/maven2/lib/maven-plugin-parameter-documenter-2.0.1-SNAPSHOT.jar\nconstituent[13]: file:/c:/apps/maven2/lib/maven-plugin-registry-2.0.1-SNAPSHOT.jar\nconstituent[14]: file:/c:/apps/maven2/lib/maven-profile-2.0.1-SNAPSHOT.jar\nconstituent[15]: file:/c:/apps/maven2/lib/maven-project-2.0.1-SNAPSHOT.jar\nconstituent[16]: file:/c:/apps/maven2/lib/maven-reporting-api-2.0.1-SNAPSHOT.jar\nconstituent[17]: file:/c:/apps/maven2/lib/maven-repository-metadata-2.0.1-SNAPSHOT.jar\nconstituent[18]: file:/c:/apps/maven2/lib/maven-settings-2.0.1-SNAPSHOT.jar\nconstituent[19]: file:/c:/apps/maven2/lib/plexus-interactivity-api-1.0-alpha-4.jar\nconstituent[20]: file:/c:/apps/maven2/lib/wagon-file-1.0-alpha-5.jar\nconstituent[21]: file:/c:/apps/maven2/lib/wagon-http-lightweight-1.0-alpha-5.jar\nconstituent[22]: file:/c:/apps/maven2/lib/wagon-provider-api-1.0-alpha-5.jar\nconstituent[23]: file:/c:/apps/maven2/lib/wagon-ssh-1.0-alpha-5.jar\n---------------------------------------------------\njava.lang.NullPointerException\n        at java.util.regex.Matcher.getTextLength(Matcher.java:758)\n        at java.util.regex.Matcher.find(Matcher.java:414)\n        at org.apache.maven.plugin.PluginConfigurationException.addParameterUsageInfo(PluginConfigurationException.java:92)\n        at org.apache.maven.plugin.PluginConfigurationException.buildConfigurationDiagnosticMessage(PluginConfigurationException.j\nava:272)\n        at org.apache.maven.usability.PluginConfigurationDiagnoser.diagnose(PluginConfigurationDiagnoser.java:49)\n        at org.apache.maven.usability.diagnostics.ErrorDiagnostics.diagnose(ErrorDiagnostics.java:81)\n        at org.apache.maven.DefaultMaven.logDiagnostics(DefaultMaven.java:699)\n        at org.apache.maven.DefaultMaven.logError(DefaultMaven.java:646)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:121)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nC:\\dev\\cargo\\trunk\\samples\\extensions\\maven2>\n\n"
    ],
    [
        "MNG-1571",
        "MNG-1568",
        "Wrong calculation of transient dependecies if artifact is referenced from different scopes I have an artifact A (elsag-test below), that is used by other projects only for the tests. A has a dependency to commons-logging. Artifact B has a compile-time dependency to an artifact, that also has a dependency on commons-logging. Nevertheless, the resulting scope for commons-logging is wrongly calculated as test and the compilation fails.\n\n============= %< ================\n[DEBUG] Retrieving parent-POM from the repository for project: com.elsagsolutions.commons:super-project:pom:1.1-SNAPSHOT\n[DEBUG] meta: using locally installed snapshot\n[DEBUG]   com.elsagsolutions.commons:elsag-test:jar:1.2-SNAPSHOT (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3 (selected for test)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (selected for test)\n[DEBUG]     jmock:jmock-cglib:jar:1.0.1 (selected for test)\n[DEBUG]       jmock:jmock:jar:1.0.1 (selected for test)\n[DEBUG]         junit:junit:jar:3.8.1 (selected for test)\n[DEBUG]   commons-httpclient:commons-httpclient:jar:2.0.2 (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (setting scope to: compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (removed - nearer found: 1.0.4)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (selected for compile)\n[DEBUG]   commons-io:commons-io:jar:1.0 (selected for compile)\n[DEBUG]     junit:junit:jar:3.8.1 (selected for compile)\n============= %< ================\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] Compilation failure\n\nC:\\Work\\Projects\\commons\\lang\\src\\java\\com\\elsagsolutions\\lang\\net\\AbstractSocketStreamServer.java:[14,34] package org.apache.commons.logging does not exist\n============= %< ================\n\nIf I add commons-logging as direct dependency of B it works:\n\n============= %< ================\n[DEBUG] Retrieving parent-POM from the repository for project: com.elsagsolutions.commons:super-project:pom:1.1-SNAPSHOT\n[DEBUG] meta: using locally installed snapshot\n[DEBUG]   com.elsagsolutions.commons:elsag-test:jar:1.2-SNAPSHOT (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3 (selected for test)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (selected for test)\n[DEBUG]     jmock:jmock-cglib:jar:1.0.1 (selected for test)\n[DEBUG]       jmock:jmock:jar:1.0.1 (selected for test)\n[DEBUG]         junit:junit:jar:3.8.1 (selected for test)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4 (selected for compile)\n[DEBUG]   commons-httpclient:commons-httpclient:jar:2.0.2 (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (removed - nearer found: 1.0.4)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (selected for compile)\n============= %< ================\n\nUnfortunately this introduces a dependency for commons-logging, therefore I wanted to set the dep at least optional, but then commons-logging is again not available at compile time. Might be related to MNG-1378.",
        "test-jar dependency clobbers transitive dependency Specifying a test-jar dependency clobbers any transitive dependency on\nthat project.\n\neg\n\nprojectA publishes jar and test-jar\nprojectB depends on projectA.jar (scope compile)\nprojectC depends on projectB.jar (scope compile) and projectA.test-jar\n(scope test)\n\nIn projectC, the test scoped projectA.test-jar dependency effectively\nclobbers the compile scoped transitive dependency on projectA.jar. ie\nprojectA.jar is no longer in projectC's compile scope dependency list.\n\nIf I explicitly specify the projectA.jar compile dependency in the projectC POM it is resolved correctly.\n\nThere are currently other issues with test-jar dependency\nresolution that may be related.\n\nMNG-1378 <http://jira.codehaus.org/browse/MNG-1378>\n\nAccording to Brett \"It shouldn't be clobbered, as\nthe conflict ID for a dependency is group:artifact:type:classifier\" but this isn't what I am seeing.\n"
    ],
    [
        "MNG-1742",
        "MNG-1741",
        "Not detecting changes in the installed jars. I have installed my components jar to remote repository. If someone has change the repository then and user is using the same version of the component. Although the component jar has been changed but user is not getting the new component jar in the repository as he is having the same version jar in his/her local repository.\n\nThere is no way to recognise the latest changes..........",
        "Not detecting changes in the installed jars. I have installed my components jar to remote repository. If someone has change the repository then and user is using the same version of the component. Although the component jar has been changed but user is not getting the new component jar in the repository as he is having the same version jar in his/her local repository."
    ],
    [
        "MNG-1906",
        "MNG-1486",
        "properties not being replaced before being passed to plugins (specificaly the surefire plugin) in the attached foo-root proj run mvn package from foo-root and you will see that ${project.build.directory} is not substituted but ${project.x.build.directory} is.\n\nI spent a bit of time chatting with jdcasey on irc on Dec-07-2005 about this issue if that helps.",
        "Can't use pom properties inside resource directory  tag I have pom.xml with following snippet:\n\n<build>\n   <sourceDirectory>src\\JavaSource</sourceDirectory>\n   <resources>\n       <resource>\n      <directory>src\\JavaSource</directory>\n\nand it works.\nIf I use property like this\n\n<build>\n   <sourceDirectory>src\\JavaSource</sourceDirectory>\n   <resources>\n       <resource>\n      <directory>${project.build.sourceDirectory}</directory>\n\n\nit doesn't work. "
    ],
    [
        "MNG-1797",
        "MNG-1557",
        "Dependency excludes apply to every subsequent dependency, not just the one it is declared under. If you specify ANY dependency excludes, all dependencies after that one in the pom will also exclude what you specified.  They appear to be cumulative on every dependency in that they bleed over into sibling dependencies.  \nIt's easy to test if you add an exclusion to a random dependency. This exclusion should exclude a required transitive dependency that is included by a dependency lower in the list.  You will find that the dependency lower in the list no longer includes the required dependency because it is using the filter you declared in the other dependency.\n",
        "Dependency Ignored A typical dependency (with version, scope, and exclusions set by parent POM via dependency management) shows up in the effective pom and the exported pom.  However, it does not show up in the dependency tree in the debug output of an attempt to package the project, it doesn't show up in the resulting war (which it should by it's scope of runtime), and if it's deleted from the local repository, Maven does not attemtp to download it.  Other project with this dependency specified the same way, with the same parent, download the dependency, and work as expected."
    ],
    [
        "MNG-1823",
        "MNG-1568",
        "dependencies with classifier mask transitive dependencies of same dependency without classifier A module in cocoon has following dependencies : \n\n   <dependency>\n      <groupId>org.apache.cocoon</groupId>\n      <artifactId>cocoon-core</artifactId>\n      <version>2.2.0-SNAPSHOT</version>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.cocoon</groupId>\n      <artifactId>cocoon-core</artifactId>\n      <version>2.2.0-SNAPSHOT</version>\n    </dependency>\n\nThe first dependency is created by the core module using :\n\n      <plugin>\n        <artifactId>maven-jar-plugin</artifactId>\n        <executions>\n          <execution>\n            <goals>\n              <goal>test-jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\nNow i would like the module to depend on the jar with classifier \"tests\" during the testing phase ie cocoon-core-2.2.0-SNAPSHOT-tests.jar, and during the normal compilation phase it should just use cocoon-core-2.2.0-SNAPSHOT.jar. IMO above dependencies express exactly this.\n\nThe problem is that maven somehow removes all transitive dependencies from  cocoon-core-2.2.0-SNAPSHOT.jar when both dependencies are in place, breaking compilation. When i remove the dependency with the classifier, then all is fine (but ofcourse my tests can't run)\n\nI hope above is clear, otherwise just ping me on irc",
        "test-jar dependency clobbers transitive dependency Specifying a test-jar dependency clobbers any transitive dependency on\nthat project.\n\neg\n\nprojectA publishes jar and test-jar\nprojectB depends on projectA.jar (scope compile)\nprojectC depends on projectB.jar (scope compile) and projectA.test-jar\n(scope test)\n\nIn projectC, the test scoped projectA.test-jar dependency effectively\nclobbers the compile scoped transitive dependency on projectA.jar. ie\nprojectA.jar is no longer in projectC's compile scope dependency list.\n\nIf I explicitly specify the projectA.jar compile dependency in the projectC POM it is resolved correctly.\n\nThere are currently other issues with test-jar dependency\nresolution that may be related.\n\nMNG-1378 <http://jira.codehaus.org/browse/MNG-1378>\n\nAccording to Brett \"It shouldn't be clobbered, as\nthe conflict ID for a dependency is group:artifact:type:classifier\" but this isn't what I am seeing.\n"
    ],
    [
        "MNG-1823",
        "MNG-1571",
        "dependencies with classifier mask transitive dependencies of same dependency without classifier A module in cocoon has following dependencies : \n\n   <dependency>\n      <groupId>org.apache.cocoon</groupId>\n      <artifactId>cocoon-core</artifactId>\n      <version>2.2.0-SNAPSHOT</version>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.cocoon</groupId>\n      <artifactId>cocoon-core</artifactId>\n      <version>2.2.0-SNAPSHOT</version>\n    </dependency>\n\nThe first dependency is created by the core module using :\n\n      <plugin>\n        <artifactId>maven-jar-plugin</artifactId>\n        <executions>\n          <execution>\n            <goals>\n              <goal>test-jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\nNow i would like the module to depend on the jar with classifier \"tests\" during the testing phase ie cocoon-core-2.2.0-SNAPSHOT-tests.jar, and during the normal compilation phase it should just use cocoon-core-2.2.0-SNAPSHOT.jar. IMO above dependencies express exactly this.\n\nThe problem is that maven somehow removes all transitive dependencies from  cocoon-core-2.2.0-SNAPSHOT.jar when both dependencies are in place, breaking compilation. When i remove the dependency with the classifier, then all is fine (but ofcourse my tests can't run)\n\nI hope above is clear, otherwise just ping me on irc",
        "Wrong calculation of transient dependecies if artifact is referenced from different scopes I have an artifact A (elsag-test below), that is used by other projects only for the tests. A has a dependency to commons-logging. Artifact B has a compile-time dependency to an artifact, that also has a dependency on commons-logging. Nevertheless, the resulting scope for commons-logging is wrongly calculated as test and the compilation fails.\n\n============= %< ================\n[DEBUG] Retrieving parent-POM from the repository for project: com.elsagsolutions.commons:super-project:pom:1.1-SNAPSHOT\n[DEBUG] meta: using locally installed snapshot\n[DEBUG]   com.elsagsolutions.commons:elsag-test:jar:1.2-SNAPSHOT (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3 (selected for test)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (selected for test)\n[DEBUG]     jmock:jmock-cglib:jar:1.0.1 (selected for test)\n[DEBUG]       jmock:jmock:jar:1.0.1 (selected for test)\n[DEBUG]         junit:junit:jar:3.8.1 (selected for test)\n[DEBUG]   commons-httpclient:commons-httpclient:jar:2.0.2 (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (setting scope to: compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (removed - nearer found: 1.0.4)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (selected for compile)\n[DEBUG]   commons-io:commons-io:jar:1.0 (selected for compile)\n[DEBUG]     junit:junit:jar:3.8.1 (selected for compile)\n============= %< ================\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] Compilation failure\n\nC:\\Work\\Projects\\commons\\lang\\src\\java\\com\\elsagsolutions\\lang\\net\\AbstractSocketStreamServer.java:[14,34] package org.apache.commons.logging does not exist\n============= %< ================\n\nIf I add commons-logging as direct dependency of B it works:\n\n============= %< ================\n[DEBUG] Retrieving parent-POM from the repository for project: com.elsagsolutions.commons:super-project:pom:1.1-SNAPSHOT\n[DEBUG] meta: using locally installed snapshot\n[DEBUG]   com.elsagsolutions.commons:elsag-test:jar:1.2-SNAPSHOT (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3 (selected for test)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (selected for test)\n[DEBUG]     jmock:jmock-cglib:jar:1.0.1 (selected for test)\n[DEBUG]       jmock:jmock:jar:1.0.1 (selected for test)\n[DEBUG]         junit:junit:jar:3.8.1 (selected for test)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4 (selected for compile)\n[DEBUG]   commons-httpclient:commons-httpclient:jar:2.0.2 (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (removed - nearer found: 1.0.4)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (selected for compile)\n============= %< ================\n\nUnfortunately this introduces a dependency for commons-logging, therefore I wanted to set the dep at least optional, but then commons-logging is again not available at compile time. Might be related to MNG-1378."
    ],
    [
        "MNG-1836",
        "MNG-1323",
        "inherited plugin dependencies I have project composed of a reactor/parent pom.xml and a few module.\n\nIn the parent pom.xml, I have somthing like this :\n\n<plugins>\n....\n          <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n     \t\t\t\t<!-- The assembly plugin is not flexible enought for what we have to do -->\n       \t\t\t\t<phase>package</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<property name=\"version.number\" value=\"${project.version}\"/>\n         \t\t\t\t\t<ant antfile=\"src/build/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals><goal>run</goal></goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<inherited>false</inherited>\n\t\t</plugin>\n...\n</plugins>\n\nIn one of the module, I have \n\n  \t<plugins> \n...\n \t    <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n       \t\t\t\t<phase>generate-test-sources</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<ant antfile=\"src/test/ant/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n\t        \t\t\t<testSourceRoot>target/generated-sources/nextmock</testSourceRoot>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals>\n         \t\t\t\t<goal>run</goal>\n       \t\t\t\t</goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<dependencies>\n   \t\t\t\t     <dependency>\n\t\t\t\t\t\t<!-- Required to use javac --> \n\t\t\t\t\t\t<groupId>sun.jdk</groupId>\n\t\t\t\t\t\t<artifactId>tools</artifactId>\n\t\t\t\t\t\t<version>1.5</version>\n\t\t\t\t\t\t<scope>system</scope>\n\t\t\t\t\t\t<systemPath>${java.home}/../lib/tools.jar</systemPath>\n\t\t\t\t\t</dependency>\n   \t\t\t</dependencies>\n\t\t</plugin>\n...\n</plugins>\n\nIt seems that the dependencies is in the sub-module is not loaded, probably because the plugin is loaded in the parent pom (or in the reactor pom which is the same in many cases) and not updated afterward.\n\nThe simple work around is to place the dependencies into the reactor plugin declaration. (A strange thing is that the dependecy doesn't need to be present in the module declaration anymore in that case)\n\nI tried also to place it only int the pluginManagment section but it doesn't work.  The dependency is not loaded.\n",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-1883",
        "MNG-870",
        "it plugin not picking up the plugin being built (goes to the local repo instead) Try the following to reproduce the problem:\n\n- checkout the clover plugin\n- delete the clover plugin from your local \n- run \"mvn install\" on the clover plugin. It'll start the it plugin and try to execute an it test that requires the clover plugin\n- it'll fail\n",
        "Make plugin discovery reactor aware If plugin discovery is reactor aware, plugins that are part of a reactor build and are used to aid the build\ncan be used in one go. Else first the plugin should be installed, and then the rest of the project can\nbe built.\n\nBut mainly this aids in integration testing for plugins: the maven-it-plugin in sandbox can't add the current plugin\n+ artifact to the lifecycle without making some methods public. If the plugin were to be discovered using the reactor,\nthose methods can remain private."
    ],
    [
        "MNG-1893",
        "MNG-1875",
        "Cannot deploy artifacts using classifier The classifier concept is well understood in maven, beeing an elemnt of the dependency.\nHowever, a project that generates artifacs with classifiers, cannot be deployed, nor installed:\n\ninstall plugin seem to 'not see' the classifier:\n\nthis output might help:\n\n[INFO] [jar:jar]\n[INFO] Building jar: /home/mgriffa/workspace/tfv-core/target/tfv-core-2.1-SNAPSHOT-localdev.jar\n[INFO] [install:install]\n[INFO] Installing /home/mgriffa/workspace/tfv-core/target/tfv-core-2.1-SNAPSHOT.jar to /home/mgriffa/.m2/repository/transferval/tfv-core/2.1-SNAPSHOT/tfv-core-2.1-SNAPSHOT.jar\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error installing artifact\n\nEmbedded error: Error installing artifact: File /home/mgriffa/workspace/tfv-core/target/tfv-core-2.1-SNAPSHOT.jar does not exist\n\njar:jar generates the artifact with the classifier, as told to do so, but install misses it",
        "Cannot deploy artifact with classifier Intro:\nI have an artifact I want to deploy with different confs, I use profiles and I want confs to be deployed, so I want somethings like\ncore-1.0.dev.jar\ncore-1.0.-test.jar\ncore-1.0.-prod.jar\n\nprofiles is the way to go.\nThe problem is how to set the name of the artifact with profiles. simple overwriting finalName does not work, I was told to put the classifier in the version, but this is incorrect, since all jars above should be in 1.0 dir. putting the classifier in verison makes them appear in different version dirs.\n"
    ],
    [
        "MNG-1895",
        "MNG-1568",
        "Dependencies in two paths are not added to resolution when scope needs to be updated in the nearest  due to any of nearest parents scopes are not correctly calculated for this case\n\nmy pom: a compile, b test\na: c compile, d compile\nb: d compile\n\nthen d ends in test scope because d is closer to my project through the path b-d\n\nI think scope importance should also be taken into account\n",
        "test-jar dependency clobbers transitive dependency Specifying a test-jar dependency clobbers any transitive dependency on\nthat project.\n\neg\n\nprojectA publishes jar and test-jar\nprojectB depends on projectA.jar (scope compile)\nprojectC depends on projectB.jar (scope compile) and projectA.test-jar\n(scope test)\n\nIn projectC, the test scoped projectA.test-jar dependency effectively\nclobbers the compile scoped transitive dependency on projectA.jar. ie\nprojectA.jar is no longer in projectC's compile scope dependency list.\n\nIf I explicitly specify the projectA.jar compile dependency in the projectC POM it is resolved correctly.\n\nThere are currently other issues with test-jar dependency\nresolution that may be related.\n\nMNG-1378 <http://jira.codehaus.org/browse/MNG-1378>\n\nAccording to Brett \"It shouldn't be clobbered, as\nthe conflict ID for a dependency is group:artifact:type:classifier\" but this isn't what I am seeing.\n"
    ],
    [
        "MNG-1895",
        "MNG-1571",
        "Dependencies in two paths are not added to resolution when scope needs to be updated in the nearest  due to any of nearest parents scopes are not correctly calculated for this case\n\nmy pom: a compile, b test\na: c compile, d compile\nb: d compile\n\nthen d ends in test scope because d is closer to my project through the path b-d\n\nI think scope importance should also be taken into account\n",
        "Wrong calculation of transient dependecies if artifact is referenced from different scopes I have an artifact A (elsag-test below), that is used by other projects only for the tests. A has a dependency to commons-logging. Artifact B has a compile-time dependency to an artifact, that also has a dependency on commons-logging. Nevertheless, the resulting scope for commons-logging is wrongly calculated as test and the compilation fails.\n\n============= %< ================\n[DEBUG] Retrieving parent-POM from the repository for project: com.elsagsolutions.commons:super-project:pom:1.1-SNAPSHOT\n[DEBUG] meta: using locally installed snapshot\n[DEBUG]   com.elsagsolutions.commons:elsag-test:jar:1.2-SNAPSHOT (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3 (selected for test)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (selected for test)\n[DEBUG]     jmock:jmock-cglib:jar:1.0.1 (selected for test)\n[DEBUG]       jmock:jmock:jar:1.0.1 (selected for test)\n[DEBUG]         junit:junit:jar:3.8.1 (selected for test)\n[DEBUG]   commons-httpclient:commons-httpclient:jar:2.0.2 (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (setting scope to: compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (removed - nearer found: 1.0.4)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (selected for compile)\n[DEBUG]   commons-io:commons-io:jar:1.0 (selected for compile)\n[DEBUG]     junit:junit:jar:3.8.1 (selected for compile)\n============= %< ================\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] Compilation failure\n\nC:\\Work\\Projects\\commons\\lang\\src\\java\\com\\elsagsolutions\\lang\\net\\AbstractSocketStreamServer.java:[14,34] package org.apache.commons.logging does not exist\n============= %< ================\n\nIf I add commons-logging as direct dependency of B it works:\n\n============= %< ================\n[DEBUG] Retrieving parent-POM from the repository for project: com.elsagsolutions.commons:super-project:pom:1.1-SNAPSHOT\n[DEBUG] meta: using locally installed snapshot\n[DEBUG]   com.elsagsolutions.commons:elsag-test:jar:1.2-SNAPSHOT (selected for test)\n[DEBUG]     cglib:cglib-nodep:jar:2.1_3 (selected for test)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.4 (selected for test)\n[DEBUG]     jmock:jmock-cglib:jar:1.0.1 (selected for test)\n[DEBUG]       jmock:jmock:jar:1.0.1 (selected for test)\n[DEBUG]         junit:junit:jar:3.8.1 (selected for test)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4 (selected for compile)\n[DEBUG]   commons-httpclient:commons-httpclient:jar:2.0.2 (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (removed - nearer found: 1.0.4)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3 (selected for compile)\n============= %< ================\n\nUnfortunately this introduces a dependency for commons-logging, therefore I wanted to set the dep at least optional, but then commons-logging is again not available at compile time. Might be related to MNG-1378."
    ],
    [
        "MNG-1895",
        "MNG-1823",
        "Dependencies in two paths are not added to resolution when scope needs to be updated in the nearest  due to any of nearest parents scopes are not correctly calculated for this case\n\nmy pom: a compile, b test\na: c compile, d compile\nb: d compile\n\nthen d ends in test scope because d is closer to my project through the path b-d\n\nI think scope importance should also be taken into account\n",
        "dependencies with classifier mask transitive dependencies of same dependency without classifier A module in cocoon has following dependencies : \n\n   <dependency>\n      <groupId>org.apache.cocoon</groupId>\n      <artifactId>cocoon-core</artifactId>\n      <version>2.2.0-SNAPSHOT</version>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.cocoon</groupId>\n      <artifactId>cocoon-core</artifactId>\n      <version>2.2.0-SNAPSHOT</version>\n    </dependency>\n\nThe first dependency is created by the core module using :\n\n      <plugin>\n        <artifactId>maven-jar-plugin</artifactId>\n        <executions>\n          <execution>\n            <goals>\n              <goal>test-jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\nNow i would like the module to depend on the jar with classifier \"tests\" during the testing phase ie cocoon-core-2.2.0-SNAPSHOT-tests.jar, and during the normal compilation phase it should just use cocoon-core-2.2.0-SNAPSHOT.jar. IMO above dependencies express exactly this.\n\nThe problem is that maven somehow removes all transitive dependencies from  cocoon-core-2.2.0-SNAPSHOT.jar when both dependencies are in place, breaking compilation. When i remove the dependency with the classifier, then all is fine (but ofcourse my tests can't run)\n\nI hope above is clear, otherwise just ping me on irc"
    ],
    [
        "MNG-1896",
        "MNG-1703",
        "Can't load a class from a plugin, when this class is in a parent pom's/build/pluginManagement/plugins/plugin/dependencies Just like with MNG-1804, I can't load a class which is referenced in a plugin's dependencies. While this has been fixed for dependencies specified in the current pom, it hasn't when dependencies have been specified in the parent pom's pluginManagement section.\n\nAlso fails on the current 2.1 trunk.",
        "<pluginManagement><dependencies> is not propagated to child POMs <executions> section in <pluginManagement> isn't propagated to child POMs (as <configuration> is).\nThe workaround is to use <plugins> with <inherited>true</inherited>\nIs this on purpose ?"
    ],
    [
        "MNG-1919",
        "MNG-1908",
        "If deploy with uniqueVersion=false (only generate file ended SNAPSHOT), this is not downloaded If I specify <uniqueVersion>false</uniqueVersion> in the pom.\nThe generated file is only one ended with -SNAPSHOT (no problem is cool).\nBut it's not downloaded by a client.\n",
        "snapshots not deployed using m2, or deployed with uniqueVersion = false are not updated if present locally It seems from the log info that m2 is trying to locate the artifact metadata on the repository.\nSInce this artifact has been generated from m1, there is no metadata.\nSo whatever repository settings are configured, m2 will never update snapsots."
    ],
    [
        "MNG-1921",
        "MNG-1378",
        "test scope in dependencyManagement does not appear to be transitive to dependent subProjects If we have a root pom.xml that includes dependencyManagement and specifies the scope on a dependent component to be test, it's picked up in a subproject, but it's does not appear to be transitive.\n\n\ne.g.  parent pom\n\n<dependencyMgmt>\n   <dependency>\n        <artifactId>easymock</artifactId>\n        ...\n        <scope>test</scope>\n   </dependency>\n</dependencyMgmt>\n\n\nchild pom\n\n<dependency>\n      <artifactId>easymock</artifactId>\n</dependency>\n\n\npeer pom\n\n<dependency>\n     <artifactId>child</artifactId>\n</dependency>\n<dependency>\n      <artifactId>easymock</artifactId>\n</dependency>\n\nThe peer pom gets compilation exceptions indicating that it can't find the package specified by the dependent jar easymock.  The easymock jar is nowhere in the classpath.\n\nJudging by this:  http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\nthe test scope should be transitive.\n\nBrian",
        "Make dependencies of test-jars transitive test-jar transitive dependencies are calculated as per compile scope rather than test scope.\n\nThe situation is demonstrated nicely in it0077:\n\n* module sub1 has a test-scoped dependency of commons-lang\n* module sub2 has a test-scoped dependency of sub1 test-jar\n\nsub2 tests should inherit the commons-lang transitive dependency.  For example:\n\nIndex: maven-core-it/it0077/sub2/src/test/java/org/apache/maven/it0077/PersonTwoTest.java\n===================================================================\n--- maven-core-it/it0077/sub2/src/test/java/org/apache/maven/it0077/PersonTwoTest.java  (revision\n328307)\n+++ maven-core-it/it0077/sub2/src/test/java/org/apache/maven/it0077/PersonTwoTest.java  (working\ncopy)\n@@ -1,6 +1,7 @@\n package org.apache.maven.it0077;\n\n import junit.framework.TestCase;\n+import org.apache.commons.lang.BooleanUtils;\n\n public class PersonTwoTest\n    extends PersonTest\n\nResults in:\n\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] Compilation failure\n\nc:\\maven-components\\maven-core-it\\it0077\\sub2\\src\\test\\java\\org\\apache\\maven\\it0077\\PersonTwoTest.java:[4,31]\npackage org.apache.commons.lang does not exist"
    ],
    [
        "MNG-1949",
        "MNG-1323",
        "project-level plugin dependencies not handled correctly in multimodule builds plugin containers are only initialized once per build, which means they may contain incorrect project-introduced dependencies for project Y in a multimodule build (polluted by project X predecessor). We should look at ways of dumping plugin containers with project-specific configurations, or else providing a container overlay to handle project-specific dependencies, etc.\n\nNOTE: This is tied into the notions of build extensions, which will have similar consequences on the core container.",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-1949",
        "MNG-1836",
        "project-level plugin dependencies not handled correctly in multimodule builds plugin containers are only initialized once per build, which means they may contain incorrect project-introduced dependencies for project Y in a multimodule build (polluted by project X predecessor). We should look at ways of dumping plugin containers with project-specific configurations, or else providing a container overlay to handle project-specific dependencies, etc.\n\nNOTE: This is tied into the notions of build extensions, which will have similar consequences on the core container.",
        "inherited plugin dependencies I have project composed of a reactor/parent pom.xml and a few module.\n\nIn the parent pom.xml, I have somthing like this :\n\n<plugins>\n....\n          <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n     \t\t\t\t<!-- The assembly plugin is not flexible enought for what we have to do -->\n       \t\t\t\t<phase>package</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<property name=\"version.number\" value=\"${project.version}\"/>\n         \t\t\t\t\t<ant antfile=\"src/build/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals><goal>run</goal></goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<inherited>false</inherited>\n\t\t</plugin>\n...\n</plugins>\n\nIn one of the module, I have \n\n  \t<plugins> \n...\n \t    <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n       \t\t\t\t<phase>generate-test-sources</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<ant antfile=\"src/test/ant/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n\t        \t\t\t<testSourceRoot>target/generated-sources/nextmock</testSourceRoot>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals>\n         \t\t\t\t<goal>run</goal>\n       \t\t\t\t</goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<dependencies>\n   \t\t\t\t     <dependency>\n\t\t\t\t\t\t<!-- Required to use javac --> \n\t\t\t\t\t\t<groupId>sun.jdk</groupId>\n\t\t\t\t\t\t<artifactId>tools</artifactId>\n\t\t\t\t\t\t<version>1.5</version>\n\t\t\t\t\t\t<scope>system</scope>\n\t\t\t\t\t\t<systemPath>${java.home}/../lib/tools.jar</systemPath>\n\t\t\t\t\t</dependency>\n   \t\t\t</dependencies>\n\t\t</plugin>\n...\n</plugins>\n\nIt seems that the dependencies is in the sub-module is not loaded, probably because the plugin is loaded in the parent pom (or in the reactor pom which is the same in many cases) and not updated afterward.\n\nThe simple work around is to place the dependencies into the reactor plugin declaration. (A strange thing is that the dependecy doesn't need to be present in the module declaration anymore in that case)\n\nI tried also to place it only int the pluginManagment section but it doesn't work.  The dependency is not loaded.\n"
    ],
    [
        "MNG-1956",
        "MNG-1955",
        "profile build without pluginManagement fails if pom build has pluginManagement If the build sections has a pluginManagement, profiles without pluginManagement fails with the following:\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] null\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n\tat org.apache.maven.project.injection.DefaultProfileInjector.injectPlugins(DefaultProfileInjector.java:147)\n\tat org.apache.maven.project.injection.DefaultProfileInjector.injectBuild(DefaultProfileInjector.java:134)\n\tat org.apache.maven.project.injection.DefaultProfileInjector.inject(DefaultProfileInjector.java:80)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.injectActiveProfiles(DefaultMavenProjectBuilder.java:1037)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(DefaultMavenProjectBuilder.java:838)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:594)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFile(DefaultMavenProjectBuilder.java:304)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:274)\n\tat org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n\tat org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n\tat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Jan 11 16:29:00 PST 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n\nAttached is a sample pom.xml to reproduce.\n\nWorkaround is to put an empty <pluginManagement/> in the profile build.",
        "null pointer exception in profile if pluginManagement section exists in pom TO TEST simply run mvn projecthelp:effective-pom -Dbark=true with the attached pom\n\nthe attached pom appears to be legal, but complains of a null pointer exception:\n\nif the plugin management section is removed then the null pointer goes away and the plugins are added as expected;\n\nhere is the trace:\n\nC:\\ditech\\workspace\\barks>mvn projecthelp:effective-pom -Dbark=true\n[INFO] Scanning for projects...\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] FATAL ERROR\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] null\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.project.injection.DefaultProfileInjector.injectPlugi\nns(DefaultProfileInjector.java:147)\n        at org.apache.maven.project.injection.DefaultProfileInjector.injectBuild\n(DefaultProfileInjector.java:134)\n        at org.apache.maven.project.injection.DefaultProfileInjector.inject(Defa\nultProfileInjector.java:80)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.injectActiveProfi\nles(DefaultMavenProjectBuilder.java:1037)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:838)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMave\nnProjectBuilder.java:594)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFi\nle(DefaultMavenProjectBuilder.java:304)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMave\nnProjectBuilder.java:274)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Jan 11 16:26:16 MST 2006\n[INFO] Final Memory: 1M/2M\n[INFO] -------------------------------------------------------------------------\n---"
    ],
    [
        "MNG-1967",
        "MNG-1958",
        "Local repository URL containing / does not work under windows When using / in a local repository URL, it does not work under windows.\nReplacing it with \\ solves the problem.\n\nSee testcase included (run under windows environment).\n",
        "we need a var that always points to the root directory in multi module builds $\\{basedir} always points to the local module. There are cases, when having a local relative repository, when it would be usefull to have a var that always pointed to the root project, $\\{rootdir}.\n\nIn such a case you may want to think of having the names $\\{rootdir} $\\{moduledir}"
    ],
    [
        "MNG-1975",
        "MNG-1245",
        "EAR project depends on WAR that doesn't exist, but it builds succesfully While I was testing the features of Maven 2.0.1 and 2.0.2 I noticed the following.\n\nWhen specifying the correct version of my WAR project as a dependency in my EAR pom.xml, the EAR file is generated correctly during a \"mvn install\" on my SuperPom. However, when I specify a wrong WAR version number (a non-existing one) in the dependency of my EAR Pom, the build still succeeds and an EAR file is generated. I'm doing this just as a test. I would expect the build to fail when the EAR project can't find the WAR file it depends on, but instead it gives a message that it can't find the WAR file in the local repository and remote repository and uses the generated WAR file (that is created before the EAR file is created), which has the wrong version number, to create the EAR package.\n\nThis my super pom.xml:\n\n<project>\n <modelVersion>4.0.0</modelVersion>\n <name>Tour de France Service</name>\n <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n <version>0.0.1</version>\n <artifactId>TourDeFranceService</artifactId>\n <packaging>pom</packaging>\n <modules>\n     <module>../TourDeFranceServiceEAR</module>\n   <module>../TourDeFranceServiceWeb</module>\n </modules>\n</project>\n\nThis my WAR pom.xml:\n\n<project>\n <modelVersion>4.0.0</modelVersion>\n <name>Tour de France Service Web</name>\n <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n <artifactId>TourDeFranceServiceWeb</artifactId>\n <packaging>war</packaging>\n <version>0.0.2</version>\n <dependencies>\n   <dependency>\n     <groupId>junit</groupId>\n     <artifactId>junit</artifactId>\n     <version>3.8.1</version>\n     <scope>test</scope>\n   </dependency>\n </dependencies>\n <build>\n   <plugins>\n     <plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-war-plugin</artifactId>\n       <configuration>\n         <webXml>../TourDeFranceServiceWeb/WebContent/WEB-INF/web.xml</webXml>\n       </configuration>\n     </plugin>\n   </plugins>\n   <finalName>TourDeFranceServiceWeb</finalName>\n </build>\n</project>\n\nAnd this my EAR pom.xml with the wrong version number of the WAR project:\n\n<project>\n <modelVersion>4.0.0</modelVersion>\n <name>Tour de France Service EAR</name>\n <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n <artifactId>TourDeFranceServiceEAR</artifactId>\n <packaging>ear</packaging>\n <version>0.0.1</version>\n <dependencies>\n   <dependency>\n     <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n     <artifactId>TourDeFranceServiceWeb</artifactId>\n     <type>war</type>\n     <version>1.0.2</version>\n   </dependency>\n </dependencies>\n <build>\n     <finalName>TourDeFranceServiceEAR</finalName>\n </build>\n</project>\n\nThis is part of the message that \"mvn install\" gives me:\n\nDownloading: http://repo1.maven.org/maven2/nl/doyle/mccloud/TourDeFranceService/TourDeFranceServiceWeb/1.0.2/TourDeFranceServiceWeb-1.0.2.pom\n[WARNING] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n[INFO] [ear:generate-application-xml]\n[INFO] Generating application.xml\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [ear:ear]\n[INFO] Copying artifact[war:nl.doyle.mccloud.TourDeFranceService:TourDeFranceServiceWeb:1.0.2] to[TourDeFranceServiceWeb.war]\n\nHow can it copy an artifact that doesn't exist??? The 1.0.2 version of my WAR file doesn't exist in my local repository and the WAR file in my Enterprise project has a different version number!!!",
        "Reactor projects sometimes used even with version mismatch See attached sample project structure.\n\nIn short: project A depends on project B version 1.1-SNAPSHOT,\nbut only 1.0-SNAPSHOT is available (both in the reactor, so on disk), as well\nas in the local repository.\n\nStill, m2 install runs fine. Excerpt from building Project A:\n\n[DEBUG] Artifact not found - using stub model: Unable to download the artifact from any repository\n  test:sub-b:1.1-SNAPSHOT:pom\n\n......configuring compiler plugin.....\n\n[DEBUG]   (f) classpathElements = [/mnt/a/home/forge/work/sandbox/m2test/deptest/sub-a/target/classes, /mnt/a/home/forge/work/sandbox/m2test/deptest/sub-b/target/classes]\n\nNow, when running m2 eclipse:eclipse, m2 reacts as it should. Still the pom stub-model is used,\nbut the .jar cannot be resolved.\n(weird enough m2 eclipse:eclipse doesn't accept reactor dependencies during resolve,\nalthough the generated projects do have internal links - but this is a different bug; this is a convenient bug for now.. ;))\n\n\nProposed fix: Reactor projects can only be used when the pom versions match too. I thought\nthis code was in months ago and working properly.\n"
    ],
    [
        "MNG-2008",
        "MNG-1645",
        "document clean and site lifecycles ",
        "document clean and site lifecycles in the build lifecycle doc "
    ],
    [
        "MNG-2020",
        "MNG-1686",
        "Broken links on website docu some hrefs are broken ion http://maven.apache.org/guides/introduction/introduction-to-repositories.html\n\nsee also MNG-1996 ?.",
        "Updates to the site, in particular introduction-to-repositories The introduction to repositories now has a section, which reference another page, regarding how to set up a mirror for the central repository, which was a common question on the user-list when ibiblio was down.\n\nThis page also had several copy-and-paste errors, where the text probably originated from an xdoc. Bits of regular html-code had slipped in, making the generated page look rather silly, as you can see on the currently deployed site:\n  http://maven.apache.org/guides/introduction/introduction-to-repositories.html\n\nI have also fixed some small errors on various other pages.\n"
    ],
    [
        "MNG-2032",
        "MNG-1557",
        "Bug in dependency exclusions processing (ArtifactFilter's) I thing, I found an error in dependency exclusions calculations.\nFor pom dependencies:\n\n  <dependencies>\n    <dependency>\n      <groupId>struts</groupId>\n      <artifactId>struts</artifactId>\n      <version>1.2.8</version>\n      <exclusions>\n        <exclusion>\n          <groupId>javax.servlet</groupId>\n          <artifactId>servlet-api</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>jfree</groupId>\n      <artifactId>jfreechart</artifactId>\n      <version>1.0.0</version>\n      <exclusions>\n        <exclusion>\n          <groupId>gnujaxp</groupId>\n          <artifactId>gnujaxp</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n\nin method MavenMetadataSource.createArtifacts the two above dependencies are processed and ArtifactFilters are applied. The first dependency (struts) gets ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ) - this is OK, but\nthe second dependency (jfreechart) gets wrong filter - AndArtifactFilter which concatenates ExcludesArtifactFilter( \"gnujaxp:gnujaxp\" ) with ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ). This second ExcludesArtifactFilter comes from the first dependency (struts). Method parameter \"dependencyFilter\" is overridden when processing the first dependency and read when processing the second one. The fix should be simple.\n\n",
        "Dependency Ignored A typical dependency (with version, scope, and exclusions set by parent POM via dependency management) shows up in the effective pom and the exported pom.  However, it does not show up in the dependency tree in the debug output of an attempt to package the project, it doesn't show up in the resulting war (which it should by it's scope of runtime), and if it's deleted from the local repository, Maven does not attemtp to download it.  Other project with this dependency specified the same way, with the same parent, download the dependency, and work as expected."
    ],
    [
        "MNG-2032",
        "MNG-1797",
        "Bug in dependency exclusions processing (ArtifactFilter's) I thing, I found an error in dependency exclusions calculations.\nFor pom dependencies:\n\n  <dependencies>\n    <dependency>\n      <groupId>struts</groupId>\n      <artifactId>struts</artifactId>\n      <version>1.2.8</version>\n      <exclusions>\n        <exclusion>\n          <groupId>javax.servlet</groupId>\n          <artifactId>servlet-api</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>jfree</groupId>\n      <artifactId>jfreechart</artifactId>\n      <version>1.0.0</version>\n      <exclusions>\n        <exclusion>\n          <groupId>gnujaxp</groupId>\n          <artifactId>gnujaxp</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n\nin method MavenMetadataSource.createArtifacts the two above dependencies are processed and ArtifactFilters are applied. The first dependency (struts) gets ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ) - this is OK, but\nthe second dependency (jfreechart) gets wrong filter - AndArtifactFilter which concatenates ExcludesArtifactFilter( \"gnujaxp:gnujaxp\" ) with ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ). This second ExcludesArtifactFilter comes from the first dependency (struts). Method parameter \"dependencyFilter\" is overridden when processing the first dependency and read when processing the second one. The fix should be simple.\n\n",
        "Dependency excludes apply to every subsequent dependency, not just the one it is declared under. If you specify ANY dependency excludes, all dependencies after that one in the pom will also exclude what you specified.  They appear to be cumulative on every dependency in that they bleed over into sibling dependencies.  \nIt's easy to test if you add an exclusion to a random dependency. This exclusion should exclude a required transitive dependency that is included by a dependency lower in the list.  You will find that the dependency lower in the list no longer includes the required dependency because it is using the filter you declared in the other dependency.\n"
    ],
    [
        "MNG-2049",
        "MNG-1925",
        "Timeouts in POM downloads cause the build to fail We have a number of jars in our repository that don't have POMs, e.g. third-party libraries, etc. Maven happily downloads the jar anyway, and issues a warning that there's no POM - except, sometimes, it just fails instead. See the build log below. If I were to rerun Maven again, it might fail on a different jar, or it might succeed. I can't seem to find any rhyme or reason to it...\n\nI agree that a missing POM merits a warning, but if the jar is there, it shouldn't be failing the build!\n\nDownloading: http://prdwebdev11/repository/j2ee/j2ee/1.3.1/j2ee-1.3.1.pom\n[WARNING] Unable to get resource from repository prdwebdev11 (http://prdwebdev11/repository)\nDownloading: http://repo1.maven.org/maven2/j2ee/j2ee/1.3.1/j2ee-1.3.1.pom\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: j2ee:j2ee\n\nReason: Error getting POM for 'j2ee:j2ee' from the repository: Error transferring file\n  j2ee:j2ee:pom:1.3.1\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  prdwebdev11 (http://prdwebdev11/repository)",
        "Pom downloading failures stops the build When using m1 legacy repositories, m2 always try to download the pom because it is missing on the local repository.\nAs the pom does not exist on the remote repository, a warning is displayed and the build continues.\nIf the download times out for any reason, instead of just printing a warning, an error occurs and the build stops.\n\nWhen remote repositories are busy, this can be very annoying...."
    ],
    [
        "MNG-2057",
        "MNG-2025",
        "The Maven 2.0.2 XML parser fails to parse a UTF-8 POM that begins with the optional byte-order mark. The Byte-Order mark is optional, and discouraged in the UTF-8 encoding; but the Unicode specification is clear that it is allowed -- if you read the Unicode Standard v4, section 2.6, and Table 2.3, and section 15.9, and table 15.3; it is clear that the BOM is allowed at the start of a UTF-8 file.\n\nIt so happens that this is the way Windows NotePad saves files when you select UTF-8; and Maven will not parse it.  I'll attach a small POM saved this way, and I'll put it into a ZIP file to hopefully preserve the encoding.  Here is the Maven output:\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\nPOM Location: C:\\Documents and Settings\\Coco\\Desktop\\pom.xml\n\nReason: Parse error reading POM. Reason: only whitespace content allowed before start tag and not \\u\nef (position: START_DOCUMENT seen \\uef... @1:1)\n\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Parse error reading POM. Reason: only whitespace c\nontent allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.InvalidProjectModelException: Parse error reading POM. Reason: o\nnly whitespace content allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef...\n@1:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1134)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1094)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFile(DefaultMavenProje\nctBuilder.java:289)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java\n:274)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n        ... 11 more\nCaused by: org.codehaus.plexus.util.xml.pull.XmlPullParserException: only whitespace content allowed\n before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.codehaus.plexus.util.xml.pull.MXParser.parseProlog(MXParser.java:1516)\n        at org.codehaus.plexus.util.xml.pull.MXParser.nextImpl(MXParser.java:1392)\n        at org.codehaus.plexus.util.xml.pull.MXParser.next(MXParser.java:1090)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(MavenXpp3Reader.java:4545)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1130)\n        ... 17 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Feb 08 21:14:03 EST 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n",
        "POM is still not read using the right encoding IIRC XML standard says that default encoding is UTF-8 for xml files\n\nThat can be overriden with \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\nBut files without header saved as UTF8 are not parsed in some systems (eg windows, solaris), while files saved as other encoding (I believe it was ansi) break under a Mac mini with yellowdog linux"
    ],
    [
        "MNG-2091",
        "MNG-1445",
        "NPE when including middlegen-hibernate-plugin As soon as the plugin middlegen-hibernat-plugin is integrated into the POM, a NPE is thrown when the plugin is added. This is the stacktrace:\n\nbernd@linuxba:~/THEMEN/ECLIPSE_WORKBENCH/Buttenlauf> mvn compile\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Buttenlauf Auswertung - GVC Criesbach\n[INFO]    task-segment: [compile]\n[INFO] ----------------------------------------------------------------------------\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] null\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginManager.java:295)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:200)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:165)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1218)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifecycle(DefaultLifecycleExecutor.java:1182)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:950)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:450)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:303)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:270)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:139)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Mon Feb 20 21:04:30 CET 2006\n[INFO] Final Memory: 1M/4M\n[INFO] ----------------------------------------------------------------------------\n\nThis is how the Middlegen-part of the POM looks like:\n\n....\n<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>middlegen</groupId>\n\t\t\t\t<artifactId>middlegen-hibernate-plugin</artifactId>\n\t\t\t\t<version>2.1</version>\n\t\t\t</plugin>\n\t\t\t<plugin>\n....\n\nI know this issue has been around with Maven 1.x. The cause there was a corrupted plugin pom from middlegen. But I wasn't able to reproduce this. I couldn't find anything wrong with the pom.\n\nThis problem can be reproduced with Maven 2.0 and on Windows systems, too. So I think the problem really is the plugin.  I will open an issue on the Middlegen page, too and will (hopefully) post a solution here. But maybe someone has a workaround to fix this in the meantime.\n\nThanks in advance for any help.\n\nBernd",
        "NPE thrown when parsing bad plugin jar Due to a configuration error, I had referenced a jar that was not a plugin in the list of plugins.  This caused the following NPE:\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] null\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginManager.java:292)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:198)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:163)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1095)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifecycle(DefaultLifecycleExecutor.java:1060)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:869)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:447)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:301)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:268)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:137)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:316)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:113)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n"
    ],
    [
        "MNG-2127",
        "MNG-1337",
        "mvn.bat always exits 0 on Windows 2000 and higher Write the following ant script and run it on Windows 2000 or higher:  <project default=\"main\"><target  name=\"main\"><exec executable=\"mvn.bat\" failonerror=\"true\" /></target></project>\n\nThis will run \"mvn\" with no arguments, which will always fail.  But the ant script will claim \"build successful\", because the exit value of mvn.bat was 0.  It is absolutely critical that this work correctly, or else I can't integrate Maven into any other automated system.\n\nThis is happening because mvn.bat is improperly abusing local scoping.  On line 130 of mvn.bat, we execute maven, but we don't do anything with its exit value... we just always goto end.  The fix for this is to add a line 131 that says \"if errorlevel 1 goto error\", which will behave correctly.\n\n(I marked this as having a test case because I've included a test ant script, but technically this isn't a JUnit test case, so it may be an inappropriate use of the \"testcase included\" marker.)",
        "Interpolation of POM values needs to be improved Currently there are a few problems with POM interpolation:\n\n1) Things like ${pom.organization.name} show with the ${pom.name}\n\n2) ${pom.build.directory} is always null\n\nI think using velocity like interpolation here would be better but performance might be an issue."
    ],
    [
        "MNG-2127",
        "MNG-1339",
        "mvn.bat always exits 0 on Windows 2000 and higher Write the following ant script and run it on Windows 2000 or higher:  <project default=\"main\"><target  name=\"main\"><exec executable=\"mvn.bat\" failonerror=\"true\" /></target></project>\n\nThis will run \"mvn\" with no arguments, which will always fail.  But the ant script will claim \"build successful\", because the exit value of mvn.bat was 0.  It is absolutely critical that this work correctly, or else I can't integrate Maven into any other automated system.\n\nThis is happening because mvn.bat is improperly abusing local scoping.  On line 130 of mvn.bat, we execute maven, but we don't do anything with its exit value... we just always goto end.  The fix for this is to add a line 131 that says \"if errorlevel 1 goto error\", which will behave correctly.\n\n(I marked this as having a test case because I've included a test ant script, but technically this isn't a JUnit test case, so it may be an inappropriate use of the \"testcase included\" marker.)",
        "properties filtering treats idontexist.name as pom.name When trying to filter a file containing a property name xxx.name, if the xxx.name property is missing in my profile, the property will be resolved as pom.name.\n\nTest case coming"
    ],
    [
        "MNG-2131",
        "MNG-1658",
        "404 in /maven-model/maven.html http://maven.apache.org/maven-model/maven.html has a 404 in section \"dependency\": broken link to \"Dependency Mechanism\"",
        "broken link in maven model reference http://maven.apache.org/maven-model/maven.html#class_dependency has a link to http://maven.apache.org/maven2/dependency-mechanism.html which doesn't exist.  Maybe it should be http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html?"
    ],
    [
        "MNG-2134",
        "MNG-1337",
        "Population problem when ${project.organization.name} is used in pom, e.g. in plugin configuration. The value set is the project name instead of the organization name.",
        "Interpolation of POM values needs to be improved Currently there are a few problems with POM interpolation:\n\n1) Things like ${pom.organization.name} show with the ${pom.name}\n\n2) ${pom.build.directory} is always null\n\nI think using velocity like interpolation here would be better but performance might be an issue."
    ],
    [
        "MNG-2134",
        "MNG-1339",
        "Population problem when ${project.organization.name} is used in pom, e.g. in plugin configuration. The value set is the project name instead of the organization name.",
        "properties filtering treats idontexist.name as pom.name When trying to filter a file containing a property name xxx.name, if the xxx.name property is missing in my profile, the property will be resolved as pom.name.\n\nTest case coming"
    ],
    [
        "MNG-2134",
        "MNG-2127",
        "Population problem when ${project.organization.name} is used in pom, e.g. in plugin configuration. The value set is the project name instead of the organization name.",
        "mvn.bat always exits 0 on Windows 2000 and higher Write the following ant script and run it on Windows 2000 or higher:  <project default=\"main\"><target  name=\"main\"><exec executable=\"mvn.bat\" failonerror=\"true\" /></target></project>\n\nThis will run \"mvn\" with no arguments, which will always fail.  But the ant script will claim \"build successful\", because the exit value of mvn.bat was 0.  It is absolutely critical that this work correctly, or else I can't integrate Maven into any other automated system.\n\nThis is happening because mvn.bat is improperly abusing local scoping.  On line 130 of mvn.bat, we execute maven, but we don't do anything with its exit value... we just always goto end.  The fix for this is to add a line 131 that says \"if errorlevel 1 goto error\", which will behave correctly.\n\n(I marked this as having a test case because I've included a test ant script, but technically this isn't a JUnit test case, so it may be an inappropriate use of the \"testcase included\" marker.)"
    ],
    [
        "MNG-2134",
        "MNG-2132",
        "Population problem when ${project.organization.name} is used in pom, e.g. in plugin configuration. The value set is the project name instead of the organization name.",
        "mvn.bat should exit 1 when maven fails by default Write the following ant script and run it on Windows 2000 or higher: <project default=\"main\"><target name=\"main\"><exec executable=\"mvn.bat\" failonerror=\"true\" /></target></project>\n\nThis will run \"mvn\" with no arguments, which will always fail. But the ant script will claim \"build successful\", because the exit value of mvn.bat was 0.\n\nI had originally filed this as MNG-2127, but it was pointed out there that there is a workaround available: if you use an undocumented workaround environment variable, MAVEN_TERMINATE_CMD, mvn.bat will behave as expected.  This environment variable is off by default, because if the environment variable is on, it can close your dos window when you're finished running Maven.\n\nAside from the fact that undocumented environment variables are incredibly goofy, there's absolutely no reason why this environment variable should be needed.  ant.bat doesn't need it.  catalina.bat doesn't need it.  This is only happening because mvn.bat is improperly abusing local scoping. On line 130 of mvn.bat, we execute maven, but we don't do anything with its exit value... we just always goto end. The fix for this is to add a line 131 that says \"if errorlevel 1 goto error\", which will behave correctly on every operating system and will not require a special environment variable.\n\n(I marked this as having a test case because I've included a test ant script, but technically this isn't a JUnit test case, so it may be an inappropriate use of the \"testcase included\" marker.)"
    ],
    [
        "MNG-2135",
        "MNG-870",
        "multi-project build that creates it's own plugins needs bootstrapping I have a multi-project build. Some of the artifacts are maven-plugins. Other artifacts depends on these plugins. For some reason the current Maven2 is not correctly doing the dependency check before building to see whether the artifacts in the multi-project build depend on other maven-plugin artifacts within the same multi-project build. \nFor now I solved the issue by using a second parent pom to bootstrap the build. This bootstrap parent pom is creating all the plugins. Afterwards, I can use my normal parent pom to build all artifacts.\nIt would be nice that Maven2 could do the 'bootstrap build' himself.",
        "Make plugin discovery reactor aware If plugin discovery is reactor aware, plugins that are part of a reactor build and are used to aid the build\ncan be used in one go. Else first the plugin should be installed, and then the rest of the project can\nbe built.\n\nBut mainly this aids in integration testing for plugins: the maven-it-plugin in sandbox can't add the current plugin\n+ artifact to the lifecycle without making some methods public. If the plugin were to be discovered using the reactor,\nthose methods can remain private."
    ],
    [
        "MNG-2135",
        "MNG-1883",
        "multi-project build that creates it's own plugins needs bootstrapping I have a multi-project build. Some of the artifacts are maven-plugins. Other artifacts depends on these plugins. For some reason the current Maven2 is not correctly doing the dependency check before building to see whether the artifacts in the multi-project build depend on other maven-plugin artifacts within the same multi-project build. \nFor now I solved the issue by using a second parent pom to bootstrap the build. This bootstrap parent pom is creating all the plugins. Afterwards, I can use my normal parent pom to build all artifacts.\nIt would be nice that Maven2 could do the 'bootstrap build' himself.",
        "it plugin not picking up the plugin being built (goes to the local repo instead) Try the following to reproduce the problem:\n\n- checkout the clover plugin\n- delete the clover plugin from your local \n- run \"mvn install\" on the clover plugin. It'll start the it plugin and try to execute an it test that requires the clover plugin\n- it'll fail\n"
    ],
    [
        "MNG-2174",
        "MNG-1323",
        "<pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins (potentially scoped to only affecting child POM plugins that live within a <profile>) <pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins.\n\nKenny believe this works OKAY if the childs are using the parent <pluginManagement> preconfigured plugins in their main <build> section however it does NOT work if the childs are trying to use those preconfigured plugins via their own <profiles>. Configuration propogates through okay but dependencies are missing and have to be respecified in the child POMs.\n\n\n",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-2174",
        "MNG-1836",
        "<pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins (potentially scoped to only affecting child POM plugins that live within a <profile>) <pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins.\n\nKenny believe this works OKAY if the childs are using the parent <pluginManagement> preconfigured plugins in their main <build> section however it does NOT work if the childs are trying to use those preconfigured plugins via their own <profiles>. Configuration propogates through okay but dependencies are missing and have to be respecified in the child POMs.\n\n\n",
        "inherited plugin dependencies I have project composed of a reactor/parent pom.xml and a few module.\n\nIn the parent pom.xml, I have somthing like this :\n\n<plugins>\n....\n          <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n     \t\t\t\t<!-- The assembly plugin is not flexible enought for what we have to do -->\n       \t\t\t\t<phase>package</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<property name=\"version.number\" value=\"${project.version}\"/>\n         \t\t\t\t\t<ant antfile=\"src/build/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals><goal>run</goal></goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<inherited>false</inherited>\n\t\t</plugin>\n...\n</plugins>\n\nIn one of the module, I have \n\n  \t<plugins> \n...\n \t    <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n       \t\t\t\t<phase>generate-test-sources</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<ant antfile=\"src/test/ant/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n\t        \t\t\t<testSourceRoot>target/generated-sources/nextmock</testSourceRoot>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals>\n         \t\t\t\t<goal>run</goal>\n       \t\t\t\t</goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<dependencies>\n   \t\t\t\t     <dependency>\n\t\t\t\t\t\t<!-- Required to use javac --> \n\t\t\t\t\t\t<groupId>sun.jdk</groupId>\n\t\t\t\t\t\t<artifactId>tools</artifactId>\n\t\t\t\t\t\t<version>1.5</version>\n\t\t\t\t\t\t<scope>system</scope>\n\t\t\t\t\t\t<systemPath>${java.home}/../lib/tools.jar</systemPath>\n\t\t\t\t\t</dependency>\n   \t\t\t</dependencies>\n\t\t</plugin>\n...\n</plugins>\n\nIt seems that the dependencies is in the sub-module is not loaded, probably because the plugin is loaded in the parent pom (or in the reactor pom which is the same in many cases) and not updated afterward.\n\nThe simple work around is to place the dependencies into the reactor plugin declaration. (A strange thing is that the dependecy doesn't need to be present in the module declaration anymore in that case)\n\nI tried also to place it only int the pluginManagment section but it doesn't work.  The dependency is not loaded.\n"
    ],
    [
        "MNG-2174",
        "MNG-1949",
        "<pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins (potentially scoped to only affecting child POM plugins that live within a <profile>) <pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins.\n\nKenny believe this works OKAY if the childs are using the parent <pluginManagement> preconfigured plugins in their main <build> section however it does NOT work if the childs are trying to use those preconfigured plugins via their own <profiles>. Configuration propogates through okay but dependencies are missing and have to be respecified in the child POMs.\n\n\n",
        "project-level plugin dependencies not handled correctly in multimodule builds plugin containers are only initialized once per build, which means they may contain incorrect project-introduced dependencies for project Y in a multimodule build (polluted by project X predecessor). We should look at ways of dumping plugin containers with project-specific configurations, or else providing a container overlay to handle project-specific dependencies, etc.\n\nNOTE: This is tied into the notions of build extensions, which will have similar consequences on the core container."
    ],
    [
        "MNG-2176",
        "MNG-942",
        "Properties interpolation in settings.xml I've set my settings.xml to set repository in M2_HOME :\n\n<localRepository>${maven.home}/repository</localRepository>\n  \nThe property ${maven.home} is not interpollated and my repository is created on root filesystem.",
        "Ability to source system properties in settings.xml Would be nice to be able to source Java System properties in the global and user settings.xml file. This is intended to allow custom build systems to set arbitrary m2 settings.xml properties programmatically by wrapping m2 executable in their own wrapper exe and then passing these settings to M2 via the JVM options ($MAVEN_OPTS). Currently only explicitly supported settings can be overrided/defined by system properties (such as maven.repo.local).\n\nAn example might be the proxy being employed, depending on where the build is being run from the proxy might be set differently. Note the same machine is being used (a laptop in this case) but operates in multiple locations and therefore network configurations (work/home). The M2 wrapping script can detect this difference from network info (ipconfig or IE connection details) and set the proxy details appropriately. I guess in this example it would be even better if it was just able to set a System property that acted as a switch which then activated the correct proxy configuration defined in settings.xml."
    ],
    [
        "MNG-2179",
        "MNG-1337",
        "wrong property evaluation for project.organisation.name If you define a name and an organisation in a pom like:\n\n<project>\n  ...\n  <name>my project name</name>\n  ...\n  <organization>\n    <name>my organization name</name>\n  </organization>  \n  ...\n</project>\n\nand later use the organisation name, e.g. to include it in a manifest with:\n\n      ...\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <MIDlet-Vendor>${project.organization.name}</MIDlet-Vendor>\n            </manifestEntries>\n          </archive>\n        </configuration>\n      </plugin>\n      ...\n\nthe property reference is evaluated to the project name. You will find in the manifest:\n\nMIDlet-Vendor: my project name\n\n\n",
        "Interpolation of POM values needs to be improved Currently there are a few problems with POM interpolation:\n\n1) Things like ${pom.organization.name} show with the ${pom.name}\n\n2) ${pom.build.directory} is always null\n\nI think using velocity like interpolation here would be better but performance might be an issue."
    ],
    [
        "MNG-2179",
        "MNG-1339",
        "wrong property evaluation for project.organisation.name If you define a name and an organisation in a pom like:\n\n<project>\n  ...\n  <name>my project name</name>\n  ...\n  <organization>\n    <name>my organization name</name>\n  </organization>  \n  ...\n</project>\n\nand later use the organisation name, e.g. to include it in a manifest with:\n\n      ...\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <MIDlet-Vendor>${project.organization.name}</MIDlet-Vendor>\n            </manifestEntries>\n          </archive>\n        </configuration>\n      </plugin>\n      ...\n\nthe property reference is evaluated to the project name. You will find in the manifest:\n\nMIDlet-Vendor: my project name\n\n\n",
        "properties filtering treats idontexist.name as pom.name When trying to filter a file containing a property name xxx.name, if the xxx.name property is missing in my profile, the property will be resolved as pom.name.\n\nTest case coming"
    ],
    [
        "MNG-2179",
        "MNG-2127",
        "wrong property evaluation for project.organisation.name If you define a name and an organisation in a pom like:\n\n<project>\n  ...\n  <name>my project name</name>\n  ...\n  <organization>\n    <name>my organization name</name>\n  </organization>  \n  ...\n</project>\n\nand later use the organisation name, e.g. to include it in a manifest with:\n\n      ...\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <MIDlet-Vendor>${project.organization.name}</MIDlet-Vendor>\n            </manifestEntries>\n          </archive>\n        </configuration>\n      </plugin>\n      ...\n\nthe property reference is evaluated to the project name. You will find in the manifest:\n\nMIDlet-Vendor: my project name\n\n\n",
        "mvn.bat always exits 0 on Windows 2000 and higher Write the following ant script and run it on Windows 2000 or higher:  <project default=\"main\"><target  name=\"main\"><exec executable=\"mvn.bat\" failonerror=\"true\" /></target></project>\n\nThis will run \"mvn\" with no arguments, which will always fail.  But the ant script will claim \"build successful\", because the exit value of mvn.bat was 0.  It is absolutely critical that this work correctly, or else I can't integrate Maven into any other automated system.\n\nThis is happening because mvn.bat is improperly abusing local scoping.  On line 130 of mvn.bat, we execute maven, but we don't do anything with its exit value... we just always goto end.  The fix for this is to add a line 131 that says \"if errorlevel 1 goto error\", which will behave correctly.\n\n(I marked this as having a test case because I've included a test ant script, but technically this isn't a JUnit test case, so it may be an inappropriate use of the \"testcase included\" marker.)"
    ],
    [
        "MNG-2179",
        "MNG-2132",
        "wrong property evaluation for project.organisation.name If you define a name and an organisation in a pom like:\n\n<project>\n  ...\n  <name>my project name</name>\n  ...\n  <organization>\n    <name>my organization name</name>\n  </organization>  \n  ...\n</project>\n\nand later use the organisation name, e.g. to include it in a manifest with:\n\n      ...\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <MIDlet-Vendor>${project.organization.name}</MIDlet-Vendor>\n            </manifestEntries>\n          </archive>\n        </configuration>\n      </plugin>\n      ...\n\nthe property reference is evaluated to the project name. You will find in the manifest:\n\nMIDlet-Vendor: my project name\n\n\n",
        "mvn.bat should exit 1 when maven fails by default Write the following ant script and run it on Windows 2000 or higher: <project default=\"main\"><target name=\"main\"><exec executable=\"mvn.bat\" failonerror=\"true\" /></target></project>\n\nThis will run \"mvn\" with no arguments, which will always fail. But the ant script will claim \"build successful\", because the exit value of mvn.bat was 0.\n\nI had originally filed this as MNG-2127, but it was pointed out there that there is a workaround available: if you use an undocumented workaround environment variable, MAVEN_TERMINATE_CMD, mvn.bat will behave as expected.  This environment variable is off by default, because if the environment variable is on, it can close your dos window when you're finished running Maven.\n\nAside from the fact that undocumented environment variables are incredibly goofy, there's absolutely no reason why this environment variable should be needed.  ant.bat doesn't need it.  catalina.bat doesn't need it.  This is only happening because mvn.bat is improperly abusing local scoping. On line 130 of mvn.bat, we execute maven, but we don't do anything with its exit value... we just always goto end. The fix for this is to add a line 131 that says \"if errorlevel 1 goto error\", which will behave correctly on every operating system and will not require a special environment variable.\n\n(I marked this as having a test case because I've included a test ant script, but technically this isn't a JUnit test case, so it may be an inappropriate use of the \"testcase included\" marker.)"
    ],
    [
        "MNG-2179",
        "MNG-2134",
        "wrong property evaluation for project.organisation.name If you define a name and an organisation in a pom like:\n\n<project>\n  ...\n  <name>my project name</name>\n  ...\n  <organization>\n    <name>my organization name</name>\n  </organization>  \n  ...\n</project>\n\nand later use the organisation name, e.g. to include it in a manifest with:\n\n      ...\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <MIDlet-Vendor>${project.organization.name}</MIDlet-Vendor>\n            </manifestEntries>\n          </archive>\n        </configuration>\n      </plugin>\n      ...\n\nthe property reference is evaluated to the project name. You will find in the manifest:\n\nMIDlet-Vendor: my project name\n\n\n",
        "Population problem when ${project.organization.name} is used in pom, e.g. in plugin configuration. The value set is the project name instead of the organization name."
    ],
    [
        "MNG-2185",
        "MNG-2160",
        "Could not access both \"maven-core\" and \"maven-archetype-core\" through ViewCVS When accessing maven2 source code through ViewCVS ( http://svn.apache.org/viewcvs.cgi/maven/components/trunk/ ),  accessing maven-core got the following ViewCVS Exception:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAn Exception Has Occurred\n\nAccess to \"maven/components/trunk/maven-core\" is forbidden.\nHTTP Response Status\n\n403 Forbidden\n\n--------------------------------------------------------------------------------\n\nPython Traceback\n\nTraceback (most recent call last):\n  File \"/usr/local/viewcvs-1.0-dev/lib/viewcvs.py\", line 3351, in main\n    request.run_viewcvs()\n  File \"/usr/local/viewcvs-1.0-dev/lib/viewcvs.py\", line 228, in run_viewcvs\n    % self.where, '403 Forbidden')\nViewCVSException: 403 Forbidden: Access to \"maven/components/trunk/maven-core\" is forbidden.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe similar exception also occurred when accessing maven-archetype-core:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAn Exception Has Occurred\n\nAccess to \"maven/archetype/trunk/maven-archetype-core\" is forbidden.\nHTTP Response Status\n\n403 Forbidden\n\n--------------------------------------------------------------------------------\n\nPython Traceback\n\nTraceback (most recent call last):\n  File \"/usr/local/viewcvs-1.0-dev/lib/viewcvs.py\", line 3351, in main\n    request.run_viewcvs()\n  File \"/usr/local/viewcvs-1.0-dev/lib/viewcvs.py\", line 228, in run_viewcvs\n    % self.where, '403 Forbidden')\nViewCVSException: 403 Forbidden: Access to \"maven/archetype/trunk/maven-archetype-core\" is forbidden.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n",
        "Access Problem with viewcvs currently http://svn.apache.org/viewcvs.cgi/maven/components/trunk/maven-core/ gives:\n\n\nAn Exception Has Occurred\n\nAccess to \"maven/components/trunk/maven-core\" is forbidden.\n\nHTTP Response Status\n\n403 Forbidden\n\nPython Traceback\n\nTraceback (most recent call last):\n  File \"/usr/local/viewcvs-1.0-dev/lib/viewcvs.py\", line 3351, in main\n    request.run_viewcvs()\n  File \"/usr/local/viewcvs-1.0-dev/lib/viewcvs.py\", line 228, in run_viewcvs\n    % self.where, '403 Forbidden')\nViewCVSException: 403 Forbidden: Access to \"maven/components/trunk/maven-core\" is forbidden."
    ],
    [
        "MNG-2190",
        "MNG-1415",
        "-Dkey=value parameters cannot include spaces in the value Even if I properly escape spaces in a path at the shell level, Maven seems to re-split the command parameters. For instance, on Unix, the following should all run the compile goal with a property foo=\"bar baz\":\n\n    $ mvn compile \"-Dfoo=bar baz\"\n    $ mvn compile -Dfoo=\"bar baz\"\n    $ mvn compile -Dfoo=bar\\ baz\n\nBut in fact, Maven fails, complaining that \"baz\" is an invalid task:\n\n    [INFO] Scanning for projects...\n    [INFO] ----------------------------------------------------------------------------\n    [ERROR] BUILD FAILURE\n    [INFO] ----------------------------------------------------------------------------\n    [INFO] Invalid task 'baz': you must specify a valid lifecycle phase, or a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal\n    [INFO] ----------------------------------------------------------------------------\n    [INFO] For more information, run Maven with the -e switch\n    [INFO] ----------------------------------------------------------------------------\n    [INFO] Total time: < 1 second\n    [INFO] Finished at: Wed Mar 29 15:21:01 EST 2006\n    [INFO] Final Memory: 1M/2M\n    [INFO] ----------------------------------------------------------------------------\n\nIs this intended behavior? Seems as if Maven is unnecessarily splitting the string, when the OS already does as much.\n\nI was merely trying to run:\n\n    mvn deploy:deploy-file \"-Dfile=/Users/me/Desktop/Bellicose SDK/lib/Bellicose.jar\" ...\n\nIn my case, it's practical to work around by renaming the Bellicose SDK folder, but it seems as if Windows users stuck with \"C:\\Documents and Settings\\...\" might have a harder time of it.",
        "quoted arguments are not being protected Arguments with whitespace protected by quotes are broken up into individual arguments by maven. It's not happening inside the mvn script - I've echoed the generated command-line to check that. This same exception is raised regardless of using...\n\n-x=\"y z\"\n-x=\\\"y z\\\"\n-x='y z'\n\"-x=y z\"\n\nand several other combinations I can't remember.\n\nHere's an example failure:\n\nnmrp3@farnham:~/devel/fluxion/trunk/stack/sql-schema$ ~/m2_home/bin/mvn org.codehaus.mojo:maven-execute-plugin:0.1-SNAPSHOT:resources -Dexecute.class=org.comparagrid.fluxion.sql.schema.OWLFromSchema -Dexecute.args=\"-baseURI=fish -Xdebug\"\n+ Error stacktraces are turned on.\n[DEBUG] Building Maven user-level plugin registry from: '/home/nmrp3/.m2/plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: '/home/nmrp3/m2_home/conf/plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: org.comparagrid.fluxion:sql-schema:jar:0.1-SNAPSHOT\n[DEBUG] Skipping disabled repository central\n[DEBUG] Skipping disabled repository central\n[DEBUG] maven-execute-plugin: using locally installed snapshot\n[DEBUG] Retrieving parent-POM from the repository for project: null:maven-execute-plugin:maven-plugin:0.1-SNAPSHOT\n[DEBUG] maven-execute-plugin: using locally installed snapshot\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ----------------------------------------------------------------------------\n[INFO] Invalid task 'debug': you must specify a valid lifecycle phase, or a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.BuildFailureException: Invalid task 'debug': you must specify a valid lifecycle phase, or a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1351)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.segmentTaskListByAggregationNeeds(DefaultLifecycleExecutor.java:376)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:132)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Thu Nov 03 23:35:37 GMT 2005\n[INFO] Final Memory: 1M/3M\n[INFO] ----------------------------------------------------------------------------"
    ],
    [
        "MNG-2205",
        "MNG-1978",
        "\"provided\" scope dependencies must be transitive A provided scope dependency can also be thought of as \"compile-only\".\n\nProject A requires Sybase JConnect on the runtime classpath. Project A declares a \"provided\" dependency on Sybase JConnect.\nProject B depends upon Project A. Project B declares a \"compile\" dependency on Project A.\nProject C depends upon Project B. Project C declares a \"compile\" dependency on Project B.\n\n{noformat}\nC\n| - compile dependency\nB\n| - compile dependency\nA\n| - provided dependency\nSybase JConnect\n{noformat}\n\nSo, does Project C transitively depend on Sybase JConnect. Yes, of course! The \"provided\" dependency needs to be transitive.\n\nUltimately, when Project C gets deployed, Sybase JConnect needs to be somewhere on the runtime classpath in order for the application to function. It's valid for Project C to assume that Sybase JConnect is available and use JDBC all over the Project C code. Project C is safe to do this because it can happily deduce that Sybase JConnect will be there in the runtime environment because Project A NEEDS IT.\n\nI've got Use Cases all over my aggregated build which make it absolutely critical and common sense that provided scope dependencies are transitive. For the (very rare) odd case where you don't want to inherit provided dependencies, you can <exclude/> them.",
        "\"Provided\" scope transitive dependencies required + exclude dependencies for runtime scope only Why are provided scope dependencies not transitive?\n\nI have several examples in my project where I need to declare a dependency as on the compilation classpath but not on the runtime classpath and I need it to be transitive. I don't want the dependency to be packaged up in my deployment artifact but my entire multi-project hierarchy relies on the dependency.\n\nAt the moment, I have to workaround the problem, mostly by declaring duplicate provided scope dependencies in multiple projects.\n\nIf there's a well-known answer to this query then apologies, could it be placed in the \"Introduction to Dependency Mechanism\" documentation.\n\n\n\nI would also be able to model my dependency structure more accurately if I could <exclude/> a dependency from the runtime classpath only and keep it in the compile classpath.\n\nE.g. \n\n    <dependencies>\n        <dependency>\n            <groupId>SalesStation</groupId>\n            <artifactId>cds_ss_shared</artifactId>\n            <version>SNAPSHOT</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>SalesStation</groupId>\n                    <artifactId>ss_base_shared</artifactId>\n                    <!-- I want to be able to do this: -->\n                    <scope>runtime</scope> <!-- Exclude from runtime classpath only, not compile classpath -->\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>"
    ],
    [
        "MNG-2223",
        "MNG-1995",
        "Interpolation in resources section appears not to work correctly This is captured by it0091 and reported by David Kulp. This might be duplicated because I'm sure I put this in JIRA.\n\nThis may specifically be a property which is a boolean value, or a general interpolation problem in the resources section.\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.apache.maven.it</groupId>\n  <artifactId>maven-core-it0090</artifactId>\n  <version>1.0</version>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <type>jar</type>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <properties>\n    <filter.resources>true</filter.resources>\n    <name>jason</name>\n  </properties>\n  <build>\n    <resources>\n      <resource>\n        <directory>src/main/resources</directory>\n        <filtering>${filter.resources}</filtering>\n      </resource>\n    </resources>\n  </build>\n</project>\n",
        "filtering element in pom.xml ignore properties <jvanzyl> you can mention it0091 as the test case\nThe following pom.xml does not end up filtering the resources:\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n     <modelVersion>4.0.0</modelVersion>\n    <groupId>org.objectweb.celtix</groupId>\n    <artifactId>test</artifactId>\n    <packaging>jar</packaging>\n    <version>1.0</version>\n    <name>Test</name>\n \n    <properties>\n        <filter.resources>true</filter.resources>\n    </properties>\n \n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>**</include>\n                </includes>\n                <filtering>${filter.resources}</filtering>\n            </resource>\n        </resources>\n    </build>\n</project>\n\n\n\n"
    ],
    [
        "MNG-2227",
        "MNG-2195",
        "Can't use repositories in protocols other than http When adding the wagon-scm to the build extensions to *add* another scm based repo (not to replace the http one) Maven fails because tries to validate the scm repo before downloading the wagon-scm jar from the http repo.\n\n  <build>\n    <extensions>\n      <extension>\n        <groupId>org.apache.maven.wagon</groupId>\n        <artifactId>wagon-scm</artifactId>\n        <version>1.0-alpha-7-SNAPSHOT</version>\n      </extension>\n    </extensions>\n  </build>\n\n\n\n[WARNING] repository metadata for: 'snapshot org.apache.maven.wagon:wagon-scm:1.0-alpha-7-SNAPSHOT' could not be retrieved from repository: acme due to an error: Unsupported Protocol: 'scm': Cannot find wagon which supports the requested protocol: scm\n[INFO] Repository 'acme' will be blacklisted\n[DEBUG] Exception\norg.apache.maven.wagon.TransferFailedException: Unsupported Protocol: 'scm': Cannot find wagon which supports the requested protocol: scm\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:325)\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifactMetadata(DefaultWagonManager.java:295)\n        at org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager.resolveAlways(DefaultRepositoryMetadataManager.java:356)\n        at org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager.resolve(DefaultRepositoryMetadataManager.java:91)\n        at org.apache.maven.artifact.transform.AbstractVersionTransformation.resolveVersion(AbstractVersionTransformation.java:62)\n        at org.apache.maven.artifact.transform.SnapshotTransformation.transformForResolve(SnapshotTransformation.java:60)\n        at org.apache.maven.artifact.transform.DefaultArtifactTransformationManager.transformForResolve(DefaultArtifactTransformationManager.java:40)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:104)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:467)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:225)\n        at org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:102)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:275)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:67)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:223)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n        at org.apache.maven.extension.DefaultExtensionManager.addExtension(DefaultExtensionManager.java:68)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.findExtensions(DefaultLifecycleExecutor.java:155)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:138)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.wagon.UnsupportedProtocolException: Cannot find wagon which supports the requested protocol: scm\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getWagon(DefaultWagonManager.java:99)\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:319)\n        ... 30 more\nCaused by: org.codehaus.plexus.component.repository.exception.ComponentLookupException: Component descriptor cannot be found in the component repository: org.apache.maven.wagon.Wagonscm.\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:323)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:440)\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getWagon(DefaultWagonManager.java:94)\n        ... 31 more\n",
        "FTP download is not supported directly by Maven To enable ftp download from a repository, you need to copy in maven/lib :\nwagon-ftp-1.0-alpha-7.jar\ncommons-net-1.4.1.jar:\noro-2.0.8.jar"
    ],
    [
        "MNG-2236",
        "MNG-1928",
        "DefaultMavenProjectBuilder.buildStandaloneSuperProject() should include a ProfileManager that includes active profiles from settings.xml I have a custom plugin that performs JMX operations using properties defined in a profile. I have defined an active profile in the settings.xml that specifies properties that the plugin uses and everything works fine when a POM is present. Now I would like the plugin to work from any directory and have added the plugin annotation \"requiresProject=false\" to it. \n\nIf I run the plugin in a directory without a POM the profile properties from settings.xml are never loaded. After performing some debugging I have determined that the default super-pom's model  that is used when no POM xml file is available does not contain the profile properties defined in settings.xml while if a POM.xml is available the settings.xml profiles are loaded into the POM.\n\nThis all appears to boil down to the lack of a ProfileManager parameter to thebuildStandaloneSuperProject method defined in the  MavenProjectBuilder interface. While  DefaultMaven's invocation of the component has a globalProfileManager available (with the active settings profiles set) it cannot be passed into the MavenProjectBuilder component. Alternatively, If the DefaultMavenProjectBuilder had the Settings component injected into it could pass it into the constructor of the DefaultProfileManager instance it creates and then the DefaultProfileManager would load the active profiles into the POM.\n\nBy enabling this fix it would make plugins useful for management tasks, for example starting or stoping an application server.\n",
        "ignores pluginRepository in settings.xml, honors in POM if specified in the POM as a plugin repo, maven can use the team.andromda.org/maven2 repo for finding, downloading, and installing plugins. \nhowever, settings.xml ignores plugin repos and only checks central if the plugin has never been downloaded before. \n\nfor instance. if settings.xml has a pluginRepository entry for team.andromda.org/maven2 then:\nmvn andromdapp:generate \nshould download the andromdapp plugin from our repo. but it doesn't. only central is checked and it fails to find the plugin."
    ],
    [
        "MNG-2237",
        "MNG-2221",
        "Inherited plugin executed twice if child pom merges configuration According the docs the configuration of a plugin is merged, when the plugin is inherited. This actually hapens, but the plugin with the merged configuration is added twice in the effective-pom and therefore executed twice.\n\nSetup a parent pom with a plugin configuration to attach the javadocs:\n\n{noformat}\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <inherited>true</inherited>\n                <configuration>\n                    <linksource>true</linksource>\n                </configuration>\n            </plugin>\n{noformat}\n\nand a child pom that adds additional elements in the configuration:\n\n{noformat}\n           <plugin>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <configuration>\n                    <links>\n                        <link>http://java.sun.com/j2se/1.4.2/docs/api/</link>\n                        <link>http://jakarta.apache.org/commons/logging/commons-logging-1.0.4/docs/apidocs/</link>\n                        <link>http://jmock.codehaus.org/docs/javadoc/</link>\n                        <link>http://www.junit.org/junit/javadoc/3.8.1/</link>\n                    </links>\n                </configuration>\n            </plugin>\n{noformat}\n\nIn this case the javadoc is generated twice, the goal help:effective-pom reveals, that the plugin was merged, but added twice.",
        "Multiple Executions of Plugin at Difference Inhertiance levels causes plugin executions to run multiple times Can occur in a variety of ways, but the attached test case shows a parent pom defining an antrun-execution, and then a child specifying another execution with a different id.  Both executions run twice when running from the child.\n\nI believe this is the same as Kenney Westerhof's comment: http://jira.codehaus.org/browse/MNG-2054#action_62477"
    ],
    [
        "MNG-2239",
        "MNG-1445",
        "Null pointer exception when typo is in plugin name Running mvn eclipsE:eclipse\n\n$ mvn eclipsE:eclipse\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'eclipsE'.\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginManager.java:292)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:198)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:163)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1252)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1517)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.segmentTaskListByAggregationNeeds(DefaultLifecycleExecutor.java:381)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:135)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue Apr 25 16:32:32 PDT 2006\n[INFO] Final Memory: 1M/3M\n[INFO] ------------------------------------------------------------------------\n",
        "NPE thrown when parsing bad plugin jar Due to a configuration error, I had referenced a jar that was not a plugin in the list of plugins.  This caused the following NPE:\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] null\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginManager.java:292)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:198)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:163)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1095)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifecycle(DefaultLifecycleExecutor.java:1060)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:869)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:447)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:301)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:268)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:137)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:316)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:113)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n"
    ],
    [
        "MNG-2239",
        "MNG-2091",
        "Null pointer exception when typo is in plugin name Running mvn eclipsE:eclipse\n\n$ mvn eclipsE:eclipse\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'eclipsE'.\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginManager.java:292)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:198)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:163)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1252)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1517)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.segmentTaskListByAggregationNeeds(DefaultLifecycleExecutor.java:381)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:135)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue Apr 25 16:32:32 PDT 2006\n[INFO] Final Memory: 1M/3M\n[INFO] ------------------------------------------------------------------------\n",
        "NPE when including middlegen-hibernate-plugin As soon as the plugin middlegen-hibernat-plugin is integrated into the POM, a NPE is thrown when the plugin is added. This is the stacktrace:\n\nbernd@linuxba:~/THEMEN/ECLIPSE_WORKBENCH/Buttenlauf> mvn compile\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Buttenlauf Auswertung - GVC Criesbach\n[INFO]    task-segment: [compile]\n[INFO] ----------------------------------------------------------------------------\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] null\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginManager.addPlugin(DefaultPluginManager.java:295)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:200)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:165)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1218)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifecycle(DefaultLifecycleExecutor.java:1182)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:950)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:450)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:303)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:270)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:139)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Mon Feb 20 21:04:30 CET 2006\n[INFO] Final Memory: 1M/4M\n[INFO] ----------------------------------------------------------------------------\n\nThis is how the Middlegen-part of the POM looks like:\n\n....\n<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>middlegen</groupId>\n\t\t\t\t<artifactId>middlegen-hibernate-plugin</artifactId>\n\t\t\t\t<version>2.1</version>\n\t\t\t</plugin>\n\t\t\t<plugin>\n....\n\nI know this issue has been around with Maven 1.x. The cause there was a corrupted plugin pom from middlegen. But I wasn't able to reproduce this. I couldn't find anything wrong with the pom.\n\nThis problem can be reproduced with Maven 2.0 and on Windows systems, too. So I think the problem really is the plugin.  I will open an issue on the Middlegen page, too and will (hopefully) post a solution here. But maybe someone has a workaround to fix this in the meantime.\n\nThanks in advance for any help.\n\nBernd"
    ],
    [
        "MNG-2240",
        "MNG-1682",
        "Handling of custom lifecycle artifacts is not working properly I am using a custom lifecycle, resource, as follows:\n\n    <component>\n      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n      <configuration>\n        <phases>\n          <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources>          \n          <package>org.apache.maven.plugins:maven-jar-plugin:jar</package>\n          <install>org.apache.maven.plugins:maven-install-plugin:install,com.dcx.NGST:maven-bundle-plugin:install</install>\n          <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n        </phases>\n      </configuration>\n    </component>\n\n    <component>\n      <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n      <configuration>\n        <extension>jar</extension>\n        <type>resource</type>\n        <packaging>resource</packaging>\n        <language>java</language>\n        <addedToClasspath>true</addedToClasspath>\n      </configuration>\n    </component>\n\n\n\nI have a pom structure that looks like this:\napp\\data\\production\\ecuDB\\ABS\\01\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\02\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\03\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\04\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\05\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\06\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\07\\pom.xml\n\nEach folder in the structure contains a pom type, and references the child modules; 0X are resource type artifacts as defined above.  I attached the text output of maven install on one of the resource projects, namely 01, followed by 'cd ..' and maven install on all ABS modules.  Comparing the 2 runs, you will find that the 01 resource artifact has been installed with different extensions.  It uses the correct .jar extension on the first run, but it defaults to .resource when build as a multiproject.  It appears that the component definition isn't available, and it defaults the extension to the type value\n\nI am also going to attach the 01/pom.xml\n\n\n",
        "Plugins do not honor the correct extension when run as a part of a multiproject build I have a plugin with a component.xml described here.\n\nI think the component.xml is correct - it certainly looks the\nsame as the plexus examples.\n\nMy project that uses this plugin works entirely correctly, *unless* it\nis a part of a multiproject build, in which case it uses the wrong\nextension. I don't know why this would be the case unless I've missed\nsomething?\n\nIn same directory:\nW:\\kms\\dev\\apps\\kms>mvn install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.war\n[INFO] ----------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 minute 9 seconds\n[INFO] Finished at: Thu Nov 24 11:46:53 GMT 2005\n[INFO] Final Memory: 3M/6M\n[INFO] ----------------------------------------------------------------------------\n\nAs a part of a multiproject:\n....\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.uberwar\n....\n\nConfig of plugin:\n<component-set>\n <components>\n   <component>\n     <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n     <configuration>\n       <phases>\n             <package>\n               org.codehaus.cargo.maven2:cargo-maven2-plugin:uberwar\n             </package>\n             <install>org.apache.maven.plugins:maven-install-plugin:install</install>\n             <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n           </phases>\n     </configuration>\n   </component>\n\n       <component>\n     <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n     <configuration>\n       <type>uberwar</type>\n                <extension>war</extension>\n       <packaging>uberwar</packaging>\n     </configuration>\n   </component>\n </components>\n</component-set>\n"
    ],
    [
        "MNG-2254",
        "MNG-2025",
        "the encoding parameter in xml declaration of POM is ignored  DefaultMavenProjectBuilder reads POM in system default character encoding, and the encoding parameter in xml declartion is ignored.\nto fix this problem, We should\n-  fix  modello-plugin-xpp3 to use the xml parser which is able to handle the encoding parameter properly\n- regenerate maven-model using fixed modello-plugin-xpp3\n- fix DefaultMavenProjectBuilder to use regenerated maven-model properly.\n",
        "POM is still not read using the right encoding IIRC XML standard says that default encoding is UTF-8 for xml files\n\nThat can be overriden with \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\nBut files without header saved as UTF8 are not parsed in some systems (eg windows, solaris), while files saved as other encoding (I believe it was ansi) break under a Mac mini with yellowdog linux"
    ],
    [
        "MNG-2254",
        "MNG-2057",
        "the encoding parameter in xml declaration of POM is ignored  DefaultMavenProjectBuilder reads POM in system default character encoding, and the encoding parameter in xml declartion is ignored.\nto fix this problem, We should\n-  fix  modello-plugin-xpp3 to use the xml parser which is able to handle the encoding parameter properly\n- regenerate maven-model using fixed modello-plugin-xpp3\n- fix DefaultMavenProjectBuilder to use regenerated maven-model properly.\n",
        "The Maven 2.0.2 XML parser fails to parse a UTF-8 POM that begins with the optional byte-order mark. The Byte-Order mark is optional, and discouraged in the UTF-8 encoding; but the Unicode specification is clear that it is allowed -- if you read the Unicode Standard v4, section 2.6, and Table 2.3, and section 15.9, and table 15.3; it is clear that the BOM is allowed at the start of a UTF-8 file.\n\nIt so happens that this is the way Windows NotePad saves files when you select UTF-8; and Maven will not parse it.  I'll attach a small POM saved this way, and I'll put it into a ZIP file to hopefully preserve the encoding.  Here is the Maven output:\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\nPOM Location: C:\\Documents and Settings\\Coco\\Desktop\\pom.xml\n\nReason: Parse error reading POM. Reason: only whitespace content allowed before start tag and not \\u\nef (position: START_DOCUMENT seen \\uef... @1:1)\n\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Parse error reading POM. Reason: only whitespace c\nontent allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.InvalidProjectModelException: Parse error reading POM. Reason: o\nnly whitespace content allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef...\n@1:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1134)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1094)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFile(DefaultMavenProje\nctBuilder.java:289)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java\n:274)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n        ... 11 more\nCaused by: org.codehaus.plexus.util.xml.pull.XmlPullParserException: only whitespace content allowed\n before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.codehaus.plexus.util.xml.pull.MXParser.parseProlog(MXParser.java:1516)\n        at org.codehaus.plexus.util.xml.pull.MXParser.nextImpl(MXParser.java:1392)\n        at org.codehaus.plexus.util.xml.pull.MXParser.next(MXParser.java:1090)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(MavenXpp3Reader.java:4545)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1130)\n        ... 17 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Feb 08 21:14:03 EST 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3099",
        "MNG-1928",
        "Profiles ignored when working with non-projects (such as archetype:create) Several conditions have to be met to show this bug.\n\n1) Be in an environment that does not have access to repo1.maven.org, (such as a corporate environment)\n2) Have no content in your local repository (a fresh install of maven 2.0.4)\n3) Attempt to use a plugin that has no project requirement (such as archetype:create)\n\nThe plugin fails because access to repo1.maven.org cannot be accessed.\n\nRecommended solution:\nCreate a settings.xml profile that changes the location of the 'central' repository to point to an internal resource (such as a maven-proxy installation).\n\n<settings>\n  <profiles>\n    <profile>\n      <id>use_internal</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n\n  <activeProfiles>\n    <activeProfile>use_internal</activeProfile>\n  </activeProfiles>\n</settings>\n\nTry again.\nStill fails.\n\nThe reason is that the default behaviour for non-project execution is to use the maven super pom, however there is a bug with that flow that  does not allow for the merging of the settings.xml profiles.",
        "ignores pluginRepository in settings.xml, honors in POM if specified in the POM as a plugin repo, maven can use the team.andromda.org/maven2 repo for finding, downloading, and installing plugins. \nhowever, settings.xml ignores plugin repos and only checks central if the plugin has never been downloaded before. \n\nfor instance. if settings.xml has a pluginRepository entry for team.andromda.org/maven2 then:\nmvn andromdapp:generate \nshould download the andromdapp plugin from our repo. but it doesn't. only central is checked and it fails to find the plugin."
    ],
    [
        "MNG-3099",
        "MNG-2236",
        "Profiles ignored when working with non-projects (such as archetype:create) Several conditions have to be met to show this bug.\n\n1) Be in an environment that does not have access to repo1.maven.org, (such as a corporate environment)\n2) Have no content in your local repository (a fresh install of maven 2.0.4)\n3) Attempt to use a plugin that has no project requirement (such as archetype:create)\n\nThe plugin fails because access to repo1.maven.org cannot be accessed.\n\nRecommended solution:\nCreate a settings.xml profile that changes the location of the 'central' repository to point to an internal resource (such as a maven-proxy installation).\n\n<settings>\n  <profiles>\n    <profile>\n      <id>use_internal</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n\n  <activeProfiles>\n    <activeProfile>use_internal</activeProfile>\n  </activeProfiles>\n</settings>\n\nTry again.\nStill fails.\n\nThe reason is that the default behaviour for non-project execution is to use the maven super pom, however there is a bug with that flow that  does not allow for the merging of the settings.xml profiles.",
        "DefaultMavenProjectBuilder.buildStandaloneSuperProject() should include a ProfileManager that includes active profiles from settings.xml I have a custom plugin that performs JMX operations using properties defined in a profile. I have defined an active profile in the settings.xml that specifies properties that the plugin uses and everything works fine when a POM is present. Now I would like the plugin to work from any directory and have added the plugin annotation \"requiresProject=false\" to it. \n\nIf I run the plugin in a directory without a POM the profile properties from settings.xml are never loaded. After performing some debugging I have determined that the default super-pom's model  that is used when no POM xml file is available does not contain the profile properties defined in settings.xml while if a POM.xml is available the settings.xml profiles are loaded into the POM.\n\nThis all appears to boil down to the lack of a ProfileManager parameter to thebuildStandaloneSuperProject method defined in the  MavenProjectBuilder interface. While  DefaultMaven's invocation of the component has a globalProfileManager available (with the active settings profiles set) it cannot be passed into the MavenProjectBuilder component. Alternatively, If the DefaultMavenProjectBuilder had the Settings component injected into it could pass it into the constructor of the DefaultProfileManager instance it creates and then the DefaultProfileManager would load the active profiles into the POM.\n\nBy enabling this fix it would make plugins useful for management tasks, for example starting or stoping an application server.\n"
    ],
    [
        "MNG-2971",
        "MNG-624",
        "Variables are not replaced into installed pom file Variables are not replaced into installed pom file.\nHere is a sample pom file\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.xxx.root</groupId>\n\t<artifactId>root</artifactId>\n\t<packaging>pom</packaging>\n\t<version>${prop.version}</version>\n\t<name>My Project</name>\n        ...\n\t<properties>\n\t\t<prop.version>3.0.20</prop.version>\n\t</properties>\n\n</project>\n{code}\nThe installed pom is into $\\{localRepository}/com/xxx/root/root/3.0.20/root-3.0.20.pom\nis the same as the project pom file but the version referenced into the installed pom file is $\\{prop.version} instead of 3.0.20\nwhich creates problem to artifacts depending of this one.\n\nThanks in advance",
        "automatic parent versioning (this may be bumped to 2.1 or even made WON't FIX as it is contentious - see MNG-521)\n\ncurrently, you have to specify the parent version when extending which makes a project stand alone very easily, but has the drawback of being a maintainance problem when you start development on a new version. Tools can help, but it would be nice not to have to rely on them.\n\nOne alternative is to allow the parent version to be omitted, and when it is it is assumed you want the latest. The parent is used from the reactor or the universal source directory. IT may also be read from a LATEST in the repository though this is contentious - it may be better to simply fail in that environment and require builds be in a known checkout structure for building individual projects.\n\nThis also introduces the need for tool support to populate the version on release and deployment for reproducibility."
    ],
    [
        "MNG-2282",
        "MNG-1925",
        "If a repo is down, maven stops the buid instead of trying other repos In this case, the artifact is available at http://www.ibiblio.org/maven2/activemq/jmdns/1.0-RC2/ and the build always fail until the artifact is downloaded manually.\nSee the following build output:\n\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.4\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settings\\gnodet\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\java-bin\\maven-2.0.4\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT of project: null:servicemix-core:jar:null in relative path: ../pom.xml\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: null:servicemix-core:jar:null\n[DEBUG] Searching for parent-POM: org.apache:apache::1 of project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT in relative path: ../pom.xml\n[DEBUG] Parent-POM: org.apache:apache::1 not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building ServiceMix :: Core\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-resources-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-resources-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-compiler-plugin: resolved to version 2.0.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-compiler-plugin:maven-plugin:2.0.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-surefire-plugin: resolved to version 2.1.3 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-surefire-plugin:maven-plugin:2.1.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-jar-plugin: resolved to version 2.0 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-jar-plugin:maven-plugin:2.0 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-install-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-install-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0.1 for project: null:maven-one-plugin:maven-plugin:1.0 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:maven-xbean-plugin:maven-plugin:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG] org.apache.xbean:maven-xbean-plugin:maven-plugin:2.3:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-archiver:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-archiver:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-project:jar:2.0 from the repository.\n[DEBUG]     org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]         junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-model:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact-manager:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-repository-metadata:jar:2.0 from the repository.\n[DEBUG]         org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-profile:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.2:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: null:plexus-utils:jar:1.1 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   qdox:qdox:jar:1.5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-spring:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:runtime (selected for runtime)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:runtime (selected for runtime)\n[DEBUG]     org.springframework:spring:jar:1.2.4:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-plugin-api:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-components::1.1.4 for project: null:plexus-archiver:jar:1.0-alpha-5 from the repository.\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: org.codehaus.plexus:plexus-components:pom:1.1.4 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (removed - nearer found: 1.0-alpha-5)\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.xbean:maven-xbean-plugin:2.3:mapping' -->\n[DEBUG]   (f) namespace = http://servicemix.apache.org/config/1.0\n[DEBUG]   (f) outputDir = c:\\java\\servicemix\\servicemix-core\\target\\xbean\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) propertyEditorPaths = org.apache.xbean.spring.context.impl\n[DEBUG]   (f) schema = c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd\n[DEBUG]   (f) srcDir = c:\\java\\servicemix\\servicemix-core\\src\\main\\java\n[DEBUG] -- end configuration --\n[INFO] [xbean:mapping {execution: default}]\n[DEBUG]  ======= XBeanMojo settings =======\n[DEBUG] namespace[http://servicemix.apache.org/config/1.0]\n[DEBUG] srcDir[c:\\java\\servicemix\\servicemix-core\\src\\main\\java]\n[DEBUG] schema[c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd]\n[DEBUG] outputDir[c:\\java\\servicemix\\servicemix-core\\target\\xbean]\n[DEBUG] propertyEditorPaths[org.apache.xbean.spring.context.impl]\n[INFO] Generating META-INF properties file: c:\\java\\servicemix\\servicemix-core\\target\\xbean\\META-INF\\services\\org\\apache\\xbean\\spring\\http\\servicemix.apache.org\\config\\1.0 for namespace: http://servicemix.apache.org/config/1.0\n[INFO] Generating HTML documentation file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd.html for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] Generating XSD file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] ...done.\n[DEBUG] org.apache.maven.plugins:maven-resources-plugin:maven-plugin:2.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]   commons-io:commons-io:jar:1.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-resources-plugin:2.1:resources' -->\n[DEBUG]   (f) filters = []\n[DEBUG]   (f) outputDirectory = c:\\java\\servicemix\\servicemix-core\\target\\classes\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) resources = [org.apache.maven.model.Resource@f07355, org.apache.maven.model.Resource@23f1bb, org.apache.maven.model.Resource@1d33a6b]\n[DEBUG] -- end configuration --\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[DEBUG] org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT (selected for null)\n[DEBUG]   org.apache.servicemix.dependencies:jencks:jar:1.1.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-jacc_1.0_spec:jar:1.0:compile (selected for compile)\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from central\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: central\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from servicemix-m2-repo\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: servicemix-m2-repo\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from apache.snapshots\n[DEBUG] activemq-ra: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-ra/4.0-SNAPSHOT/activemq-ra-4.0-20060508.005319-6.pom\n1/1K\n1K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-ra:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.pom\n149/149b\n149b downloaded\n[DEBUG]   Artifact resolved\n[DEBUG]     activemq:jmdns:jar:1.0-RC2:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n4/9K\n8/9K\n9/9K\n9K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]     incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (selected for compile)\n[DEBUG]       org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]       incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.springframework:spring-full::1.2.6 for project: null:spring:jar:1.2.6 from the repository.\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.6 for project: null:spring-full:pom:null from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   junit:junit:jar:3.8.1:compile (selected for compile)\n[DEBUG]   log4j:log4j:jar:1.2.12:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.5:compile (selected for compile)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG] activemq-core: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (removed - nearer found: 4.0-SNAPSHOT)\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]     incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG]   org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]   commons-lang:commons-lang:jar:2.1:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   lingo:lingo:jar:1.0:compile (selected for compile)\n[DEBUG]     concurrent:concurrent:jar:1.3.4:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     aopalliance:aopalliance:jar:1.0:compile (selected for compile)\n[DEBUG]     xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG] While downloading springframework:spring:1.2.5\n  This artifact has been relocated to org.springframework:spring:1.2.5.\n\n\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.5 for project: null:spring:jar:1.2.5 from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.5:compile (removed - nearer found: 1.2.6)\n[DEBUG]     mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG]   backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]   jaxen:jaxen:jar:1.1-beta-8:compile (selected for compile)\n[DEBUG]     xerces:xercesImpl:jar:2.6.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   stax-utils:stax-utils:jar:snapshot-20060502:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-connector:jar:1.0:compile (selected for compile)\n[DEBUG]   commons-collections:commons-collections:jar:3.1:compile (selected for compile)\n[DEBUG]   xmlbeans:xbean:jar:2.1.0:compile (selected for compile)\n[DEBUG]   hsqldb:hsqldb:jar:1.7.3.3:test (selected for test)\n[DEBUG]   lucene:lucene:jar:1.4.3:compile (selected for compile)\n[DEBUG]   mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG] servicemix-jbi: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT for project: null:servicemix-jbi:jar:3.0-20060507.131217-6 from the repository.\n[DEBUG] servicemix: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[DEBUG]   org.apache.servicemix:servicemix-jbi:jar:3.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-activation_1.0.2_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-qname_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   easymock:easymock:jar:1.2_Java1.3:test (selected for test)\n[DEBUG]   xerces:xercesImpl:jar:2.6.2:compile (removed - nearer found: 2.7.1)\n[DEBUG]   xerces:xercesImpl:jar:2.7.1:compile (selected for compile)\n[DEBUG]   xml-apis:xml-apis:jar:1.3.02:compile (selected for compile)\n[DEBUG]   wsdl4j:wsdl4j:jar:1.5.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-server:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-server:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-kernel:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]     org.apache.xbean:xbean-kernel:jar:2.3:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.0_01_pd:compile (removed - nearer found: 2.1)\n[DEBUG]     org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]       org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-transaction:jar:1.0:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-management_1.0_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   xalan:xalan:jar:2.7.0:compile (selected for compile)\n[DEBUG] While downloading xml-apis:xml-apis:2.0.2\n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]   mx4j:mx4j-remote:jar:3.0.1:compile (selected for compile)\n[DEBUG]   commons-betwixt:commons-betwixt:jar:0.7:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.2:compile (removed - nearer found: 1.0.4)\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]     commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]     commons-digester:commons-digester:jar:1.6:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]       commons-collections:commons-collections:jar:2.1:compile (removed - nearer found: 3.1)\n[DEBUG]   stax:stax-api:jar:1.0:compile (selected for compile)\n[DEBUG]   xmlbeans:xmlpublic:jar:2.1.0:compile (selected for compile)\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]     commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]   woodstox:wstx-asl:jar:2.0.3:compile (selected for compile)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] Trying repository codehaus-snapshot\nDownloading: http://snapshots.maven.codehaus.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2)\n[DEBUG] Trying repository maven-csharp\nDownloading: http://localhost/repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\nCaused by I/O exception: Connection refused: connect\n\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:551)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:475)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:454)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:140)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:233)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n\tat org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1117)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:366)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n\t... 16 more\nCaused by: org.apache.maven.wagon.TransferFailedException: Error transferring file\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:99)\n\tat org.apache.maven.wagon.StreamWagon.get(StreamWagon.java:68)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:369)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:282)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:244)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:124)\n\t... 23 more\nCaused by: java.net.ConnectException: Connection refused: connect\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n\tat java.net.Socket.connect(Socket.java:507)\n\tat java.net.Socket.connect(Socket.java:457)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:365)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:477)\n\tat sun.net.www.http.HttpClient.<init>(HttpClient.java:214)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:287)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:299)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:792)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:744)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:669)\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:913)\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:85)\n\t... 28 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 16 seconds\n[INFO] Finished at: Mon May 08 10:48:34 CEST 2006\n[INFO] Final Memory: 9M/16M\n[INFO] ------------------------------------------------------------------------",
        "Pom downloading failures stops the build When using m1 legacy repositories, m2 always try to download the pom because it is missing on the local repository.\nAs the pom does not exist on the remote repository, a warning is displayed and the build continues.\nIf the download times out for any reason, instead of just printing a warning, an error occurs and the build stops.\n\nWhen remote repositories are busy, this can be very annoying...."
    ],
    [
        "MNG-2282",
        "MNG-2049",
        "If a repo is down, maven stops the buid instead of trying other repos In this case, the artifact is available at http://www.ibiblio.org/maven2/activemq/jmdns/1.0-RC2/ and the build always fail until the artifact is downloaded manually.\nSee the following build output:\n\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.4\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settings\\gnodet\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\java-bin\\maven-2.0.4\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT of project: null:servicemix-core:jar:null in relative path: ../pom.xml\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: null:servicemix-core:jar:null\n[DEBUG] Searching for parent-POM: org.apache:apache::1 of project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT in relative path: ../pom.xml\n[DEBUG] Parent-POM: org.apache:apache::1 not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building ServiceMix :: Core\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-resources-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-resources-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-compiler-plugin: resolved to version 2.0.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-compiler-plugin:maven-plugin:2.0.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-surefire-plugin: resolved to version 2.1.3 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-surefire-plugin:maven-plugin:2.1.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-jar-plugin: resolved to version 2.0 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-jar-plugin:maven-plugin:2.0 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-install-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-install-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0.1 for project: null:maven-one-plugin:maven-plugin:1.0 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:maven-xbean-plugin:maven-plugin:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG] org.apache.xbean:maven-xbean-plugin:maven-plugin:2.3:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-archiver:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-archiver:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-project:jar:2.0 from the repository.\n[DEBUG]     org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]         junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-model:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact-manager:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-repository-metadata:jar:2.0 from the repository.\n[DEBUG]         org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-profile:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.2:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: null:plexus-utils:jar:1.1 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   qdox:qdox:jar:1.5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-spring:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:runtime (selected for runtime)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:runtime (selected for runtime)\n[DEBUG]     org.springframework:spring:jar:1.2.4:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-plugin-api:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-components::1.1.4 for project: null:plexus-archiver:jar:1.0-alpha-5 from the repository.\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: org.codehaus.plexus:plexus-components:pom:1.1.4 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (removed - nearer found: 1.0-alpha-5)\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.xbean:maven-xbean-plugin:2.3:mapping' -->\n[DEBUG]   (f) namespace = http://servicemix.apache.org/config/1.0\n[DEBUG]   (f) outputDir = c:\\java\\servicemix\\servicemix-core\\target\\xbean\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) propertyEditorPaths = org.apache.xbean.spring.context.impl\n[DEBUG]   (f) schema = c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd\n[DEBUG]   (f) srcDir = c:\\java\\servicemix\\servicemix-core\\src\\main\\java\n[DEBUG] -- end configuration --\n[INFO] [xbean:mapping {execution: default}]\n[DEBUG]  ======= XBeanMojo settings =======\n[DEBUG] namespace[http://servicemix.apache.org/config/1.0]\n[DEBUG] srcDir[c:\\java\\servicemix\\servicemix-core\\src\\main\\java]\n[DEBUG] schema[c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd]\n[DEBUG] outputDir[c:\\java\\servicemix\\servicemix-core\\target\\xbean]\n[DEBUG] propertyEditorPaths[org.apache.xbean.spring.context.impl]\n[INFO] Generating META-INF properties file: c:\\java\\servicemix\\servicemix-core\\target\\xbean\\META-INF\\services\\org\\apache\\xbean\\spring\\http\\servicemix.apache.org\\config\\1.0 for namespace: http://servicemix.apache.org/config/1.0\n[INFO] Generating HTML documentation file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd.html for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] Generating XSD file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] ...done.\n[DEBUG] org.apache.maven.plugins:maven-resources-plugin:maven-plugin:2.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]   commons-io:commons-io:jar:1.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-resources-plugin:2.1:resources' -->\n[DEBUG]   (f) filters = []\n[DEBUG]   (f) outputDirectory = c:\\java\\servicemix\\servicemix-core\\target\\classes\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) resources = [org.apache.maven.model.Resource@f07355, org.apache.maven.model.Resource@23f1bb, org.apache.maven.model.Resource@1d33a6b]\n[DEBUG] -- end configuration --\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[DEBUG] org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT (selected for null)\n[DEBUG]   org.apache.servicemix.dependencies:jencks:jar:1.1.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-jacc_1.0_spec:jar:1.0:compile (selected for compile)\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from central\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: central\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from servicemix-m2-repo\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: servicemix-m2-repo\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from apache.snapshots\n[DEBUG] activemq-ra: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-ra/4.0-SNAPSHOT/activemq-ra-4.0-20060508.005319-6.pom\n1/1K\n1K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-ra:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.pom\n149/149b\n149b downloaded\n[DEBUG]   Artifact resolved\n[DEBUG]     activemq:jmdns:jar:1.0-RC2:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n4/9K\n8/9K\n9/9K\n9K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]     incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (selected for compile)\n[DEBUG]       org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]       incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.springframework:spring-full::1.2.6 for project: null:spring:jar:1.2.6 from the repository.\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.6 for project: null:spring-full:pom:null from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   junit:junit:jar:3.8.1:compile (selected for compile)\n[DEBUG]   log4j:log4j:jar:1.2.12:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.5:compile (selected for compile)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG] activemq-core: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (removed - nearer found: 4.0-SNAPSHOT)\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]     incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG]   org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]   commons-lang:commons-lang:jar:2.1:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   lingo:lingo:jar:1.0:compile (selected for compile)\n[DEBUG]     concurrent:concurrent:jar:1.3.4:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     aopalliance:aopalliance:jar:1.0:compile (selected for compile)\n[DEBUG]     xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG] While downloading springframework:spring:1.2.5\n  This artifact has been relocated to org.springframework:spring:1.2.5.\n\n\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.5 for project: null:spring:jar:1.2.5 from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.5:compile (removed - nearer found: 1.2.6)\n[DEBUG]     mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG]   backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]   jaxen:jaxen:jar:1.1-beta-8:compile (selected for compile)\n[DEBUG]     xerces:xercesImpl:jar:2.6.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   stax-utils:stax-utils:jar:snapshot-20060502:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-connector:jar:1.0:compile (selected for compile)\n[DEBUG]   commons-collections:commons-collections:jar:3.1:compile (selected for compile)\n[DEBUG]   xmlbeans:xbean:jar:2.1.0:compile (selected for compile)\n[DEBUG]   hsqldb:hsqldb:jar:1.7.3.3:test (selected for test)\n[DEBUG]   lucene:lucene:jar:1.4.3:compile (selected for compile)\n[DEBUG]   mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG] servicemix-jbi: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT for project: null:servicemix-jbi:jar:3.0-20060507.131217-6 from the repository.\n[DEBUG] servicemix: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[DEBUG]   org.apache.servicemix:servicemix-jbi:jar:3.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-activation_1.0.2_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-qname_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   easymock:easymock:jar:1.2_Java1.3:test (selected for test)\n[DEBUG]   xerces:xercesImpl:jar:2.6.2:compile (removed - nearer found: 2.7.1)\n[DEBUG]   xerces:xercesImpl:jar:2.7.1:compile (selected for compile)\n[DEBUG]   xml-apis:xml-apis:jar:1.3.02:compile (selected for compile)\n[DEBUG]   wsdl4j:wsdl4j:jar:1.5.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-server:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-server:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-kernel:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]     org.apache.xbean:xbean-kernel:jar:2.3:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.0_01_pd:compile (removed - nearer found: 2.1)\n[DEBUG]     org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]       org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-transaction:jar:1.0:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-management_1.0_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   xalan:xalan:jar:2.7.0:compile (selected for compile)\n[DEBUG] While downloading xml-apis:xml-apis:2.0.2\n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]   mx4j:mx4j-remote:jar:3.0.1:compile (selected for compile)\n[DEBUG]   commons-betwixt:commons-betwixt:jar:0.7:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.2:compile (removed - nearer found: 1.0.4)\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]     commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]     commons-digester:commons-digester:jar:1.6:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]       commons-collections:commons-collections:jar:2.1:compile (removed - nearer found: 3.1)\n[DEBUG]   stax:stax-api:jar:1.0:compile (selected for compile)\n[DEBUG]   xmlbeans:xmlpublic:jar:2.1.0:compile (selected for compile)\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]     commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]   woodstox:wstx-asl:jar:2.0.3:compile (selected for compile)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] Trying repository codehaus-snapshot\nDownloading: http://snapshots.maven.codehaus.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2)\n[DEBUG] Trying repository maven-csharp\nDownloading: http://localhost/repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\nCaused by I/O exception: Connection refused: connect\n\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:551)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:475)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:454)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:140)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:233)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n\tat org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1117)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:366)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n\t... 16 more\nCaused by: org.apache.maven.wagon.TransferFailedException: Error transferring file\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:99)\n\tat org.apache.maven.wagon.StreamWagon.get(StreamWagon.java:68)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:369)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:282)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:244)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:124)\n\t... 23 more\nCaused by: java.net.ConnectException: Connection refused: connect\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n\tat java.net.Socket.connect(Socket.java:507)\n\tat java.net.Socket.connect(Socket.java:457)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:365)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:477)\n\tat sun.net.www.http.HttpClient.<init>(HttpClient.java:214)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:287)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:299)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:792)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:744)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:669)\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:913)\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:85)\n\t... 28 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 16 seconds\n[INFO] Finished at: Mon May 08 10:48:34 CEST 2006\n[INFO] Final Memory: 9M/16M\n[INFO] ------------------------------------------------------------------------",
        "Timeouts in POM downloads cause the build to fail We have a number of jars in our repository that don't have POMs, e.g. third-party libraries, etc. Maven happily downloads the jar anyway, and issues a warning that there's no POM - except, sometimes, it just fails instead. See the build log below. If I were to rerun Maven again, it might fail on a different jar, or it might succeed. I can't seem to find any rhyme or reason to it...\n\nI agree that a missing POM merits a warning, but if the jar is there, it shouldn't be failing the build!\n\nDownloading: http://prdwebdev11/repository/j2ee/j2ee/1.3.1/j2ee-1.3.1.pom\n[WARNING] Unable to get resource from repository prdwebdev11 (http://prdwebdev11/repository)\nDownloading: http://repo1.maven.org/maven2/j2ee/j2ee/1.3.1/j2ee-1.3.1.pom\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: j2ee:j2ee\n\nReason: Error getting POM for 'j2ee:j2ee' from the repository: Error transferring file\n  j2ee:j2ee:pom:1.3.1\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  prdwebdev11 (http://prdwebdev11/repository)"
    ],
    [
        "MNG-2289",
        "MNG-1908",
        "Newer SNAPSHOT parents in the remote repository are ignored If a POM inherits from another one in the repository with a SNAPSHOT version, it will only look into the local repository for it, but not in the remote repositories.\nE.g. if a POM has following parent:...\n    <parent>\n        <groupId>pom.maven</groupId>\n        <artifactId>super</artifactId>\n        <version>SNAPSHOT</version>\n    </parent>\n...\n\nit will not find a newer version of \"pom.maven:super:SNAPSHOT\" in a remote repository.",
        "snapshots not deployed using m2, or deployed with uniqueVersion = false are not updated if present locally It seems from the log info that m2 is trying to locate the artifact metadata on the repository.\nSInce this artifact has been generated from m1, there is no metadata.\nSo whatever repository settings are configured, m2 will never update snapsots."
    ],
    [
        "MNG-2289",
        "MNG-1919",
        "Newer SNAPSHOT parents in the remote repository are ignored If a POM inherits from another one in the repository with a SNAPSHOT version, it will only look into the local repository for it, but not in the remote repositories.\nE.g. if a POM has following parent:...\n    <parent>\n        <groupId>pom.maven</groupId>\n        <artifactId>super</artifactId>\n        <version>SNAPSHOT</version>\n    </parent>\n...\n\nit will not find a newer version of \"pom.maven:super:SNAPSHOT\" in a remote repository.",
        "If deploy with uniqueVersion=false (only generate file ended SNAPSHOT), this is not downloaded If I specify <uniqueVersion>false</uniqueVersion> in the pom.\nThe generated file is only one ended with -SNAPSHOT (no problem is cool).\nBut it's not downloaded by a client.\n"
    ],
    [
        "MNG-2297",
        "MNG-2221",
        "plugin definitions not merged correctly If both a parent, and a child plugin reference a plugin, the plugin configuration is not merged correctly; instead, the child build ends up with two copies of the plugin (with separate configuration and separate executions).\n\nThe attachment contains a testcase demonstrating the problem, and fixes to ModelUtils.java (against current trunk) to fix it.\n",
        "Multiple Executions of Plugin at Difference Inhertiance levels causes plugin executions to run multiple times Can occur in a variety of ways, but the attached test case shows a parent pom defining an antrun-execution, and then a child specifying another execution with a different id.  Both executions run twice when running from the child.\n\nI believe this is the same as Kenney Westerhof's comment: http://jira.codehaus.org/browse/MNG-2054#action_62477"
    ],
    [
        "MNG-2297",
        "MNG-2237",
        "plugin definitions not merged correctly If both a parent, and a child plugin reference a plugin, the plugin configuration is not merged correctly; instead, the child build ends up with two copies of the plugin (with separate configuration and separate executions).\n\nThe attachment contains a testcase demonstrating the problem, and fixes to ModelUtils.java (against current trunk) to fix it.\n",
        "Inherited plugin executed twice if child pom merges configuration According the docs the configuration of a plugin is merged, when the plugin is inherited. This actually hapens, but the plugin with the merged configuration is added twice in the effective-pom and therefore executed twice.\n\nSetup a parent pom with a plugin configuration to attach the javadocs:\n\n{noformat}\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <inherited>true</inherited>\n                <configuration>\n                    <linksource>true</linksource>\n                </configuration>\n            </plugin>\n{noformat}\n\nand a child pom that adds additional elements in the configuration:\n\n{noformat}\n           <plugin>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <configuration>\n                    <links>\n                        <link>http://java.sun.com/j2se/1.4.2/docs/api/</link>\n                        <link>http://jakarta.apache.org/commons/logging/commons-logging-1.0.4/docs/apidocs/</link>\n                        <link>http://jmock.codehaus.org/docs/javadoc/</link>\n                        <link>http://www.junit.org/junit/javadoc/3.8.1/</link>\n                    </links>\n                </configuration>\n            </plugin>\n{noformat}\n\nIn this case the javadoc is generated twice, the goal help:effective-pom reveals, that the plugin was merged, but added twice."
    ],
    [
        "MNG-2308",
        "MNG-2068",
        "Cascading POMs with packaging=pom Given the following directory layout\n /a - pom.xml\n   /b - pom.xml\n       - /b.a -pom.xml\n\nThe poms - a/pom.xml:\n-------------------------------------------\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<project\n  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.foo</groupId>\n  <artifactId>a</artifactId>\n  <version>I</version>\n  <name>Module A</name>\n  <packaging>pom</packaging>\n  <modules>\n   <module>b</module>\n  </modules>\n</project>\n\nThe poms - a/b/pom.xml:\n-------------------------------------------\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<project\n  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <parent>\n    <groupId>com.foo</groupId>\n    <artifactId>a</artifactId>\n    <version>I</version>\n  </parent>\n   <modelVersion>4.0.0</modelVersion>\n  <groupId>com.foo</groupId>\n  <artifactId>b</artifactId>\n  <version>I</version>\n  <name>Module B</name>\n  <packaging>pom</packaging>\n   <modules>\n    <module>b.a</module>\n  </modules>\n</project>\n\nThe poms - a/b/b.a/pom.xml:\n-------------------------------------------\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<project\n  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <parent>\n    <groupId>com.foo</groupId>\n    <artifactId>b</artifactId>\n    <version>I</version>\n  </parent>\n   <modelVersion>4.0.0</modelVersion>\n  <groupId>com.foo</groupId>\n  <artifactId>b.a</artifactId>\n  <version>I</version>\n  <name>Module B.A</name>\n  <packaging>jar</packaging>\n </project>\n\nThe error occurs only in direcotry a/b (the build in dir a and in dir a/b/b.a works fine):\n\n $> cd ~/a/b\n  $> mvn compile\n  [INFO] Scanning for projects...\n  Downloading: http://.../repository/com/foo/a/I/a-I.pom\n  [WARNING] Unable to get resource from repository central\n  [INFO] ------------------------------------------------------------------------\n  [ERROR] FATAL ERROR\n  [INFO] ------------------------------------------------------------------------\n  [INFO] Failed to resolve artifact.\n\n  GroupId: com.foo\n  ArtifactId: a\n  Version: I\n\nIt seems that there is a problem with more than one parent with packaging=pom.\n\nThe <relativePath>--Element didn't help. The only workearound (suggested in the maven user mailing list) is, to deploy the parent \npoms to the maven repo.",
        "Multiple inheritance fails to find \"grand\" parent in ../../pom.xml when the groupIds differ (Test Case Attached) I have a project that inherits from 2 (or more) parents. If the grand parent (parent of my parent) isn't in the repository, it isn't found at ../../pom.xml\n\nIn my sample, make sure none of the artifacts are in your repository, then go down to sample-jar and try to build from there. See it fail.\n\nNote: If you remove the \".sub\" from the second parent's group and update the sampe-jar pom, it no longer fails and finds the grandparent.\n\nSee below for the output when the groups are different (fails) and when they are the same (works)\n\nFailing output:\nE:\\sample\\sample\\sample-parent2\\sample-jar>mvn -X compile\n+ Error stacktraces are turned on.\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settin\ngs\\brianf\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\PROGRA~1\\MAVEN-~1.\n2\\bin\\..\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project\n: null:sample-jar:jar:null\n[DEBUG] Invalid parent-POM referenced by relative path '../pom.xml' in parent sp\necification in null:sample-parent2:pom:null:\n  Specified: sample-project.sub:sample-parent::SNAPSHOT\n  Found:     sample-project:sample-parent:pom:SNAPSHOT\n[DEBUG] Retrieving parent-POM from the repository for project: null:sample-paren\nt2:pom:null\n[DEBUG] Skipping disabled repository central\n[DEBUG] sample-parent: using locally installed snapshot\n[DEBUG] Trying repository sv1-int\nDownloading: http://sv1.tus.stchome.com:9998/repository/sample-project/sub/sampl\ne-parent/SNAPSHOT/sample-parent-SNAPSHOT.pom\n[WARNING] Unable to get resource from repository sv1-int (http://sv1.tus.stchome\n.com:9998/repository)\n[DEBUG] Trying repository Maven Snapshots\nDownloading: http://snapshots.maven.codehaus.org/maven2//sample-project/sub/samp\nle-parent/SNAPSHOT/sample-parent-SNAPSHOT.pom\n[WARNING] Unable to get resource from repository Maven Snapshots (http://snapsho\nts.maven.codehaus.org/maven2/)\n[DEBUG] Skipping disabled repository central\n[INFO] -------------------------------------------------------------------------\n---\n[ERROR] FATAL ERROR\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Failed to resolve artifact.\n\nGroupId: sample-project.sub\nArtifactId: sample-parent\nVersion: SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  sample-project.sub:sample-parent:pom:SNAPSHOT\n\nOUTPUT WITHOUT .sub:\nE:\\sample\\sample\\sample-parent2\\sample-jar>mvn -X compile\n+ Error stacktraces are turned on.\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settin\ngs\\brianf\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\PROGRA~1\\MAVEN-~1.\n2\\bin\\..\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project\n: null:sample-jar:jar:null\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project\n: null:sample-parent2:pom:null\n[INFO] -------------------------------------------------------------------------\n---\n[INFO] Building Maven Quick Start Archetype\n[INFO]    task-segment: [compile]\n[INFO] -------------------------------------------------------------------------\n---\n[DEBUG] maven-resources-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM from the repository for project: null:maven-resour\n\n"
    ],
    [
        "MNG-2326",
        "MNG-1557",
        "exclusion of transitive dependency is too dominant Please consider the following structure: I've got a module M that has got the dependencies D1 and D2. Both D1 and D2 depend on a transitive dependency T.\n\nI have excluded T from D1 per <exclusion> on the M POM in the dependency to D1.\n\nNow, one would expect that T is still pulled into M, because there is no exclusion on the D2 path. But this is not the case, \"mvn site\" on M is missing T (in the dependency report), and it is missing from the classpath, too. However \"mvn eclipse:eclipse\" on M does the job right: T is listed.",
        "Dependency Ignored A typical dependency (with version, scope, and exclusions set by parent POM via dependency management) shows up in the effective pom and the exported pom.  However, it does not show up in the dependency tree in the debug output of an attempt to package the project, it doesn't show up in the resulting war (which it should by it's scope of runtime), and if it's deleted from the local repository, Maven does not attemtp to download it.  Other project with this dependency specified the same way, with the same parent, download the dependency, and work as expected."
    ],
    [
        "MNG-2326",
        "MNG-1797",
        "exclusion of transitive dependency is too dominant Please consider the following structure: I've got a module M that has got the dependencies D1 and D2. Both D1 and D2 depend on a transitive dependency T.\n\nI have excluded T from D1 per <exclusion> on the M POM in the dependency to D1.\n\nNow, one would expect that T is still pulled into M, because there is no exclusion on the D2 path. But this is not the case, \"mvn site\" on M is missing T (in the dependency report), and it is missing from the classpath, too. However \"mvn eclipse:eclipse\" on M does the job right: T is listed.",
        "Dependency excludes apply to every subsequent dependency, not just the one it is declared under. If you specify ANY dependency excludes, all dependencies after that one in the pom will also exclude what you specified.  They appear to be cumulative on every dependency in that they bleed over into sibling dependencies.  \nIt's easy to test if you add an exclusion to a random dependency. This exclusion should exclude a required transitive dependency that is included by a dependency lower in the list.  You will find that the dependency lower in the list no longer includes the required dependency because it is using the filter you declared in the other dependency.\n"
    ],
    [
        "MNG-2326",
        "MNG-2032",
        "exclusion of transitive dependency is too dominant Please consider the following structure: I've got a module M that has got the dependencies D1 and D2. Both D1 and D2 depend on a transitive dependency T.\n\nI have excluded T from D1 per <exclusion> on the M POM in the dependency to D1.\n\nNow, one would expect that T is still pulled into M, because there is no exclusion on the D2 path. But this is not the case, \"mvn site\" on M is missing T (in the dependency report), and it is missing from the classpath, too. However \"mvn eclipse:eclipse\" on M does the job right: T is listed.",
        "Bug in dependency exclusions processing (ArtifactFilter's) I thing, I found an error in dependency exclusions calculations.\nFor pom dependencies:\n\n  <dependencies>\n    <dependency>\n      <groupId>struts</groupId>\n      <artifactId>struts</artifactId>\n      <version>1.2.8</version>\n      <exclusions>\n        <exclusion>\n          <groupId>javax.servlet</groupId>\n          <artifactId>servlet-api</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>jfree</groupId>\n      <artifactId>jfreechart</artifactId>\n      <version>1.0.0</version>\n      <exclusions>\n        <exclusion>\n          <groupId>gnujaxp</groupId>\n          <artifactId>gnujaxp</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n\nin method MavenMetadataSource.createArtifacts the two above dependencies are processed and ArtifactFilters are applied. The first dependency (struts) gets ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ) - this is OK, but\nthe second dependency (jfreechart) gets wrong filter - AndArtifactFilter which concatenates ExcludesArtifactFilter( \"gnujaxp:gnujaxp\" ) with ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ). This second ExcludesArtifactFilter comes from the first dependency (struts). Method parameter \"dependencyFilter\" is overridden when processing the first dependency and read when processing the second one. The fix should be simple.\n\n"
    ],
    [
        "MNG-2339",
        "MNG-2653",
        "${project.*} are interpreted in the wrong place If a plugin use ${project.version}, this parameter is interpreted with the version of the current project and not the plugin version. I think we have the same pb with dependencies and other ${project.*}\n\nFor a plugin in version 2.0 used in a project in version 1.0-SNAPSHOT, ${project.version} used in the plugin will be interpreted as 1.0-SNAPSHOT instead of 2.0",
        "using ${version} for subproject dependencies doesn't work (maven uses 2.4.1 version instead) My project is a ear multiproject. It has 5 modules, that have internal dependencies. For example web module needs app and type modules. \n\nI usually use following declaration for this kind of dependencies. Note that I'm using ${version} in dependency. In result I'm requesting foo-type jar of the same version as current project.\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>foo</groupId>\n    <artifactId>foo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n  </parent>\n  <artifactId>foo-app</artifactId>\n\n  <dependencies>\n    <dependency>\n      <groupId>foo</groupId>\n      <artifactId>foo-type</artifactId>\n      <version>${version}</version>\n    </dependency>\n  </dependencies>\n</project>\n\nThis works from commandline, but doesn't work in eclipse plugin. I get following message:\n\n\"Unable to download the artifact from any repository foo:foo-type-2.4.1.jar\"\n\nMaven (or maven plugin) tries to download foo-type module in very strange version (instead 0.0.1-SNAPSHOT)! \n\n\nI've attached simple multimodule project."
    ],
    [
        "MNG-2354",
        "MNG-1557",
        "exclusion of a dependency prevents the dependency being added normally Consider following usecase:\n\n    <dependency>\n      <groupId>commons-beanutils</groupId>\n      <artifactId>commons-beanutils-core</artifactId>\n      <version>1.7.0</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-configuration</groupId>\n      <artifactId>commons-configuration</artifactId>\n      <version>1.2</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>commons-beanutils-core</artifactId>\n          <groupId>commons-beanutils</groupId>\n        </exclusion>\n    </dependency>\n\nAbove pom configuration to me says: ignore the transitive dependency on commons-beanutils-core brought in by commons-configurations because i would like to define and use my own. However this configuration excludes commons-beanutils-core completely, eg in a war build it's not included as a dependency anymore. \n\n",
        "Dependency Ignored A typical dependency (with version, scope, and exclusions set by parent POM via dependency management) shows up in the effective pom and the exported pom.  However, it does not show up in the dependency tree in the debug output of an attempt to package the project, it doesn't show up in the resulting war (which it should by it's scope of runtime), and if it's deleted from the local repository, Maven does not attemtp to download it.  Other project with this dependency specified the same way, with the same parent, download the dependency, and work as expected."
    ],
    [
        "MNG-2354",
        "MNG-1797",
        "exclusion of a dependency prevents the dependency being added normally Consider following usecase:\n\n    <dependency>\n      <groupId>commons-beanutils</groupId>\n      <artifactId>commons-beanutils-core</artifactId>\n      <version>1.7.0</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-configuration</groupId>\n      <artifactId>commons-configuration</artifactId>\n      <version>1.2</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>commons-beanutils-core</artifactId>\n          <groupId>commons-beanutils</groupId>\n        </exclusion>\n    </dependency>\n\nAbove pom configuration to me says: ignore the transitive dependency on commons-beanutils-core brought in by commons-configurations because i would like to define and use my own. However this configuration excludes commons-beanutils-core completely, eg in a war build it's not included as a dependency anymore. \n\n",
        "Dependency excludes apply to every subsequent dependency, not just the one it is declared under. If you specify ANY dependency excludes, all dependencies after that one in the pom will also exclude what you specified.  They appear to be cumulative on every dependency in that they bleed over into sibling dependencies.  \nIt's easy to test if you add an exclusion to a random dependency. This exclusion should exclude a required transitive dependency that is included by a dependency lower in the list.  You will find that the dependency lower in the list no longer includes the required dependency because it is using the filter you declared in the other dependency.\n"
    ],
    [
        "MNG-2354",
        "MNG-2032",
        "exclusion of a dependency prevents the dependency being added normally Consider following usecase:\n\n    <dependency>\n      <groupId>commons-beanutils</groupId>\n      <artifactId>commons-beanutils-core</artifactId>\n      <version>1.7.0</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-configuration</groupId>\n      <artifactId>commons-configuration</artifactId>\n      <version>1.2</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>commons-beanutils-core</artifactId>\n          <groupId>commons-beanutils</groupId>\n        </exclusion>\n    </dependency>\n\nAbove pom configuration to me says: ignore the transitive dependency on commons-beanutils-core brought in by commons-configurations because i would like to define and use my own. However this configuration excludes commons-beanutils-core completely, eg in a war build it's not included as a dependency anymore. \n\n",
        "Bug in dependency exclusions processing (ArtifactFilter's) I thing, I found an error in dependency exclusions calculations.\nFor pom dependencies:\n\n  <dependencies>\n    <dependency>\n      <groupId>struts</groupId>\n      <artifactId>struts</artifactId>\n      <version>1.2.8</version>\n      <exclusions>\n        <exclusion>\n          <groupId>javax.servlet</groupId>\n          <artifactId>servlet-api</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>jfree</groupId>\n      <artifactId>jfreechart</artifactId>\n      <version>1.0.0</version>\n      <exclusions>\n        <exclusion>\n          <groupId>gnujaxp</groupId>\n          <artifactId>gnujaxp</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n\nin method MavenMetadataSource.createArtifacts the two above dependencies are processed and ArtifactFilters are applied. The first dependency (struts) gets ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ) - this is OK, but\nthe second dependency (jfreechart) gets wrong filter - AndArtifactFilter which concatenates ExcludesArtifactFilter( \"gnujaxp:gnujaxp\" ) with ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ). This second ExcludesArtifactFilter comes from the first dependency (struts). Method parameter \"dependencyFilter\" is overridden when processing the first dependency and read when processing the second one. The fix should be simple.\n\n"
    ],
    [
        "MNG-2354",
        "MNG-2326",
        "exclusion of a dependency prevents the dependency being added normally Consider following usecase:\n\n    <dependency>\n      <groupId>commons-beanutils</groupId>\n      <artifactId>commons-beanutils-core</artifactId>\n      <version>1.7.0</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-configuration</groupId>\n      <artifactId>commons-configuration</artifactId>\n      <version>1.2</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>commons-beanutils-core</artifactId>\n          <groupId>commons-beanutils</groupId>\n        </exclusion>\n    </dependency>\n\nAbove pom configuration to me says: ignore the transitive dependency on commons-beanutils-core brought in by commons-configurations because i would like to define and use my own. However this configuration excludes commons-beanutils-core completely, eg in a war build it's not included as a dependency anymore. \n\n",
        "exclusion of transitive dependency is too dominant Please consider the following structure: I've got a module M that has got the dependencies D1 and D2. Both D1 and D2 depend on a transitive dependency T.\n\nI have excluded T from D1 per <exclusion> on the M POM in the dependency to D1.\n\nNow, one would expect that T is still pulled into M, because there is no exclusion on the D2 path. But this is not the case, \"mvn site\" on M is missing T (in the dependency report), and it is missing from the classpath, too. However \"mvn eclipse:eclipse\" on M does the job right: T is listed."
    ],
    [
        "MNG-2363",
        "MNG-1775",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory.",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-2368",
        "MNG-1712",
        "Executing a goal that doesn't need a pom but that need some extensions is impossible. There is no way to specify extensions in settings.xml. This is a problem when you want to execute a goal without a pom but that need an extension. One basic case is archetype:create when the archetype is located on a ftp repository. At the moment, you need to perform the command using a fake pom declaring the extension. In my opinion, this is a big gotcha for novice users.",
        "Maven should handle <extensions> when a mojo doesn't requires a project I have encountered this when I am trying to create the deploy:deploy-file goal. \n\nCurrently, we can tell wagon what provider to use by adding  <extensions>, but  this mojo doesnt require a project so how can we tell the wagon what provider to use?"
    ],
    [
        "MNG-2420",
        "MNG-1557",
        "exclusion on dependency seems to act global on POM In my POM I added \"xerces:xercesImpl:2.8.0\" as compile dependency what depends on \"xml-apis:xml-apis:1.3.03\".\nSince I also have \"commons-betwixt:commons-betwixt:0.7\", \"commons-configuration:commons-configuration:1.2\", and \"ant:ant:1.6.5\" as dependencies that also depend on \"xml-apis\" but in different versions I came into trouble.\nSince one of theses \"xml-apis\" dependencies has a higher version number (but is the JAR of an earlier version) maven does not decide for \"1.3.03\" which is correct behaviour for maven. Anyways I got\nNoClassDefFoundError: org/w3c/dom/DOMError\nwhen I run my tests with XmlUnit.\n\nNow here comes the problem:\nI added the following XML snipplet to all dependencies that depend on xml-apis except for xercesImpl.\n <exclusion>\n  <artifactId>xml-apis</artifactId>\n  <groupId>xml-apis</groupId>\n</exclusion>\n\nThis caused maven NOT to include the dependency on \"xml-apis\" at all.\n\nThis was hard to track because the \"org/w3c/dom/DOMError\" did not occure on evey machine involved in the project.\nI figured out that the ones having no trouble used jdk1.5 that has this code included inside (JAXP 1.3).\nWith jdk1.4.2 this bug was reproducable on any operating system.\nNow it comes even harder:\nI added\n<dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>1.3.03</version>\n</dependency>\n\nas toplevel dependency to the POM and still maven did NOT include this dependency when running the test.\nThe funny thing is that \"mvn eclipse:eclipse\" produced the right dependency in my IDE.\nAnyways in the dependency report on the site it was missing.\n\nI additionally had to remove all the exclusion tags to make it work again.\n\nTo me it looks like the handling of the <exclusion> tag is broken, \nmeaning that it does NOT work as I (!) expected.\nI hope that this behaviour is NOT intendet.\n\nBest Regards J\u00f6rg",
        "Dependency Ignored A typical dependency (with version, scope, and exclusions set by parent POM via dependency management) shows up in the effective pom and the exported pom.  However, it does not show up in the dependency tree in the debug output of an attempt to package the project, it doesn't show up in the resulting war (which it should by it's scope of runtime), and if it's deleted from the local repository, Maven does not attemtp to download it.  Other project with this dependency specified the same way, with the same parent, download the dependency, and work as expected."
    ],
    [
        "MNG-2420",
        "MNG-1797",
        "exclusion on dependency seems to act global on POM In my POM I added \"xerces:xercesImpl:2.8.0\" as compile dependency what depends on \"xml-apis:xml-apis:1.3.03\".\nSince I also have \"commons-betwixt:commons-betwixt:0.7\", \"commons-configuration:commons-configuration:1.2\", and \"ant:ant:1.6.5\" as dependencies that also depend on \"xml-apis\" but in different versions I came into trouble.\nSince one of theses \"xml-apis\" dependencies has a higher version number (but is the JAR of an earlier version) maven does not decide for \"1.3.03\" which is correct behaviour for maven. Anyways I got\nNoClassDefFoundError: org/w3c/dom/DOMError\nwhen I run my tests with XmlUnit.\n\nNow here comes the problem:\nI added the following XML snipplet to all dependencies that depend on xml-apis except for xercesImpl.\n <exclusion>\n  <artifactId>xml-apis</artifactId>\n  <groupId>xml-apis</groupId>\n</exclusion>\n\nThis caused maven NOT to include the dependency on \"xml-apis\" at all.\n\nThis was hard to track because the \"org/w3c/dom/DOMError\" did not occure on evey machine involved in the project.\nI figured out that the ones having no trouble used jdk1.5 that has this code included inside (JAXP 1.3).\nWith jdk1.4.2 this bug was reproducable on any operating system.\nNow it comes even harder:\nI added\n<dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>1.3.03</version>\n</dependency>\n\nas toplevel dependency to the POM and still maven did NOT include this dependency when running the test.\nThe funny thing is that \"mvn eclipse:eclipse\" produced the right dependency in my IDE.\nAnyways in the dependency report on the site it was missing.\n\nI additionally had to remove all the exclusion tags to make it work again.\n\nTo me it looks like the handling of the <exclusion> tag is broken, \nmeaning that it does NOT work as I (!) expected.\nI hope that this behaviour is NOT intendet.\n\nBest Regards J\u00f6rg",
        "Dependency excludes apply to every subsequent dependency, not just the one it is declared under. If you specify ANY dependency excludes, all dependencies after that one in the pom will also exclude what you specified.  They appear to be cumulative on every dependency in that they bleed over into sibling dependencies.  \nIt's easy to test if you add an exclusion to a random dependency. This exclusion should exclude a required transitive dependency that is included by a dependency lower in the list.  You will find that the dependency lower in the list no longer includes the required dependency because it is using the filter you declared in the other dependency.\n"
    ],
    [
        "MNG-2420",
        "MNG-2032",
        "exclusion on dependency seems to act global on POM In my POM I added \"xerces:xercesImpl:2.8.0\" as compile dependency what depends on \"xml-apis:xml-apis:1.3.03\".\nSince I also have \"commons-betwixt:commons-betwixt:0.7\", \"commons-configuration:commons-configuration:1.2\", and \"ant:ant:1.6.5\" as dependencies that also depend on \"xml-apis\" but in different versions I came into trouble.\nSince one of theses \"xml-apis\" dependencies has a higher version number (but is the JAR of an earlier version) maven does not decide for \"1.3.03\" which is correct behaviour for maven. Anyways I got\nNoClassDefFoundError: org/w3c/dom/DOMError\nwhen I run my tests with XmlUnit.\n\nNow here comes the problem:\nI added the following XML snipplet to all dependencies that depend on xml-apis except for xercesImpl.\n <exclusion>\n  <artifactId>xml-apis</artifactId>\n  <groupId>xml-apis</groupId>\n</exclusion>\n\nThis caused maven NOT to include the dependency on \"xml-apis\" at all.\n\nThis was hard to track because the \"org/w3c/dom/DOMError\" did not occure on evey machine involved in the project.\nI figured out that the ones having no trouble used jdk1.5 that has this code included inside (JAXP 1.3).\nWith jdk1.4.2 this bug was reproducable on any operating system.\nNow it comes even harder:\nI added\n<dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>1.3.03</version>\n</dependency>\n\nas toplevel dependency to the POM and still maven did NOT include this dependency when running the test.\nThe funny thing is that \"mvn eclipse:eclipse\" produced the right dependency in my IDE.\nAnyways in the dependency report on the site it was missing.\n\nI additionally had to remove all the exclusion tags to make it work again.\n\nTo me it looks like the handling of the <exclusion> tag is broken, \nmeaning that it does NOT work as I (!) expected.\nI hope that this behaviour is NOT intendet.\n\nBest Regards J\u00f6rg",
        "Bug in dependency exclusions processing (ArtifactFilter's) I thing, I found an error in dependency exclusions calculations.\nFor pom dependencies:\n\n  <dependencies>\n    <dependency>\n      <groupId>struts</groupId>\n      <artifactId>struts</artifactId>\n      <version>1.2.8</version>\n      <exclusions>\n        <exclusion>\n          <groupId>javax.servlet</groupId>\n          <artifactId>servlet-api</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>jfree</groupId>\n      <artifactId>jfreechart</artifactId>\n      <version>1.0.0</version>\n      <exclusions>\n        <exclusion>\n          <groupId>gnujaxp</groupId>\n          <artifactId>gnujaxp</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n\nin method MavenMetadataSource.createArtifacts the two above dependencies are processed and ArtifactFilters are applied. The first dependency (struts) gets ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ) - this is OK, but\nthe second dependency (jfreechart) gets wrong filter - AndArtifactFilter which concatenates ExcludesArtifactFilter( \"gnujaxp:gnujaxp\" ) with ExcludesArtifactFilter( \"javax.servlet:servlet-api\" ). This second ExcludesArtifactFilter comes from the first dependency (struts). Method parameter \"dependencyFilter\" is overridden when processing the first dependency and read when processing the second one. The fix should be simple.\n\n"
    ],
    [
        "MNG-2420",
        "MNG-2326",
        "exclusion on dependency seems to act global on POM In my POM I added \"xerces:xercesImpl:2.8.0\" as compile dependency what depends on \"xml-apis:xml-apis:1.3.03\".\nSince I also have \"commons-betwixt:commons-betwixt:0.7\", \"commons-configuration:commons-configuration:1.2\", and \"ant:ant:1.6.5\" as dependencies that also depend on \"xml-apis\" but in different versions I came into trouble.\nSince one of theses \"xml-apis\" dependencies has a higher version number (but is the JAR of an earlier version) maven does not decide for \"1.3.03\" which is correct behaviour for maven. Anyways I got\nNoClassDefFoundError: org/w3c/dom/DOMError\nwhen I run my tests with XmlUnit.\n\nNow here comes the problem:\nI added the following XML snipplet to all dependencies that depend on xml-apis except for xercesImpl.\n <exclusion>\n  <artifactId>xml-apis</artifactId>\n  <groupId>xml-apis</groupId>\n</exclusion>\n\nThis caused maven NOT to include the dependency on \"xml-apis\" at all.\n\nThis was hard to track because the \"org/w3c/dom/DOMError\" did not occure on evey machine involved in the project.\nI figured out that the ones having no trouble used jdk1.5 that has this code included inside (JAXP 1.3).\nWith jdk1.4.2 this bug was reproducable on any operating system.\nNow it comes even harder:\nI added\n<dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>1.3.03</version>\n</dependency>\n\nas toplevel dependency to the POM and still maven did NOT include this dependency when running the test.\nThe funny thing is that \"mvn eclipse:eclipse\" produced the right dependency in my IDE.\nAnyways in the dependency report on the site it was missing.\n\nI additionally had to remove all the exclusion tags to make it work again.\n\nTo me it looks like the handling of the <exclusion> tag is broken, \nmeaning that it does NOT work as I (!) expected.\nI hope that this behaviour is NOT intendet.\n\nBest Regards J\u00f6rg",
        "exclusion of transitive dependency is too dominant Please consider the following structure: I've got a module M that has got the dependencies D1 and D2. Both D1 and D2 depend on a transitive dependency T.\n\nI have excluded T from D1 per <exclusion> on the M POM in the dependency to D1.\n\nNow, one would expect that T is still pulled into M, because there is no exclusion on the D2 path. But this is not the case, \"mvn site\" on M is missing T (in the dependency report), and it is missing from the classpath, too. However \"mvn eclipse:eclipse\" on M does the job right: T is listed."
    ],
    [
        "MNG-2420",
        "MNG-2354",
        "exclusion on dependency seems to act global on POM In my POM I added \"xerces:xercesImpl:2.8.0\" as compile dependency what depends on \"xml-apis:xml-apis:1.3.03\".\nSince I also have \"commons-betwixt:commons-betwixt:0.7\", \"commons-configuration:commons-configuration:1.2\", and \"ant:ant:1.6.5\" as dependencies that also depend on \"xml-apis\" but in different versions I came into trouble.\nSince one of theses \"xml-apis\" dependencies has a higher version number (but is the JAR of an earlier version) maven does not decide for \"1.3.03\" which is correct behaviour for maven. Anyways I got\nNoClassDefFoundError: org/w3c/dom/DOMError\nwhen I run my tests with XmlUnit.\n\nNow here comes the problem:\nI added the following XML snipplet to all dependencies that depend on xml-apis except for xercesImpl.\n <exclusion>\n  <artifactId>xml-apis</artifactId>\n  <groupId>xml-apis</groupId>\n</exclusion>\n\nThis caused maven NOT to include the dependency on \"xml-apis\" at all.\n\nThis was hard to track because the \"org/w3c/dom/DOMError\" did not occure on evey machine involved in the project.\nI figured out that the ones having no trouble used jdk1.5 that has this code included inside (JAXP 1.3).\nWith jdk1.4.2 this bug was reproducable on any operating system.\nNow it comes even harder:\nI added\n<dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>1.3.03</version>\n</dependency>\n\nas toplevel dependency to the POM and still maven did NOT include this dependency when running the test.\nThe funny thing is that \"mvn eclipse:eclipse\" produced the right dependency in my IDE.\nAnyways in the dependency report on the site it was missing.\n\nI additionally had to remove all the exclusion tags to make it work again.\n\nTo me it looks like the handling of the <exclusion> tag is broken, \nmeaning that it does NOT work as I (!) expected.\nI hope that this behaviour is NOT intendet.\n\nBest Regards J\u00f6rg",
        "exclusion of a dependency prevents the dependency being added normally Consider following usecase:\n\n    <dependency>\n      <groupId>commons-beanutils</groupId>\n      <artifactId>commons-beanutils-core</artifactId>\n      <version>1.7.0</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-configuration</groupId>\n      <artifactId>commons-configuration</artifactId>\n      <version>1.2</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>commons-beanutils-core</artifactId>\n          <groupId>commons-beanutils</groupId>\n        </exclusion>\n    </dependency>\n\nAbove pom configuration to me says: ignore the transitive dependency on commons-beanutils-core brought in by commons-configurations because i would like to define and use my own. However this configuration excludes commons-beanutils-core completely, eg in a war build it's not included as a dependency anymore. \n\n"
    ],
    [
        "MNG-2424",
        "MNG-1245",
        "Classpath in reactor builds differ from dependency resolution The classpath used to compile and test a module is wrong, if the module uses a released version of another module in the reactor build. If the module is build locally, the correct depednencies are on the classpath. This currently breaks our complete development and results makes e.g. EJBs useless (MEJB-18).",
        "Reactor projects sometimes used even with version mismatch See attached sample project structure.\n\nIn short: project A depends on project B version 1.1-SNAPSHOT,\nbut only 1.0-SNAPSHOT is available (both in the reactor, so on disk), as well\nas in the local repository.\n\nStill, m2 install runs fine. Excerpt from building Project A:\n\n[DEBUG] Artifact not found - using stub model: Unable to download the artifact from any repository\n  test:sub-b:1.1-SNAPSHOT:pom\n\n......configuring compiler plugin.....\n\n[DEBUG]   (f) classpathElements = [/mnt/a/home/forge/work/sandbox/m2test/deptest/sub-a/target/classes, /mnt/a/home/forge/work/sandbox/m2test/deptest/sub-b/target/classes]\n\nNow, when running m2 eclipse:eclipse, m2 reacts as it should. Still the pom stub-model is used,\nbut the .jar cannot be resolved.\n(weird enough m2 eclipse:eclipse doesn't accept reactor dependencies during resolve,\nalthough the generated projects do have internal links - but this is a different bug; this is a convenient bug for now.. ;))\n\n\nProposed fix: Reactor projects can only be used when the pom versions match too. I thought\nthis code was in months ago and working properly.\n"
    ],
    [
        "MNG-2424",
        "MNG-1975",
        "Classpath in reactor builds differ from dependency resolution The classpath used to compile and test a module is wrong, if the module uses a released version of another module in the reactor build. If the module is build locally, the correct depednencies are on the classpath. This currently breaks our complete development and results makes e.g. EJBs useless (MEJB-18).",
        "EAR project depends on WAR that doesn't exist, but it builds succesfully While I was testing the features of Maven 2.0.1 and 2.0.2 I noticed the following.\n\nWhen specifying the correct version of my WAR project as a dependency in my EAR pom.xml, the EAR file is generated correctly during a \"mvn install\" on my SuperPom. However, when I specify a wrong WAR version number (a non-existing one) in the dependency of my EAR Pom, the build still succeeds and an EAR file is generated. I'm doing this just as a test. I would expect the build to fail when the EAR project can't find the WAR file it depends on, but instead it gives a message that it can't find the WAR file in the local repository and remote repository and uses the generated WAR file (that is created before the EAR file is created), which has the wrong version number, to create the EAR package.\n\nThis my super pom.xml:\n\n<project>\n <modelVersion>4.0.0</modelVersion>\n <name>Tour de France Service</name>\n <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n <version>0.0.1</version>\n <artifactId>TourDeFranceService</artifactId>\n <packaging>pom</packaging>\n <modules>\n     <module>../TourDeFranceServiceEAR</module>\n   <module>../TourDeFranceServiceWeb</module>\n </modules>\n</project>\n\nThis my WAR pom.xml:\n\n<project>\n <modelVersion>4.0.0</modelVersion>\n <name>Tour de France Service Web</name>\n <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n <artifactId>TourDeFranceServiceWeb</artifactId>\n <packaging>war</packaging>\n <version>0.0.2</version>\n <dependencies>\n   <dependency>\n     <groupId>junit</groupId>\n     <artifactId>junit</artifactId>\n     <version>3.8.1</version>\n     <scope>test</scope>\n   </dependency>\n </dependencies>\n <build>\n   <plugins>\n     <plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-war-plugin</artifactId>\n       <configuration>\n         <webXml>../TourDeFranceServiceWeb/WebContent/WEB-INF/web.xml</webXml>\n       </configuration>\n     </plugin>\n   </plugins>\n   <finalName>TourDeFranceServiceWeb</finalName>\n </build>\n</project>\n\nAnd this my EAR pom.xml with the wrong version number of the WAR project:\n\n<project>\n <modelVersion>4.0.0</modelVersion>\n <name>Tour de France Service EAR</name>\n <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n <artifactId>TourDeFranceServiceEAR</artifactId>\n <packaging>ear</packaging>\n <version>0.0.1</version>\n <dependencies>\n   <dependency>\n     <groupId>nl.doyle.mccloud.TourDeFranceService</groupId>\n     <artifactId>TourDeFranceServiceWeb</artifactId>\n     <type>war</type>\n     <version>1.0.2</version>\n   </dependency>\n </dependencies>\n <build>\n     <finalName>TourDeFranceServiceEAR</finalName>\n </build>\n</project>\n\nThis is part of the message that \"mvn install\" gives me:\n\nDownloading: http://repo1.maven.org/maven2/nl/doyle/mccloud/TourDeFranceService/TourDeFranceServiceWeb/1.0.2/TourDeFranceServiceWeb-1.0.2.pom\n[WARNING] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n[INFO] [ear:generate-application-xml]\n[INFO] Generating application.xml\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [ear:ear]\n[INFO] Copying artifact[war:nl.doyle.mccloud.TourDeFranceService:TourDeFranceServiceWeb:1.0.2] to[TourDeFranceServiceWeb.war]\n\nHow can it copy an artifact that doesn't exist??? The 1.0.2 version of my WAR file doesn't exist in my local repository and the WAR file in my Enterprise project has a different version number!!!"
    ],
    [
        "MNG-2426",
        "MNG-1682",
        "Artifact copied to local repository with wrong file extension when using jboss-packaging plugin When using the jboss-packaging plugin and setting <packaging> to jboss-sar in my pom, the artifact is copied into the local repository with the wrong file extension (.jboss-sar instead of .sar).  The jboss-packaging components.xml has <extension> set to sar.  The file in the build target directory has the correct .sar extension.\n\nHere's the relevant excerpt from my pom.xml:\n\n<packaging>jboss-sar</packaging>\n...\n<build>\n<plugins>\n<plugin>\n<groupId>org.codehaus.mojo</groupId>\n<artifactId>jboss-packaging-maven-plugin</artifactId>\n<version>2.0-SNAPSHOT</version>\n<extensions>true</extensions>\n...",
        "Plugins do not honor the correct extension when run as a part of a multiproject build I have a plugin with a component.xml described here.\n\nI think the component.xml is correct - it certainly looks the\nsame as the plexus examples.\n\nMy project that uses this plugin works entirely correctly, *unless* it\nis a part of a multiproject build, in which case it uses the wrong\nextension. I don't know why this would be the case unless I've missed\nsomething?\n\nIn same directory:\nW:\\kms\\dev\\apps\\kms>mvn install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.war\n[INFO] ----------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 minute 9 seconds\n[INFO] Finished at: Thu Nov 24 11:46:53 GMT 2005\n[INFO] Final Memory: 3M/6M\n[INFO] ----------------------------------------------------------------------------\n\nAs a part of a multiproject:\n....\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.uberwar\n....\n\nConfig of plugin:\n<component-set>\n <components>\n   <component>\n     <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n     <configuration>\n       <phases>\n             <package>\n               org.codehaus.cargo.maven2:cargo-maven2-plugin:uberwar\n             </package>\n             <install>org.apache.maven.plugins:maven-install-plugin:install</install>\n             <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n           </phases>\n     </configuration>\n   </component>\n\n       <component>\n     <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n     <configuration>\n       <type>uberwar</type>\n                <extension>war</extension>\n       <packaging>uberwar</packaging>\n     </configuration>\n   </component>\n </components>\n</component-set>\n"
    ],
    [
        "MNG-2426",
        "MNG-2240",
        "Artifact copied to local repository with wrong file extension when using jboss-packaging plugin When using the jboss-packaging plugin and setting <packaging> to jboss-sar in my pom, the artifact is copied into the local repository with the wrong file extension (.jboss-sar instead of .sar).  The jboss-packaging components.xml has <extension> set to sar.  The file in the build target directory has the correct .sar extension.\n\nHere's the relevant excerpt from my pom.xml:\n\n<packaging>jboss-sar</packaging>\n...\n<build>\n<plugins>\n<plugin>\n<groupId>org.codehaus.mojo</groupId>\n<artifactId>jboss-packaging-maven-plugin</artifactId>\n<version>2.0-SNAPSHOT</version>\n<extensions>true</extensions>\n...",
        "Handling of custom lifecycle artifacts is not working properly I am using a custom lifecycle, resource, as follows:\n\n    <component>\n      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n      <configuration>\n        <phases>\n          <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources>          \n          <package>org.apache.maven.plugins:maven-jar-plugin:jar</package>\n          <install>org.apache.maven.plugins:maven-install-plugin:install,com.dcx.NGST:maven-bundle-plugin:install</install>\n          <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n        </phases>\n      </configuration>\n    </component>\n\n    <component>\n      <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n      <configuration>\n        <extension>jar</extension>\n        <type>resource</type>\n        <packaging>resource</packaging>\n        <language>java</language>\n        <addedToClasspath>true</addedToClasspath>\n      </configuration>\n    </component>\n\n\n\nI have a pom structure that looks like this:\napp\\data\\production\\ecuDB\\ABS\\01\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\02\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\03\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\04\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\05\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\06\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\07\\pom.xml\n\nEach folder in the structure contains a pom type, and references the child modules; 0X are resource type artifacts as defined above.  I attached the text output of maven install on one of the resource projects, namely 01, followed by 'cd ..' and maven install on all ABS modules.  Comparing the 2 runs, you will find that the 01 resource artifact has been installed with different extensions.  It uses the correct .jar extension on the first run, but it defaults to .resource when build as a multiproject.  It appears that the component definition isn't available, and it defaults the extension to the type value\n\nI am also going to attach the 01/pom.xml\n\n\n"
    ],
    [
        "MNG-2443",
        "MNG-1902",
        "Don't download pom if artifact is already in the local repository There are many projects out there just providing their artifact without a pom (whether this is good or not is a different question). Now in this case m2 always tries to download a pom for those artifacts, even if the artifact itself is already in the local repository. And if you have several of those artifacts combined with more than one repository configured, then there are a lot of unnecessary download attempts.\nI think this falls into the same category as changing a pom in the repository (which should be forbidden) - so if for the first time the artifact is downloaded no pom available, then there will never be a pom for this specific artifact.",
        "track attempted downloads and only re-attempt on certain intervals currently, because files are not stored locally when not found, files are always looked for.\n\nOTOH, we don't want to store incorrect info, especially if it is permanent (ie, not a snapshot).\n\nWe should track in the local repo metadata files that were not found and when, and check again on intervals. This should be part of the resolver so the site plugin (site descriptors), poms and more all benefit."
    ],
    [
        "MNG-2443",
        "MNG-2194",
        "Don't download pom if artifact is already in the local repository There are many projects out there just providing their artifact without a pom (whether this is good or not is a different question). Now in this case m2 always tries to download a pom for those artifacts, even if the artifact itself is already in the local repository. And if you have several of those artifacts combined with more than one repository configured, then there are a lot of unnecessary download attempts.\nI think this falls into the same category as changing a pom in the repository (which should be forbidden) - so if for the first time the artifact is downloaded no pom available, then there will never be a pom for this specific artifact.",
        "no downloading attempts of non-existing artifact I'm converting a project to maven 2.  Some dependencies do not exist in\nibiblio, so I've 'installed' these into my local repository.\n\nI'm unhappy because every time I perform a run, there is a significant\ndelay (sometimes) when maven tries to download these non-existent\nartifacts.  I get these messages:\nDownloading: http://repo1.maven.org/maven2/......./...pom\n\n\nHow can I prevent maven's attempt to download these non-existent\nartifacts?   I'm most interested in eliminating the delay.\n\nI know I can run with the 'offline' option.   This is OK as long as I'm\nsure all existing artifacts that are already downloaded into my cache. \nSo I can do this until I build on a system with no local cache of add a\nnew dependency to my projects, at which time the delay is experienced\ndue to these non-existent artifacts."
    ],
    [
        "MNG-2448",
        "MNG-2163",
        "Can not exclude a dependency from a plugin I need to be able to exclude a dependency that a plugin included so I can replace it with a different dependency.  In this exact case I'm attempting to use the com.sun.tools.xjc.maven2:maven-jaxb-plugin:1.0 plugin and it depends on the non-public jsr173 jar.  I would like to exclude that jar so I can include public stax one.   I know this will be fixed by implementing the spec resolution feature, but excluding bad dependencies from a plugin is a general problem. \n\nThe following snippit will demonstrate the download problem assuming you don't have the jsr173 jar available:\n\n      <plugin>\n        <groupId>com.sun.tools.xjc.maven2</groupId>\n        <artifactId>maven-jaxb-plugin</artifactId>\n        <version>1.0</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>generate</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <generatePackage>org.apache.xbean.jaxb.schema</generatePackage>\n        </configuration>\n        </configuration>\n       </plugin>\n",
        "Allow plugin dependencies to be excluded Need to add an exclusions block in the POM for plugins.  The use-case is excluding slf4j-simple\nfrom the jetty6 plugin in order to use an alternative slf4j implementation."
    ],
    [
        "MNG-2490",
        "MNG-2259",
        "invalid remote repository metadata file installed in local repo When I install my project, a metadata file is placed in my local repository for each of the remote repositories my project uses.  For some reason, maven is creating an invalid remote repository file.  This breaks my m2eclipse integration and eclipse complains that it can't read the metadata file.\n\n\nhere are the contents of maven-metadata-codecrate-maven-repo.xml that's in my local repository:\n<HTML><HEAD><META HTTP-EQUIV=\"Refresh\" CONTENT=\"0.1; URL=/com/codecrate/shard/shard-dice/0.5.0-SNAPSHOT/maven-metadata.xml\">\n<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no cache\">\n<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">\n</HEAD></HTML>\n\nThis is blatently wrong, and should be more like this maven-metadata-spring-rich-client-maven-repo.xml file:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><metadata>\n  <groupId>com.codecrate.shard</groupId>\n  <artifactId>shard-dice</artifactId>\n  <version>0.5.0-SNAPSHOT</version>\n</metadata>\n",
        "Maven should check the contents of the POMs and jars that it downloads Sometimes they are corrupt."
    ],
    [
        "MNG-2534",
        "MNG-1682",
        "When building a multiproject build, maven2 may incorrectly store output files in the repository with a wrong extension. It does not do this if the project is built on its own.  I have created two new maven plugins to customize the way war et ejb projects are built (i.e. maven 2 default plugins are not compliant with my requirements). In order to use these custom plugins, I have also creating two new packaging (named xnet-ejb and xnet-war) but output files I want to store in the maven repository must have .war and .jar extensions. So I have added plexus components descriptor in order to change the extension (by default, the role-hint will be the extension of the file). \n\nIn a multiproject build, if I use only one of my plugin, it works well; the file install in the repository has the correct extension. But if I use both plugin, only one works and for project manage by the other one plugin, the file install in the repository will have a wrong extension (i.e. the role-hint). \n\nThis problem seems to be known (see http://cargo.codehaus.org/Merging+WAR+files) but I haven't found any fix.\n\nThanks for your help\n\nAttached are my both plugin jar files.",
        "Plugins do not honor the correct extension when run as a part of a multiproject build I have a plugin with a component.xml described here.\n\nI think the component.xml is correct - it certainly looks the\nsame as the plexus examples.\n\nMy project that uses this plugin works entirely correctly, *unless* it\nis a part of a multiproject build, in which case it uses the wrong\nextension. I don't know why this would be the case unless I've missed\nsomething?\n\nIn same directory:\nW:\\kms\\dev\\apps\\kms>mvn install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.war\n[INFO] ----------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 minute 9 seconds\n[INFO] Finished at: Thu Nov 24 11:46:53 GMT 2005\n[INFO] Final Memory: 3M/6M\n[INFO] ----------------------------------------------------------------------------\n\nAs a part of a multiproject:\n....\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.uberwar\n....\n\nConfig of plugin:\n<component-set>\n <components>\n   <component>\n     <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n     <configuration>\n       <phases>\n             <package>\n               org.codehaus.cargo.maven2:cargo-maven2-plugin:uberwar\n             </package>\n             <install>org.apache.maven.plugins:maven-install-plugin:install</install>\n             <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n           </phases>\n     </configuration>\n   </component>\n\n       <component>\n     <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n     <configuration>\n       <type>uberwar</type>\n                <extension>war</extension>\n       <packaging>uberwar</packaging>\n     </configuration>\n   </component>\n </components>\n</component-set>\n"
    ],
    [
        "MNG-2534",
        "MNG-2240",
        "When building a multiproject build, maven2 may incorrectly store output files in the repository with a wrong extension. It does not do this if the project is built on its own.  I have created two new maven plugins to customize the way war et ejb projects are built (i.e. maven 2 default plugins are not compliant with my requirements). In order to use these custom plugins, I have also creating two new packaging (named xnet-ejb and xnet-war) but output files I want to store in the maven repository must have .war and .jar extensions. So I have added plexus components descriptor in order to change the extension (by default, the role-hint will be the extension of the file). \n\nIn a multiproject build, if I use only one of my plugin, it works well; the file install in the repository has the correct extension. But if I use both plugin, only one works and for project manage by the other one plugin, the file install in the repository will have a wrong extension (i.e. the role-hint). \n\nThis problem seems to be known (see http://cargo.codehaus.org/Merging+WAR+files) but I haven't found any fix.\n\nThanks for your help\n\nAttached are my both plugin jar files.",
        "Handling of custom lifecycle artifacts is not working properly I am using a custom lifecycle, resource, as follows:\n\n    <component>\n      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n      <configuration>\n        <phases>\n          <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources>          \n          <package>org.apache.maven.plugins:maven-jar-plugin:jar</package>\n          <install>org.apache.maven.plugins:maven-install-plugin:install,com.dcx.NGST:maven-bundle-plugin:install</install>\n          <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n        </phases>\n      </configuration>\n    </component>\n\n    <component>\n      <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n      <configuration>\n        <extension>jar</extension>\n        <type>resource</type>\n        <packaging>resource</packaging>\n        <language>java</language>\n        <addedToClasspath>true</addedToClasspath>\n      </configuration>\n    </component>\n\n\n\nI have a pom structure that looks like this:\napp\\data\\production\\ecuDB\\ABS\\01\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\02\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\03\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\04\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\05\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\06\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\07\\pom.xml\n\nEach folder in the structure contains a pom type, and references the child modules; 0X are resource type artifacts as defined above.  I attached the text output of maven install on one of the resource projects, namely 01, followed by 'cd ..' and maven install on all ABS modules.  Comparing the 2 runs, you will find that the 01 resource artifact has been installed with different extensions.  It uses the correct .jar extension on the first run, but it defaults to .resource when build as a multiproject.  It appears that the component definition isn't available, and it defaults the extension to the type value\n\nI am also going to attach the 01/pom.xml\n\n\n"
    ],
    [
        "MNG-2534",
        "MNG-2426",
        "When building a multiproject build, maven2 may incorrectly store output files in the repository with a wrong extension. It does not do this if the project is built on its own.  I have created two new maven plugins to customize the way war et ejb projects are built (i.e. maven 2 default plugins are not compliant with my requirements). In order to use these custom plugins, I have also creating two new packaging (named xnet-ejb and xnet-war) but output files I want to store in the maven repository must have .war and .jar extensions. So I have added plexus components descriptor in order to change the extension (by default, the role-hint will be the extension of the file). \n\nIn a multiproject build, if I use only one of my plugin, it works well; the file install in the repository has the correct extension. But if I use both plugin, only one works and for project manage by the other one plugin, the file install in the repository will have a wrong extension (i.e. the role-hint). \n\nThis problem seems to be known (see http://cargo.codehaus.org/Merging+WAR+files) but I haven't found any fix.\n\nThanks for your help\n\nAttached are my both plugin jar files.",
        "Artifact copied to local repository with wrong file extension when using jboss-packaging plugin When using the jboss-packaging plugin and setting <packaging> to jboss-sar in my pom, the artifact is copied into the local repository with the wrong file extension (.jboss-sar instead of .sar).  The jboss-packaging components.xml has <extension> set to sar.  The file in the build target directory has the correct .sar extension.\n\nHere's the relevant excerpt from my pom.xml:\n\n<packaging>jboss-sar</packaging>\n...\n<build>\n<plugins>\n<plugin>\n<groupId>org.codehaus.mojo</groupId>\n<artifactId>jboss-packaging-maven-plugin</artifactId>\n<version>2.0-SNAPSHOT</version>\n<extensions>true</extensions>\n..."
    ],
    [
        "MNG-2541",
        "MNG-1412",
        "Dependecy order is lost  in org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler:\n\n    private void assembleDependencyInheritance( Model child, Model parent )\n    {\n        Map depsMap = new HashMap();\n\n        List deps = parent.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        deps = child.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        child.setDependencies( new ArrayList( depsMap.values() ) );\n    }\n\nThis method mixes up the order of the dependenies due to the use of the Map.",
        "dependency sorting in classpath The .classpath file entries should be ordered by nearest transitiveness (if that's a word).\n\nFor example, I have project A that depends on B that depends on C.  The classpath for A is generated in the order C, B.  Ideally the classpath should be in order of how near they are to the project, i.e. B, C."
    ],
    [
        "MNG-2569",
        "MNG-624",
        "Expressions not evaluated inside <parent> The version tag within the parrent  block does not evaluate properties.\nIf I put a Version String directly in there, it works.\nA correctly defined property doesn't.",
        "automatic parent versioning (this may be bumped to 2.1 or even made WON't FIX as it is contentious - see MNG-521)\n\ncurrently, you have to specify the parent version when extending which makes a project stand alone very easily, but has the drawback of being a maintainance problem when you start development on a new version. Tools can help, but it would be nice not to have to rely on them.\n\nOne alternative is to allow the parent version to be omitted, and when it is it is assumed you want the latest. The parent is used from the reactor or the universal source directory. IT may also be read from a LATEST in the repository though this is contentious - it may be better to simply fail in that environment and require builds be in a known checkout structure for building individual projects.\n\nThis also introduces the need for tool support to populate the version on release and deployment for reproducibility."
    ],
    [
        "MNG-2569",
        "MNG-2971",
        "Expressions not evaluated inside <parent> The version tag within the parrent  block does not evaluate properties.\nIf I put a Version String directly in there, it works.\nA correctly defined property doesn't.",
        "Variables are not replaced into installed pom file Variables are not replaced into installed pom file.\nHere is a sample pom file\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.xxx.root</groupId>\n\t<artifactId>root</artifactId>\n\t<packaging>pom</packaging>\n\t<version>${prop.version}</version>\n\t<name>My Project</name>\n        ...\n\t<properties>\n\t\t<prop.version>3.0.20</prop.version>\n\t</properties>\n\n</project>\n{code}\nThe installed pom is into $\\{localRepository}/com/xxx/root/root/3.0.20/root-3.0.20.pom\nis the same as the project pom file but the version referenced into the installed pom file is $\\{prop.version} instead of 3.0.20\nwhich creates problem to artifacts depending of this one.\n\nThanks in advance"
    ],
    [
        "MNG-2601",
        "MNG-1908",
        "mvn -U does NOT update/download the latest SNAPSHOT version I stumbled on this issue (again) with a new snapshot release of Apache's XMLRPC library (3.1-SNAPSHOT).\nFor background information see here: http://www.nabble.com/3.1-SNAPHOT-tf2411158.html\n\nThe bug is that mvn -U doesn't download the new 3.1-SNAPSHOT version when there is one. I had (actually we as in our team) manually have to delete the existing 3.1-SNAPSHOT in my local repository.\nThe xmlrpc library consists of three modules (common, server and client) this problems applies to all three but I've make an example using the server modules.\n\nIt can be found here: http://people.apache.org/maven-snapshot-repository/org/apache/xmlrpc/xmlrpc-server/3.1-SNAPSHOT/\n\nThe SNAPSHOTs generated does not use uniqueVersion (and filenames are hence not created with a timestamp). Is that necessary for mvn -U to work?\n\nIf that is the case then\n\n 1) this needs to be documented better. It is NOT how one expects it to work. As a user I don't care how the SNAPSHOT was deployed - just that it is there.\n 2) one should be able to force mvn to RE-download all SNAPSHOT (don't check for update or anything just download). perhaps mvn -F (force redownload of snapshots)",
        "snapshots not deployed using m2, or deployed with uniqueVersion = false are not updated if present locally It seems from the log info that m2 is trying to locate the artifact metadata on the repository.\nSInce this artifact has been generated from m1, there is no metadata.\nSo whatever repository settings are configured, m2 will never update snapsots."
    ],
    [
        "MNG-2601",
        "MNG-1919",
        "mvn -U does NOT update/download the latest SNAPSHOT version I stumbled on this issue (again) with a new snapshot release of Apache's XMLRPC library (3.1-SNAPSHOT).\nFor background information see here: http://www.nabble.com/3.1-SNAPHOT-tf2411158.html\n\nThe bug is that mvn -U doesn't download the new 3.1-SNAPSHOT version when there is one. I had (actually we as in our team) manually have to delete the existing 3.1-SNAPSHOT in my local repository.\nThe xmlrpc library consists of three modules (common, server and client) this problems applies to all three but I've make an example using the server modules.\n\nIt can be found here: http://people.apache.org/maven-snapshot-repository/org/apache/xmlrpc/xmlrpc-server/3.1-SNAPSHOT/\n\nThe SNAPSHOTs generated does not use uniqueVersion (and filenames are hence not created with a timestamp). Is that necessary for mvn -U to work?\n\nIf that is the case then\n\n 1) this needs to be documented better. It is NOT how one expects it to work. As a user I don't care how the SNAPSHOT was deployed - just that it is there.\n 2) one should be able to force mvn to RE-download all SNAPSHOT (don't check for update or anything just download). perhaps mvn -F (force redownload of snapshots)",
        "If deploy with uniqueVersion=false (only generate file ended SNAPSHOT), this is not downloaded If I specify <uniqueVersion>false</uniqueVersion> in the pom.\nThe generated file is only one ended with -SNAPSHOT (no problem is cool).\nBut it's not downloaded by a client.\n"
    ],
    [
        "MNG-2601",
        "MNG-2289",
        "mvn -U does NOT update/download the latest SNAPSHOT version I stumbled on this issue (again) with a new snapshot release of Apache's XMLRPC library (3.1-SNAPSHOT).\nFor background information see here: http://www.nabble.com/3.1-SNAPHOT-tf2411158.html\n\nThe bug is that mvn -U doesn't download the new 3.1-SNAPSHOT version when there is one. I had (actually we as in our team) manually have to delete the existing 3.1-SNAPSHOT in my local repository.\nThe xmlrpc library consists of three modules (common, server and client) this problems applies to all three but I've make an example using the server modules.\n\nIt can be found here: http://people.apache.org/maven-snapshot-repository/org/apache/xmlrpc/xmlrpc-server/3.1-SNAPSHOT/\n\nThe SNAPSHOTs generated does not use uniqueVersion (and filenames are hence not created with a timestamp). Is that necessary for mvn -U to work?\n\nIf that is the case then\n\n 1) this needs to be documented better. It is NOT how one expects it to work. As a user I don't care how the SNAPSHOT was deployed - just that it is there.\n 2) one should be able to force mvn to RE-download all SNAPSHOT (don't check for update or anything just download). perhaps mvn -F (force redownload of snapshots)",
        "Newer SNAPSHOT parents in the remote repository are ignored If a POM inherits from another one in the repository with a SNAPSHOT version, it will only look into the local repository for it, but not in the remote repositories.\nE.g. if a POM has following parent:...\n    <parent>\n        <groupId>pom.maven</groupId>\n        <artifactId>super</artifactId>\n        <version>SNAPSHOT</version>\n    </parent>\n...\n\nit will not find a newer version of \"pom.maven:super:SNAPSHOT\" in a remote repository."
    ],
    [
        "MNG-2618",
        "MNG-2025",
        "pom.xml with amperstands and variables I've got an exception with structure:\n\n<!-- pom fragment -->\n\t<organization>\n\t\t<name>Autoguard &amp; Insurance Sp. z o.o</name>\n\t</organization>\n\nthe ${project.organization.name} makes an exception.",
        "POM is still not read using the right encoding IIRC XML standard says that default encoding is UTF-8 for xml files\n\nThat can be overriden with \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\nBut files without header saved as UTF8 are not parsed in some systems (eg windows, solaris), while files saved as other encoding (I believe it was ansi) break under a Mac mini with yellowdog linux"
    ],
    [
        "MNG-2618",
        "MNG-2057",
        "pom.xml with amperstands and variables I've got an exception with structure:\n\n<!-- pom fragment -->\n\t<organization>\n\t\t<name>Autoguard &amp; Insurance Sp. z o.o</name>\n\t</organization>\n\nthe ${project.organization.name} makes an exception.",
        "The Maven 2.0.2 XML parser fails to parse a UTF-8 POM that begins with the optional byte-order mark. The Byte-Order mark is optional, and discouraged in the UTF-8 encoding; but the Unicode specification is clear that it is allowed -- if you read the Unicode Standard v4, section 2.6, and Table 2.3, and section 15.9, and table 15.3; it is clear that the BOM is allowed at the start of a UTF-8 file.\n\nIt so happens that this is the way Windows NotePad saves files when you select UTF-8; and Maven will not parse it.  I'll attach a small POM saved this way, and I'll put it into a ZIP file to hopefully preserve the encoding.  Here is the Maven output:\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\nPOM Location: C:\\Documents and Settings\\Coco\\Desktop\\pom.xml\n\nReason: Parse error reading POM. Reason: only whitespace content allowed before start tag and not \\u\nef (position: START_DOCUMENT seen \\uef... @1:1)\n\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Parse error reading POM. Reason: only whitespace c\nontent allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.InvalidProjectModelException: Parse error reading POM. Reason: o\nnly whitespace content allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef...\n@1:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1134)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1094)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFile(DefaultMavenProje\nctBuilder.java:289)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java\n:274)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n        ... 11 more\nCaused by: org.codehaus.plexus.util.xml.pull.XmlPullParserException: only whitespace content allowed\n before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.codehaus.plexus.util.xml.pull.MXParser.parseProlog(MXParser.java:1516)\n        at org.codehaus.plexus.util.xml.pull.MXParser.nextImpl(MXParser.java:1392)\n        at org.codehaus.plexus.util.xml.pull.MXParser.next(MXParser.java:1090)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(MavenXpp3Reader.java:4545)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1130)\n        ... 17 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Feb 08 21:14:03 EST 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n"
    ],
    [
        "MNG-2618",
        "MNG-2254",
        "pom.xml with amperstands and variables I've got an exception with structure:\n\n<!-- pom fragment -->\n\t<organization>\n\t\t<name>Autoguard &amp; Insurance Sp. z o.o</name>\n\t</organization>\n\nthe ${project.organization.name} makes an exception.",
        "the encoding parameter in xml declaration of POM is ignored  DefaultMavenProjectBuilder reads POM in system default character encoding, and the encoding parameter in xml declartion is ignored.\nto fix this problem, We should\n-  fix  modello-plugin-xpp3 to use the xml parser which is able to handle the encoding parameter properly\n- regenerate maven-model using fixed modello-plugin-xpp3\n- fix DefaultMavenProjectBuilder to use regenerated maven-model properly.\n"
    ],
    [
        "MNG-2627",
        "MNG-1775",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile.",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-2627",
        "MNG-2363",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile.",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory."
    ],
    [
        "MNG-2633",
        "MNG-1925",
        "Unexpected behaviour <repository> settings in POM.xml. Included a POM file which defines two repositories : a non-existing one and the central M2 repository.\n\nThere is no local settings file ~/.m2/setting.xml and the complete folder ~/.m2/repository/junit is deleted.\n\nNow if I run 'maven install', I get the following :\n\n$mvn install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Quick Start Archetype\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\nDownloading: http://repo1.maven.org/maven2/junit/junit/3.8.1/junit-3.8.1.pom\n145b downloaded\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:compile]\n[INFO] No sources to compile\n[INFO] [resources:testResources]\n[INFO] Using default encoding to copy filtered resources.\nDownloading: http://blieblie/junit/junit/3.8.1/junit-3.8.1.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  junit:junit:jar:3.8.1\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  mybidonrepo (http://blieblie)\nPath to dependency:\n        1) testgroup:testartifact:jar:1.0-SNAPSHOT\n        2) junit:junit:jar:3.8.1\n\n\n\nCaused by I/O exception: Server returned HTTP response code: 503 for URL: http://blieblie/junit/junit/3.8.1/junit-3.8.1.jar\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 17 seconds\n[INFO] Finished at: Thu Oct 26 18:53:06 CEST 2006\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\n\nQuestions:\n1. Is it normal that retrieving the artifact (jar) completely fails the build? M2 could still try to connect to \nhttp://repo1.maven.org/maven2 to retrieve the artifact.\n2. why is the POM file directly retrieved from http://repo1.maven.org/maven2 (no attempt to retrieve it from http://blieblie)?",
        "Pom downloading failures stops the build When using m1 legacy repositories, m2 always try to download the pom because it is missing on the local repository.\nAs the pom does not exist on the remote repository, a warning is displayed and the build continues.\nIf the download times out for any reason, instead of just printing a warning, an error occurs and the build stops.\n\nWhen remote repositories are busy, this can be very annoying...."
    ],
    [
        "MNG-2633",
        "MNG-2049",
        "Unexpected behaviour <repository> settings in POM.xml. Included a POM file which defines two repositories : a non-existing one and the central M2 repository.\n\nThere is no local settings file ~/.m2/setting.xml and the complete folder ~/.m2/repository/junit is deleted.\n\nNow if I run 'maven install', I get the following :\n\n$mvn install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Quick Start Archetype\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\nDownloading: http://repo1.maven.org/maven2/junit/junit/3.8.1/junit-3.8.1.pom\n145b downloaded\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:compile]\n[INFO] No sources to compile\n[INFO] [resources:testResources]\n[INFO] Using default encoding to copy filtered resources.\nDownloading: http://blieblie/junit/junit/3.8.1/junit-3.8.1.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  junit:junit:jar:3.8.1\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  mybidonrepo (http://blieblie)\nPath to dependency:\n        1) testgroup:testartifact:jar:1.0-SNAPSHOT\n        2) junit:junit:jar:3.8.1\n\n\n\nCaused by I/O exception: Server returned HTTP response code: 503 for URL: http://blieblie/junit/junit/3.8.1/junit-3.8.1.jar\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 17 seconds\n[INFO] Finished at: Thu Oct 26 18:53:06 CEST 2006\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\n\nQuestions:\n1. Is it normal that retrieving the artifact (jar) completely fails the build? M2 could still try to connect to \nhttp://repo1.maven.org/maven2 to retrieve the artifact.\n2. why is the POM file directly retrieved from http://repo1.maven.org/maven2 (no attempt to retrieve it from http://blieblie)?",
        "Timeouts in POM downloads cause the build to fail We have a number of jars in our repository that don't have POMs, e.g. third-party libraries, etc. Maven happily downloads the jar anyway, and issues a warning that there's no POM - except, sometimes, it just fails instead. See the build log below. If I were to rerun Maven again, it might fail on a different jar, or it might succeed. I can't seem to find any rhyme or reason to it...\n\nI agree that a missing POM merits a warning, but if the jar is there, it shouldn't be failing the build!\n\nDownloading: http://prdwebdev11/repository/j2ee/j2ee/1.3.1/j2ee-1.3.1.pom\n[WARNING] Unable to get resource from repository prdwebdev11 (http://prdwebdev11/repository)\nDownloading: http://repo1.maven.org/maven2/j2ee/j2ee/1.3.1/j2ee-1.3.1.pom\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: j2ee:j2ee\n\nReason: Error getting POM for 'j2ee:j2ee' from the repository: Error transferring file\n  j2ee:j2ee:pom:1.3.1\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  prdwebdev11 (http://prdwebdev11/repository)"
    ],
    [
        "MNG-2633",
        "MNG-2282",
        "Unexpected behaviour <repository> settings in POM.xml. Included a POM file which defines two repositories : a non-existing one and the central M2 repository.\n\nThere is no local settings file ~/.m2/setting.xml and the complete folder ~/.m2/repository/junit is deleted.\n\nNow if I run 'maven install', I get the following :\n\n$mvn install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Quick Start Archetype\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\nDownloading: http://repo1.maven.org/maven2/junit/junit/3.8.1/junit-3.8.1.pom\n145b downloaded\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:compile]\n[INFO] No sources to compile\n[INFO] [resources:testResources]\n[INFO] Using default encoding to copy filtered resources.\nDownloading: http://blieblie/junit/junit/3.8.1/junit-3.8.1.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  junit:junit:jar:3.8.1\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  mybidonrepo (http://blieblie)\nPath to dependency:\n        1) testgroup:testartifact:jar:1.0-SNAPSHOT\n        2) junit:junit:jar:3.8.1\n\n\n\nCaused by I/O exception: Server returned HTTP response code: 503 for URL: http://blieblie/junit/junit/3.8.1/junit-3.8.1.jar\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 17 seconds\n[INFO] Finished at: Thu Oct 26 18:53:06 CEST 2006\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\n\nQuestions:\n1. Is it normal that retrieving the artifact (jar) completely fails the build? M2 could still try to connect to \nhttp://repo1.maven.org/maven2 to retrieve the artifact.\n2. why is the POM file directly retrieved from http://repo1.maven.org/maven2 (no attempt to retrieve it from http://blieblie)?",
        "If a repo is down, maven stops the buid instead of trying other repos In this case, the artifact is available at http://www.ibiblio.org/maven2/activemq/jmdns/1.0-RC2/ and the build always fail until the artifact is downloaded manually.\nSee the following build output:\n\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.4\n[DEBUG] Building Maven user-level plugin registry from: 'C:\\Documents and Settings\\gnodet\\.m2\\plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: 'c:\\java-bin\\maven-2.0.4\\conf\\plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT of project: null:servicemix-core:jar:null in relative path: ../pom.xml\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: null:servicemix-core:jar:null\n[DEBUG] Searching for parent-POM: org.apache:apache::1 of project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT in relative path: ../pom.xml\n[DEBUG] Parent-POM: org.apache:apache::1 not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building ServiceMix :: Core\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-resources-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-resources-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-compiler-plugin: resolved to version 2.0.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-compiler-plugin:maven-plugin:2.0.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-surefire-plugin: resolved to version 2.1.3 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-surefire-plugin:maven-plugin:2.1.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-jar-plugin: resolved to version 2.0 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-jar-plugin:maven-plugin:2.0 from the repository.\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] maven-install-plugin: resolved to version 2.1 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0 for project: null:maven-install-plugin:maven-plugin:2.1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugin-parent::2.0.1 for project: null:maven-one-plugin:maven-plugin:1.0 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:maven-xbean-plugin:maven-plugin:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG] org.apache.xbean:maven-xbean-plugin:maven-plugin:2.3:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-archiver:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-archiver:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-project:jar:2.0 from the repository.\n[DEBUG]     org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]         junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-model:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-artifact-manager:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-repository-metadata:jar:2.0 from the repository.\n[DEBUG]         org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: null:maven-profile:jar:2.0 from the repository.\n[DEBUG]       org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.2:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: null:plexus-utils:jar:1.1 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:1.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG]   qdox:qdox:jar:1.5:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-spring:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:runtime (selected for runtime)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:runtime (selected for runtime)\n[DEBUG]     org.springframework:spring:jar:1.2.4:runtime (selected for runtime)\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven::2.0 for project: org.apache.maven:maven-plugin-api:jar:2.0 from the repository.\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.1)\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus-components::1.1.4 for project: null:plexus-archiver:jar:1.0-alpha-5 from the repository.\n[DEBUG] Retrieving parent-POM: org.codehaus.plexus:plexus::1.0.4 for project: org.codehaus.plexus:plexus-components:pom:1.1.4 from the repository.\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-3:runtime (removed - nearer found: 1.0-alpha-5)\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.xbean:maven-xbean-plugin:2.3:mapping' -->\n[DEBUG]   (f) namespace = http://servicemix.apache.org/config/1.0\n[DEBUG]   (f) outputDir = c:\\java\\servicemix\\servicemix-core\\target\\xbean\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) propertyEditorPaths = org.apache.xbean.spring.context.impl\n[DEBUG]   (f) schema = c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd\n[DEBUG]   (f) srcDir = c:\\java\\servicemix\\servicemix-core\\src\\main\\java\n[DEBUG] -- end configuration --\n[INFO] [xbean:mapping {execution: default}]\n[DEBUG]  ======= XBeanMojo settings =======\n[DEBUG] namespace[http://servicemix.apache.org/config/1.0]\n[DEBUG] srcDir[c:\\java\\servicemix\\servicemix-core\\src\\main\\java]\n[DEBUG] schema[c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd]\n[DEBUG] outputDir[c:\\java\\servicemix\\servicemix-core\\target\\xbean]\n[DEBUG] propertyEditorPaths[org.apache.xbean.spring.context.impl]\n[INFO] Generating META-INF properties file: c:\\java\\servicemix\\servicemix-core\\target\\xbean\\META-INF\\services\\org\\apache\\xbean\\spring\\http\\servicemix.apache.org\\config\\1.0 for namespace: http://servicemix.apache.org/config/1.0\n[INFO] Generating HTML documentation file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd.html for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] Generating XSD file: c:\\java\\servicemix\\servicemix-core\\target\\servicemix.xsd for namespace: http://servicemix.apache.org/config/1.0\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointResolver\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: org.apache.servicemix.jbi.messaging.PojoMarshaler\nWarning, could not load class: org.apache.servicemix.jbi.resolver.EndpointChooser\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: javax.jbi.component.ServiceUnitManager\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jbi.container.JBIContainer\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jdbc.Statements\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\nWarning, could not load class: org.apache.servicemix.jbi.resolver.SubscriptionFilter\nWarning, could not load class: org.apache.servicemix.jbi.framework.ComponentNameSpace\n[INFO] ...done.\n[DEBUG] org.apache.maven.plugins:maven-resources-plugin:maven-plugin:2.1:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-model:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-project:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-8:runtime (selected for runtime)\n[DEBUG]       classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime)\n[DEBUG]       junit:junit:jar:3.8.1:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact:jar:2.0:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-artifact-manager:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:2.0:runtime (selected for runtime)\n[DEBUG]       org.apache.maven.wagon:wagon-provider-api:jar:1.0-alpha-5:runtime (selected for runtime)\n[DEBUG]     org.apache.maven:maven-profile:jar:2.0:runtime (selected for runtime)\n[DEBUG]   commons-io:commons-io:jar:1.0:runtime (selected for runtime)\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.0:runtime (selected for runtime)\n[DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-resources-plugin:2.1:resources' -->\n[DEBUG]   (f) filters = []\n[DEBUG]   (f) outputDirectory = c:\\java\\servicemix\\servicemix-core\\target\\classes\n[DEBUG]   (f) project = org.apache.maven.project.MavenProject@eaec334d\n[DEBUG]   (f) resources = [org.apache.maven.model.Resource@f07355, org.apache.maven.model.Resource@23f1bb, org.apache.maven.model.Resource@1d33a6b]\n[DEBUG] -- end configuration --\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[DEBUG] org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT (selected for null)\n[DEBUG]   org.apache.servicemix.dependencies:jencks:jar:1.1.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-jacc_1.0_spec:jar:1.0:compile (selected for compile)\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from central\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: central\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from servicemix-m2-repo\n[DEBUG] repository metadata for: 'snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT' could not be found on repository: servicemix-m2-repo\n[INFO] snapshot incubator-activemq:activemq-ra:4.0-SNAPSHOT: checking for updates from apache.snapshots\n[DEBUG] activemq-ra: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-ra/4.0-SNAPSHOT/activemq-ra-4.0-20060508.005319-6.pom\n1/1K\n1K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-ra:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.pom\n149/149b\n149b downloaded\n[DEBUG]   Artifact resolved\n[DEBUG]     activemq:jmdns:jar:1.0-RC2:compile (selected for compile)\n[DEBUG] Trying repository central\nDownloading: http://repo1.maven.org/maven2/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository central (http://repo1.maven.org/maven2)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Trying repository apache.snapshots\nDownloading: http://svn.apache.org/maven-snapshot-repository/incubator-activemq/activemq-core/4.0-SNAPSHOT/activemq-core-4.0-20060508.005319-6.pom\n4/9K\n8/9K\n9/9K\n9K downloaded\n[DEBUG]   Artifact resolved\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]     incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (selected for compile)\n[DEBUG]       org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]       incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.springframework:spring-full::1.2.6 for project: null:spring:jar:1.2.6 from the repository.\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.6 for project: null:spring-full:pom:null from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   junit:junit:jar:3.8.1:compile (selected for compile)\n[DEBUG]   log4j:log4j:jar:1.2.12:runtime (selected for runtime)\n[DEBUG]   ant:ant:jar:1.6.5:compile (selected for compile)\n[DEBUG]   commons-logging:commons-logging:jar:1.0.4:compile (selected for compile)\n[DEBUG] activemq-core: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: incubator-activemq:activemq-parent::4.0-SNAPSHOT for project: null:activemq-core:jar:4.0-20060508.005319-6 from the repository.\n[DEBUG] activemq-parent: resolved to version 4.0-20060508.005319-6 from repository apache.snapshots\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-20060508.005319-6:compile (removed - nearer found: 4.0-SNAPSHOT)\n[DEBUG]   incubator-activemq:activemq-core:jar:4.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]     incubator-activemq:activeio-core:jar:3.0-beta2:compile (selected for compile)\n[DEBUG]   org.springframework:spring:jar:1.2.6:compile (selected for compile)\n[DEBUG]   commons-lang:commons-lang:jar:2.1:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-connector_1.5_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   lingo:lingo:jar:1.0:compile (selected for compile)\n[DEBUG]     concurrent:concurrent:jar:1.3.4:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     aopalliance:aopalliance:jar:1.0:compile (selected for compile)\n[DEBUG]     xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG] While downloading springframework:spring:1.2.5\n  This artifact has been relocated to org.springframework:spring:1.2.5.\n\n\n[DEBUG] Retrieving parent-POM: org.springframework:spring-parent::1.2.5 for project: null:spring:jar:1.2.5 from the repository.\n[DEBUG]     org.springframework:spring:jar:1.2.5:compile (removed - nearer found: 1.2.6)\n[DEBUG]     mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG]   backport-util-concurrent:backport-util-concurrent:jar:2.1:compile (selected for compile)\n[DEBUG]   jaxen:jaxen:jar:1.1-beta-8:compile (selected for compile)\n[DEBUG]     xerces:xercesImpl:jar:2.6.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   stax-utils:stax-utils:jar:snapshot-20060502:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-connector:jar:1.0:compile (selected for compile)\n[DEBUG]   commons-collections:commons-collections:jar:3.1:compile (selected for compile)\n[DEBUG]   xmlbeans:xbean:jar:2.1.0:compile (selected for compile)\n[DEBUG]   hsqldb:hsqldb:jar:1.7.3.3:test (selected for test)\n[DEBUG]   lucene:lucene:jar:1.4.3:compile (selected for compile)\n[DEBUG]   mx4j:mx4j:jar:3.0.1:compile (selected for compile)\n[DEBUG] servicemix-jbi: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache.servicemix:servicemix::3.0-SNAPSHOT for project: null:servicemix-jbi:jar:3.0-20060507.131217-6 from the repository.\n[DEBUG] servicemix: using locally installed snapshot\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.servicemix:servicemix:pom:3.0-SNAPSHOT from the repository.\n[DEBUG]   org.apache.servicemix:servicemix-jbi:jar:3.0-SNAPSHOT:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-activation_1.0.2_spec:jar:1.0:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-qname_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   easymock:easymock:jar:1.2_Java1.3:test (selected for test)\n[DEBUG]   xerces:xercesImpl:jar:2.6.2:compile (removed - nearer found: 2.7.1)\n[DEBUG]   xerces:xercesImpl:jar:2.7.1:compile (selected for compile)\n[DEBUG]   xml-apis:xml-apis:jar:1.3.02:compile (selected for compile)\n[DEBUG]   wsdl4j:wsdl4j:jar:1.5.2:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.0:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-server:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]   org.apache.xbean:xbean-server:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG] Retrieving parent-POM: org.apache.xbean:xbean::2.3 for project: null:xbean-kernel:jar:2.3 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.xbean:xbean:pom:2.3 from the repository.\n[DEBUG]     org.apache.xbean:xbean-kernel:jar:2.3:compile (selected for compile)\n[DEBUG]       backport-util-concurrent:backport-util-concurrent:jar:2.0_01_pd:compile (removed - nearer found: 2.1)\n[DEBUG]     org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]       org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   xstream:xstream:jar:1.1.2:compile (selected for compile)\n[DEBUG]   geronimo:geronimo-transaction:jar:1.0:compile (selected for compile)\n[DEBUG]   org.apache.geronimo.specs:geronimo-j2ee-management_1.0_spec:jar:1.0:compile (selected for compile)\n[DEBUG]   xalan:xalan:jar:2.7.0:compile (selected for compile)\n[DEBUG] While downloading xml-apis:xml-apis:2.0.2\n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]   mx4j:mx4j-remote:jar:3.0.1:compile (selected for compile)\n[DEBUG]   commons-betwixt:commons-betwixt:jar:0.7:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.2:compile (removed - nearer found: 1.0.4)\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]     commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]     commons-digester:commons-digester:jar:1.6:compile (selected for compile)\n[DEBUG]       commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]       xml-apis:xml-apis:jar:1.0.b2:compile (removed - nearer found: 1.3.02)\n[DEBUG]       commons-collections:commons-collections:jar:2.1:compile (removed - nearer found: 3.1)\n[DEBUG]   stax:stax-api:jar:1.0:compile (selected for compile)\n[DEBUG]   xmlbeans:xmlpublic:jar:2.1.0:compile (selected for compile)\n[DEBUG]   org.apache.xbean:xbean-spring:jar:2.3:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0.3:compile (removed - nearer found: 1.0.4)\n[DEBUG]     org.springframework:spring:jar:1.2.4:compile (removed - nearer found: 1.2.6)\n[DEBUG]   commons-beanutils:commons-beanutils-core:jar:1.7.0:compile (selected for compile)\n[DEBUG]     commons-logging:commons-logging:jar:1.0:compile (removed - nearer found: 1.0.4)\n[DEBUG]     commons-collections:commons-collections:jar:2.0:compile (removed - nearer found: 3.1)\n[DEBUG]   woodstox:wstx-asl:jar:2.0.3:compile (selected for compile)\n[DEBUG] Trying repository servicemix-m2-repo\nDownloading: http://servicemix.org/m2-repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository servicemix-m2-repo (http://servicemix.org/m2-repo)\n[DEBUG] Skipping disabled repository apache.snapshots\n[DEBUG] Trying repository codehaus-snapshot\nDownloading: http://snapshots.maven.codehaus.org/maven2/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[WARNING] Unable to get resource from repository codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2)\n[DEBUG] Trying repository maven-csharp\nDownloading: http://localhost/repo/activemq/jmdns/1.0-RC2/jmdns-1.0-RC2.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nError transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\nCaused by I/O exception: Connection refused: connect\n\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:551)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:475)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:454)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Error transferring file\n  activemq:jmdns:jar:1.0-RC2\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  servicemix-m2-repo (http://servicemix.org/m2-repo),\n  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),\n  codehaus-snapshot (http://snapshots.maven.codehaus.org/maven2),\n  apache-maven1-snapshot (http://cvs.apache.org/repository),\n  maven-csharp (http://localhost/repo)\nPath to dependency: \n\t1) org.apache.servicemix:servicemix-core:jar:3.0-SNAPSHOT\n\t2) incubator-activemq:activemq-ra:jar:4.0-SNAPSHOT\n\t3) activemq:jmdns:jar:1.0-RC2\n\n\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:140)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:63)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:233)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n\tat org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1117)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:366)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n\t... 16 more\nCaused by: org.apache.maven.wagon.TransferFailedException: Error transferring file\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:99)\n\tat org.apache.maven.wagon.StreamWagon.get(StreamWagon.java:68)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:369)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:282)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:244)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:124)\n\t... 23 more\nCaused by: java.net.ConnectException: Connection refused: connect\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n\tat java.net.Socket.connect(Socket.java:507)\n\tat java.net.Socket.connect(Socket.java:457)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:365)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:477)\n\tat sun.net.www.http.HttpClient.<init>(HttpClient.java:214)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:287)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:299)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:792)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:744)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:669)\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:913)\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:85)\n\t... 28 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 16 seconds\n[INFO] Finished at: Mon May 08 10:48:34 CEST 2006\n[INFO] Final Memory: 9M/16M\n[INFO] ------------------------------------------------------------------------"
    ],
    [
        "MNG-2647",
        "MNG-2486",
        "Version not inherited for SNAPSHOT version I have the parent module which defines 2 modules. In the modules, the version is inherited from the parent. If I am working on a SNAPSHOT version, the child modules get the timestamp version instead of what was given to parent.\nIf you have a look at the attachements, the problem is that module1 version in deployed pom will be something like 1234567.123456-7 and when searching for dependent module2 version, will fail because it will try to download a released version 1234567.123456-7 of module 2.\nOnly this seem to be a bug to me, but this is even stranger considering the version of module2 is defined in dependecyManagement of parent pom with ${project.version}. This project.version is correct (3.4.0_SNAPSHOT) in parent pom !",
        "${project.version} evaluated to timestamped version if referring to SNAPSHOT when projects specify dependencyManagement sections with a shorthand version notation using the current project version (using ${project.version}) the version resolved will be that of the POM in which the dependencyManagement section is specified. If this POM is a snapshot, these dependency specifications will get the timestamp/buildnumber of that POM, instead of the actual one used when the dependency it references gets deployed.\n\nWe should look at strategies for limiting or eliminating this practice, or else (somehow) pulling the real timestamp/buildnumber for that artifact from the reactor...in order to make these deps transitively resolvable for users."
    ],
    [
        "MNG-2651",
        "MNG-2653",
        "POM interpolator treats ${pom.something} like ${something} and prefers system properties The POM interpolator (RegexBasedModelInterpolator) removes all leading \"pom.\", \"project.\" and \"env.\" portions of an expression before evaluating it.  then searching for values happens in the following order: system properties, project properties, pom bean properties.\n\nAn example: Although ${pom.version} is more specific than ${version}, version wins. That's the problem in MNGECLIPSE-20.\n\nIMHO the interpolation strategy should be changed.\n",
        "using ${version} for subproject dependencies doesn't work (maven uses 2.4.1 version instead) My project is a ear multiproject. It has 5 modules, that have internal dependencies. For example web module needs app and type modules. \n\nI usually use following declaration for this kind of dependencies. Note that I'm using ${version} in dependency. In result I'm requesting foo-type jar of the same version as current project.\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>foo</groupId>\n    <artifactId>foo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n  </parent>\n  <artifactId>foo-app</artifactId>\n\n  <dependencies>\n    <dependency>\n      <groupId>foo</groupId>\n      <artifactId>foo-type</artifactId>\n      <version>${version}</version>\n    </dependency>\n  </dependencies>\n</project>\n\nThis works from commandline, but doesn't work in eclipse plugin. I get following message:\n\n\"Unable to download the artifact from any repository foo:foo-type-2.4.1.jar\"\n\nMaven (or maven plugin) tries to download foo-type module in very strange version (instead 0.0.1-SNAPSHOT)! \n\n\nI've attached simple multimodule project."
    ],
    [
        "MNG-2651",
        "MNG-2339",
        "POM interpolator treats ${pom.something} like ${something} and prefers system properties The POM interpolator (RegexBasedModelInterpolator) removes all leading \"pom.\", \"project.\" and \"env.\" portions of an expression before evaluating it.  then searching for values happens in the following order: system properties, project properties, pom bean properties.\n\nAn example: Although ${pom.version} is more specific than ${version}, version wins. That's the problem in MNGECLIPSE-20.\n\nIMHO the interpolation strategy should be changed.\n",
        "${project.*} are interpreted in the wrong place If a plugin use ${project.version}, this parameter is interpreted with the version of the current project and not the plugin version. I think we have the same pb with dependencies and other ${project.*}\n\nFor a plugin in version 2.0 used in a project in version 1.0-SNAPSHOT, ${project.version} used in the plugin will be interpreted as 1.0-SNAPSHOT instead of 2.0"
    ],
    [
        "MNG-2662",
        "MNG-2580",
        "SettingsBuilder internally converts network paths to local paths and is therefore preventing the use of network profiles I'm not sure if this is a bug or intended but the DefaultMavenSettingsBuilder converts paths like \"\\\\server\\username\\.m2\\settings.xml\" to \"<Current Drive>:\\server\\username\\.m2\\settings.xml\". This prevented us from using the default user.home because our userprofiles are located on another server and are referenced by \"\\\\\" network paths. It would've been quite complicated to change the user.home system property for all developers, so we fixed the problem by removing a regular expression that replaced double backslashes by only one, followed by calling \"new File(path).getAbsolutePath()\" which added the current drive letter to the path and converted it to a local path this way.\n\nI don't know the reason for removing double backslashes from the beginning but at least i didn't recognize any problems with my changes yet. It would be nice if somebody could tell me what the regexp was intended for. I attached a patch to this posting and hope it helps!",
        "UNC in MAVEN_HOME not working Maven2 is installed in a corporate server : SERVER\nFrom my computer, this installation is accesible on a network share : \\\\SERVER\\MAVEN2\n\nFrom a command line I setup MAVEN_HOME with this UNC:\n> set MAVEN_HOME=\\\\SERVER\\MAVEN2\nAnd put it in the PATH\n> set PATH=%MAVEN_HOME%\\bin;%PATH%\nWhen I try to build any projects, maven is unable to acces my global settings which is stored in %MAVEN_HOME%\\conf\\settings.xml\n\nBut when I mount a network share to this UNC:\n> net use Z: \\\\SERVER\\MAVEN2\n...Setup MAVEN_HOME ...\n> set MAVEN_HOME=Z:\\\n...And put it in the PATH ...\n> set PATH=%MAVEN_HOME%\\bin;%PATH%\nThe global settings.xml is read.\n\nThis useCase seems OK with Maven 1.\n\n\nmvn -X doesn't give too any informations about the final %MAVEN_HOME%\\conf which is used.\nBut it prints the plugin-registry.xml locations which are based on the %MAVEN_HOME% \nIn this case \\\\SERVER\\MAVEN2 is badly transformed in C:\\SERVER\\MAVEN2 :\n\n>set MAVEN_HOME=\\\\frmlefsi20\\inet_dev\\DEVPLATFORM\\maven-2.0.4\n>mvn clean -X\n(...)\n[DEBUG] Building Maven global-level plugin registry from: 'C:\\frmlefsi20\\inet_dev\\DEVPLATFORM\\maven-2.0.4\\bin\\..\\conf\\plugin-registry.xml'\n(...)\n\nThanks for your support and this great tool !\n\n"
    ],
    [
        "MNG-2677",
        "MNG-870",
        "Plugin discovery not reactor aware Regression of MNG-870",
        "Make plugin discovery reactor aware If plugin discovery is reactor aware, plugins that are part of a reactor build and are used to aid the build\ncan be used in one go. Else first the plugin should be installed, and then the rest of the project can\nbe built.\n\nBut mainly this aids in integration testing for plugins: the maven-it-plugin in sandbox can't add the current plugin\n+ artifact to the lifecycle without making some methods public. If the plugin were to be discovered using the reactor,\nthose methods can remain private."
    ],
    [
        "MNG-2677",
        "MNG-1883",
        "Plugin discovery not reactor aware Regression of MNG-870",
        "it plugin not picking up the plugin being built (goes to the local repo instead) Try the following to reproduce the problem:\n\n- checkout the clover plugin\n- delete the clover plugin from your local \n- run \"mvn install\" on the clover plugin. It'll start the it plugin and try to execute an it test that requires the clover plugin\n- it'll fail\n"
    ],
    [
        "MNG-2677",
        "MNG-2135",
        "Plugin discovery not reactor aware Regression of MNG-870",
        "multi-project build that creates it's own plugins needs bootstrapping I have a multi-project build. Some of the artifacts are maven-plugins. Other artifacts depends on these plugins. For some reason the current Maven2 is not correctly doing the dependency check before building to see whether the artifacts in the multi-project build depend on other maven-plugin artifacts within the same multi-project build. \nFor now I solved the issue by using a second parent pom to bootstrap the build. This bootstrap parent pom is creating all the plugins. Afterwards, I can use my normal parent pom to build all artifacts.\nIt would be nice that Maven2 could do the 'bootstrap build' himself."
    ],
    [
        "MNG-4310",
        "MNG-1486",
        "Can't use property names in resources element {code:xml}\n<build>\n    <resources>\n         <resource>\n            <directory>target/gen/doclet/WEB-INF/classes/META-INF</directory>\n            <filtering>true</filtering>\n            <targetPath>META-INF</targetPath>\n         </resource>            \n    </resources>\n</build>\n{code} \n\nI can't use {{${project.build.directory}}} instead of _target_ in the _directory_ element in the above snippet.  Same is true for other Maven and project properties.",
        "Can't use pom properties inside resource directory  tag I have pom.xml with following snippet:\n\n<build>\n   <sourceDirectory>src\\JavaSource</sourceDirectory>\n   <resources>\n       <resource>\n      <directory>src\\JavaSource</directory>\n\nand it works.\nIf I use property like this\n\n<build>\n   <sourceDirectory>src\\JavaSource</sourceDirectory>\n   <resources>\n       <resource>\n      <directory>${project.build.sourceDirectory}</directory>\n\n\nit doesn't work. "
    ],
    [
        "MNG-4310",
        "MNG-1906",
        "Can't use property names in resources element {code:xml}\n<build>\n    <resources>\n         <resource>\n            <directory>target/gen/doclet/WEB-INF/classes/META-INF</directory>\n            <filtering>true</filtering>\n            <targetPath>META-INF</targetPath>\n         </resource>            \n    </resources>\n</build>\n{code} \n\nI can't use {{${project.build.directory}}} instead of _target_ in the _directory_ element in the above snippet.  Same is true for other Maven and project properties.",
        "properties not being replaced before being passed to plugins (specificaly the surefire plugin) in the attached foo-root proj run mvn package from foo-root and you will see that ${project.build.directory} is not substituted but ${project.x.build.directory} is.\n\nI spent a bit of time chatting with jdcasey on irc on Dec-07-2005 about this issue if that helps."
    ],
    [
        "MNG-2686",
        "MNG-2101",
        "POM dependency scope auto-downgrades from provided to test My project has a dependency on:\nXXX:YYY:jar:1.0-SNAPSHOT (selected for null)\nwith transitive dependency:\ncommons-logging:commons-logging:jar:1.1:test\nand again triggering a transitive dependency on:\njavax.servlet:servlet-api:jar:2.3:test (selected for test)\n\nLater on the project also has a dependency:\nAAA:BBB-container:pom:1.0-SNAPSHOT:provided (selected for provided)\nI use this to represent the dependencies provided by the J2EE container in which the application will be deployed.\nThis triggers via:\ntomcat:catalina:jar:5.5.15:provided (selected for provided)\nthe following funny thing:\njavax.servlet:servlet-api:jar:2.4:provided (removed - nearer found: 2.3)\n\nLeaving me without servlet-api for the compile scope.",
        "transitive dependency: test stronger than provided Suppose I have artifacts A, B, C and D.\nIn artifact D you initially have:\n    D ---provided---> B ---compile---> A\nwhere B has a compile dependency on A.\nThis allows you to compile code agains A.\nIf you they add:\n    D ---test---> C ---compile---> A\nwhere C also has a compile dependency on A, then A all of the sudden becomes 'test visible' and you can no longer compile against it.\n\n\n"
    ],
    [
        "MNG-2694",
        "MNG-2626",
        "property in plugin dependency's systemPath is not resolved and causes \"system-scoped dependency must specify an absolute path systemPath.\" In a plugin pom.xml, \n\n<dependency>\n    <groupId>weblogic</groupId>\n    <artifactId>weblogic</artifactId>\n    <version>[9.0,)</version>\n    <scope>system</scope>\n    <systemPath>${wl.home}/server/lib/weblogic.jar</systemPath>\n</dependency>\n\nIn ~/.m2/setting.xml,\n\n<settings>\n  <profiles>\n    <profile>\n        <id>weblogicConfig</id>\n      <activation>\n        <activeByDefault/>\n      </activation>\n        <properties>\n            <wl.home>c:/java/bea-9.2/weblogic92</wl.home>\n        </properties>\n    </profile>\n  </profiles>\n<activeProfiles>\n    <activeProfile>weblogicConfig</activeProfile>\n  </activeProfiles>\n</settings>\n\nWhen build the plugin, it works fine.\n\nIn a project that uses this plugin, when build, it causes the following error:\n\nProject ID: org.codehaus.mojo:weblogic-maven-plugin\nPOM Location: Artifact [org.codehaus.mojo:weblogic-maven-plugin:pom:2.9.0-SNAPSHOT]\nValidation Messages:\n\n    [0]  For dependency Dependency {groupId=weblogic, artifactId=weblogic, version=[9.0,), type=jar}: system-scoped dependency must specify an absolute path systemPath.\n",
        "System scope dependencies in parent POM cause validation warnings for most plugins and errors in assembly plugin When system scope dependencies are in a parent POM and the systemPath for those variables contain a variable to be interpolated as a root path, maven throws off a lot of spurious warnings that the POM does not validate because system paths need to be absolute.  An example of this in a parent POM (where ${jboss.home} is defined in ~/.m2/settings.xml):\n\n{code:xml}\n\t\t<dependency>\n\t\t\t<groupId>jboss</groupId>\n\t\t\t<artifactId>activation</artifactId>\n\t\t\t<version>4.0.4.GA</version>\n\t\t\t<scope>system</scope>\n\t\t\t<systemPath>${jboss.home}/server/default/lib/activation.jar</systemPath>\n\t\t</dependency>\n{code}\n\nIn discussing this with John and Jason online, both apparently have generic implementations that can go in at some point, but this is something I would like to get into 2.0.5.  The patch is ~25 lines of new code with one replaced.  \n\nIt's marked as blocker because we use the assembly plugin, which fails the build on the validation problem where most other plugins just enumerate every system scope dependency.  For now, I will distribute the patched version around the company though :-)\n\nthanks"
    ],
    [
        "MNG-2699",
        "MNG-2692",
        "2.1 mvn.bat is broken because classworlds was renamed (patch attached) No karma in core, only plugins so here's the patch. The line was looking for classworlds-* when it's now plexus-classworlds-*",
        "Classworlds launcher can't be found My *first ever* bug report to an open source project! (be gentle, please :-)\n\nHaving built Maven 2.1-SNAPSHOT using Maven and a clean repository, I get the following error:\n\nC:\\maven\\components\\maven-cli>mvn -v\nException in thread \"main\" java.lang.NoClassDefFoundError: org/codehaus/plexus/classworlds/launcher/Launcher\n\nResolved to change reference to classworlds jar in mvn.bat to plexus-classwords jar. Patch to mvn.bat included.\n\nUnsure as the priority of this issue. As it is Maven 2.1 can't be run on Windows without this change. Is this considered a \"blocker\"?"
    ],
    [
        "MNG-2715",
        "MNG-2714",
        "Maven does not comply to XML rules regarding prefixes. I am new to Maven and have been trying to learn how to create a simple project.\nLet me walk through my scenario of creating a pom.xml file:\n1. I bind the {http://maven.apache.org/POM/4.0.0} namespace (defined at \"http://maven.apache.org/maven-v4_0_0.xsd\") to Java classes using an XML Binding solution.\n2. I use the bound classes to create a simple <project/> as one would expect to see in a pom.xml file.\n3. I marshal the bound Java objects into xml and write it into pom.xml. Here is the xml I use:\n<ns1:project\n\txmlns:ns1=\"http://maven.apache.org/POM/4.0.0\">\n\t<ns1:modelVersion>4.0.0</ns1:modelVersion>\n\t<ns1:groupId>com.myapp</ns1:groupId>\n\t<ns1:artifactId>sample-project</ns1:artifactId>\n\t<ns1:name>Sample Maven Project</ns1:name>\n\t<ns1:version>1.0</ns1:version>\n\t<ns1:developers>\n\t\t<ns1:developer>\n\t\t\t<ns1:id>ssafris</ns1:id>\n\t\t\t<ns1:name>Seva Safris</ns1:name>\n\t\t</ns1:developer>\n\t</ns1:developers>\n\t<ns1:build>\n\t\t<ns1:sourceDirectory>${basedir}/src/java</ns1:sourceDirectory>\n\t</ns1:build>\n</ns1:project>\n4. I run mvn, and am promptly given a \"Not a v4.0.0 POM.\" exception.\n\nTracing through Maven's source, I went to the exact location of the exception in DefaultMavenProjectBuilder.java. On line 1297 it has:\n\nif ( modelSource.indexOf( \"<modelVersion>4.0.0\" ) < 0 )\n{\n    throw new InvalidProjectModelException( projectId, pomLocation, \"Not a v4.0.0 POM.\" );\n}\n\nSince modelSource is checked explicitly for <modelVersion[...], my <project/> xml as shown above will fail this test because it has: <ns1:modelVersion[...].\n\nThis is most definitely a bug in Maven and should be fixed as soon as possible. The workaround is to use a xmlns=\"http://maven.apache.org/POM/4.0.0\" and define all elements without a prefix. However, my use of xmlns:ns1=\"http://maven.apache.org/POM/4.0.0\" should not break Maven as it is not merely legal by xml conventions, but is also a better practice for xml documents.\n\nI hope you see the importance of getting this bug fixed: My use of a XML Binding solution to bind Maven's xml to Java allows me a strongly-typed level of indirection that will deterministically create proper xml that will validate successfully. If this bug is not fixed, then this level of indirection is not possible (or very very very difficult because the XML Binding solution would have to be hacked to use the xmlns=\"[...]\" convention). I have only found this one instance of where the bug is obvious, but perhaps there are more locations in Maven where the same kind of error can occur.\n\nThank you for your time, and I hope you consider this issue as seriously as I do.\n\nSincerely,\n\nSeva Safris",
        "Maven does not comply to XML rules regarding prefixes. I am new to Maven and have been trying to learn how to create a simple project.\nLet me walk through my scenario of creating a pom.xml file:\n1. I bind the {http://maven.apache.org/POM/4.0.0} namespace (defined at \"http://maven.apache.org/maven-v4_0_0.xsd\") to Java classes using an XML Binding solution.\n2. I use the bound classes to create a simple <project/> as one would expect to see in a pom.xml file.\n3. I marshal the bound Java objects into xml and write it into pom.xml. Here is the xml I use:\n<ns1:project\n\txmlns:ns1=\"http://maven.apache.org/POM/4.0.0\">\n\t<ns1:modelVersion>4.0.0</ns1:modelVersion>\n\t<ns1:groupId>com.myapp</ns1:groupId>\n\t<ns1:artifactId>sample-project</ns1:artifactId>\n\t<ns1:name>Sample Maven Project</ns1:name>\n\t<ns1:version>1.0</ns1:version>\n\t<ns1:developers>\n\t\t<ns1:developer>\n\t\t\t<ns1:id>ssafris</ns1:id>\n\t\t\t<ns1:name>Seva Safris</ns1:name>\n\t\t</ns1:developer>\n\t</ns1:developers>\n\t<ns1:build>\n\t\t<ns1:sourceDirectory>${basedir}/src/java</ns1:sourceDirectory>\n\t</ns1:build>\n</ns1:project>\n4. I run mvn, and am promptly given a \"Not a v4.0.0 POM.\" exception.\n\nTracing through Maven's source, I went to the exact location of the exception in DefaultMavenProjectBuilder.java. On line 1297 it has:\n"
    ],
    [
        "MNG-2716",
        "MNG-1928",
        "pluginRepositories seems to be ignored when running a goal without pom.xml I wanted to try the maven-eclipse-plugin, the goal make-artifacts.\n\nmvn eclipse:make-artifacts\n\nHowever, make-artifacts goal is not in eclipse plugin 2.2, only in 2.3-SNAPSHOT.\nSo followed guides and added pluginRepositry section into my ~/.m2/settings.xml (attached)\nso that I can use an apache plugin snapshot repository.\n\nThen I tried:\n\nmvn org.apache.maven.plugins:maven-eclipse-plugin:2.3-SNAPSHOT:make-artifacts -P apache\n\nBut maven did not try to load the snapshot plugin:\n\n...\n[INFO] Failed to resolve artifact.\n\nGroupId: org.apache.maven.plugins\nArtifactId: maven-eclipse-plugin\nVersion: 2.3-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:eclipse:pom:2.3-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\nWe can see that maven did not try the pluginRep. specified in settings.xml.\n\nThe I found out that if I run the command above in the folder where pom.xml exists, it works.\n(I created an initial project by archetype plugin.)\n\nSo it seems to me that this is a (maybe small) bug. Usually, people run maven in folder where pom.xml exists, most goals require it.\nHowever, certain goals can run without pom.xml (such as eclipse:make-artifacts) and here it seems to me that maven ignored my settings (pluginRepositories).\n",
        "ignores pluginRepository in settings.xml, honors in POM if specified in the POM as a plugin repo, maven can use the team.andromda.org/maven2 repo for finding, downloading, and installing plugins. \nhowever, settings.xml ignores plugin repos and only checks central if the plugin has never been downloaded before. \n\nfor instance. if settings.xml has a pluginRepository entry for team.andromda.org/maven2 then:\nmvn andromdapp:generate \nshould download the andromdapp plugin from our repo. but it doesn't. only central is checked and it fails to find the plugin."
    ],
    [
        "MNG-2716",
        "MNG-2236",
        "pluginRepositories seems to be ignored when running a goal without pom.xml I wanted to try the maven-eclipse-plugin, the goal make-artifacts.\n\nmvn eclipse:make-artifacts\n\nHowever, make-artifacts goal is not in eclipse plugin 2.2, only in 2.3-SNAPSHOT.\nSo followed guides and added pluginRepositry section into my ~/.m2/settings.xml (attached)\nso that I can use an apache plugin snapshot repository.\n\nThen I tried:\n\nmvn org.apache.maven.plugins:maven-eclipse-plugin:2.3-SNAPSHOT:make-artifacts -P apache\n\nBut maven did not try to load the snapshot plugin:\n\n...\n[INFO] Failed to resolve artifact.\n\nGroupId: org.apache.maven.plugins\nArtifactId: maven-eclipse-plugin\nVersion: 2.3-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:eclipse:pom:2.3-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\nWe can see that maven did not try the pluginRep. specified in settings.xml.\n\nThe I found out that if I run the command above in the folder where pom.xml exists, it works.\n(I created an initial project by archetype plugin.)\n\nSo it seems to me that this is a (maybe small) bug. Usually, people run maven in folder where pom.xml exists, most goals require it.\nHowever, certain goals can run without pom.xml (such as eclipse:make-artifacts) and here it seems to me that maven ignored my settings (pluginRepositories).\n",
        "DefaultMavenProjectBuilder.buildStandaloneSuperProject() should include a ProfileManager that includes active profiles from settings.xml I have a custom plugin that performs JMX operations using properties defined in a profile. I have defined an active profile in the settings.xml that specifies properties that the plugin uses and everything works fine when a POM is present. Now I would like the plugin to work from any directory and have added the plugin annotation \"requiresProject=false\" to it. \n\nIf I run the plugin in a directory without a POM the profile properties from settings.xml are never loaded. After performing some debugging I have determined that the default super-pom's model  that is used when no POM xml file is available does not contain the profile properties defined in settings.xml while if a POM.xml is available the settings.xml profiles are loaded into the POM.\n\nThis all appears to boil down to the lack of a ProfileManager parameter to thebuildStandaloneSuperProject method defined in the  MavenProjectBuilder interface. While  DefaultMaven's invocation of the component has a globalProfileManager available (with the active settings profiles set) it cannot be passed into the MavenProjectBuilder component. Alternatively, If the DefaultMavenProjectBuilder had the Settings component injected into it could pass it into the constructor of the DefaultProfileManager instance it creates and then the DefaultProfileManager would load the active profiles into the POM.\n\nBy enabling this fix it would make plugins useful for management tasks, for example starting or stoping an application server.\n"
    ],
    [
        "MNG-2716",
        "MNG-3099",
        "pluginRepositories seems to be ignored when running a goal without pom.xml I wanted to try the maven-eclipse-plugin, the goal make-artifacts.\n\nmvn eclipse:make-artifacts\n\nHowever, make-artifacts goal is not in eclipse plugin 2.2, only in 2.3-SNAPSHOT.\nSo followed guides and added pluginRepositry section into my ~/.m2/settings.xml (attached)\nso that I can use an apache plugin snapshot repository.\n\nThen I tried:\n\nmvn org.apache.maven.plugins:maven-eclipse-plugin:2.3-SNAPSHOT:make-artifacts -P apache\n\nBut maven did not try to load the snapshot plugin:\n\n...\n[INFO] Failed to resolve artifact.\n\nGroupId: org.apache.maven.plugins\nArtifactId: maven-eclipse-plugin\nVersion: 2.3-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:eclipse:pom:2.3-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\nWe can see that maven did not try the pluginRep. specified in settings.xml.\n\nThe I found out that if I run the command above in the folder where pom.xml exists, it works.\n(I created an initial project by archetype plugin.)\n\nSo it seems to me that this is a (maybe small) bug. Usually, people run maven in folder where pom.xml exists, most goals require it.\nHowever, certain goals can run without pom.xml (such as eclipse:make-artifacts) and here it seems to me that maven ignored my settings (pluginRepositories).\n",
        "Profiles ignored when working with non-projects (such as archetype:create) Several conditions have to be met to show this bug.\n\n1) Be in an environment that does not have access to repo1.maven.org, (such as a corporate environment)\n2) Have no content in your local repository (a fresh install of maven 2.0.4)\n3) Attempt to use a plugin that has no project requirement (such as archetype:create)\n\nThe plugin fails because access to repo1.maven.org cannot be accessed.\n\nRecommended solution:\nCreate a settings.xml profile that changes the location of the 'central' repository to point to an internal resource (such as a maven-proxy installation).\n\n<settings>\n  <profiles>\n    <profile>\n      <id>use_internal</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n\n  <activeProfiles>\n    <activeProfile>use_internal</activeProfile>\n  </activeProfiles>\n</settings>\n\nTry again.\nStill fails.\n\nThe reason is that the default behaviour for non-project execution is to use the maven super pom, however there is a bug with that flow that  does not allow for the merging of the settings.xml profiles."
    ],
    [
        "MNG-2720",
        "MNG-2151",
        "Multiproject dependencies not accurate for project.compileClasspathElements when run from root project In a plugin I wrote (jspc), needs the dependency jars.  It asks for this with the request for the project.compileClasspathElements.  In a multiproject environment, when each project is built individually, it seems correct.  Example (when run with -X ina subproject dir) showing classpath:\n\n/Users/mbp/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar\n/Users/mbp/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar\n/Users/mbp/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar\n/Users/mbp/.m2/repository/tldtestapp/testexttld/1/testexttld-1.jar  <-----------------NOTICE HERE - THIS IS AN ARTIFACT FROM ANOTHER SUBPROJECT\n/Users/mbp/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar]\n\nWhen it is run from the Top level/Root project...here is the output:\n\nUsers/mbp/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar\n/Users/mbp/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar\n/Users/mbp/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar\n/Users/mbp/Desktop/jsp-example/TestTldProject/target/classes  <----------------NOTICE - THE JAR IS NOT BEING ASKED FOR, BUT A CLASSES DIR INSTEAD\n/Users/mbp/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar]\n\nThe second project has a dependency on the testexttld-1.jar because it contains tag libs which must be wrapped in a jar.  When run from a top level, it uses the other project's classes directory instead of the JAR artifact.  WIth JSPC and taglibs, this makes it so it cannot work.  If I have a dependency on a jar, that jar should be the dependency as expected and not a classes directory.  For full explanation and example see here:\n\nhttp://jira.codehaus.org/browse/MJSPC-4\n\n",
        "classpath used to build a module affects compile classpath for building another module Here's my project layout:\n\ndaytrader/\n  ejb/\n  streamer/\n\nwhere streamer depends on the ejb-client produced by the ejb/ build.\n\nIf I do a \"mvn install\" in daytrader/ the build works. If I do it in streamer/ it fails.\n\nAfter investigation the problem was that the ejb-client produced by the ejb module was excluding by default a class required to compile streamer/.\n\nThe build when run at the top level should have failed when building the streamer/ module."
    ],
    [
        "MNG-2745",
        "MNG-2653",
        "Do not allow System properties to be interpolated in the POM There is an XML library which is inserting a property version=2.4.1 and it is completely screwing up the interpolation of ${version} in any POM. \n\n1) We should force fully qualified references anyway so ${pom.version} and not allow ${version}\n2) Totally shut out System properties from all internal operations. We can still take -D from the command line and turn them into execution properties but we should just ignore all Sytem properties in the core.",
        "using ${version} for subproject dependencies doesn't work (maven uses 2.4.1 version instead) My project is a ear multiproject. It has 5 modules, that have internal dependencies. For example web module needs app and type modules. \n\nI usually use following declaration for this kind of dependencies. Note that I'm using ${version} in dependency. In result I'm requesting foo-type jar of the same version as current project.\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>foo</groupId>\n    <artifactId>foo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n  </parent>\n  <artifactId>foo-app</artifactId>\n\n  <dependencies>\n    <dependency>\n      <groupId>foo</groupId>\n      <artifactId>foo-type</artifactId>\n      <version>${version}</version>\n    </dependency>\n  </dependencies>\n</project>\n\nThis works from commandline, but doesn't work in eclipse plugin. I get following message:\n\n\"Unable to download the artifact from any repository foo:foo-type-2.4.1.jar\"\n\nMaven (or maven plugin) tries to download foo-type module in very strange version (instead 0.0.1-SNAPSHOT)! \n\n\nI've attached simple multimodule project."
    ],
    [
        "MNG-2745",
        "MNG-2339",
        "Do not allow System properties to be interpolated in the POM There is an XML library which is inserting a property version=2.4.1 and it is completely screwing up the interpolation of ${version} in any POM. \n\n1) We should force fully qualified references anyway so ${pom.version} and not allow ${version}\n2) Totally shut out System properties from all internal operations. We can still take -D from the command line and turn them into execution properties but we should just ignore all Sytem properties in the core.",
        "${project.*} are interpreted in the wrong place If a plugin use ${project.version}, this parameter is interpreted with the version of the current project and not the plugin version. I think we have the same pb with dependencies and other ${project.*}\n\nFor a plugin in version 2.0 used in a project in version 1.0-SNAPSHOT, ${project.version} used in the plugin will be interpreted as 1.0-SNAPSHOT instead of 2.0"
    ],
    [
        "MNG-2745",
        "MNG-2651",
        "Do not allow System properties to be interpolated in the POM There is an XML library which is inserting a property version=2.4.1 and it is completely screwing up the interpolation of ${version} in any POM. \n\n1) We should force fully qualified references anyway so ${pom.version} and not allow ${version}\n2) Totally shut out System properties from all internal operations. We can still take -D from the command line and turn them into execution properties but we should just ignore all Sytem properties in the core.",
        "POM interpolator treats ${pom.something} like ${something} and prefers system properties The POM interpolator (RegexBasedModelInterpolator) removes all leading \"pom.\", \"project.\" and \"env.\" portions of an expression before evaluating it.  then searching for values happens in the following order: system properties, project properties, pom bean properties.\n\nAn example: Although ${pom.version} is more specific than ${version}, version wins. That's the problem in MNGECLIPSE-20.\n\nIMHO the interpolation strategy should be changed.\n"
    ],
    [
        "MNG-2756",
        "MNG-624",
        "parent resolution is done first before property interpolation Possible problems\n* using properties in the parent tag\n* using proeprties in the repositories tag with the parent being unknown except to that repo\n\nAttach is a sample project whose child project does not get built. ",
        "automatic parent versioning (this may be bumped to 2.1 or even made WON't FIX as it is contentious - see MNG-521)\n\ncurrently, you have to specify the parent version when extending which makes a project stand alone very easily, but has the drawback of being a maintainance problem when you start development on a new version. Tools can help, but it would be nice not to have to rely on them.\n\nOne alternative is to allow the parent version to be omitted, and when it is it is assumed you want the latest. The parent is used from the reactor or the universal source directory. IT may also be read from a LATEST in the repository though this is contentious - it may be better to simply fail in that environment and require builds be in a known checkout structure for building individual projects.\n\nThis also introduces the need for tool support to populate the version on release and deployment for reproducibility."
    ],
    [
        "MNG-2756",
        "MNG-2971",
        "parent resolution is done first before property interpolation Possible problems\n* using properties in the parent tag\n* using proeprties in the repositories tag with the parent being unknown except to that repo\n\nAttach is a sample project whose child project does not get built. ",
        "Variables are not replaced into installed pom file Variables are not replaced into installed pom file.\nHere is a sample pom file\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.xxx.root</groupId>\n\t<artifactId>root</artifactId>\n\t<packaging>pom</packaging>\n\t<version>${prop.version}</version>\n\t<name>My Project</name>\n        ...\n\t<properties>\n\t\t<prop.version>3.0.20</prop.version>\n\t</properties>\n\n</project>\n{code}\nThe installed pom is into $\\{localRepository}/com/xxx/root/root/3.0.20/root-3.0.20.pom\nis the same as the project pom file but the version referenced into the installed pom file is $\\{prop.version} instead of 3.0.20\nwhich creates problem to artifacts depending of this one.\n\nThanks in advance"
    ],
    [
        "MNG-2756",
        "MNG-2569",
        "parent resolution is done first before property interpolation Possible problems\n* using properties in the parent tag\n* using proeprties in the repositories tag with the parent being unknown except to that repo\n\nAttach is a sample project whose child project does not get built. ",
        "Expressions not evaluated inside <parent> The version tag within the parrent  block does not evaluate properties.\nIf I put a Version String directly in there, it works.\nA correctly defined property doesn't."
    ],
    [
        "MNG-2773",
        "MNG-2712",
        "Plugin repositories are chekced for SNAPSHOTS on every run in the 2.0.5 candidate Trussing the mvn process shows that Maven tries to connect to the plugin repository on every run, instead of the daily check.\n\n{code}\n[16:38:50][tlaugstoel@sunw360:monitor-core]$ truss -t connect mvn -Dmaven.test.skip=true install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Unnamed - no.java.monitor:monitor-core:jar:1.0-SNAPSHOT\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] artifact org.apache.maven.plugins:maven-resources-plugin: checking for updates from codehaus-snapshots\n/1:     connect(8, 0xFFBFBAF4, 16, SOV_DEFAULT)         = 0\n/1:     connect(7, 0xFFBFBD98, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-compiler-plugin: checking for updates from codehaus-snapshots\n/1:     connect(7, 0xFFBFBD80, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-surefire-plugin: checking for updates from codehaus-snapshots\n/1:     connect(9, 0xFFBFBD98, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-jar-plugin: checking for updates from codehaus-snapshots\n/1:     connect(7, 0xFFBFBD80, 16, SOV_DEFAULT)         = 0\n[INFO] artifact org.apache.maven.plugins:maven-install-plugin: checking for updates from codehaus-snapshots\n[INFO] [plexus:descriptor {execution: default}]\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[WARNING] \n        Artifact junit:junit:jar:3.8.1:test retains local scope 'test' overriding broader scope 'compile'\n        given by a dependency. If this is not intended, modify or remove the local scope.\n{code}",
        "update policy 'daily' not honored under certain circumstances, the '<updatePolicy>daily</updatePolicy>' isn't honored.\n\nThis is the case where the remote metadata file doesn't exist, or contains <version>RELEASE/LATEST (which should never happen)..\n\nThe timestamp used to compare for the update is 0L, because the local file doesn't exist.\nThen the remote file is retrieved, which also doesn't exist, and no metadatafile is created.\nThe next time an up2date check is done, again against timestamp 0 for a non-existent file.\n\nThis means that if you define a custom snapshot repo in settings.xml or a pom, and you have 500 transitive\ndeps, the repo's that don't have that artifact are consulted 500 times for each mvn invocation.\n\nA build that normally takes about 20 seconds takes more than 10 minutes because of this bug."
    ],
    [
        "MNG-2782",
        "MNG-2653",
        "Version property in dependencies is not expanded correctly The Spring poms, for example spring-beans, version 2.0.2 use the following dependencies:\n<dependency>\n  <groupId>${project.groupId}</groupId> \n  <artifactId>spring-core</artifactId> \n  <version>${project.version}</version> \n</dependency>\nWhich means, they are using variables in the poms. In some cases, these variables are resolved correctly, but in some cases however they are not, causing problems.\n\nImho, it would be better to resolve variables for released poms to avoid any problems (or if variables are allowed, this is a maven bug then)",
        "using ${version} for subproject dependencies doesn't work (maven uses 2.4.1 version instead) My project is a ear multiproject. It has 5 modules, that have internal dependencies. For example web module needs app and type modules. \n\nI usually use following declaration for this kind of dependencies. Note that I'm using ${version} in dependency. In result I'm requesting foo-type jar of the same version as current project.\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>foo</groupId>\n    <artifactId>foo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n  </parent>\n  <artifactId>foo-app</artifactId>\n\n  <dependencies>\n    <dependency>\n      <groupId>foo</groupId>\n      <artifactId>foo-type</artifactId>\n      <version>${version}</version>\n    </dependency>\n  </dependencies>\n</project>\n\nThis works from commandline, but doesn't work in eclipse plugin. I get following message:\n\n\"Unable to download the artifact from any repository foo:foo-type-2.4.1.jar\"\n\nMaven (or maven plugin) tries to download foo-type module in very strange version (instead 0.0.1-SNAPSHOT)! \n\n\nI've attached simple multimodule project."
    ],
    [
        "MNG-2782",
        "MNG-2339",
        "Version property in dependencies is not expanded correctly The Spring poms, for example spring-beans, version 2.0.2 use the following dependencies:\n<dependency>\n  <groupId>${project.groupId}</groupId> \n  <artifactId>spring-core</artifactId> \n  <version>${project.version}</version> \n</dependency>\nWhich means, they are using variables in the poms. In some cases, these variables are resolved correctly, but in some cases however they are not, causing problems.\n\nImho, it would be better to resolve variables for released poms to avoid any problems (or if variables are allowed, this is a maven bug then)",
        "${project.*} are interpreted in the wrong place If a plugin use ${project.version}, this parameter is interpreted with the version of the current project and not the plugin version. I think we have the same pb with dependencies and other ${project.*}\n\nFor a plugin in version 2.0 used in a project in version 1.0-SNAPSHOT, ${project.version} used in the plugin will be interpreted as 1.0-SNAPSHOT instead of 2.0"
    ],
    [
        "MNG-2782",
        "MNG-2651",
        "Version property in dependencies is not expanded correctly The Spring poms, for example spring-beans, version 2.0.2 use the following dependencies:\n<dependency>\n  <groupId>${project.groupId}</groupId> \n  <artifactId>spring-core</artifactId> \n  <version>${project.version}</version> \n</dependency>\nWhich means, they are using variables in the poms. In some cases, these variables are resolved correctly, but in some cases however they are not, causing problems.\n\nImho, it would be better to resolve variables for released poms to avoid any problems (or if variables are allowed, this is a maven bug then)",
        "POM interpolator treats ${pom.something} like ${something} and prefers system properties The POM interpolator (RegexBasedModelInterpolator) removes all leading \"pom.\", \"project.\" and \"env.\" portions of an expression before evaluating it.  then searching for values happens in the following order: system properties, project properties, pom bean properties.\n\nAn example: Although ${pom.version} is more specific than ${version}, version wins. That's the problem in MNGECLIPSE-20.\n\nIMHO the interpolation strategy should be changed.\n"
    ],
    [
        "MNG-2782",
        "MNG-2745",
        "Version property in dependencies is not expanded correctly The Spring poms, for example spring-beans, version 2.0.2 use the following dependencies:\n<dependency>\n  <groupId>${project.groupId}</groupId> \n  <artifactId>spring-core</artifactId> \n  <version>${project.version}</version> \n</dependency>\nWhich means, they are using variables in the poms. In some cases, these variables are resolved correctly, but in some cases however they are not, causing problems.\n\nImho, it would be better to resolve variables for released poms to avoid any problems (or if variables are allowed, this is a maven bug then)",
        "Do not allow System properties to be interpolated in the POM There is an XML library which is inserting a property version=2.4.1 and it is completely screwing up the interpolation of ${version} in any POM. \n\n1) We should force fully qualified references anyway so ${pom.version} and not allow ${version}\n2) Totally shut out System properties from all internal operations. We can still take -D from the command line and turn them into execution properties but we should just ignore all Sytem properties in the core."
    ],
    [
        "MNG-2793",
        "MNG-2792",
        "Snapshot plugins cannot be resolved correctly with java6 With java 6, builds that use snapshot repositories are consistently failing if the snapshots are not available in the local repository.  The error is something like:\n[INFO] ----------------------------------------------------------------------------\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::1 for project: null:maven-site-plugin:maven-plugin:2.0-beta-5 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::1 for project: org.apache.maven.plugins:maven-plugins:pom:1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::1 for project: org.apache.maven:maven-parent:pom:1 from the repository.\n[DEBUG] maven-install-plugin: using locally installed snapshot\n[DEBUG] maven-install-plugin: resolved to version 2.2-SNAPSHOT from repository central\n[DEBUG] Skipping disabled repository central\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: org.apache.maven.plugins:maven-install-plugin\n\nReason: Error getting POM for 'org.apache.maven.plugins:maven-install-plugin' from the repository: Failed to resolve artifact, possibly due to a repository list that is not appropriately equipped for this artifact's metadata.\n  org.apache.maven.plugins:maven-install-plugin:pom:2.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository),\n  central (http://repo1.maven.org/maven2)\n\n\n\n\nIf the artifacts are first downloaded by building with JDK 1.5, everything works fine.\n\n\nAfter investigating, the problem is in the transforms that the maven-artifact-manager.   With JDK 1.5, the order they run is:\norg.apache.maven.artifact.transform.LatestArtifactTransformation\norg.apache.maven.artifact.transform.ReleaseArtifactTransformation\norg.apache.maven.artifact.transform.SnapshotTransformation\n\nbut with Java 6, for some reason, the order is:\n\norg.apache.maven.artifact.transform.SnapshotTransformation\norg.apache.maven.artifact.transform.LatestArtifactTransformation\norg.apache.maven.artifact.transform.ReleaseArtifactTransformation\n\nThe LatestArtifactTransform is what uses to the metadata to determine \nthe \"actual\" version number (for the install plugin, 2.2-SNAPSHOT).  The \nSnapshotTransform then converts that to 2.2-20061118.060401-2 which is what \nis then downloaded.   However, in the java 6 case, the SnapshotTransform is \nrun first and since the version is not a \"SNAPSHOT\" version number, it \ndoesn't do any processing so then the downloading ends up looking for \n2.2-SNAPSHOT, not the full version, which then fails.\n\n\nI chatted with brett_ on IRC about this:\n[09:46:35] <dkulp> OK.  I'm trying to track down why  my builds are failing with JDK 1.6\n[09:46:53] <dkulp> The issue is the transforms are in a different order with 1.6 than 1.5\n[09:47:17] <brett_> yikes\n[09:47:42] <dkulp> With 1.5, its Latest/Release/Snapshot.\n[09:47:46] <brett_> not sure why that would matter. But I guess sorting the transforms consistently would help.\n[09:47:50] <dkulp> With 1.6, it's Snapshot/Latest/Release\n[09:48:06] <brett_> ok, fairly simple to fix in Maven.\n[09:48:10] <dkulp> The Latest needs to be before Snapshot.\n[09:49:08] <dkulp> I tried changing the order of things in the components.xml.   Didn't seem to change anything.   But this is plexus stuff which I don't know anything about.\n[09:49:22] <brett_> hmm, it should be populated as a list\n[09:49:28] <brett_> but maybe the list is backed by a map\n[09:49:35] <dkulp> Yep.   Verified it's and ArrayList\n[09:49:51] <brett_> s/backed/populated by/\n[09:50:48] <dkulp> That would definitely do it.\n[09:51:21] <dkulp> Any hints on where to look?\n[09:51:48] <brett_> oh, I would go into plexus\n[09:51:52] <dkulp> (or how to debug)?\n[09:51:58] <brett_> sorry, wouldn't\n[09:52:13] <brett_> it's changing too much\n[09:52:18] <brett_> 2.0.5 will be stuck with alpha-10\n[09:52:24] <brett_> so, need to work around it in Maven\n[09:53:00] <brett_> perhaps just hack the order in the code, and then fix plexus to honour the order in components.xml in trunk\n[09:54:57] <dkulp> Hmm..    ok.    Is there something plexus will call after setting the List field so I can resort it?\n[09:55:30] <dkulp> Or will adding a \"setArtifactTransformations(List)\" work?\n[09:55:40] <dkulp> (again, not familiar with plexus)\n[09:56:25] <brett_> no, it sets it using private field injection\n[09:57:04] <dkulp> No  optional \"init\" methods or anything that are called after everything is done?\n[09:57:42] <brett_> you can implement Initializable and modify them then\n[09:57:50] <brett_> but you could just as easily do that inside the method using it\n[09:58:08] <dkulp> There are 4 methods using it that are called to resolve every artifact.\n[09:58:24] <dkulp> Sorry, 3.\n[09:58:37] <dkulp> Kind of just wanted to sort once, not for each artifact.\n[09:58:46] <brett_> but the transformations should just exist in one class, and only used in one place, IIRC\n[10:06:46] <dkulp> brett_: thanks.   That actually works.\n\n\nThe attached patch forces the \"Snapshot\" transform to the end of the list.   It's definitely not ideal.   Ideally, plexus would be fixed to honor ordering, but if plexus is in a state of flux, that might not be doable.\n\n\n\n\n\n",
        "When Maven runs Java 6, maven-metadata.xml file is \"corrupted\" When you run Maven under Java 6, the \"maven-metadata.xml\" file that gets written to the remote repository is markedly different from the one generated under Java 5 and earlier. This file is \"corrupted\" in the sense that Maven reports errors about it, and might not be able to locate snapshots as a result. See attachment for an example file; you'd expect to see build numbers or -SNAPSHOTs, but not both at once.\n\nThis issue is described further at http://www.nabble.com/Maven-and-JDK-1.6-t3060866s177.html (originally message only, not the followups). This might be related to MNG-2709, but I don't think it's a duplicate, as it has nothing to do with testing or parents."
    ],
    [
        "MNG-2795",
        "MNG-2749",
        "Classloader problem loading a resource from a build extension Jar : difference between 2.0.4 and (future) 2.0.5 I had a problem when executing the Checkstyle plugin (version 2.1) with the pre-release of Maven 2.0.5. So I dug a bit to see if this could be related to maven core or not, and here is what I found.\n\nI isolated the code that breaks the build in the checkstyle plugin: it happens when the plugin tries to load my Checkstyle configuration file, which is actually located in a JAR that is specified in the build extensions. The code lies in the Locator#resolveLocation() method:\n\n                // Attempt a Resource.\n                 URL url = this.getClass().getClassLoader().getResource( location );\n\nThis code returns null for the \"url\" variable, which in turns breaks the plugin because it doesn't find any configuration file.\n\nI haven't had the time to dig more into it, but I found the following issue that might be related to this problem: \"MNG-2228 : Classloader problem loading jars from build extensions\". Brett and Carlos worked on it and fixed it, so maybe they could tell more about it.\n\nI attached the logs of the execution with Maven 2.0.4 (which works fine) and Maven 2.0.5 (which breaks). I haven't had the time yet to dig further into that problem.",
        "extensions stopped working in 2.0.5-SNAPSHOT We're testing our build with the latest 2.0.5-SNAPSHOT. We use the checkstyle config described here http://people.apache.org/%7Eoching/maven-checkstyle-plugin/examples/multi-module-config.html\nand it works perfectly in 2.0.4. Switching to 2.0.5 causes this to not be available on the classpath anymore."
    ],
    [
        "MNG-2796",
        "MNG-2486",
        "Yet another snapshot/timestamp version resolution problem In the geronimo openejb3 integration we've encountered yet another problem with broken version resolution.  It would be great if the maven team could fix these problems soon: I think that the geronimo and openejb developers have now spent several weeks trying to understand bizarre version resolution errors and trying to find workarounds for them.\n\nHere's what we think the relevant project details are.   Reproducing this problem requires deploying snapshots at different revision numbers so I don't really see how to provide a test project.\n\nopenejb project structure:\n\nbase openejb pom\n\nopenejb container pom, parent is openejb pom.  Snapshot deployed with a timestamped version 3.0-incubating-20070126.103431-21\n\nopenejb server pom, parent is openejb pom.  Snapshot deployed with a timestamped version 3.0-incubating-20070126.103431-20\n  server pom has a dependency on container pom, using this:\n\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.openejb</groupId>\n      <artifactId>container</artifactId>\n      <version>${pom.version}</version>\n      <type>pom</type>\n      <scope>compile</scope>\n    </dependency>\n  </dependencies>\n\n\nSubproject server/openejb-ejbd, parent pom is server.pom.  Snapshot deployed at 3.0-incubating-20070126.103431-20\n\nBoth container and server are pom-packaged projects, i.e. they have no code of their own.\n\nOpenejb builds and deploys fine by itself, and the timestamped versions are as indicated above.\n\ngeronimo-openejb module has a dependency\n\n        <dependency>\n            <groupId>org.apache.openejb</groupId>\n            <artifactId>openejb-ejbd</artifactId>\n        </dependency>\n\nwhose version is supplied in an ancestor dependencyManagement section:\n\n            <dependency>\n                <groupId>org.apache.openejb</groupId>\n                <artifactId>openejb-ejbd</artifactId>\n                <version>${openejbVersion}</version>\n            </dependency>\n\nwhere\n\n        <openejbVersion>3.0-incubating-SNAPSHOT</openejbVersion>\n\n\nWhen we build the geronimo-openejb module in geronimo the build breaks because the incorrect version of openejb container is resolved:\n\nThis appears to be the relevant section of the -X trace, note that after the incorrect non-resolution at -20 container is correctly resolved at -21 a few lines later:\n\n[DEBUG] openejb-client: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:server::3.0-incubating-SNAPSHOT for project: null:openejb-client:jar:3.0-incubating-20070126.103431-20 from the repository.\n[DEBUG] server: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:openejb::3.0-incubating-SNAPSHOT for project: null:server:pom:null from the repository.\n[DEBUG] openejb: resolved to version 3.0-incubating-20070126.103431-22 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache:apache::3 for project: org.apache.openejb:openejb:pom:3.0-incubating-SNAPSHOT from the repository.\n[DEBUG]     org.apache.openejb:openejb-client:jar:3.0-incubating-SNAPSHOT:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.specs:specs::1.2 for project: null:geronimo-ejb_3.0_spec:jar:1.0-M1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis.config:project-config::1.1 for project: org.apache.geronimo.specs:specs:pom:1.2 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis.config:config::1.1 for project: null:project-config:pom:null from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis:genesis::1.1 for project: org.apache.geronimo.genesis.config:config:pom:null from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::3 for project: org.apache.geronimo.genesis:genesis:pom:1.1 from the repository.\n[DEBUG]       org.apache.geronimo.specs:geronimo-ejb_3.0_spec:jar:1.0-M1:compile (removed - nearer found: 1.0)\n[DEBUG] Artifact not found - using stub model: System is offline.\n\n  org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20\n\n\n[DEBUG] Using defaults for missing POM org.apache.openejb:container:pom:3.0-incubating-SNAPSHOT:compile\n[DEBUG]       org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-ejb_3.0_spec:jar:1.0-M1:compile (removed - nearer found: 1.0)\n[DEBUG]     org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20:compile (selected for compile)\n[DEBUG] Skipping disabled repository tomcat-m2-repo\n[DEBUG] Skipping disabled repository apache-incubator\n[DEBUG] Skipping disabled repository codehaus\n[DEBUG] Skipping disabled repository central\n[DEBUG] openejb-core: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:container::3.0-incubating-SNAPSHOT for project: null:openejb-core:jar:3.0-incubating-20070126.103431-20 from the repository.\n[DEBUG] Skipping disabled repository tomcat-m2-repo\n[DEBUG] Skipping disabled repository apache-incubator\n[DEBUG] Skipping disabled repository codehaus\n[DEBUG] Skipping disabled repository central\n[DEBUG] container: resolved to version 3.0-incubating-20070126.103431-21 from repository apache.snapshots\n[\n\nThe error at the end of the build is:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nMissing:\n----------\n1) org.apache.openejb:container:pom:3.0-incubating-SNAPSHOT\n  Path to dependency: \n  \t1) org.apache.geronimo.modules:geronimo-openejb:jar:2.0-M2-SNAPSHOT\n  \t2) org.apache.openejb:openejb-ejbd:jar:3.0-incubating-SNAPSHOT\n  \t3) org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20\n\n----------\n1 required artifact is missing.\n\nfor artifact: \n  org.apache.geronimo.modules:geronimo-openejb:jar:2.0-M2-SNAPSHOT\n...\n...\n\nChanging the ${pom.version} to 3.0-incubating-SNAPSHOT fixes the issue as apparently does defining a property\n\n<version>3.0-incubating-SNAPSHOT</version> and replacing ${pom.version} with ${version}\n\n---------------------------------------\nThere are a lot of possibly related issues:\nMNG-2339\nMNG-2486\nMNG-2647\nMNG-2651\nMNG-2653\nMNG-2756\nMNG-2782\n\n",
        "${project.version} evaluated to timestamped version if referring to SNAPSHOT when projects specify dependencyManagement sections with a shorthand version notation using the current project version (using ${project.version}) the version resolved will be that of the POM in which the dependencyManagement section is specified. If this POM is a snapshot, these dependency specifications will get the timestamp/buildnumber of that POM, instead of the actual one used when the dependency it references gets deployed.\n\nWe should look at strategies for limiting or eliminating this practice, or else (somehow) pulling the real timestamp/buildnumber for that artifact from the reactor...in order to make these deps transitively resolvable for users."
    ],
    [
        "MNG-2796",
        "MNG-2647",
        "Yet another snapshot/timestamp version resolution problem In the geronimo openejb3 integration we've encountered yet another problem with broken version resolution.  It would be great if the maven team could fix these problems soon: I think that the geronimo and openejb developers have now spent several weeks trying to understand bizarre version resolution errors and trying to find workarounds for them.\n\nHere's what we think the relevant project details are.   Reproducing this problem requires deploying snapshots at different revision numbers so I don't really see how to provide a test project.\n\nopenejb project structure:\n\nbase openejb pom\n\nopenejb container pom, parent is openejb pom.  Snapshot deployed with a timestamped version 3.0-incubating-20070126.103431-21\n\nopenejb server pom, parent is openejb pom.  Snapshot deployed with a timestamped version 3.0-incubating-20070126.103431-20\n  server pom has a dependency on container pom, using this:\n\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.openejb</groupId>\n      <artifactId>container</artifactId>\n      <version>${pom.version}</version>\n      <type>pom</type>\n      <scope>compile</scope>\n    </dependency>\n  </dependencies>\n\n\nSubproject server/openejb-ejbd, parent pom is server.pom.  Snapshot deployed at 3.0-incubating-20070126.103431-20\n\nBoth container and server are pom-packaged projects, i.e. they have no code of their own.\n\nOpenejb builds and deploys fine by itself, and the timestamped versions are as indicated above.\n\ngeronimo-openejb module has a dependency\n\n        <dependency>\n            <groupId>org.apache.openejb</groupId>\n            <artifactId>openejb-ejbd</artifactId>\n        </dependency>\n\nwhose version is supplied in an ancestor dependencyManagement section:\n\n            <dependency>\n                <groupId>org.apache.openejb</groupId>\n                <artifactId>openejb-ejbd</artifactId>\n                <version>${openejbVersion}</version>\n            </dependency>\n\nwhere\n\n        <openejbVersion>3.0-incubating-SNAPSHOT</openejbVersion>\n\n\nWhen we build the geronimo-openejb module in geronimo the build breaks because the incorrect version of openejb container is resolved:\n\nThis appears to be the relevant section of the -X trace, note that after the incorrect non-resolution at -20 container is correctly resolved at -21 a few lines later:\n\n[DEBUG] openejb-client: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:server::3.0-incubating-SNAPSHOT for project: null:openejb-client:jar:3.0-incubating-20070126.103431-20 from the repository.\n[DEBUG] server: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:openejb::3.0-incubating-SNAPSHOT for project: null:server:pom:null from the repository.\n[DEBUG] openejb: resolved to version 3.0-incubating-20070126.103431-22 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache:apache::3 for project: org.apache.openejb:openejb:pom:3.0-incubating-SNAPSHOT from the repository.\n[DEBUG]     org.apache.openejb:openejb-client:jar:3.0-incubating-SNAPSHOT:compile (selected for compile)\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.specs:specs::1.2 for project: null:geronimo-ejb_3.0_spec:jar:1.0-M1 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis.config:project-config::1.1 for project: org.apache.geronimo.specs:specs:pom:1.2 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis.config:config::1.1 for project: null:project-config:pom:null from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.geronimo.genesis:genesis::1.1 for project: org.apache.geronimo.genesis.config:config:pom:null from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::3 for project: org.apache.geronimo.genesis:genesis:pom:1.1 from the repository.\n[DEBUG]       org.apache.geronimo.specs:geronimo-ejb_3.0_spec:jar:1.0-M1:compile (removed - nearer found: 1.0)\n[DEBUG] Artifact not found - using stub model: System is offline.\n\n  org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20\n\n\n[DEBUG] Using defaults for missing POM org.apache.openejb:container:pom:3.0-incubating-SNAPSHOT:compile\n[DEBUG]       org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20:compile (selected for compile)\n[DEBUG]     org.apache.geronimo.specs:geronimo-ejb_3.0_spec:jar:1.0-M1:compile (removed - nearer found: 1.0)\n[DEBUG]     org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20:compile (selected for compile)\n[DEBUG] Skipping disabled repository tomcat-m2-repo\n[DEBUG] Skipping disabled repository apache-incubator\n[DEBUG] Skipping disabled repository codehaus\n[DEBUG] Skipping disabled repository central\n[DEBUG] openejb-core: resolved to version 3.0-incubating-20070126.103431-20 from repository apache.snapshots\n[DEBUG] Retrieving parent-POM: org.apache.openejb:container::3.0-incubating-SNAPSHOT for project: null:openejb-core:jar:3.0-incubating-20070126.103431-20 from the repository.\n[DEBUG] Skipping disabled repository tomcat-m2-repo\n[DEBUG] Skipping disabled repository apache-incubator\n[DEBUG] Skipping disabled repository codehaus\n[DEBUG] Skipping disabled repository central\n[DEBUG] container: resolved to version 3.0-incubating-20070126.103431-21 from repository apache.snapshots\n[\n\nThe error at the end of the build is:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nMissing:\n----------\n1) org.apache.openejb:container:pom:3.0-incubating-SNAPSHOT\n  Path to dependency: \n  \t1) org.apache.geronimo.modules:geronimo-openejb:jar:2.0-M2-SNAPSHOT\n  \t2) org.apache.openejb:openejb-ejbd:jar:3.0-incubating-SNAPSHOT\n  \t3) org.apache.openejb:container:pom:3.0-incubating-20070126.103431-20\n\n----------\n1 required artifact is missing.\n\nfor artifact: \n  org.apache.geronimo.modules:geronimo-openejb:jar:2.0-M2-SNAPSHOT\n...\n...\n\nChanging the ${pom.version} to 3.0-incubating-SNAPSHOT fixes the issue as apparently does defining a property\n\n<version>3.0-incubating-SNAPSHOT</version> and replacing ${pom.version} with ${version}\n\n---------------------------------------\nThere are a lot of possibly related issues:\nMNG-2339\nMNG-2486\nMNG-2647\nMNG-2651\nMNG-2653\nMNG-2756\nMNG-2782\n\n",
        "Version not inherited for SNAPSHOT version I have the parent module which defines 2 modules. In the modules, the version is inherited from the parent. If I am working on a SNAPSHOT version, the child modules get the timestamp version instead of what was given to parent.\nIf you have a look at the attachements, the problem is that module1 version in deployed pom will be something like 1234567.123456-7 and when searching for dependent module2 version, will fail because it will try to download a released version 1234567.123456-7 of module 2.\nOnly this seem to be a bug to me, but this is even stranger considering the version of module2 is defined in dependecyManagement of parent pom with ${project.version}. This project.version is correct (3.4.0_SNAPSHOT) in parent pom !"
    ],
    [
        "MNG-2809",
        "MNG-1775",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-2809",
        "MNG-2363",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory."
    ],
    [
        "MNG-2809",
        "MNG-2627",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile."
    ],
    [
        "MNG-2818",
        "MNG-2025",
        "maven 2 requires a UTF-8 locale to build properly When I was building Apache's dbutils with maven 2, I ran into a problem with pom.xml parsing.  It turns out that the problem is due to me not having a UTF-8 locale.  I've worked around it, but I thought you might like to know (either to change that or for the sake of documentation).  Thanks!",
        "POM is still not read using the right encoding IIRC XML standard says that default encoding is UTF-8 for xml files\n\nThat can be overriden with \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\nBut files without header saved as UTF8 are not parsed in some systems (eg windows, solaris), while files saved as other encoding (I believe it was ansi) break under a Mac mini with yellowdog linux"
    ],
    [
        "MNG-2818",
        "MNG-2057",
        "maven 2 requires a UTF-8 locale to build properly When I was building Apache's dbutils with maven 2, I ran into a problem with pom.xml parsing.  It turns out that the problem is due to me not having a UTF-8 locale.  I've worked around it, but I thought you might like to know (either to change that or for the sake of documentation).  Thanks!",
        "The Maven 2.0.2 XML parser fails to parse a UTF-8 POM that begins with the optional byte-order mark. The Byte-Order mark is optional, and discouraged in the UTF-8 encoding; but the Unicode specification is clear that it is allowed -- if you read the Unicode Standard v4, section 2.6, and Table 2.3, and section 15.9, and table 15.3; it is clear that the BOM is allowed at the start of a UTF-8 file.\n\nIt so happens that this is the way Windows NotePad saves files when you select UTF-8; and Maven will not parse it.  I'll attach a small POM saved this way, and I'll put it into a ZIP file to hopefully preserve the encoding.  Here is the Maven output:\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\nPOM Location: C:\\Documents and Settings\\Coco\\Desktop\\pom.xml\n\nReason: Parse error reading POM. Reason: only whitespace content allowed before start tag and not \\u\nef (position: START_DOCUMENT seen \\uef... @1:1)\n\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Parse error reading POM. Reason: only whitespace c\nontent allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.InvalidProjectModelException: Parse error reading POM. Reason: o\nnly whitespace content allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef...\n@1:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1134)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1094)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFile(DefaultMavenProje\nctBuilder.java:289)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java\n:274)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n        ... 11 more\nCaused by: org.codehaus.plexus.util.xml.pull.XmlPullParserException: only whitespace content allowed\n before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.codehaus.plexus.util.xml.pull.MXParser.parseProlog(MXParser.java:1516)\n        at org.codehaus.plexus.util.xml.pull.MXParser.nextImpl(MXParser.java:1392)\n        at org.codehaus.plexus.util.xml.pull.MXParser.next(MXParser.java:1090)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(MavenXpp3Reader.java:4545)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1130)\n        ... 17 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Feb 08 21:14:03 EST 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n"
    ],
    [
        "MNG-2818",
        "MNG-2254",
        "maven 2 requires a UTF-8 locale to build properly When I was building Apache's dbutils with maven 2, I ran into a problem with pom.xml parsing.  It turns out that the problem is due to me not having a UTF-8 locale.  I've worked around it, but I thought you might like to know (either to change that or for the sake of documentation).  Thanks!",
        "the encoding parameter in xml declaration of POM is ignored  DefaultMavenProjectBuilder reads POM in system default character encoding, and the encoding parameter in xml declartion is ignored.\nto fix this problem, We should\n-  fix  modello-plugin-xpp3 to use the xml parser which is able to handle the encoding parameter properly\n- regenerate maven-model using fixed modello-plugin-xpp3\n- fix DefaultMavenProjectBuilder to use regenerated maven-model properly.\n"
    ],
    [
        "MNG-2818",
        "MNG-2618",
        "maven 2 requires a UTF-8 locale to build properly When I was building Apache's dbutils with maven 2, I ran into a problem with pom.xml parsing.  It turns out that the problem is due to me not having a UTF-8 locale.  I've worked around it, but I thought you might like to know (either to change that or for the sake of documentation).  Thanks!",
        "pom.xml with amperstands and variables I've got an exception with structure:\n\n<!-- pom fragment -->\n\t<organization>\n\t\t<name>Autoguard &amp; Insurance Sp. z o.o</name>\n\t</organization>\n\nthe ${project.organization.name} makes an exception."
    ],
    [
        "MNG-2877",
        "MNG-2398",
        "unable to resolve attached artifacts from reactor that are not in repo. (patch applied in svn and IT tests added) The patch has been applied here: https://svn.apache.org/repos/asf/maven/components/branches/maven-project-mdep64\n\nand the IT tests are already added to core-it but commented out from the suite. To enable it, uncomment this line: //suite.addTestSuite( MavenIT0118AttachedArtifactsInReactor.class );\n\n-----------------------\n\nThis is from MDEP-64:\n\nWe have a project with a few sub-projects. Only one of those subprojects uses the maven-dependency-plugin, copying the jar file artifact from one of the sibling sub-projects. The dependency plugin has worked fine in another multi-project m2 buld and release when the dependency copy was only referencing projects outside the multi-project's project tree.\n\nBut in the present multi-project release, copying that sibling jar file with the dependency plugin causes the mvn release:prepare step to fail, because it can't find the released version in the release repository. It doesn't care about referencing sibling project dependencies from the regular pom dependencies, it only chokes for the dependency:copy.\n\nHere's a diagram for the issue with three pseudo-poms. I omitted groupId's, scm, distributionManagement, and other content from the poms that were not necessary to communicate the basic issue. I've worked around this by using the antrun plugin, which is unpleasant and untidy. This seems like it might be related to MDEP-44.\n\nsuperproject/\nA/ -> no dependencies\nB/ -> dependency:copy A\n\n//superproject/pom.xml (abbrieviated)\n<project>\n<artifactId>superproject</artifactId>\n<packaging>pom</packaging>\n<version>1.0.0.1-SNAPSHOT</version>\n<modules>\n<module>A</module>\n<module>B</module>\n</modules>\n</project>\n\n// superproject/A/pom.xml (abbrievated)\n<project>\n<parent>\n<artifactId>superproject</artifactId>\n<version>1.0.0.1-SNAPSHOT</version>\n</parent>\n<artifactId>A</artifactId>\n<version>1.0.0.1-SNAPSHOT</version>\n</project>\n\n// superproject/B/pom.xml (abbreviated)\n<project>\n<parent>\n<artifactId>superproject</artifactId>\n<version>1.0.0.1-SNAPSHOT</version>\n</parent>\n<artifactId>B</artifactId>\n<packaging>war</packaging>\n<version>1.0.0.1-SNAPSHOT</version>\n\n<build>\n<finalName>FooWar</finalName>\n<plugins>\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-dependency-plugin</artifactId>\n<executions>\n<execution>\n<id>copy</id>\n<goals>\n<goal>copy</goal>\n</goals>\n<phase>package</phase>\n<configuration>\n<artifactItems>\n<artifactItem>\n<artifactId>A</artifactId>\n<version>${pom.version}</version>\n<type>jar</type>\n</artifactItem>\n</artifactItems>\n<outputDirectory>${project.build.directory}/${pom.build.finalName}/jars</outputDirectory>\n</configuration>\n</execution>\n</executions>\n</plugin>\n</plugins>\n</build>\n\n<dependencies>\n<dependency>\n<artifactId>A</artifactId>\n<version>${pom.version}</version>\n</dependency>\n</dependencies>\n</project>\n\nThe error message during mvn release:prepare is basically:\n[INFO] Building B\n[INFO] task-segment: [clean, integration-test]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [clean:clean] <skip deleting directories>\n[INFO] [dependency:copy {execution: copy}]\n[INFO] Configured Artifact: <groupId>:A:null:1.0.0.1:jar\nDownloading: <details>/1.0.0.1/A-1.0.0.1.jar\n[WARNING] Unable to get resource from repository sizzle (<our repository details>)\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nGroupId: <groupId>\nArtifactId: A\nVersion: 1.0.0.1\n\nReason: Unable to download the artifact from any repository\n\n\n\n\n",
        "attached artifacts (such as assemblies) are not resolved in the workspace when running 'package' phase I have attached a sample project.\n\nsubmoduleA creates an attached artifact (a tar.gz assembly) which submoduleB depends on.\n\nWhen running:\n        mvn package\n\nThe attached artifact cannot be resolved from the workspace but tries the repos instead, yet when running:\n \n\nThis problems makes using attached artifacts very 'risky' because it could be running 'old' code.\n\n\n\n"
    ],
    [
        "MNG-2914",
        "MNG-1412",
        "order of elements in ClassPathElement is not as in pom.xml The order of dependencies in classPathElements is not same as the order specified in pom.xml.\n\nI have tried running on Maven 2.0.5/Maven 2.0.6 but it does not work. Have tested on both Linux/Windows.",
        "dependency sorting in classpath The .classpath file entries should be ordered by nearest transitiveness (if that's a word).\n\nFor example, I have project A that depends on B that depends on C.  The classpath for A is generated in the order C, B.  Ideally the classpath should be in order of how near they are to the project, i.e. B, C."
    ],
    [
        "MNG-2914",
        "MNG-2541",
        "order of elements in ClassPathElement is not as in pom.xml The order of dependencies in classPathElements is not same as the order specified in pom.xml.\n\nI have tried running on Maven 2.0.5/Maven 2.0.6 but it does not work. Have tested on both Linux/Windows.",
        "Dependecy order is lost  in org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler:\n\n    private void assembleDependencyInheritance( Model child, Model parent )\n    {\n        Map depsMap = new HashMap();\n\n        List deps = parent.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        deps = child.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        child.setDependencies( new ArrayList( depsMap.values() ) );\n    }\n\nThis method mixes up the order of the dependenies due to the use of the Map."
    ],
    [
        "MNG-2922",
        "MNG-2808",
        "M2 website: broken section links on pom.html, settings.html and others Following pages contain TOC which does not work at all:\nhttp://maven.apache.org/pom.html\nhttp://maven.apache.org/settings.html\n\nThe reason is that the TOC items refer to anchors incorrectly. For instance, in settings.html, there is reference\n    bq.{{<a href=\"*#Quick Overview*\">Quick Overview</a>}}\nbut the corresponding anchor is\n    bq.{{<a name=\"*quick_overview*\">Quick Overview</a>}}\nManual conversion of letters to lowercase and replacing spaces with underscores is too annoying to be considered workaround.\n",
        "Anchors on maven.apache.org are broken The anchors for on-page-navigation on maven.apache.org are broken. The href-attrivbute contains uppercase letters at the beginning and blanks between words. The name-Attribute of the appropriate anchors is in lowercase and containts underscores instead of blanks.\n\nThis makes it extremly difficult to navigate the POM-Reference for example."
    ],
    [
        "MNG-2926",
        "MNG-980",
        "group search order for plugins is inverted currently the mojo.codehaus.org is used if a plugin name conflicts with maven.apache.org. It should be the other way around.",
        "Provide control over precedence of org.apache.maven.plugins group in search path settings.xml has a <pluginGroups> section to list additional groupIds to search for top level m2 plugin goals.\n\nBy default, \"org.apache.maven.plugins\" is not required to be present in this list, and always wins if there is a collision.\n\n<pluginGroups> that explicitly list \"org.apache.maven.plugins\" should be able to control this default behavior, so that a different plugin groupId can always win in the case of a collision.\n\nFor example, in settings.xml:\n\n<pluginGroups>\n  <pluginGroup>org.example.maven.plugins</pluginGroup>\n  <pluginGroup>org.apache.maven.plugins</pluginGroup>\n</pluginGroups>\n\nThis would allow \"org.example.maven.plugins\" to always win in the case of a collision, whereas:\n\n<pluginGroups>\n  <pluginGroup>org.example.maven.plugins</pluginGroup>\n</pluginGroups>\n\nwould still allow \"org.apache.maven.plugins\" to always win, as it does today."
    ],
    [
        "MNG-2929",
        "MNG-2923",
        "NPE in DefaultArtifactCollector.recurse Running \"mvn eclipse:clean eclipse:eclipse\" on the attached project results in the following output:\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'eclipse'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Unnamed - com.mycompany.test:com.mycompany.test:jar:1.0.0-SNAPSHOT\n[INFO]    task-segment: [eclipse:clean, eclipse:eclipse]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [eclipse:clean]\n[INFO] Deleting file: .project\n[INFO] Deleting file: .classpath\n[INFO] Deleting file: .wtpmodules\n[INFO] Deleting file: .component\n[INFO] Deleting file: org.eclipse.wst.common.component\n[INFO] Deleting file: org.eclipse.wst.common.project.facet.core.xml\n[INFO] Deleting file: org.eclipse.jdt.core.prefs\n[INFO] Preparing eclipse:eclipse\n[INFO] No goals needed for project - skipping\n[INFO] [eclipse:eclipse]\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:164)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:334)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:75)\n\tat org.apache.maven.plugin.ide.AbstractIdeSupportMojo.doDependencyResolution(AbstractIdeSupportMojo.java:447)\n\tat org.apache.maven.plugin.ide.AbstractIdeSupportMojo.execute(AbstractIdeSupportMojo.java:398)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:443)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:493)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:463)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3 seconds\n[INFO] Finished at: Wed Apr 04 12:49:21 CDT 2007\n[INFO] Final Memory: 3M/7M\n[INFO] ------------------------------------------------------------------------\n",
        "Having any active profiles causes the build to fail (This seems to be a regression in 2.0.6, and does not occur in 2.0.5.) If I have any active profiles when building certain projects in Maven 2.0.6, the build will fail. For example, adding something as simple as:\n\n<profiles>\n    <profile>\n        <id>foo</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n    </profile>\n</profiles>\n\n...to my ~/.m2/settings.xml file will cause the stack trace below, but the build will succeed once I remove it. I'm attaching  my POM for reference.\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:164)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:334)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:334)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:75)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:284)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:272)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1238)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:397)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)"
    ],
    [
        "MNG-2932",
        "MNG-2025",
        "Encoding chaos I have tried maven on a project where javadocs, xdocs, pom-comments are in a native language with many NON-ASCII characters.\nThis seems to reveal that maven is not acting clean with different encodings.\n\nFor instance the xdocs are XML. And XML allows me to use different encodings if properly declared in the xml header. However it only works if I encode the XML as UTF-8. If I use ISO-8859-1 then the produced HTML contains UTF-8 characters from the nationalized site messages (resource bundles of maven plugins) and maven dumps the ISO-8859-1 encoded characters into that and ends up with mixed encodings in one HTML page.\n\nAdditionally the JAVA files also cause trouble when I use a different encoding than UTF-8. I configured the \"encoding\" for javadoc plugin to ISO-8859-1 and used Java files in that encoding. The resulting javadoc HTML was written in ISO-8859-1 but the browser displayed it as UTF-8 and I had to switch explicitly to ISO-8859-1 in firefox in order to have the special characters displayed properly.\n\nFurther I encounter trouble when I use special characters in pom.xml files that go onto the generated web-site. In the end I could NOT find a way to have a site without problems - even when I encode everything as UTF-8.\n\nMaybe there are too few developers involved from non english-speaking countries that are used to think beyond US-ASCII ;)\n\nUnfortunatly I can not tell where the problems come from - it may be XPP, doxia, site-plugin or individual reports or all together.\nYou need to properly distinguish between input and output encoding and have to be extremly careful with Stuff like byte[]\nand never parse XML from strings.\n\nCan you reproduce the problem or do you need dummy projects as test-cases?",
        "POM is still not read using the right encoding IIRC XML standard says that default encoding is UTF-8 for xml files\n\nThat can be overriden with \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\nBut files without header saved as UTF8 are not parsed in some systems (eg windows, solaris), while files saved as other encoding (I believe it was ansi) break under a Mac mini with yellowdog linux"
    ],
    [
        "MNG-2932",
        "MNG-2057",
        "Encoding chaos I have tried maven on a project where javadocs, xdocs, pom-comments are in a native language with many NON-ASCII characters.\nThis seems to reveal that maven is not acting clean with different encodings.\n\nFor instance the xdocs are XML. And XML allows me to use different encodings if properly declared in the xml header. However it only works if I encode the XML as UTF-8. If I use ISO-8859-1 then the produced HTML contains UTF-8 characters from the nationalized site messages (resource bundles of maven plugins) and maven dumps the ISO-8859-1 encoded characters into that and ends up with mixed encodings in one HTML page.\n\nAdditionally the JAVA files also cause trouble when I use a different encoding than UTF-8. I configured the \"encoding\" for javadoc plugin to ISO-8859-1 and used Java files in that encoding. The resulting javadoc HTML was written in ISO-8859-1 but the browser displayed it as UTF-8 and I had to switch explicitly to ISO-8859-1 in firefox in order to have the special characters displayed properly.\n\nFurther I encounter trouble when I use special characters in pom.xml files that go onto the generated web-site. In the end I could NOT find a way to have a site without problems - even when I encode everything as UTF-8.\n\nMaybe there are too few developers involved from non english-speaking countries that are used to think beyond US-ASCII ;)\n\nUnfortunatly I can not tell where the problems come from - it may be XPP, doxia, site-plugin or individual reports or all together.\nYou need to properly distinguish between input and output encoding and have to be extremly careful with Stuff like byte[]\nand never parse XML from strings.\n\nCan you reproduce the problem or do you need dummy projects as test-cases?",
        "The Maven 2.0.2 XML parser fails to parse a UTF-8 POM that begins with the optional byte-order mark. The Byte-Order mark is optional, and discouraged in the UTF-8 encoding; but the Unicode specification is clear that it is allowed -- if you read the Unicode Standard v4, section 2.6, and Table 2.3, and section 15.9, and table 15.3; it is clear that the BOM is allowed at the start of a UTF-8 file.\n\nIt so happens that this is the way Windows NotePad saves files when you select UTF-8; and Maven will not parse it.  I'll attach a small POM saved this way, and I'll put it into a ZIP file to hopefully preserve the encoding.  Here is the Maven output:\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: unknown\nPOM Location: C:\\Documents and Settings\\Coco\\Desktop\\pom.xml\n\nReason: Parse error reading POM. Reason: only whitespace content allowed before start tag and not \\u\nef (position: START_DOCUMENT seen \\uef... @1:1)\n\n\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Parse error reading POM. Reason: only whitespace c\nontent allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:278)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:249)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.InvalidProjectModelException: Parse error reading POM. Reason: o\nnly whitespace content allowed before start tag and not \\uef (position: START_DOCUMENT seen \\uef...\n@1:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1134)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1094)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFile(DefaultMavenProje\nctBuilder.java:289)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java\n:274)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:515)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:447)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:351)\n        ... 11 more\nCaused by: org.codehaus.plexus.util.xml.pull.XmlPullParserException: only whitespace content allowed\n before start tag and not \\uef (position: START_DOCUMENT seen \\uef... @1:1)\n        at org.codehaus.plexus.util.xml.pull.MXParser.parseProlog(MXParser.java:1516)\n        at org.codehaus.plexus.util.xml.pull.MXParser.nextImpl(MXParser.java:1392)\n        at org.codehaus.plexus.util.xml.pull.MXParser.next(MXParser.java:1090)\n        at org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(MavenXpp3Reader.java:4545)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.readModel(DefaultMavenProjectBuilder.\njava:1130)\n        ... 17 more\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Wed Feb 08 21:14:03 EST 2006\n[INFO] Final Memory: 1M/2M\n[INFO] ----------------------------------------------------------------------------\n"
    ],
    [
        "MNG-2932",
        "MNG-2254",
        "Encoding chaos I have tried maven on a project where javadocs, xdocs, pom-comments are in a native language with many NON-ASCII characters.\nThis seems to reveal that maven is not acting clean with different encodings.\n\nFor instance the xdocs are XML. And XML allows me to use different encodings if properly declared in the xml header. However it only works if I encode the XML as UTF-8. If I use ISO-8859-1 then the produced HTML contains UTF-8 characters from the nationalized site messages (resource bundles of maven plugins) and maven dumps the ISO-8859-1 encoded characters into that and ends up with mixed encodings in one HTML page.\n\nAdditionally the JAVA files also cause trouble when I use a different encoding than UTF-8. I configured the \"encoding\" for javadoc plugin to ISO-8859-1 and used Java files in that encoding. The resulting javadoc HTML was written in ISO-8859-1 but the browser displayed it as UTF-8 and I had to switch explicitly to ISO-8859-1 in firefox in order to have the special characters displayed properly.\n\nFurther I encounter trouble when I use special characters in pom.xml files that go onto the generated web-site. In the end I could NOT find a way to have a site without problems - even when I encode everything as UTF-8.\n\nMaybe there are too few developers involved from non english-speaking countries that are used to think beyond US-ASCII ;)\n\nUnfortunatly I can not tell where the problems come from - it may be XPP, doxia, site-plugin or individual reports or all together.\nYou need to properly distinguish between input and output encoding and have to be extremly careful with Stuff like byte[]\nand never parse XML from strings.\n\nCan you reproduce the problem or do you need dummy projects as test-cases?",
        "the encoding parameter in xml declaration of POM is ignored  DefaultMavenProjectBuilder reads POM in system default character encoding, and the encoding parameter in xml declartion is ignored.\nto fix this problem, We should\n-  fix  modello-plugin-xpp3 to use the xml parser which is able to handle the encoding parameter properly\n- regenerate maven-model using fixed modello-plugin-xpp3\n- fix DefaultMavenProjectBuilder to use regenerated maven-model properly.\n"
    ],
    [
        "MNG-2932",
        "MNG-2618",
        "Encoding chaos I have tried maven on a project where javadocs, xdocs, pom-comments are in a native language with many NON-ASCII characters.\nThis seems to reveal that maven is not acting clean with different encodings.\n\nFor instance the xdocs are XML. And XML allows me to use different encodings if properly declared in the xml header. However it only works if I encode the XML as UTF-8. If I use ISO-8859-1 then the produced HTML contains UTF-8 characters from the nationalized site messages (resource bundles of maven plugins) and maven dumps the ISO-8859-1 encoded characters into that and ends up with mixed encodings in one HTML page.\n\nAdditionally the JAVA files also cause trouble when I use a different encoding than UTF-8. I configured the \"encoding\" for javadoc plugin to ISO-8859-1 and used Java files in that encoding. The resulting javadoc HTML was written in ISO-8859-1 but the browser displayed it as UTF-8 and I had to switch explicitly to ISO-8859-1 in firefox in order to have the special characters displayed properly.\n\nFurther I encounter trouble when I use special characters in pom.xml files that go onto the generated web-site. In the end I could NOT find a way to have a site without problems - even when I encode everything as UTF-8.\n\nMaybe there are too few developers involved from non english-speaking countries that are used to think beyond US-ASCII ;)\n\nUnfortunatly I can not tell where the problems come from - it may be XPP, doxia, site-plugin or individual reports or all together.\nYou need to properly distinguish between input and output encoding and have to be extremly careful with Stuff like byte[]\nand never parse XML from strings.\n\nCan you reproduce the problem or do you need dummy projects as test-cases?",
        "pom.xml with amperstands and variables I've got an exception with structure:\n\n<!-- pom fragment -->\n\t<organization>\n\t\t<name>Autoguard &amp; Insurance Sp. z o.o</name>\n\t</organization>\n\nthe ${project.organization.name} makes an exception."
    ],
    [
        "MNG-2932",
        "MNG-2818",
        "Encoding chaos I have tried maven on a project where javadocs, xdocs, pom-comments are in a native language with many NON-ASCII characters.\nThis seems to reveal that maven is not acting clean with different encodings.\n\nFor instance the xdocs are XML. And XML allows me to use different encodings if properly declared in the xml header. However it only works if I encode the XML as UTF-8. If I use ISO-8859-1 then the produced HTML contains UTF-8 characters from the nationalized site messages (resource bundles of maven plugins) and maven dumps the ISO-8859-1 encoded characters into that and ends up with mixed encodings in one HTML page.\n\nAdditionally the JAVA files also cause trouble when I use a different encoding than UTF-8. I configured the \"encoding\" for javadoc plugin to ISO-8859-1 and used Java files in that encoding. The resulting javadoc HTML was written in ISO-8859-1 but the browser displayed it as UTF-8 and I had to switch explicitly to ISO-8859-1 in firefox in order to have the special characters displayed properly.\n\nFurther I encounter trouble when I use special characters in pom.xml files that go onto the generated web-site. In the end I could NOT find a way to have a site without problems - even when I encode everything as UTF-8.\n\nMaybe there are too few developers involved from non english-speaking countries that are used to think beyond US-ASCII ;)\n\nUnfortunatly I can not tell where the problems come from - it may be XPP, doxia, site-plugin or individual reports or all together.\nYou need to properly distinguish between input and output encoding and have to be extremly careful with Stuff like byte[]\nand never parse XML from strings.\n\nCan you reproduce the problem or do you need dummy projects as test-cases?",
        "maven 2 requires a UTF-8 locale to build properly When I was building Apache's dbutils with maven 2, I ran into a problem with pom.xml parsing.  It turns out that the problem is due to me not having a UTF-8 locale.  I've worked around it, but I thought you might like to know (either to change that or for the sake of documentation).  Thanks!"
    ],
    [
        "MNG-2946",
        "MNG-1323",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-2946",
        "MNG-1836",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n",
        "inherited plugin dependencies I have project composed of a reactor/parent pom.xml and a few module.\n\nIn the parent pom.xml, I have somthing like this :\n\n<plugins>\n....\n          <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n     \t\t\t\t<!-- The assembly plugin is not flexible enought for what we have to do -->\n       \t\t\t\t<phase>package</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<property name=\"version.number\" value=\"${project.version}\"/>\n         \t\t\t\t\t<ant antfile=\"src/build/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals><goal>run</goal></goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<inherited>false</inherited>\n\t\t</plugin>\n...\n</plugins>\n\nIn one of the module, I have \n\n  \t<plugins> \n...\n \t    <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n       \t\t\t\t<phase>generate-test-sources</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<ant antfile=\"src/test/ant/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n\t        \t\t\t<testSourceRoot>target/generated-sources/nextmock</testSourceRoot>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals>\n         \t\t\t\t<goal>run</goal>\n       \t\t\t\t</goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<dependencies>\n   \t\t\t\t     <dependency>\n\t\t\t\t\t\t<!-- Required to use javac --> \n\t\t\t\t\t\t<groupId>sun.jdk</groupId>\n\t\t\t\t\t\t<artifactId>tools</artifactId>\n\t\t\t\t\t\t<version>1.5</version>\n\t\t\t\t\t\t<scope>system</scope>\n\t\t\t\t\t\t<systemPath>${java.home}/../lib/tools.jar</systemPath>\n\t\t\t\t\t</dependency>\n   \t\t\t</dependencies>\n\t\t</plugin>\n...\n</plugins>\n\nIt seems that the dependencies is in the sub-module is not loaded, probably because the plugin is loaded in the parent pom (or in the reactor pom which is the same in many cases) and not updated afterward.\n\nThe simple work around is to place the dependencies into the reactor plugin declaration. (A strange thing is that the dependecy doesn't need to be present in the module declaration anymore in that case)\n\nI tried also to place it only int the pluginManagment section but it doesn't work.  The dependency is not loaded.\n"
    ],
    [
        "MNG-2946",
        "MNG-1949",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n",
        "project-level plugin dependencies not handled correctly in multimodule builds plugin containers are only initialized once per build, which means they may contain incorrect project-introduced dependencies for project Y in a multimodule build (polluted by project X predecessor). We should look at ways of dumping plugin containers with project-specific configurations, or else providing a container overlay to handle project-specific dependencies, etc.\n\nNOTE: This is tied into the notions of build extensions, which will have similar consequences on the core container."
    ],
    [
        "MNG-2946",
        "MNG-2174",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n",
        "<pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins (potentially scoped to only affecting child POM plugins that live within a <profile>) <pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins.\n\nKenny believe this works OKAY if the childs are using the parent <pluginManagement> preconfigured plugins in their main <build> section however it does NOT work if the childs are trying to use those preconfigured plugins via their own <profiles>. Configuration propogates through okay but dependencies are missing and have to be respecified in the child POMs.\n\n\n"
    ],
    [
        "MNG-2969",
        "MNG-2163",
        "Unable to exclude a dependency from a needed plugin When we add a \"standard\" dependency we can tune its dependency list using the exclusions directive.\nTHis is not possible with plugins.\nLet's say I add javacc-maven-plugin to my build/plugins section and the plugin declared in its pom:\n    <dependency>\n      <groupId>org.codehaus.plexus</groupId>\n      <artifactId>plexus-utils</artifactId>\n      <version>1.0.4</version>\n    </dependency>\nAnd I know that this dependency is a compile dependency and I won't need it, how can I tune my plugin inclusion so to not download plexus-utils?\nin <pluginManagement> I can add new dependencies to plugin (WHY is this needed?) but I cannot exclude existing dependencies: isn't this a bug?\nI can add a new dependency to the plugin and add exclusions for this new dependency but I cannot add an exclusion for the top-level dependencies.\n\nAm I missing something?",
        "Allow plugin dependencies to be excluded Need to add an exclusions block in the POM for plugins.  The use-case is excluding slf4j-simple\nfrom the jetty6 plugin in order to use an alternative slf4j implementation."
    ],
    [
        "MNG-2969",
        "MNG-2448",
        "Unable to exclude a dependency from a needed plugin When we add a \"standard\" dependency we can tune its dependency list using the exclusions directive.\nTHis is not possible with plugins.\nLet's say I add javacc-maven-plugin to my build/plugins section and the plugin declared in its pom:\n    <dependency>\n      <groupId>org.codehaus.plexus</groupId>\n      <artifactId>plexus-utils</artifactId>\n      <version>1.0.4</version>\n    </dependency>\nAnd I know that this dependency is a compile dependency and I won't need it, how can I tune my plugin inclusion so to not download plexus-utils?\nin <pluginManagement> I can add new dependencies to plugin (WHY is this needed?) but I cannot exclude existing dependencies: isn't this a bug?\nI can add a new dependency to the plugin and add exclusions for this new dependency but I cannot add an exclusion for the top-level dependencies.\n\nAm I missing something?",
        "Can not exclude a dependency from a plugin I need to be able to exclude a dependency that a plugin included so I can replace it with a different dependency.  In this exact case I'm attempting to use the com.sun.tools.xjc.maven2:maven-jaxb-plugin:1.0 plugin and it depends on the non-public jsr173 jar.  I would like to exclude that jar so I can include public stax one.   I know this will be fixed by implementing the spec resolution feature, but excluding bad dependencies from a plugin is a general problem. \n\nThe following snippit will demonstrate the download problem assuming you don't have the jsr173 jar available:\n\n      <plugin>\n        <groupId>com.sun.tools.xjc.maven2</groupId>\n        <artifactId>maven-jaxb-plugin</artifactId>\n        <version>1.0</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>generate</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <generatePackage>org.apache.xbean.jaxb.schema</generatePackage>\n        </configuration>\n        </configuration>\n       </plugin>\n"
    ],
    [
        "MNG-2978",
        "MNG-3109",
        "Assembly plugin does not resolve version ranges correctly Similar to MRELEASE-134 in maven-release-plugin\n\n<dependency>\n            <groupId>myGroup</groupId>\n            <artifactId>myArtifact</artifactId>\n            <version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range.  This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented.",
        "version ranges can include snapshots {code}\n<version>[1.1.0,)</version>\n{code}\n\nThis version range can resolve to the latest dev SNAPSHOT which causes the release plugin to fail due to a SNAPSHOT dependency.  The release plugin should check that the original version specification includes a non-SNAPSHOT version (1.1.0) and so can be released without harm."
    ],
    [
        "MNG-2982",
        "MNG-2157",
        "Profile of a pom doesn't execute when running a reactor build of a child pom I created a top pom toghether with a profile in a seperate file (profiles.xml).  The problem is as follows when I execute the top pom the profile is available. When I execute the lowest pom the profile is available.  When I access one of the middle poms the profile is not available.\n\nThe profile just overrides one of the properties defined in the top pom.  The property has to be used in different project who inherit of this pom.\n\nI'm guessing this is a bug cause If It was expected workflow it is really strange.  I tested It using mvn help:active-profiles. The profile seems active when i run this command on the top  pom.  I added a example project that you can use to check the problem. \n\nThis setup adds a profile that overrides property defined in the top pom. The profile is defined in the profiles.xml.  Execute mvn install on the top pom and the property gets overriden.  Execute the lowest pom (the level4-2 pom) and the property gets overriden.  Execute (level2 or level3 pom) and the property has the old value and doesn't get overriden. You know if it gets overriden when you execute level4-2 project and check the echo statement that is added when i execute the antrun plugin.\n\nProperty name is file.path.\n<file.path>C:\\path\\main\\blabla</file.path> => in the top pom\n<file.path>C:\\path\\custom\\blabla</file.path> => in the profiles.xml\n\nThe problem with this setup is that when you run the top pom of the lowest pom no problem.  But if you execute the reactor build of one of the middle pom functionality breaks.\n\nI solved this by placing the profile in settings.xml against the wishes of my supervisor who would have liked the profiles.xml way to work.",
        "Properties defined in top-level profiles.xml do no propagate to child modules I have a multi-module build, and at the top-level I have a profile called 'release-environment', which is activated by -Denv=release.\n\nI need the local release build to use different values for JDBC configuration to run integration tests, and defined them in a profiles.xml:\n\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<settings>\n\n    <profiles>\n        <profile>\n            <id>local-release-environment</id>\n            <activation>\n                <property>\n                    <name>env</name>\n                    <value>release</value>\n                </property>\n            </activation>\n            \n            <properties>\n                <jdbc.username>mif_jason</jdbc.username>\n                <jdbc.password>mif_jason</jdbc.password>\n                <jdbc.schema>MIF_JASON</jdbc.schema>\n            </properties>\n        </profile>\n    </profiles>\n    \n</settings>\n{code}\n\nMy project looks like:\n\npom.xml\nmerchant/pom.xml\nmerchant/core/pom.xml\nmerchant/services/pom.xml\n\nIf i put profiles.xml as a peer to pom.xml and run {{mvn clean install -Denv=release}} from the top-level, I get errors because the properties are not propagated to the merchant/core/pom.xml module.\n\nIf I put profiles.xml as a peer to merchant/core/pom.xml and run {{mvn clean install -Denv=release}}, then it works as expected... properties are set as they are defined in profiles.xml.\n\nBut, this is not manageable, as I need to set some properties for all of the modules in a multi-module build... But I don't want to use those properties for all Maven2 projects, so I can not really put it into ~/.m2/settings.xml\n\nI had expected that a top-level profiles.xml would work, but it does not.  Is this by design, is there another recommend way to provide per-top-level multi-module project configuration on a local user basis (ie. no pom.xml modifications)?"
    ],
    [
        "MNG-2994",
        "MNG-2525",
        "Snapshot repositories are not checked when using ranges The attached patch demonstrates the problem by adding it0121.  If the test repository has releases enabled, the test passes, when they are disabled, the test fails.  This appears to be due to DefaultArtifact.isSnapshot returning false for unresolved ranges, thus causing snapshot repositories to be disabled when resolving artifacts.",
        "SNAPSHOT dependencies aren't found when repository has 'release' disabled and a version range is used When a repository is configured (POM, profiles, etc), 'releases' is disabled, 'snapshots' is enabled and a dependency uses a version range, the dependency fails to resolve. The dependency is found when an explicit version is used. The following can be used to recreate the issue.\n\nSetup the maven snapshot repository in an active profile like this:\n\n        <repository>\n          <id>apache.snapshots</id>\n          <name>Maven Snapshots</name>\n          <url>http://people.apache.org/maven-snapshot-repository</url>\n          <releases>\n            <enabled>false</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n\nCheck out the maven-install-plugin at revision 427494 (or any revision or other plugin that has a dependency that's a SNAPSHOT). Run a build (mvn package) and all dependencies should download. Modify the dependency in the POM to use a version range, instead of an explict version. For example, change the version \"1.0-SNAPSHOT\" to \"[0,1)\", which includes the same version. Run another build (mvn package) and the dependency will fail to download."
    ],
    [
        "MNG-3001",
        "MNG-3109",
        "Maven2 does not resolve version ranges correctly [PATCH INCLUDED] Maven does not properly handle version ranges when the high end is unbounded.  The spec clearly states that it should not resolve to a SNAPSHOT unless included as an explicit boundary.  Currently maven2 does resolve to a SNAPSHOT which makes usage of version ranges to control versions of dependencies unworkable.  (We currently use a local build of maven with this fix else we could not use version ranges.  This is a major issue can you please include in the next release?)\n\nCode fix and unit tests are included.\n\nExample:\n\n<dependency>\n<groupId>myGroup</groupId>\n<artifactId>myArtifact</artifactId>\n<version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development 1.0-SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range. This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented.\n\nI have included a patch for this bug. The fix is in the containsVersion method of VersionRange. I have added tests in VersionRangeTest and DefaultArtifactCollectorTest. All tests in maven pass with this fix.",
        "version ranges can include snapshots {code}\n<version>[1.1.0,)</version>\n{code}\n\nThis version range can resolve to the latest dev SNAPSHOT which causes the release plugin to fail due to a SNAPSHOT dependency.  The release plugin should check that the original version specification includes a non-SNAPSHOT version (1.1.0) and so can be released without harm."
    ],
    [
        "MNG-3001",
        "MNG-2978",
        "Maven2 does not resolve version ranges correctly [PATCH INCLUDED] Maven does not properly handle version ranges when the high end is unbounded.  The spec clearly states that it should not resolve to a SNAPSHOT unless included as an explicit boundary.  Currently maven2 does resolve to a SNAPSHOT which makes usage of version ranges to control versions of dependencies unworkable.  (We currently use a local build of maven with this fix else we could not use version ranges.  This is a major issue can you please include in the next release?)\n\nCode fix and unit tests are included.\n\nExample:\n\n<dependency>\n<groupId>myGroup</groupId>\n<artifactId>myArtifact</artifactId>\n<version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development 1.0-SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range. This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented.\n\nI have included a patch for this bug. The fix is in the containsVersion method of VersionRange. I have added tests in VersionRangeTest and DefaultArtifactCollectorTest. All tests in maven pass with this fix.",
        "Assembly plugin does not resolve version ranges correctly Similar to MRELEASE-134 in maven-release-plugin\n\n<dependency>\n            <groupId>myGroup</groupId>\n            <artifactId>myArtifact</artifactId>\n            <version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range.  This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented."
    ],
    [
        "MNG-3009",
        "MNG-2653",
        "Maven 2.0.5+ fails to resolve ${project.version} on deployment Starting with version 2.0.5, Maven fails to resolve the ${project.version} variable in poms on (SNAPSHOT?) deployment. This results in corrupted repositories, as Maven will (sporadically) fail to resolve transitive dependencies that involve these references.\n\nThe symptom is that Maven will start searching for a magical version \"2.4.1\" of an artifact, although such a version never existed and was never written in any POM. Dependent builds therefor fail as this version cannot be resolved.\n\nThe deploy plugin should *always* resolve all involved versions when it uploads POMs.\n",
        "using ${version} for subproject dependencies doesn't work (maven uses 2.4.1 version instead) My project is a ear multiproject. It has 5 modules, that have internal dependencies. For example web module needs app and type modules. \n\nI usually use following declaration for this kind of dependencies. Note that I'm using ${version} in dependency. In result I'm requesting foo-type jar of the same version as current project.\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>foo</groupId>\n    <artifactId>foo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n  </parent>\n  <artifactId>foo-app</artifactId>\n\n  <dependencies>\n    <dependency>\n      <groupId>foo</groupId>\n      <artifactId>foo-type</artifactId>\n      <version>${version}</version>\n    </dependency>\n  </dependencies>\n</project>\n\nThis works from commandline, but doesn't work in eclipse plugin. I get following message:\n\n\"Unable to download the artifact from any repository foo:foo-type-2.4.1.jar\"\n\nMaven (or maven plugin) tries to download foo-type module in very strange version (instead 0.0.1-SNAPSHOT)! \n\n\nI've attached simple multimodule project."
    ],
    [
        "MNG-3009",
        "MNG-2339",
        "Maven 2.0.5+ fails to resolve ${project.version} on deployment Starting with version 2.0.5, Maven fails to resolve the ${project.version} variable in poms on (SNAPSHOT?) deployment. This results in corrupted repositories, as Maven will (sporadically) fail to resolve transitive dependencies that involve these references.\n\nThe symptom is that Maven will start searching for a magical version \"2.4.1\" of an artifact, although such a version never existed and was never written in any POM. Dependent builds therefor fail as this version cannot be resolved.\n\nThe deploy plugin should *always* resolve all involved versions when it uploads POMs.\n",
        "${project.*} are interpreted in the wrong place If a plugin use ${project.version}, this parameter is interpreted with the version of the current project and not the plugin version. I think we have the same pb with dependencies and other ${project.*}\n\nFor a plugin in version 2.0 used in a project in version 1.0-SNAPSHOT, ${project.version} used in the plugin will be interpreted as 1.0-SNAPSHOT instead of 2.0"
    ],
    [
        "MNG-3009",
        "MNG-2651",
        "Maven 2.0.5+ fails to resolve ${project.version} on deployment Starting with version 2.0.5, Maven fails to resolve the ${project.version} variable in poms on (SNAPSHOT?) deployment. This results in corrupted repositories, as Maven will (sporadically) fail to resolve transitive dependencies that involve these references.\n\nThe symptom is that Maven will start searching for a magical version \"2.4.1\" of an artifact, although such a version never existed and was never written in any POM. Dependent builds therefor fail as this version cannot be resolved.\n\nThe deploy plugin should *always* resolve all involved versions when it uploads POMs.\n",
        "POM interpolator treats ${pom.something} like ${something} and prefers system properties The POM interpolator (RegexBasedModelInterpolator) removes all leading \"pom.\", \"project.\" and \"env.\" portions of an expression before evaluating it.  then searching for values happens in the following order: system properties, project properties, pom bean properties.\n\nAn example: Although ${pom.version} is more specific than ${version}, version wins. That's the problem in MNGECLIPSE-20.\n\nIMHO the interpolation strategy should be changed.\n"
    ],
    [
        "MNG-3009",
        "MNG-2745",
        "Maven 2.0.5+ fails to resolve ${project.version} on deployment Starting with version 2.0.5, Maven fails to resolve the ${project.version} variable in poms on (SNAPSHOT?) deployment. This results in corrupted repositories, as Maven will (sporadically) fail to resolve transitive dependencies that involve these references.\n\nThe symptom is that Maven will start searching for a magical version \"2.4.1\" of an artifact, although such a version never existed and was never written in any POM. Dependent builds therefor fail as this version cannot be resolved.\n\nThe deploy plugin should *always* resolve all involved versions when it uploads POMs.\n",
        "Do not allow System properties to be interpolated in the POM There is an XML library which is inserting a property version=2.4.1 and it is completely screwing up the interpolation of ${version} in any POM. \n\n1) We should force fully qualified references anyway so ${pom.version} and not allow ${version}\n2) Totally shut out System properties from all internal operations. We can still take -D from the command line and turn them into execution properties but we should just ignore all Sytem properties in the core."
    ],
    [
        "MNG-3009",
        "MNG-2782",
        "Maven 2.0.5+ fails to resolve ${project.version} on deployment Starting with version 2.0.5, Maven fails to resolve the ${project.version} variable in poms on (SNAPSHOT?) deployment. This results in corrupted repositories, as Maven will (sporadically) fail to resolve transitive dependencies that involve these references.\n\nThe symptom is that Maven will start searching for a magical version \"2.4.1\" of an artifact, although such a version never existed and was never written in any POM. Dependent builds therefor fail as this version cannot be resolved.\n\nThe deploy plugin should *always* resolve all involved versions when it uploads POMs.\n",
        "Version property in dependencies is not expanded correctly The Spring poms, for example spring-beans, version 2.0.2 use the following dependencies:\n<dependency>\n  <groupId>${project.groupId}</groupId> \n  <artifactId>spring-core</artifactId> \n  <version>${project.version}</version> \n</dependency>\nWhich means, they are using variables in the poms. In some cases, these variables are resolved correctly, but in some cases however they are not, causing problems.\n\nImho, it would be better to resolve variables for released poms to avoid any problems (or if variables are allowed, this is a maven bug then)"
    ],
    [
        "MNG-3010",
        "MNG-2210",
        "Problem parsing version ranges My pom includes the following dependency:\n \n{code:xml}<dependency>\n  <groupId>it.unimaticaspa.unique</groupId>\n  <artifactId>unilet-core</artifactId>\n  <version>[5.0.9.0,5.0.10.0)</version>\n  <type>jar</type>\n</dependency>{code}\n\nWhen i try to build the project i get the following stacktrace:\n\n{noformat}[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:552)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.artifact.InvalidDependencyVersionException: Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:331)\n        at org.apache.maven.project.MavenProject.createArtifacts(MavenProject.java:1558)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1236)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:397)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n        ... 16 more\nCaused by: org.apache.maven.artifact.versioning.InvalidVersionSpecificationException: Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.artifact.versioning.VersionRange.parseRestriction(VersionRange.java:210)\n        at org.apache.maven.artifact.versioning.VersionRange.createFromVersionSpec(VersionRange.java:125)\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:327)\n        ... 20 more{noformat}\n\nIt seems that versions are compared as strings, because the problem only comes out comparing versions with different numbers of digits (such as  5.0.9.0 and 5.0.10.0). While comparing 5.0.8.0 with 5.0.9.0 everything is fine. ",
        "Dependency version range picks version 1.7.2-rc1 when specified as [1.8.0.1,) Added the following dependencies to a new project pom.xml file:\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>[3.8.1,)</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>[1.2.13,)</version>\n    </dependency>\n    <dependency>\n      <groupId>hsqldb</groupId>\n      <artifactId>hsqldb</artifactId>\n      <version>[1.8.0.1,)</version>\n    </dependency>\n  </dependencies>\n\nThis results in:\n[INFO] artifact log4j:log4j: checking for updates from central\n[DEBUG]   log4j:log4j:jar:1.2.13:compile (setting version to: 1.2.13 from range: [1.2.13,))\n[DEBUG]   log4j:log4j:jar:1.2.13:compile (selected for compile)\n[INFO] artifact junit:junit: checking for updates from central\n[DEBUG]   junit:junit:jar:4.0:test (setting version to: 4.0 from range: [3.8.1,))\n[DEBUG]   junit:junit:jar:4.0:test (selected for test)\n[INFO] artifact hsqldb:hsqldb: checking for updates from central\n[DEBUG]   hsqldb:hsqldb:jar:1.7.2-rc1:compile (setting version to: 1.7.2-rc1 from range: [1.8.0.1,))\n[DEBUG]   hsqldb:hsqldb:jar:1.7.2-rc1:compile (selected for compile)\n\nSame results with hsqldb version specified as [1.8,) or [1.8.0,) or [1.8.0.0,)\n\nHere's more tests:\n<version>1.8.0.1</version>\n[DEBUG]   hsqldb:hsqldb:jar:1.8.0.1:compile (selected for compile)\n\n<version>[1.8.0.1]</version>\n[DEBUG]   hsqldb:hsqldb:jar:1.8.0.1:compile (setting version to: 1.8.0.1 from range: [1.8.0.1,1.8.0.1])\n[DEBUG]   hsqldb:hsqldb:jar:1.8.0.1:compile (selected for compile)\n\nNot sure why 1.7.2-rc1 is being selected!\n\nYou can see all the versions available on Central: http://www.ibiblio.org/maven2/hsqldb/hsqldb/"
    ],
    [
        "MNG-3017",
        "MNG-1775",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n....",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-3017",
        "MNG-2363",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n....",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory."
    ],
    [
        "MNG-3017",
        "MNG-2627",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n....",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile."
    ],
    [
        "MNG-3017",
        "MNG-2809",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n....",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>"
    ],
    [
        "MNG-3051",
        "MNG-2234",
        "settings.xml doesn't handle profile from pom.xml I have profile specified in pom.xml (attached). And I try to specify it in settings.xml's <activeProfile> (attache as nonworking-settings.xml) Accordng to help:active-profiles I get:\n\n{noformat}\nmvn help:active-profiles\nActive Profiles for Project 'test:test:jar:1.0-SNAPSHOT':\n\nThere are no active profiles.\n{noformat}\n\nWhen I specify the same profile name in settings.xml (attached as working-settings.xml) maven see both profiles (from pom.xml and from settings.xml):\n\n{noformat}\nmvn help:active-profiles\nActive Profiles for Project 'test:test:jar:1.0-SNAPSHOT':\n\nThe following profiles are active:\n\n - env-test (source: pom)\n - env-test (source: settings.xml)\n{noformat}",
        "activeProfile in ~/.m2/settings.xml is ignored when profiles section is missing or empty When i have this settings.xml file in my user home dir, the activeProfile setting is simply ignored by Maven:\n<settings>\n <activeProfiles>\n     <activeProfile>env-test</activeProfile>\n </activeProfiles>\n</settings>\n\nAdding an empty profiles section does not help:\n<settings>\n <profiles>\n </profiles>\n <activeProfiles>\n     <activeProfile>env-test</activeProfile>\n </activeProfiles>\n</settings>\n\nWell, adding a dummy profile makes it work:\n<settings>\n <profiles>\n    <profile>\n          <id>dummy</id>\n    </profile>\n </profiles>\n <activeProfiles>\n     <activeProfile>env-test</activeProfile>\n </activeProfiles>\n</settings>\n\nFunny, isn't it?\n\nRegards,\nManfred\n"
    ],
    [
        "MNG-3054",
        "MNG-2938",
        "[regression] maven reports build success even on error. See linked issue for an example.\n\nThe output is something like this:\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to construct build plan for: test:exec-phase-binding-test:jar:1.0-SNAPSHOT (  task-segment: [install] ). Reason: No phase specified for goal: aspectj-report in plugin: org.codehaus.mojo:aspectj-maven-plugin from POM: test:exec-phase-binding-test:jar:1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Thu Jun 14 11:50:42 EST 2007\n[INFO] Final Memory: 2M/5M\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Thu Jun 14 11:50:42 EST 2007\n[INFO] Final Memory: 2M/5M\n[INFO] ------------------------------------------------------------------------\n\nIn addition, the exit code is 0, instead of 1 as desired.",
        "Build error is ignored at the end of the build On a build error you get \"BUILD ERROR\" and then \"BUILD SUCCESSFUL\"\n\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to construct build plan for: org.apache.maven.its.it0020:maven-it-it0020:maven-plugin:1.0-SNAPSHOT (  task-segment: [clean:clean, install, \n\n...\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Apr 05 16:27:47 PDT 2007\n[INFO] Final Memory: 6M/11M\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Apr 05 16:27:47 PDT 2007\n[INFO] Final Memory: 6M/11M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3076",
        "MNG-3043",
        "Dependency on test-jar is not resolved with 'package' target, must use 'install' The multi-module project looks like this:\n/ipb -- this is where the build is run from\n/ipb-base -- this guy builds a test jar, ipb-base-1.0-SNAPSHOT-tests.jar\n/ipb-something, it has some tests that use ipb-base-1.0-SNAPSHOT-tests.jar so its dependency looks like this:\n\n<!-- regular stuff from base project -->\n    <dependency>\n      <groupId>com.exigen.ipb</groupId>\n      <artifactId>ipb-base</artifactId>\n    </dependency>\n<!-- stuff for unit tests from base project -->\n    <dependency>\n      <groupId>com.exigen.ipb</groupId>\n      <artifactId>ipb-base</artifactId>\n      <type>test-jar</type>\n      <scope>test</scope>\n    </dependency>\n\nBoth /ipb-base and /ipb-something are packaged as jars.\n\nNow when the build is run as 'mvn clean package' it cannot resolve the dependecy as it is not in the repo.\n\nRuning build as 'mvn clean install' does the trick however this seems to be a workaround -- one would expect 'clean package' to do the job.\n",
        "Allow 'mvn test' to work with test-jar dependencies in a reactor Basically the issue is demonstrated by MNG-2045, but instead of running 'mvn install', you run 'mvn test'.\n\nTest classes of dependencies should be resolved from the reactor, just as main classes, if there's no archive available.\n\nI'm not sure how to go about this. Specifying a dependency on something with <type>test-jar</type>,\nand having that dependency declare the maven-jar-plugin with the 'test-jar' goal is insufficient.\nPerhaps we can just add a standard classifier that maven is aware of, in this case 'tests'. The jar packaging\nwould export this as a known classifier, and tells maven how it contributes to what classpath.\n\nSince test sources are a first class citizen, just as main sources are (they have the same phases, same\nelements in the pom (but differently named)).\n\nIt seems logical to me that somehow the test classes should be made available to dependencies,\nif they declare a dependency with classifier 'tests'."
    ],
    [
        "MNG-3086",
        "MNG-2123",
        "NullPointerException in ResolutionNode.getTrail(ResolutionNode.java:136) After upgrading from 2.0.6 to 2.0.7, our build fails with:\n\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.artifact.resolver.ResolutionNode.getTrail(ResolutionNode.java:136)\n        at org.apache.maven.artifact.resolver.ResolutionNode.filterTrail(ResolutionNode.java:211)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:89)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:284)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:272)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1238)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:397)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:280)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nThanks,",
        "NullPointerException when a dependency uses version range and another uses an actual version incompatible with that range Struts 1.2.7 depends on commons-digester 1.6 and jasperreports 1.1.1 in [1.7,)\n\nBuild fails with a null pointer exception that is not very explanatory\n\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Unnamed - test:test:jar:1.0-SNAPSHOT\n[INFO]    task-segment: [test]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] ----------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] version was null for commons-digester:commons-digester\n[INFO] ----------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException: version was null for commons-digester:commons-digester\n        at org.apache.maven.artifact.DefaultArtifact.getBaseVersion(DefaultArtifact.java:361)\n        at org.apache.maven.artifact.DefaultArtifact.getId(DefaultArtifact.java:222)\n        at org.apache.maven.artifact.resolver.ResolutionNode.getDependencyTrail(ResolutionNode.java:115)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:88)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:223)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:211)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:182)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1117)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:366)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:475)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:454)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Sun Mar 05 23:26:16 PST 2006\n[INFO] Final Memory: 3M/5M\n[INFO] ----------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3087",
        "MNG-3084",
        "mvn.bat does not return proper errorlevel The mvn.bat script always exits with code 0 on Windows XP/NT. With version 2.0.7, the following line was removed from the error section:\n\nif \"%OS%\"==\"Windows_NT\" @endlocal\n\nThis causes the ERROR_CODE to retain the value 0 when the program exits. Replacing this line solves the problem.",
        "mvn.bat in maven 2.0.7 does not return the correct error code. As noted here[1], mvn.bat does not return its error code correctly. This causes continuum to not detect failed builds.\n\n[1] http://www.nabble.com/result-code-for-mvn.bat-on-windows-broken-t3970169s177.html"
    ],
    [
        "MNG-3092",
        "MNG-3109",
        "Resolution of version ranges with non-snapshot bounds can resolve to a snapshot version Contrary to the 2.0 design docs:\n\n\"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary.\"\n-- from http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-Incorporating%7B%7BSNAPSHOT%7D%7Dversionsintothespecification\n\nThe following is equates to true:\n\nVersionRange.createFromVersionSpec( \"[1.0,1.1]\" ).containsVersion( new DefaultArtifactVersion( \"1.1-SNAPSHOT\" ) )\n\nThe attached patch only allows snapshot versions to be contained in a range if they are equal to one of the boundaries.  Note that this is a strict equality, so [1.0,1.2-SNAPSHOT] will not contain 1.1-SNAPSHOT.",
        "version ranges can include snapshots {code}\n<version>[1.1.0,)</version>\n{code}\n\nThis version range can resolve to the latest dev SNAPSHOT which causes the release plugin to fail due to a SNAPSHOT dependency.  The release plugin should check that the original version specification includes a non-SNAPSHOT version (1.1.0) and so can be released without harm."
    ],
    [
        "MNG-3092",
        "MNG-2978",
        "Resolution of version ranges with non-snapshot bounds can resolve to a snapshot version Contrary to the 2.0 design docs:\n\n\"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary.\"\n-- from http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-Incorporating%7B%7BSNAPSHOT%7D%7Dversionsintothespecification\n\nThe following is equates to true:\n\nVersionRange.createFromVersionSpec( \"[1.0,1.1]\" ).containsVersion( new DefaultArtifactVersion( \"1.1-SNAPSHOT\" ) )\n\nThe attached patch only allows snapshot versions to be contained in a range if they are equal to one of the boundaries.  Note that this is a strict equality, so [1.0,1.2-SNAPSHOT] will not contain 1.1-SNAPSHOT.",
        "Assembly plugin does not resolve version ranges correctly Similar to MRELEASE-134 in maven-release-plugin\n\n<dependency>\n            <groupId>myGroup</groupId>\n            <artifactId>myArtifact</artifactId>\n            <version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range.  This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented."
    ],
    [
        "MNG-3092",
        "MNG-3001",
        "Resolution of version ranges with non-snapshot bounds can resolve to a snapshot version Contrary to the 2.0 design docs:\n\n\"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary.\"\n-- from http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-Incorporating%7B%7BSNAPSHOT%7D%7Dversionsintothespecification\n\nThe following is equates to true:\n\nVersionRange.createFromVersionSpec( \"[1.0,1.1]\" ).containsVersion( new DefaultArtifactVersion( \"1.1-SNAPSHOT\" ) )\n\nThe attached patch only allows snapshot versions to be contained in a range if they are equal to one of the boundaries.  Note that this is a strict equality, so [1.0,1.2-SNAPSHOT] will not contain 1.1-SNAPSHOT.",
        "Maven2 does not resolve version ranges correctly [PATCH INCLUDED] Maven does not properly handle version ranges when the high end is unbounded.  The spec clearly states that it should not resolve to a SNAPSHOT unless included as an explicit boundary.  Currently maven2 does resolve to a SNAPSHOT which makes usage of version ranges to control versions of dependencies unworkable.  (We currently use a local build of maven with this fix else we could not use version ranges.  This is a major issue can you please include in the next release?)\n\nCode fix and unit tests are included.\n\nExample:\n\n<dependency>\n<groupId>myGroup</groupId>\n<artifactId>myArtifact</artifactId>\n<version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development 1.0-SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range. This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented.\n\nI have included a patch for this bug. The fix is in the containsVersion method of VersionRange. I have added tests in VersionRangeTest and DefaultArtifactCollectorTest. All tests in maven pass with this fix."
    ],
    [
        "MNG-3112",
        "MNG-1958",
        "Maven2 issues with Filter  Apache Axis2 moved to maven2 completely and now we have faced few issues with maven2. Axis2 is a multi modules bit complex projects and we had no issues with maven1 other than the performance. But once we moved to maven2 we realized that we have issues with filters and we uses a number of filters as well. Specially we have filters in the top most pom.xml and others extend form that , once we change the filter value others get changed but the uploaded one has the filter name not the value.\n\nIt will be great we can get a fix or path for this since this is bit critical for us. We can edit them manually and do the release but that is not that good.",
        "we need a var that always points to the root directory in multi module builds $\\{basedir} always points to the local module. There are cases, when having a local relative repository, when it would be usefull to have a var that always pointed to the root project, $\\{rootdir}.\n\nIn such a case you may want to think of having the names $\\{rootdir} $\\{moduledir}"
    ],
    [
        "MNG-3112",
        "MNG-1967",
        "Maven2 issues with Filter  Apache Axis2 moved to maven2 completely and now we have faced few issues with maven2. Axis2 is a multi modules bit complex projects and we had no issues with maven1 other than the performance. But once we moved to maven2 we realized that we have issues with filters and we uses a number of filters as well. Specially we have filters in the top most pom.xml and others extend form that , once we change the filter value others get changed but the uploaded one has the filter name not the value.\n\nIt will be great we can get a fix or path for this since this is bit critical for us. We can edit them manually and do the release but that is not that good.",
        "Local repository URL containing / does not work under windows When using / in a local repository URL, it does not work under windows.\nReplacing it with \\ solves the problem.\n\nSee testcase included (run under windows environment).\n"
    ],
    [
        "MNG-3126",
        "MNG-3084",
        "mvn.bat always exits 0 on WinXP http://jira.codehaus.org/browse/MNG-2127 seems to have started again with 2.0.7.  Regardless of a build passing or failing an %ERRORLVEL%/exit code of 0 is set.  When you change back to 2.0.6 an exir code of 1 is correctly output for a failure.",
        "mvn.bat in maven 2.0.7 does not return the correct error code. As noted here[1], mvn.bat does not return its error code correctly. This causes continuum to not detect failed builds.\n\n[1] http://www.nabble.com/result-code-for-mvn.bat-on-windows-broken-t3970169s177.html"
    ],
    [
        "MNG-3126",
        "MNG-3087",
        "mvn.bat always exits 0 on WinXP http://jira.codehaus.org/browse/MNG-2127 seems to have started again with 2.0.7.  Regardless of a build passing or failing an %ERRORLVEL%/exit code of 0 is set.  When you change back to 2.0.6 an exir code of 1 is correctly output for a failure.",
        "mvn.bat does not return proper errorlevel The mvn.bat script always exits with code 0 on Windows XP/NT. With version 2.0.7, the following line was removed from the error section:\n\nif \"%OS%\"==\"Windows_NT\" @endlocal\n\nThis causes the ERROR_CODE to retain the value 0 when the program exits. Replacing this line solves the problem."
    ],
    [
        "MNG-3134",
        "MNG-2209",
        "DefaultModelInheritence::assembleDistributionInheritence should be childPathAdjustment aware In the same way that the URL, and SCM inheritance assembly is 'childPathAdjustment' aware, so should the site distribution URL. \n\nThe childPathAdjustment value takes into account a child's relative location to its parent, such that 'children' (modules) that are declared via <module>../../foo/bar</module> end up with paths that are accurate for their location within the external namespaces (ie the SCM namespace or the URL namespace). However this is not being done for the site distribution URL which is obviously a bug as the project URL, which remember is childPathAdjustment aware, has a direct coupling to the distroManagement.site.URL.\n\nPatch against maven-project 2.0.7 attached.",
        "Calculation of module URLs does not match deployment In a project where the parent project is a peer directory with its children (e.g., top/parent/pom.xml, top/child/pom.xml, ...) the site is deployed correctly (site/parent, site/parent/child, ...) but the links in the left menu are not generated correctly (site/parent, site/child, ...)\n\nAttached tar file contains three projects:  parent, child1, and child2.  Unpack these into a directory, change to the parent directory, and do a \"mvn site\".  The generated links for the first child project is \"http://child1/index.html\"."
    ],
    [
        "MNG-3158",
        "MNG-3137",
        "IT 108 success remains sporadic I get occasionally failures on this due to timing issues.",
        "IT 0108 (snapshot updates) fail intermittently  testSnapshotUpdatedWithMetadata(org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest)  Time elapsed: 4.443 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<updated...> but was:<original...>\n        at junit.framework.Assert.assertEquals(Assert.java:81)\n        at junit.framework.Assert.assertEquals(Assert.java:87)\n        at org.apache.maven.it.Verifier.assertArtifactContents(Verifier.java:1493)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.assertArtifactContents(MavenIT0108SnapshotUpdateTest.java:255)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadata(MavenIT0108SnapshotUpdateTest.java:113)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadata(MavenIT0108SnapshotUpdateTest.java:113)\n\ntestSnapshotUpdatedWithMetadataUsingFileTimestamp(org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest)  Time elapsed: 5.265 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<updated...> but was:<original...>\n        at junit.framework.Assert.assertEquals(Assert.java:81)\n        at junit.framework.Assert.assertEquals(Assert.java:87)\n        at org.apache.maven.it.Verifier.assertArtifactContents(Verifier.java:1493)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.assertArtifactContents(MavenIT0108SnapshotUpdateTest.java:255)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadataUsingFileTimestamp(MavenIT0108SnapshotUpdateTest.java:195)\n        at org.apache.maven.integrationtests.MavenIT0108SnapshotUpdateTest.testSnapshotUpdatedWithMetadataUsingFileTimestamp(MavenIT0108SnapshotUpdateTest.java:195)\n"
    ],
    [
        "MNG-3180",
        "MNG-3159",
        "IT0095 is failing ",
        "IT 95 is failing on the trunk and maven-2.0.x branch "
    ],
    [
        "MNG-3202",
        "MNG-1914",
        "URL for mirror is not printed when a repository query fails When a mirror for e.g. central has been set in settings.xml, the default URL of central (http://repo1.maven.org/maven2) is still shown in the console.\n\nIn settings.xml:\n\n<mirror>\n            <!-- Archiva -->\n            <id>central-mirror</id>\n            <url>http://trax-data:9999/archiva/repository/internal</url>\n            <mirrorOf>central</mirrorOf>\n</mirror>\n\nExample output:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nNo versions are present in the repository for the artifact with a range [4.1,)\n  com.trax.platform:trax-coreServer:jar:null\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)",
        "Wrong url in error message when using a mirror I had the following in my settings.xml:\n\n<settings>\n[...]\n  <mirrors>\n    <mirror>\n      <id>cargo m2 release repository</id>\n      <url>http://cargo.codehaus.org/dist2</url>\n      <mirrorOf>central</mirrorOf>\n   </mirror>\n  </mirrors>\n\n  <profiles>\n    <profile>\n      <id>staging-repo</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n\t      <name>staging repo</name>\n\t      <url>http://test.maven.codehaus.org/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n\t    </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <name>staging repo</name>\n\t      <url>http://test.maven.codehaus.org/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n\t    </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <activeProfile>staging-repo</activeProfile>\n  </activeProfiles>\n\n[...]\n</settings>\n\nWhen building any project I was getting the following console trace:\n\n[...]\nDownloading: http://cargo.codehaus.org/dist2/org/apache/maven/plugins/maven-plugin-parent/2.0/maven-plugin-parent-2.0.pom\n[WARNING] Unable to get resource from repository central (http://test.maven.codehaus.org/maven2)\n[INFO] ----------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ----------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n \nGroupId: org.apache.maven.plugins\nArtifactId: maven-plugin-parent\nVersion: 2.0\n \nReason: Unable to download the artifact from any repository\n \n  org.apache.maven.plugins:maven-plugin-parent:pom:2.0\n \nfrom the specified remote repositories:\n  central (http://test.maven.codehaus.org/maven2)\n\n\nAs you can see it says that it cannot get the pom from the test.maven.codehaus.org repository whereas it's actually looking in cargo.codehaus.org... The message needs  to be fixed.\n"
    ],
    [
        "MNG-3235",
        "MNG-1928",
        "Profiles in settings.xml not loaded when running maven without a POM I've created a custom Maven2 plugin for our SCM system (CA Harvest). This plugin is deployed in our internal remote repository. This remote repository is configured as a pluginRepository in my 'settings.xml ' file. The <profile> in which this repository is configured is loaded using the <activeProfiles> section. The plugin's groupId ('org.test.tools.maven.harvest') has been specified in the <pluginGroups> section in my 'settings.xml' file.\n\nThe plugin's 'checkout' goal needs to be executed from the commandline without a POM (because the project's POM is in the SCM system). When I execute the command 'mvn harvest:checkout' I get the following output:\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'harvest'.\n[INFO] org.test.tools.maven.harvest: checking for updates from central\nReturning NULL\n[INFO] org.apache.maven.plugins : checking for updates from central\n[INFO] org.codehaus.mojo: checking for updates from central\n[INFO] artifact org.apache.maven.plugins:maven-harvest-plugin: checking for updates from central\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] The plugin 'org.apache.maven.plugins:maven-harvest-plugin' does not exist or no valid version could be found\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Wed Oct 10 15:27:54 CEST 2007\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\nIt looks to me that only the 'central' repository is scanned for the plugin, although I have correctly specified my internal remote repository in the <profile> section of my ' settings.xml' file. Furthermore, when I specify my internal remote repository as a mirrorOf 'central' the plugin is found. So, it looks like maven doesn't scan my internal remote repository for the needed plugin when the repository is specified as a pluginRepository in my ' settings.xml' file.\n\nThe plugin can be used when it is specified in the build section of a POM (which is done to be able to run the harvest:update goal on a project to update the sources from the SCM), which to me indicates that my configuration is correct. It just doesn't look for the plugin when the maven command is issued without a POM.\n\nWhat to me indicates that it is a profile problem is the fact that when I specify my internal remote repo as a mirrorOf central, it can find my custom plugin, but it can't find other needed jars from central. When I then disable the mirror section, all the jars from central are loaded, but the build fails on a custom jar (the SCM utility jar) which is present in another local remote repo (my third-party repo) which is also defined in my profile.\n\nWhen using mvn commands on a POM, my configuration (including my profile settings) works as expected.\n\nI have tried to explicitly enable the needed profile using the -P option, but that doesn't work either.",
        "ignores pluginRepository in settings.xml, honors in POM if specified in the POM as a plugin repo, maven can use the team.andromda.org/maven2 repo for finding, downloading, and installing plugins. \nhowever, settings.xml ignores plugin repos and only checks central if the plugin has never been downloaded before. \n\nfor instance. if settings.xml has a pluginRepository entry for team.andromda.org/maven2 then:\nmvn andromdapp:generate \nshould download the andromdapp plugin from our repo. but it doesn't. only central is checked and it fails to find the plugin."
    ],
    [
        "MNG-3235",
        "MNG-2236",
        "Profiles in settings.xml not loaded when running maven without a POM I've created a custom Maven2 plugin for our SCM system (CA Harvest). This plugin is deployed in our internal remote repository. This remote repository is configured as a pluginRepository in my 'settings.xml ' file. The <profile> in which this repository is configured is loaded using the <activeProfiles> section. The plugin's groupId ('org.test.tools.maven.harvest') has been specified in the <pluginGroups> section in my 'settings.xml' file.\n\nThe plugin's 'checkout' goal needs to be executed from the commandline without a POM (because the project's POM is in the SCM system). When I execute the command 'mvn harvest:checkout' I get the following output:\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'harvest'.\n[INFO] org.test.tools.maven.harvest: checking for updates from central\nReturning NULL\n[INFO] org.apache.maven.plugins : checking for updates from central\n[INFO] org.codehaus.mojo: checking for updates from central\n[INFO] artifact org.apache.maven.plugins:maven-harvest-plugin: checking for updates from central\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] The plugin 'org.apache.maven.plugins:maven-harvest-plugin' does not exist or no valid version could be found\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Wed Oct 10 15:27:54 CEST 2007\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\nIt looks to me that only the 'central' repository is scanned for the plugin, although I have correctly specified my internal remote repository in the <profile> section of my ' settings.xml' file. Furthermore, when I specify my internal remote repository as a mirrorOf 'central' the plugin is found. So, it looks like maven doesn't scan my internal remote repository for the needed plugin when the repository is specified as a pluginRepository in my ' settings.xml' file.\n\nThe plugin can be used when it is specified in the build section of a POM (which is done to be able to run the harvest:update goal on a project to update the sources from the SCM), which to me indicates that my configuration is correct. It just doesn't look for the plugin when the maven command is issued without a POM.\n\nWhat to me indicates that it is a profile problem is the fact that when I specify my internal remote repo as a mirrorOf central, it can find my custom plugin, but it can't find other needed jars from central. When I then disable the mirror section, all the jars from central are loaded, but the build fails on a custom jar (the SCM utility jar) which is present in another local remote repo (my third-party repo) which is also defined in my profile.\n\nWhen using mvn commands on a POM, my configuration (including my profile settings) works as expected.\n\nI have tried to explicitly enable the needed profile using the -P option, but that doesn't work either.",
        "DefaultMavenProjectBuilder.buildStandaloneSuperProject() should include a ProfileManager that includes active profiles from settings.xml I have a custom plugin that performs JMX operations using properties defined in a profile. I have defined an active profile in the settings.xml that specifies properties that the plugin uses and everything works fine when a POM is present. Now I would like the plugin to work from any directory and have added the plugin annotation \"requiresProject=false\" to it. \n\nIf I run the plugin in a directory without a POM the profile properties from settings.xml are never loaded. After performing some debugging I have determined that the default super-pom's model  that is used when no POM xml file is available does not contain the profile properties defined in settings.xml while if a POM.xml is available the settings.xml profiles are loaded into the POM.\n\nThis all appears to boil down to the lack of a ProfileManager parameter to thebuildStandaloneSuperProject method defined in the  MavenProjectBuilder interface. While  DefaultMaven's invocation of the component has a globalProfileManager available (with the active settings profiles set) it cannot be passed into the MavenProjectBuilder component. Alternatively, If the DefaultMavenProjectBuilder had the Settings component injected into it could pass it into the constructor of the DefaultProfileManager instance it creates and then the DefaultProfileManager would load the active profiles into the POM.\n\nBy enabling this fix it would make plugins useful for management tasks, for example starting or stoping an application server.\n"
    ],
    [
        "MNG-3235",
        "MNG-3099",
        "Profiles in settings.xml not loaded when running maven without a POM I've created a custom Maven2 plugin for our SCM system (CA Harvest). This plugin is deployed in our internal remote repository. This remote repository is configured as a pluginRepository in my 'settings.xml ' file. The <profile> in which this repository is configured is loaded using the <activeProfiles> section. The plugin's groupId ('org.test.tools.maven.harvest') has been specified in the <pluginGroups> section in my 'settings.xml' file.\n\nThe plugin's 'checkout' goal needs to be executed from the commandline without a POM (because the project's POM is in the SCM system). When I execute the command 'mvn harvest:checkout' I get the following output:\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'harvest'.\n[INFO] org.test.tools.maven.harvest: checking for updates from central\nReturning NULL\n[INFO] org.apache.maven.plugins : checking for updates from central\n[INFO] org.codehaus.mojo: checking for updates from central\n[INFO] artifact org.apache.maven.plugins:maven-harvest-plugin: checking for updates from central\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] The plugin 'org.apache.maven.plugins:maven-harvest-plugin' does not exist or no valid version could be found\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Wed Oct 10 15:27:54 CEST 2007\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\nIt looks to me that only the 'central' repository is scanned for the plugin, although I have correctly specified my internal remote repository in the <profile> section of my ' settings.xml' file. Furthermore, when I specify my internal remote repository as a mirrorOf 'central' the plugin is found. So, it looks like maven doesn't scan my internal remote repository for the needed plugin when the repository is specified as a pluginRepository in my ' settings.xml' file.\n\nThe plugin can be used when it is specified in the build section of a POM (which is done to be able to run the harvest:update goal on a project to update the sources from the SCM), which to me indicates that my configuration is correct. It just doesn't look for the plugin when the maven command is issued without a POM.\n\nWhat to me indicates that it is a profile problem is the fact that when I specify my internal remote repo as a mirrorOf central, it can find my custom plugin, but it can't find other needed jars from central. When I then disable the mirror section, all the jars from central are loaded, but the build fails on a custom jar (the SCM utility jar) which is present in another local remote repo (my third-party repo) which is also defined in my profile.\n\nWhen using mvn commands on a POM, my configuration (including my profile settings) works as expected.\n\nI have tried to explicitly enable the needed profile using the -P option, but that doesn't work either.",
        "Profiles ignored when working with non-projects (such as archetype:create) Several conditions have to be met to show this bug.\n\n1) Be in an environment that does not have access to repo1.maven.org, (such as a corporate environment)\n2) Have no content in your local repository (a fresh install of maven 2.0.4)\n3) Attempt to use a plugin that has no project requirement (such as archetype:create)\n\nThe plugin fails because access to repo1.maven.org cannot be accessed.\n\nRecommended solution:\nCreate a settings.xml profile that changes the location of the 'central' repository to point to an internal resource (such as a maven-proxy installation).\n\n<settings>\n  <profiles>\n    <profile>\n      <id>use_internal</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n\n  <activeProfiles>\n    <activeProfile>use_internal</activeProfile>\n  </activeProfiles>\n</settings>\n\nTry again.\nStill fails.\n\nThe reason is that the default behaviour for non-project execution is to use the maven super pom, however there is a bug with that flow that  does not allow for the merging of the settings.xml profiles."
    ],
    [
        "MNG-3235",
        "MNG-2716",
        "Profiles in settings.xml not loaded when running maven without a POM I've created a custom Maven2 plugin for our SCM system (CA Harvest). This plugin is deployed in our internal remote repository. This remote repository is configured as a pluginRepository in my 'settings.xml ' file. The <profile> in which this repository is configured is loaded using the <activeProfiles> section. The plugin's groupId ('org.test.tools.maven.harvest') has been specified in the <pluginGroups> section in my 'settings.xml' file.\n\nThe plugin's 'checkout' goal needs to be executed from the commandline without a POM (because the project's POM is in the SCM system). When I execute the command 'mvn harvest:checkout' I get the following output:\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'harvest'.\n[INFO] org.test.tools.maven.harvest: checking for updates from central\nReturning NULL\n[INFO] org.apache.maven.plugins : checking for updates from central\n[INFO] org.codehaus.mojo: checking for updates from central\n[INFO] artifact org.apache.maven.plugins:maven-harvest-plugin: checking for updates from central\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] The plugin 'org.apache.maven.plugins:maven-harvest-plugin' does not exist or no valid version could be found\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Wed Oct 10 15:27:54 CEST 2007\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\nIt looks to me that only the 'central' repository is scanned for the plugin, although I have correctly specified my internal remote repository in the <profile> section of my ' settings.xml' file. Furthermore, when I specify my internal remote repository as a mirrorOf 'central' the plugin is found. So, it looks like maven doesn't scan my internal remote repository for the needed plugin when the repository is specified as a pluginRepository in my ' settings.xml' file.\n\nThe plugin can be used when it is specified in the build section of a POM (which is done to be able to run the harvest:update goal on a project to update the sources from the SCM), which to me indicates that my configuration is correct. It just doesn't look for the plugin when the maven command is issued without a POM.\n\nWhat to me indicates that it is a profile problem is the fact that when I specify my internal remote repo as a mirrorOf central, it can find my custom plugin, but it can't find other needed jars from central. When I then disable the mirror section, all the jars from central are loaded, but the build fails on a custom jar (the SCM utility jar) which is present in another local remote repo (my third-party repo) which is also defined in my profile.\n\nWhen using mvn commands on a POM, my configuration (including my profile settings) works as expected.\n\nI have tried to explicitly enable the needed profile using the -P option, but that doesn't work either.",
        "pluginRepositories seems to be ignored when running a goal without pom.xml I wanted to try the maven-eclipse-plugin, the goal make-artifacts.\n\nmvn eclipse:make-artifacts\n\nHowever, make-artifacts goal is not in eclipse plugin 2.2, only in 2.3-SNAPSHOT.\nSo followed guides and added pluginRepositry section into my ~/.m2/settings.xml (attached)\nso that I can use an apache plugin snapshot repository.\n\nThen I tried:\n\nmvn org.apache.maven.plugins:maven-eclipse-plugin:2.3-SNAPSHOT:make-artifacts -P apache\n\nBut maven did not try to load the snapshot plugin:\n\n...\n[INFO] Failed to resolve artifact.\n\nGroupId: org.apache.maven.plugins\nArtifactId: maven-eclipse-plugin\nVersion: 2.3-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:eclipse:pom:2.3-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\nWe can see that maven did not try the pluginRep. specified in settings.xml.\n\nThe I found out that if I run the command above in the folder where pom.xml exists, it works.\n(I created an initial project by archetype plugin.)\n\nSo it seems to me that this is a (maybe small) bug. Usually, people run maven in folder where pom.xml exists, most goals require it.\nHowever, certain goals can run without pom.xml (such as eclipse:make-artifacts) and here it seems to me that maven ignored my settings (pluginRepositories).\n"
    ],
    [
        "MNG-3235",
        "MNG-2918",
        "Profiles in settings.xml not loaded when running maven without a POM I've created a custom Maven2 plugin for our SCM system (CA Harvest). This plugin is deployed in our internal remote repository. This remote repository is configured as a pluginRepository in my 'settings.xml ' file. The <profile> in which this repository is configured is loaded using the <activeProfiles> section. The plugin's groupId ('org.test.tools.maven.harvest') has been specified in the <pluginGroups> section in my 'settings.xml' file.\n\nThe plugin's 'checkout' goal needs to be executed from the commandline without a POM (because the project's POM is in the SCM system). When I execute the command 'mvn harvest:checkout' I get the following output:\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'harvest'.\n[INFO] org.test.tools.maven.harvest: checking for updates from central\nReturning NULL\n[INFO] org.apache.maven.plugins : checking for updates from central\n[INFO] org.codehaus.mojo: checking for updates from central\n[INFO] artifact org.apache.maven.plugins:maven-harvest-plugin: checking for updates from central\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] The plugin 'org.apache.maven.plugins:maven-harvest-plugin' does not exist or no valid version could be found\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Wed Oct 10 15:27:54 CEST 2007\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\nIt looks to me that only the 'central' repository is scanned for the plugin, although I have correctly specified my internal remote repository in the <profile> section of my ' settings.xml' file. Furthermore, when I specify my internal remote repository as a mirrorOf 'central' the plugin is found. So, it looks like maven doesn't scan my internal remote repository for the needed plugin when the repository is specified as a pluginRepository in my ' settings.xml' file.\n\nThe plugin can be used when it is specified in the build section of a POM (which is done to be able to run the harvest:update goal on a project to update the sources from the SCM), which to me indicates that my configuration is correct. It just doesn't look for the plugin when the maven command is issued without a POM.\n\nWhat to me indicates that it is a profile problem is the fact that when I specify my internal remote repo as a mirrorOf central, it can find my custom plugin, but it can't find other needed jars from central. When I then disable the mirror section, all the jars from central are loaded, but the build fails on a custom jar (the SCM utility jar) which is present in another local remote repo (my third-party repo) which is also defined in my profile.\n\nWhen using mvn commands on a POM, my configuration (including my profile settings) works as expected.\n\nI have tried to explicitly enable the needed profile using the -P option, but that doesn't work either.",
        "Active-by-default profiles from settings.xml are not active without pom.xml I use Archiva as Maven proxy, see Maven settings file attached for details. It contains only one profile that is active by default and contains repository URLs on our local area network. If I try to build a specific project, which has pom.xml of course, the profile is being activated and downloads appropriate artifacts from the proxy server. However, when I execute a specific plugin goal without any project, Maven downloads all required artifacts from its central repository, which indicated that the profile hasn't been activated. I'm not sure, whether it is a bug or not. Anyway, it would be good to have _all_ traffic going through the proxy server.\n\nC:\\Java>mvn archetype:create\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'archetype'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Default Project\n[INFO]    task-segment: [archetype:create] (aggregator-style)\n[INFO] ----------------------------------------------------------------------------\nDownloading: http://repo1.maven.org/maven2/plexus/plexus-utils/1.0.2/plexus-utils-1.0.2.jar\n...."
    ],
    [
        "MNG-3242",
        "MNG-3241",
        "It's not possible to get a property with unescaped & sign for urls I found no way to create a property with a not escaped ampersand (&-sign). This is needed for a MySQL jdbc-connection String with some connection variabled and should be filtered in a properties file during compile phase.\n\nIt tried to escape it with &amp; This leeds to following error: Project build error Cannot read project model from interpolating filter of serialized version.\n\nIt is no option to use a double escaping with &amp;amp;. Here I get a &amp; in my connection url.\n\nI also tried to use a <[CDATA[ ... ]]> with the same problems. It's not possible to use & sign. And if I use &amp; this escaped tag appears in my properties file after filtering.",
        "It's not possible to get a property with unescaped & sign for urls I found no way to create a property with a not escaped ampersand (&-sign). This is needed for a MySQL jdbc-connection String with some connection variabled and should be filtered in a properties file during compile phase.\n\nIt tried to escape it with &amp; This leeds to following error: Project build error Cannot read project model from interpolating filter of serialized version.\n\nIt is no option to use a double escaping with &amp;amp;. Here I get a &amp; in my connection url.\n\nI also tried to use a <[CDATA[ ... ]]> with the same problems. It's not possible to use & sign. And if I use &amp; this escaped tag appears in my properties file after filtering."
    ],
    [
        "MNG-3243",
        "MNG-3241",
        "It's not possible to get a property with unescaped & sign for urlsIt's not possible to get a property with unescaped & sign for urls I found no way to create a property with a not escaped ampersand (&-sign). This is needed for a MySQL jdbc-connection String with some connection variabled and should be filtered in a properties file during compile phase.\n\nIt tried to escape it with &amp; This leeds to following error: Project build error Cannot read project model from interpolating filter of serialized version.\n\nIt is no option to use a double escaping with &amp;amp;. Here I get a &amp; in my connection url.\n\nI also tried to use a <[CDATA[ ... ]]> with the same problems. It's not possible to use & sign. And if I use &amp; this escaped tag appears in my properties file after filtering.",
        "It's not possible to get a property with unescaped & sign for urls I found no way to create a property with a not escaped ampersand (&-sign). This is needed for a MySQL jdbc-connection String with some connection variabled and should be filtered in a properties file during compile phase.\n\nIt tried to escape it with &amp; This leeds to following error: Project build error Cannot read project model from interpolating filter of serialized version.\n\nIt is no option to use a double escaping with &amp;amp;. Here I get a &amp; in my connection url.\n\nI also tried to use a <[CDATA[ ... ]]> with the same problems. It's not possible to use & sign. And if I use &amp; this escaped tag appears in my properties file after filtering."
    ],
    [
        "MNG-3243",
        "MNG-3242",
        "It's not possible to get a property with unescaped & sign for urlsIt's not possible to get a property with unescaped & sign for urls I found no way to create a property with a not escaped ampersand (&-sign). This is needed for a MySQL jdbc-connection String with some connection variabled and should be filtered in a properties file during compile phase.\n\nIt tried to escape it with &amp; This leeds to following error: Project build error Cannot read project model from interpolating filter of serialized version.\n\nIt is no option to use a double escaping with &amp;amp;. Here I get a &amp; in my connection url.\n\nI also tried to use a <[CDATA[ ... ]]> with the same problems. It's not possible to use & sign. And if I use &amp; this escaped tag appears in my properties file after filtering.",
        "It's not possible to get a property with unescaped & sign for urls I found no way to create a property with a not escaped ampersand (&-sign). This is needed for a MySQL jdbc-connection String with some connection variabled and should be filtered in a properties file during compile phase.\n\nIt tried to escape it with &amp; This leeds to following error: Project build error Cannot read project model from interpolating filter of serialized version.\n\nIt is no option to use a double escaping with &amp;amp;. Here I get a &amp; in my connection url.\n\nI also tried to use a <[CDATA[ ... ]]> with the same problems. It's not possible to use & sign. And if I use &amp; this escaped tag appears in my properties file after filtering."
    ],
    [
        "MNG-3253",
        "MNG-657",
        "Initialization of Extensions like Wagon happens after Retrieval of Parent-POM Consider the following scenario:\nArtifacts are stored in an organization-specific repository using some protocol like sftp, scp or ftp. To properly access this repository, one needs to enable the proper wagon using a build <extension>. No troubles so far. Now project \"dummy\" inherits configuration from project \"parent\". The corresponding Parent-POM needs not to be located in the local file system of the executing user (e.g not checked out from scm) but should be retrieved from the repository like any other artifact. Unfortunately, Maven initializes build extensions like wagon after the artifact resolution for the Parent-POM. So, when the Parent-POM needs to be retrieved from a repository and this repository requires a specific wagon but this wagon has not been initialized yet, the build will fail:{code}\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: de.test:parent::SNAPSHOT of project: null:dummy:jar:null in relative path: ../pom.xml\n[DEBUG] Parent-POM: de.test:parent::SNAPSHOT not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: de.test:parent::SNAPSHOT for project: null:dummy:jar:null from the repository.\n[INFO] snapshot de.test:parent:SNAPSHOT: checking for updates from some-ftp-repo\n[WARNING] repository metadata for: 'snapshot de.test:parent:SNAPSHOT' could not be retrieved from repository: some-ftp-repo due to an error: Unsupported Protocol: 'ftp': Cannot find wagon which supports the requested protocol: ftp\n...\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n{code}\n\nInitializing build extensions from the current project, at least core stuff like wagon, should be the first build task such that repository access is always possible.",
        "possible chicken and egg problem with extensions try and figure out the best way to resolve a chicken and egg problem where an extension provides something needed to get the extension (for example, a wagon that is used for the remote repository).\n\nThe only viable mechanism may be to put the extension in /lib instead."
    ],
    [
        "MNG-3289",
        "MNG-3249",
        "unable to resolve profile properties from a parent pom I defined some properties in the default profile in the settings.xml :\n\n<settings>\n  <profiles>\n    <profile>\n      <id>profile01</id>\n      <activation> \n        <activeByDefault>true</activeByDefault>\n      </activation> \n      <properties>\n        <scm.connection>scm:svn:svn://linux-dev/source</scm.connection>\n\t<issue.url>http://linux-dev/bugzilla</issue.url>\n      </properties>\n    </profile>\n  </profiles>\n</settings>\n\nI have defined a parent pom file named BaseProject (for default configuration, report, etc.) used in all project I use. I can compile and install this pom to my local repository. I reference this pom as the parent for my other projects. \n\n* For a project with parent defined to my BaseProject-pom and without dependencies to other project, there is no problem : I can compile and install without any warning. \n\n* But for a project with parent defined to my BaseProject-pom and with some dependencies to other project (previously compiled and installed), I have this warning :\n\n[WARNING] POM for 'net.dummy:FW-Interfaces:pom:1.0-SNAPSHOT:compile' is invalid. It will be ignored for artifact resolution. Reason: The POM expression: ${pom.scm.connection} could not be evaluated. Reason: Expression value '${pom.scm.connection}/FW/FW-Interfaces' references itself in 'net.dummy:FW-Interfaces:jar:1.0-SNAPSHOT'. for project net.dummy:FW-Interfaces at Artifact [net.dummy:FW-Interfaces:pom:1.0-SNAPSHOT:compile]\n\nBut ${pom.scm.connection} (or ${scm.connection}) is defined  in the default profile of the settings.xml.\n\nBut It is just a warning and can go through all the compilation steps.\n\n* And for an helper project (called 'all_project.pom') without parent and dependencies but with all the project in need to compile in the 'modules' section. I got this : \n[WARNING] POM for 'net.dummy:BaseProject-Conf:pom:1.0-SNAPSHOT:runtime' is invalid. It will be ignored for artifact resolution. Reason: The POM expression: ${pom.scm.connection} could not be evaluated. Reason: Expression value '${pom.scm.connection}/BaseProject-Conf' references itself in 'net.dummy:BaseProject-Conf:jar:1.0-SNAPSHOT'. for project net.dummy:BaseProject-Conf at Artifact [net.dummy:BaseProject-Conf:pom:1.0-SNAPSHOT:runtime]\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.UnsupportedOperationException\n        at java.util.AbstractCollection.add(AbstractCollection.java:221)\n        at org.apache.maven.plugin.DefaultPluginManager.checkPlexusUtils(DefaultPluginManager.java:743)\n        at org.apache.maven.extension.DefaultExtensionManager.addExtension(DefaultExtensionManager.java:112)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.findExtensions(DefaultLifecycleExecutor.java:158)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:141)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:280)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\n(BaseProject-Conf is the first 'module' of BaseProject)\n\nAlso see Wish n\u00b0 MNG-2896.\n\nRegards.",
        "Profile resident POM element overrides do not effect inherited projects if the children have their own explicitly defined elements. If i declare a profile in a base pom that overrides settings in the POM, those settings are only overridden in the base POM and not in the inherited children in a reactor build if the children also explicitly define their own values for those overridden settings. I almost didn't create this as you could argue that that is how children maintain control but I think the profile evaluation should be applied to each level of the hierarchy, as the inheritance model is built up, i.e. I expect the children to inherit the profile too, not just the application of that profile to it's ancestors state and thus that profile should applied to the child's model, after the rest of the child's inherited state has been established, and thus it should still override the child's settings."
    ],
    [
        "MNG-3296",
        "MNG-3084",
        "mvn.bat looses error code on windows NT type platforms There is a bug in the mvn.bat script that prevents that an error code is properly returned to the caller of the script. \nThe batch script executes the following lines after maven has been invoked if an error occurs:\n\nif ERRORLEVEL 1 goto error \n\n:error\nset ERROR_CODE=1\n\n:end\nif \"%OS%\"==\"Windows_NT\" goto endNT\n\n:endNT\n@endlocal\n\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n\nexit /B %ERROR_CODE%\n\nThe problem is the endlocal statement. Calling endlocal ends the scope in which ERROR_CODE was set to 1. The previous value of ERROR_CODE will be reinstantiated (which is always 0, see line 46).\n\nTo fix the problem make the ERROR_CODE value known in the outer (\"global\") scope by changing the endlocal statement into\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n",
        "mvn.bat in maven 2.0.7 does not return the correct error code. As noted here[1], mvn.bat does not return its error code correctly. This causes continuum to not detect failed builds.\n\n[1] http://www.nabble.com/result-code-for-mvn.bat-on-windows-broken-t3970169s177.html"
    ],
    [
        "MNG-3296",
        "MNG-3087",
        "mvn.bat looses error code on windows NT type platforms There is a bug in the mvn.bat script that prevents that an error code is properly returned to the caller of the script. \nThe batch script executes the following lines after maven has been invoked if an error occurs:\n\nif ERRORLEVEL 1 goto error \n\n:error\nset ERROR_CODE=1\n\n:end\nif \"%OS%\"==\"Windows_NT\" goto endNT\n\n:endNT\n@endlocal\n\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n\nexit /B %ERROR_CODE%\n\nThe problem is the endlocal statement. Calling endlocal ends the scope in which ERROR_CODE was set to 1. The previous value of ERROR_CODE will be reinstantiated (which is always 0, see line 46).\n\nTo fix the problem make the ERROR_CODE value known in the outer (\"global\") scope by changing the endlocal statement into\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n",
        "mvn.bat does not return proper errorlevel The mvn.bat script always exits with code 0 on Windows XP/NT. With version 2.0.7, the following line was removed from the error section:\n\nif \"%OS%\"==\"Windows_NT\" @endlocal\n\nThis causes the ERROR_CODE to retain the value 0 when the program exits. Replacing this line solves the problem."
    ],
    [
        "MNG-3296",
        "MNG-3126",
        "mvn.bat looses error code on windows NT type platforms There is a bug in the mvn.bat script that prevents that an error code is properly returned to the caller of the script. \nThe batch script executes the following lines after maven has been invoked if an error occurs:\n\nif ERRORLEVEL 1 goto error \n\n:error\nset ERROR_CODE=1\n\n:end\nif \"%OS%\"==\"Windows_NT\" goto endNT\n\n:endNT\n@endlocal\n\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n\nexit /B %ERROR_CODE%\n\nThe problem is the endlocal statement. Calling endlocal ends the scope in which ERROR_CODE was set to 1. The previous value of ERROR_CODE will be reinstantiated (which is always 0, see line 46).\n\nTo fix the problem make the ERROR_CODE value known in the outer (\"global\") scope by changing the endlocal statement into\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n",
        "mvn.bat always exits 0 on WinXP http://jira.codehaus.org/browse/MNG-2127 seems to have started again with 2.0.7.  Regardless of a build passing or failing an %ERRORLVEL%/exit code of 0 is set.  When you change back to 2.0.6 an exir code of 1 is correctly output for a failure."
    ],
    [
        "MNG-3314",
        "MNG-2433",
        "offline build not running, when having SNAPSHOT dependencies am having troubles with\nmvn ... -o\n(with maven 2.0.7)\n\nsays not able to download (but, really, the file is in my local repo)\nThe dependency is a -SNAPSHOT (for what's worth)\n\nLuckily, when traveling by train, I had maven 2.0.4 on my box as well.\nA change to use 2.0.4 works fine.\n\nSo, is this an already know bug in 2.0.7 ?\nTo my understanding it is a bug, since offline just shouldn't try to get a newer\nSNAPSHOT, perhaps I am wrong.\n\nI know that relying on SNAPSHOTs can be dangerous, but from -o I would expect\njust not checking for new stuff.\n\nand... for some reasons, sometimes,\nit just downloads a new SNAPSHOT.\n\nThat is a pain, when you are \"maintaining\" the same snapshot on your\nbox, but the build just goes ahead and actually downloads a version.",
        "Maven looks for snapshots in offline mode It seems that sometimes Maven2 is looking for snapshots in offline mode (this happens for example in the Cocoon project). here is an output that might help:\n:\\dev\\workspace\\cocoon-2.2\\core\\cocoon-webapp>mvn -o -Dmaven.test.skip=true coc\noon:deploy\n[INFO]\nNOTE: Maven is executing in offline mode. Any artifacts not already in your loca\nl\nrepository will be inaccessible.\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'cocoon'.\n[INFO] org.apache.maven.plugins: checking for updates from snapshots\n[INFO] org.apache.maven.plugins: checking for updates from mortbay-repo\n[INFO] org.codehaus.mojo: checking for updates from snapshots\n[INFO] org.codehaus.mojo: checking for updates from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from central\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from apache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from apache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from apache.snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from central\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from apache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from apache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from apache.snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from central\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from apache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from apache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from apache.snapshots\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from s\nnapshots\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from m\nortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from c\nentral\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from a\npache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from a\npache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from a\npache.snapshots"
    ],
    [
        "MNG-3315",
        "MNG-3133",
        "Path normalization during inheritance prohibits usage of properties Assume a multi-module scenario with the following (non-standard) directory layout:\n  project/\n    project-parent/\n    project-module-1/\n    project-module-2/\nThat is, the parent POM is placed in a sibling directory rather than the parent directory of the module projects such that the \"module path adjustment\" is \"../\" when inheriting paths/URLs from the project-parent.\n\nNow, consider the following POM snippet for the site distribution (or any other element where Maven adjusts paths for sub modules):\n{code:xml}\n  <site>\n    <id>website</id>\n    <url>dav:http://www.company.org/project</url>\n  </site>\n{code}\nAll fine so far, but this slightly modified snippet does not work any more:\n{code:xml}\n  <properties>\n    <site.url>dav:http://www.company.org/project</site.url>\n  </properties>\n  ...\n  <site>\n    <id>website</id>\n    <url>${site.url}</url>\n  </site>\n{code}\n\nJust replacing the string by a property produces a bad URL for any sub project. This problems originates from DefaultModelInheritanceAssembler.resolvePath() that \"normalizes\" a string like \"${site.url}/../project-module-1\" to \"project-module-1\".\n\nWhile the usage of the property is not mandatory, I nevertheless think the moral from this subtle issue should be not  to do any path normalization until all properties have been interpolated, i.e.:\n- inheritance ( URL = \"${site.url}/../project-module-1\" )\n- interpolation ( URL = \"dav:http://www.company.org/project/../project-module-1\" )\n- path/URL normalization ( URL = \"dav:http://www.company.org/project-module-1\" )\n\nOtherwise, Maven calls another weird pitfall its own.",
        "DefaultModelInheritence::appendPath assumes it is operating on interpolated/literal paths Used by all the assembleXXXInheritance methods within assembleModelInheritance, the appendPath method assumes that its dealing with literal paths which is not a documented restriction. Thus having ${expressions} in any of the paths being operated on (e.g. project URL, distroManagement site, SCM, etc etc), the results will not be valid.\n\nThis whole area of Maven's core requires a specification so it can be coded too and maintained.\n\n"
    ],
    [
        "MNG-3337",
        "MNG-1928",
        "Downloading plugins for an inhouse repository problem For an inhouse maven repository we can't find a way to download the plugins to local repo.\nWhen we try to execute an initial archetype:create command encountered maven couldn't find the archetype plugin error. To deal with this we just copies org.apache folder to local repo and then everything fine. But again if i need any plugin that is not in copied to local repo manually maven couldn't download it from internal repository.",
        "ignores pluginRepository in settings.xml, honors in POM if specified in the POM as a plugin repo, maven can use the team.andromda.org/maven2 repo for finding, downloading, and installing plugins. \nhowever, settings.xml ignores plugin repos and only checks central if the plugin has never been downloaded before. \n\nfor instance. if settings.xml has a pluginRepository entry for team.andromda.org/maven2 then:\nmvn andromdapp:generate \nshould download the andromdapp plugin from our repo. but it doesn't. only central is checked and it fails to find the plugin."
    ],
    [
        "MNG-3337",
        "MNG-2236",
        "Downloading plugins for an inhouse repository problem For an inhouse maven repository we can't find a way to download the plugins to local repo.\nWhen we try to execute an initial archetype:create command encountered maven couldn't find the archetype plugin error. To deal with this we just copies org.apache folder to local repo and then everything fine. But again if i need any plugin that is not in copied to local repo manually maven couldn't download it from internal repository.",
        "DefaultMavenProjectBuilder.buildStandaloneSuperProject() should include a ProfileManager that includes active profiles from settings.xml I have a custom plugin that performs JMX operations using properties defined in a profile. I have defined an active profile in the settings.xml that specifies properties that the plugin uses and everything works fine when a POM is present. Now I would like the plugin to work from any directory and have added the plugin annotation \"requiresProject=false\" to it. \n\nIf I run the plugin in a directory without a POM the profile properties from settings.xml are never loaded. After performing some debugging I have determined that the default super-pom's model  that is used when no POM xml file is available does not contain the profile properties defined in settings.xml while if a POM.xml is available the settings.xml profiles are loaded into the POM.\n\nThis all appears to boil down to the lack of a ProfileManager parameter to thebuildStandaloneSuperProject method defined in the  MavenProjectBuilder interface. While  DefaultMaven's invocation of the component has a globalProfileManager available (with the active settings profiles set) it cannot be passed into the MavenProjectBuilder component. Alternatively, If the DefaultMavenProjectBuilder had the Settings component injected into it could pass it into the constructor of the DefaultProfileManager instance it creates and then the DefaultProfileManager would load the active profiles into the POM.\n\nBy enabling this fix it would make plugins useful for management tasks, for example starting or stoping an application server.\n"
    ],
    [
        "MNG-3337",
        "MNG-3099",
        "Downloading plugins for an inhouse repository problem For an inhouse maven repository we can't find a way to download the plugins to local repo.\nWhen we try to execute an initial archetype:create command encountered maven couldn't find the archetype plugin error. To deal with this we just copies org.apache folder to local repo and then everything fine. But again if i need any plugin that is not in copied to local repo manually maven couldn't download it from internal repository.",
        "Profiles ignored when working with non-projects (such as archetype:create) Several conditions have to be met to show this bug.\n\n1) Be in an environment that does not have access to repo1.maven.org, (such as a corporate environment)\n2) Have no content in your local repository (a fresh install of maven 2.0.4)\n3) Attempt to use a plugin that has no project requirement (such as archetype:create)\n\nThe plugin fails because access to repo1.maven.org cannot be accessed.\n\nRecommended solution:\nCreate a settings.xml profile that changes the location of the 'central' repository to point to an internal resource (such as a maven-proxy installation).\n\n<settings>\n  <profiles>\n    <profile>\n      <id>use_internal</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <name>Internal Central Repository</name>\n          <url>http://repo.internal.com/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n\n  <activeProfiles>\n    <activeProfile>use_internal</activeProfile>\n  </activeProfiles>\n</settings>\n\nTry again.\nStill fails.\n\nThe reason is that the default behaviour for non-project execution is to use the maven super pom, however there is a bug with that flow that  does not allow for the merging of the settings.xml profiles."
    ],
    [
        "MNG-3337",
        "MNG-2716",
        "Downloading plugins for an inhouse repository problem For an inhouse maven repository we can't find a way to download the plugins to local repo.\nWhen we try to execute an initial archetype:create command encountered maven couldn't find the archetype plugin error. To deal with this we just copies org.apache folder to local repo and then everything fine. But again if i need any plugin that is not in copied to local repo manually maven couldn't download it from internal repository.",
        "pluginRepositories seems to be ignored when running a goal without pom.xml I wanted to try the maven-eclipse-plugin, the goal make-artifacts.\n\nmvn eclipse:make-artifacts\n\nHowever, make-artifacts goal is not in eclipse plugin 2.2, only in 2.3-SNAPSHOT.\nSo followed guides and added pluginRepositry section into my ~/.m2/settings.xml (attached)\nso that I can use an apache plugin snapshot repository.\n\nThen I tried:\n\nmvn org.apache.maven.plugins:maven-eclipse-plugin:2.3-SNAPSHOT:make-artifacts -P apache\n\nBut maven did not try to load the snapshot plugin:\n\n...\n[INFO] Failed to resolve artifact.\n\nGroupId: org.apache.maven.plugins\nArtifactId: maven-eclipse-plugin\nVersion: 2.3-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  org.apache.maven.plugins:eclipse:pom:2.3-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n\nWe can see that maven did not try the pluginRep. specified in settings.xml.\n\nThe I found out that if I run the command above in the folder where pom.xml exists, it works.\n(I created an initial project by archetype plugin.)\n\nSo it seems to me that this is a (maybe small) bug. Usually, people run maven in folder where pom.xml exists, most goals require it.\nHowever, certain goals can run without pom.xml (such as eclipse:make-artifacts) and here it seems to me that maven ignored my settings (pluginRepositories).\n"
    ],
    [
        "MNG-3337",
        "MNG-2918",
        "Downloading plugins for an inhouse repository problem For an inhouse maven repository we can't find a way to download the plugins to local repo.\nWhen we try to execute an initial archetype:create command encountered maven couldn't find the archetype plugin error. To deal with this we just copies org.apache folder to local repo and then everything fine. But again if i need any plugin that is not in copied to local repo manually maven couldn't download it from internal repository.",
        "Active-by-default profiles from settings.xml are not active without pom.xml I use Archiva as Maven proxy, see Maven settings file attached for details. It contains only one profile that is active by default and contains repository URLs on our local area network. If I try to build a specific project, which has pom.xml of course, the profile is being activated and downloads appropriate artifacts from the proxy server. However, when I execute a specific plugin goal without any project, Maven downloads all required artifacts from its central repository, which indicated that the profile hasn't been activated. I'm not sure, whether it is a bug or not. Anyway, it would be good to have _all_ traffic going through the proxy server.\n\nC:\\Java>mvn archetype:create\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'archetype'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Maven Default Project\n[INFO]    task-segment: [archetype:create] (aggregator-style)\n[INFO] ----------------------------------------------------------------------------\nDownloading: http://repo1.maven.org/maven2/plexus/plexus-utils/1.0.2/plexus-utils-1.0.2.jar\n...."
    ],
    [
        "MNG-3337",
        "MNG-3235",
        "Downloading plugins for an inhouse repository problem For an inhouse maven repository we can't find a way to download the plugins to local repo.\nWhen we try to execute an initial archetype:create command encountered maven couldn't find the archetype plugin error. To deal with this we just copies org.apache folder to local repo and then everything fine. But again if i need any plugin that is not in copied to local repo manually maven couldn't download it from internal repository.",
        "Profiles in settings.xml not loaded when running maven without a POM I've created a custom Maven2 plugin for our SCM system (CA Harvest). This plugin is deployed in our internal remote repository. This remote repository is configured as a pluginRepository in my 'settings.xml ' file. The <profile> in which this repository is configured is loaded using the <activeProfiles> section. The plugin's groupId ('org.test.tools.maven.harvest') has been specified in the <pluginGroups> section in my 'settings.xml' file.\n\nThe plugin's 'checkout' goal needs to be executed from the commandline without a POM (because the project's POM is in the SCM system). When I execute the command 'mvn harvest:checkout' I get the following output:\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'harvest'.\n[INFO] org.test.tools.maven.harvest: checking for updates from central\nReturning NULL\n[INFO] org.apache.maven.plugins : checking for updates from central\n[INFO] org.codehaus.mojo: checking for updates from central\n[INFO] artifact org.apache.maven.plugins:maven-harvest-plugin: checking for updates from central\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] The plugin 'org.apache.maven.plugins:maven-harvest-plugin' does not exist or no valid version could be found\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Wed Oct 10 15:27:54 CEST 2007\n[INFO] Final Memory: 3M/6M\n[INFO] ------------------------------------------------------------------------\n\nIt looks to me that only the 'central' repository is scanned for the plugin, although I have correctly specified my internal remote repository in the <profile> section of my ' settings.xml' file. Furthermore, when I specify my internal remote repository as a mirrorOf 'central' the plugin is found. So, it looks like maven doesn't scan my internal remote repository for the needed plugin when the repository is specified as a pluginRepository in my ' settings.xml' file.\n\nThe plugin can be used when it is specified in the build section of a POM (which is done to be able to run the harvest:update goal on a project to update the sources from the SCM), which to me indicates that my configuration is correct. It just doesn't look for the plugin when the maven command is issued without a POM.\n\nWhat to me indicates that it is a profile problem is the fact that when I specify my internal remote repo as a mirrorOf central, it can find my custom plugin, but it can't find other needed jars from central. When I then disable the mirror section, all the jars from central are loaded, but the build fails on a custom jar (the SCM utility jar) which is present in another local remote repo (my third-party repo) which is also defined in my profile.\n\nWhen using mvn commands on a POM, my configuration (including my profile settings) works as expected.\n\nI have tried to explicitly enable the needed profile using the -P option, but that doesn't work either."
    ],
    [
        "MNG-3339",
        "MNG-2502",
        "Embedder does not resolve transitive dependencies in multi-module project, unless the modules were installed into local repository previously. I've attached the project that have three modules:\nm1 (depends on m2)\nm2 (depends on m3)\nm3 (depends on junit)\n\nall the dependencies are of the 'compile' scope.\n\nI would expect that embedder resolves dependencies for m1 into m2, m3, and junit.\nBut it doesn't do that if repository does not contain these modules installed. The only dependency is the direct one (m2).\nOn the other hand, if I previously install the entire project into repository, I'll have the expected behaviour.\n",
        "mvn package does not work on J2EE multi module build In a multi module build consisting of an ejb.jar (with an ejb-client.jar), a war, and an ear where the war depends on the ejb-client.jar and the ear depends on the ejb.jar and the war, a reactor build with\n\nmvn package\n\nfails. The war build tries to download the ejb-client.jar from the repository instead of using the just built version.\n\nIf I first run 'mvn install' in the ejb module the following multi module 'mvn package' succeeds.\n\nThis issue causes also problems for the realease plugin since the sub build fails."
    ],
    [
        "MNG-3349",
        "MNG-870",
        "reactor build order doesn't consider plugins modules in build order When a project has maven plugins as modules, and some modules use the plugin, the reactor SHOULD build the plugins before the modules that use it.\nA workaround is to declare plugins modules FIRST in parent POM <modules>",
        "Make plugin discovery reactor aware If plugin discovery is reactor aware, plugins that are part of a reactor build and are used to aid the build\ncan be used in one go. Else first the plugin should be installed, and then the rest of the project can\nbe built.\n\nBut mainly this aids in integration testing for plugins: the maven-it-plugin in sandbox can't add the current plugin\n+ artifact to the lifecycle without making some methods public. If the plugin were to be discovered using the reactor,\nthose methods can remain private."
    ],
    [
        "MNG-3349",
        "MNG-1883",
        "reactor build order doesn't consider plugins modules in build order When a project has maven plugins as modules, and some modules use the plugin, the reactor SHOULD build the plugins before the modules that use it.\nA workaround is to declare plugins modules FIRST in parent POM <modules>",
        "it plugin not picking up the plugin being built (goes to the local repo instead) Try the following to reproduce the problem:\n\n- checkout the clover plugin\n- delete the clover plugin from your local \n- run \"mvn install\" on the clover plugin. It'll start the it plugin and try to execute an it test that requires the clover plugin\n- it'll fail\n"
    ],
    [
        "MNG-3349",
        "MNG-2135",
        "reactor build order doesn't consider plugins modules in build order When a project has maven plugins as modules, and some modules use the plugin, the reactor SHOULD build the plugins before the modules that use it.\nA workaround is to declare plugins modules FIRST in parent POM <modules>",
        "multi-project build that creates it's own plugins needs bootstrapping I have a multi-project build. Some of the artifacts are maven-plugins. Other artifacts depends on these plugins. For some reason the current Maven2 is not correctly doing the dependency check before building to see whether the artifacts in the multi-project build depend on other maven-plugin artifacts within the same multi-project build. \nFor now I solved the issue by using a second parent pom to bootstrap the build. This bootstrap parent pom is creating all the plugins. Afterwards, I can use my normal parent pom to build all artifacts.\nIt would be nice that Maven2 could do the 'bootstrap build' himself."
    ],
    [
        "MNG-3349",
        "MNG-2677",
        "reactor build order doesn't consider plugins modules in build order When a project has maven plugins as modules, and some modules use the plugin, the reactor SHOULD build the plugins before the modules that use it.\nA workaround is to declare plugins modules FIRST in parent POM <modules>",
        "Plugin discovery not reactor aware Regression of MNG-870"
    ],
    [
        "MNG-3355",
        "MNG-2220",
        "CLONE -${pom.build.sourceDirectory} and ${pom.build.testSourceDirectory} no longer recognized The properties ${pom.build.sourceDirectory} and ${pom.build.testSourceDirectory} (and perhaps others as well) are no longer recognized in pom.xml. The following pom fragment had the desired effect of copying resources from the sourceDirectory in version 2.0.3, but doesn't work in 2.0.4:\n\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>src-test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>${pom.build.sourceDirectory}</directory>\n        <includes>\n          <include>**/*.properties</include>\n        </includes>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>${pom.build.testSourceDirectory}</directory>\n        <includes>\n          <include>**/mockfiles/</include>\n        </includes>\n      </testResource>\n    </testResources>\n\nThe attached project will fail on a 'mvn test' under maven 2.0.4 and succeed under 2.0.3",
        "${pom.build.sourceDirectory} and ${pom.build.testSourceDirectory} no longer recognized The properties ${pom.build.sourceDirectory} and ${pom.build.testSourceDirectory} (and perhaps others as well) are no longer recognized in pom.xml. The following pom fragment had the desired effect of copying resources from the sourceDirectory in version 2.0.3, but doesn't work in 2.0.4:\n\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>src-test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>${pom.build.sourceDirectory}</directory>\n        <includes>\n          <include>**/*.properties</include>\n        </includes>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>${pom.build.testSourceDirectory}</directory>\n        <includes>\n          <include>**/mockfiles/</include>\n        </includes>\n      </testResource>\n    </testResources>\n\nThe attached project will fail on a 'mvn test' under maven 2.0.4 and succeed under 2.0.3"
    ],
    [
        "MNG-3372",
        "MNG-2928",
        "dependency:tree throws exception Running\n   mvn -Papache org.apache.maven.plugins:maven-dependency-plugin:2.0-alpha-5-SNAPSHOT:tree \non a pom containing the following entry throws an exception, unless an exclusion is applied as shown below.\n\n\t\t<dependency>\n\t\t\t<groupId>jasperreports</groupId>\n\t\t\t<artifactId>jasperreports</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t\t<scope>compile</scope>\n\t\t\t<exclusions>\n\t\t\t\t<!-- This exclusion needed to avoid crash in dependency:tree version 2.0-alpha-5-SNAPSHOT -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>commons-digester</groupId>\n\t\t\t\t\t<artifactId>commons-digester</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>xml-apis</groupId>\n\t\t\t\t\t<artifactId>xml-apis</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>eclipse</groupId>\n\t\t\t\t\t<artifactId>jdtcore</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-digester</groupId>\n\t\t\t<artifactId>commons-digester</artifactId>\n\t\t\t<version>1.8</version>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n\n\nException:\n\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] version was null for commons-digester:commons-digester\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException: version was null for commons-digester:commons-digester\n        at org.apache.maven.artifact.DefaultArtifact.getBaseVersion(DefaultArtifact.java:362)\n        at org.apache.maven.artifact.DefaultArtifact.getId(DefaultArtifact.java:225)\n        at org.apache.maven.shared.dependency.tree.DependencyTreeResolutionListener.flushDependencyManagement(DependencyTreeResolutionListener.java:524)\n        at org.apache.maven.shared.dependency.tree.DependencyTreeResolutionListener.omitForNearer(DependencyTreeResolutionListener.java:209)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.fireEvent(DefaultArtifactCollector.java:487)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.fireEvent(DefaultArtifactCollector.java:462)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:234)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:370)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:370)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:76)\n        at org.apache.maven.shared.dependency.tree.DefaultDependencyTreeBuilder.buildDependencyTree(DefaultDependencyTreeBuilder.java:102)\n        at org.apache.maven.plugin.dependency.TreeMojo.execute(TreeMojo.java:218)\n\nMy uneducated guess is that for that particular version of the dependency, neither the dependency's pom nor any parent pom defines a version for commons-digester.\n\nPS: dependency:tree rocks!",
        "Null pointer exeception when introducing version range [major.minor.build-SNAPSHOT,) Due to selection of \"wrong\" version of a library (SystemResultDomain 1.0.2), an \"hard-limit\" was introduced on one project forcing the build to use at least 1.0.4-SNAPSHOT). All others are soft versions, so I dont see an inconsistency. \n\nThe dependency check fails with: \n\n[DEBUG]     com.mobilepeople.resultdomain:SystemResultDomain:jar:1.0.2:compile (selected for compile)\n...\n[DEBUG] SystemResultDomain: resolved to version 1.0.4-20070402.154234-1 from repository mobilepeople\n[DEBUG]     com.mobilepeople.resultdomain:SystemResultDomain:jar:1.0.4-SNAPSHOT:compile (setting version to: 1.0.4-SNAPSHOT from range: [1.0.4-SNAPSHOT,)\n)\n[DEBUG]     com.mobilepeople.resultdomain:SystemResultDomain:jar:1.0.4-SNAPSHOT:compile (removed - nearer found: null)\n...\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] version was null for com.mobilepeople.resultdomain:SystemResultDomain\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\njava.lang.NullPointerException: version was null for com.mobilepeople.resultdomain:SystemResultDomain\n        at org.apache.maven.artifact.DefaultArtifact.getBaseVersion(DefaultArtifact.java:364)\n        at org.apache.maven.artifact.DefaultArtifact.getId(DefaultArtifact.java:225)\n        at org.apache.maven.artifact.resolver.ResolutionNode.getDependencyTrail(ResolutionNode.java:118)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:96)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:284)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:272)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1238)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:397)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n\n"
    ],
    [
        "MNG-3385",
        "MNG-2578",
        "PluginManagement does not work for report-plugins {code:xml} <build>\n   ...\n    </pluginManagement>\n       <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-pmd-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n   ...\n  </build>\n  <reporting>\n    <plugins>  \n       <plugin>\n         <artifactId>maven-pmd-plugin</artifactId>\n       </plugin>\n    </plugins>\n  </reporting>  {code}\n\nmvn site ... use pmd-2.4-SNAPSHOT instead of the defined 2.2 ... why?",
        "Make it possible to set default versions  for reporting-plugins (i.e. plugins under <reporting>) Make it possible to set default versions  for reporting-plugins (i.e. plugins under <reporting>).\ndependencies have dependencyManagement and plugins have pluginManagement, but there doesn't seem to be anything for reportPluginManagement.\n\nCould be that I missed out on something, but I doubt it since I stumbled on this issue with aspectj-maven-plugin and it's aspectj-report (similar to javadoc).\nThe same plugin is used under build and reporting. pluginManagement stated that version 1.0-beta-4-SNAPSHOT should be used, but it was only for build.\nInstead 1.0-beta-2 (not snapshot) was used for the report.\n\nThis issue came up in the following thread in mojo-user:\nhttp://www.nabble.com/Problems-with-aspectj-maven-plugin-and-reporting-using-ajdoc-tf2060246.html#a6507979"
    ],
    [
        "MNG-3387",
        "MNG-4377",
        "Enforce redeployment for deploy phase Is there a possibility to enforce the redeployment of an artefact during the\nbuild? I get the message 'The artifact xxx has already been deployed. Not\ndeploying again.'\n\nYes, it exists but I want to replace it. \n\nThere is difference in behaviour of the m2eclipse plugin to the current cli versions 2.0.x.\n\nsee http://www.nabble.com/Enforce-redeployment-during-Build-td14997988s177.html\n\nBrian E Fox said there:\nThis was added to 2.1, it won't happen in 2.0.x. A flag to force it\nneeds to be added to the interface and to the deploy plugin, and it\nshould be backported to 2.0. Can you write a jira?\n\nDone.\n",
        "The deployer should detect previous deployments of the same version and die if that's the case. We simply have to die because giving people an option is just going to let them continue with their bad practices. If you let the redeployment of released binaries then it will happen, and it will cause problems."
    ],
    [
        "MNG-3398",
        "MNG-1701",
        "Multiple Plugin Declarations Ignored with no warning If I (accidentally) declare the same plugin in the pom twice, with different executions,only the executions from the first declaration are run.  And no warning is given saying that it is ignoring the others.  I figure there are two options to solve this: either use both declarations, or fail the build (fail -- not warning) to tell the user to fix their pom.  ",
        "Validate that a plugin is not configured twice in the pom Check that there're no two <plugin> elements of the same plugin"
    ],
    [
        "MNG-3399",
        "MNG-2941",
        "Maven shows fake network error until the next updatePolicy period Hi,\n\nThe default updatePolicy is daily.\n\nIf it has any problems in updating it marks that plugin as checked and keeping showing the same error message without trying to hit the server again.\n\nAt my work they changed the proxy configuration making the build fail, we started to have the following message:\n\nThe plugin 'org.apache.maven.plugins:maven-clean-plugin' does not exist or no valid version could be found.\n\nEven after they rollback the network configuration, maven still showing the same error.\n\nTo solve the problem I had to put this lines\n    <pluginRepository>\n      <releases>\n        <updatePolicy>always</updatePolicy>\n      </releases>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <id>central</id>\n      <name>Maven Plugin Repository</name>\n      <url>http://repo1.maven.org/maven2</url>\n    </pluginRepository>\n\nas the first pluginRepository and run for every developer just to force the update.\n\nThis workaround works fine but until I realized that this is the behavior of maven it generated a lot problems trying setup the network configuration (it was not trying to hit the network, but it still showing the same error, so all configuration attempts were worthless).\n\nShow a network error that was not checked against the current configuration is a bug.\n\nMy suggestion for an easy solution is to update timestamp of the latest hit in the repository *after* it has a success, if it fails does not update the timestamp and updatePolicy will make it keep trying for every execution until it finally hit with success. This way you don't need to verify any extra condition to see if the previous try resulted in an error. This way will make the debug of network problems much easier for the users that have the same problem.\n\nI didn't look your sources, so maybe this solution is not practical in your architecture. Feel free to use another route to solve this bug.\n\nThanks for your excellent work in maven (it is first bug in years),\nJonas Fagundes",
        "Sometime SNAPSHOTs can not be downloaded in an an online build      When an offline build fails because a SNPSHOT was not available locally, the SNAPSHOT can not be downloaded during a subsequent online build. During the offline build a  file maven-metadata-apache-snpshots.xml (with the following contents in this example) is created in .m2 repo:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><metadata>\n  <groupId>org.apache.geronimo.genesis</groupId>\n  <artifactId>genesis</artifactId>\n  <version>1.2-SNAPSHOT</version>\n</metadata>\n   All subsequent online builds fail to download this artifact from the repository with error message given below. After deleting the metadata file corresponding to the repository in which this artifact is available (maven-metadata-apache-snpshots.xml file in this example) , the artifact can be downloaded successfully. \n\nThis trace can be produced by any SNAPSHOT in any project, the following steps are for geronimo:\n1. Delete the above SNAPSHOT from the local repo.\n2. Build geronimo offlne, the build will fail.\n3. Build online, the following message will be generated.\n4. Delete the above metadata file, and build online, the SNAPSHOT will get downloaded successfully.\n\n[INFO] Scanning for projects...\nDownloading: http://people.apache.org/repo/m2-snapshot-repository/org/apache/ger\nonimo/genesis/genesis/1.2-SNAPSHOT/genesis-1.2-SNAPSHOT.pom\n[WARNING] Unable to get resource 'org.apache.geronimo.genesis:genesis:pom:1.2-SN\nAPSHOT' from repository apache-snapshots (http://people.apache.org/repo/m2-snaps\nhot-repository)\nDownloading: http://snapshots.repository.codehaus.org/org/apache/geronimo/genesi\ns/genesis/1.2-SNAPSHOT/genesis-1.2-SNAPSHOT.pom\n[WARNING] Unable to get resource 'org.apache.geronimo.genesis:genesis:pom:1.2-SN\nAPSHOT' from repository codehaus-snapshots (http://snapshots.repository.codehaus\n.org)\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nGroupId: org.apache.geronimo.genesis\nArtifactId: genesis\nVersion: 1.2-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  org.apache.geronimo.genesis:genesis:pom:1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  apache-snapshots (http://people.apache.org/repo/m2-snapshot-repository),\n  codehaus-snapshots (http://snapshots.repository.codehaus.org),\n  apache-incubator (http://people.apache.org/repo/m2-incubating-repository/),\n  tomcat-m2-repo (http://tomcat.apache.org/dev/dist/m2-repository)\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Cannot find parent: org.apache\n.geronimo.genesis:genesis for project: org.apache.geronimo.genesis.config:config\n:pom:null\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:373)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:286)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:123)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Cannot find parent\n: org.apache.geronimo.genesis:genesis for project: org.apache.geronimo.genesis.c\nonfig:config:pom:null\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1198)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1214)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1214)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(Def\naultMavenProjectBuilder.java:697)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFi\nleInternal(DefaultMavenProjectBuilder.java:431)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMave\nnProjectBuilder.java:195)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:523)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:455)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:359)\n        ... 11 more\nCaused by: org.apache.maven.project.ProjectBuildingException: POM 'org.apache.ge\nronimo.genesis:genesis' not found in repository: Unable to download the artifact\n from any repository\n\n  org.apache.geronimo.genesis:genesis:pom:1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  apache-snapshots (http://people.apache.org/repo/m2-snapshot-repository),\n  codehaus-snapshots (http://snapshots.repository.codehaus.org),\n  apache-incubator (http://people.apache.org/repo/m2-incubating-repository/),\n  tomcat-m2-repo (http://tomcat.apache.org/dev/dist/m2-repository)\n\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepo\nsitory(DefaultMavenProjectBuilder.java:528)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1194)\n        ... 19 more\nCaused by: org.apache.maven.artifact.resolver.ArtifactNotFoundException: Unable\nto download the artifact from any repository\n\n  org.apache.geronimo.genesis:genesis:pom:1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  apache-snapshots (http://people.apache.org/repo/m2-snapshot-repository),\n  codehaus-snapshots (http://snapshots.repository.codehaus.org),\n  apache-incubator (http://people.apache.org/repo/m2-incubating-repository/),\n  tomcat-m2-repo (http://tomcat.apache.org/dev/dist/m2-repository)\n\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(De\nfaultArtifactResolver.java:197)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(De\nfaultArtifactResolver.java:73)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepo\nsitory(DefaultMavenProjectBuilder.java:482)\n        ... 20 more\nCaused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to downl\noad the artifact from any repository\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(Def\naultWagonManager.java:308)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(De\nfaultArtifactResolver.java:185)\n        ... 22 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Sat Apr 07 23:01:19 EDT 2007\n[INFO] Final Memory: 1M/3M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3401",
        "MNG-3425",
        "Plugin parameters must be specified outside an execution block when they are invoked from the command line According to Brian E. Fox there is something wrong with the Maven Core which causes the maven-dependency-plugin to fail if it is called by the mvn-eclipse-plugin. I can't tell any specifics since Brian looked into it, and only provided me a workaround. I'm pasting our dialog from the mailing list in here. Any further questions regarding this should be directed to Brian, since I am just a user and do not have the necessary insight.\n\n----- snip mailinglist transscript starts here ----\n\nNo, this is a maven core bug and will probably have to be fixed in 2.1, but file an issue anyway.\n\n-----Original Message-----\nFrom: Michael He\u00df [mailto:mhe@ordix.de] \nSent: Thursday, February 14, 2008 12:57 AM\nTo: Maven Users List\nSubject: RE: dependency:unpack vs. eclipse:eclipse\n\nThanks Brian, for finding this out.\nI have created a workaround as suggested. Only additional thing I had to\ndo, was to also bind the resources:resources to process-resources phase,\nbecause otherwise the filtering occured before the dependency:unpack. It's\ndirty, but at least it works now.\n\nHave you already taken care of filing a bug? If not, I would take care of\nthis. The bug is in the dependency-plugin, right?\n\nbye, Michael\n\nBrian E. Fox schrieb:\n> I am able to reproduce this and it's an unfortunate bug in 2.0.x. The only\n> workaround I can suggest is to change the dependency plugin binding to a\n> later phase than is invoked by the eclipse plugin. According to [1] the\n> phase is generate-resources so you can bump it to process-resources.\n>\n> [1]:\n> http://maven.apache.org/plugins/maven-eclipse-plugin/eclipse-mojo.html\n>\n> -----Original Message-----\n> From: Michael He\u00df [mailto:mhe@ordix.de]\n> Sent: Wednesday, February 13, 2008 1:07 AM\n> To: Maven Users List\n> Subject: RE: dependency:unpack vs. eclipse:eclipse\n>\n> Sure,\n>\n> here you go, I hope it somehow survives the transfer to the list. If it's\n> completely garbled I can also send you the file directly as an attachment.\n>\n> Furthermore I'd like to add the error I'm getting when binding the\n> dependendy-plugin unpack goal to a specific phase:\n>\n> ---- ERROR -----\n> [INFO] One or more required plugin parameters are invalid/missing for\n> 'dependency:unpack'\n>\n> [0] Inside the definition for plugin 'maven-dependency-plugin' specify the\n> following:\n>\n> <configuration>\n>   ...\n>   <artifactItems>VALUE</artifactItems>\n> </configuration>.\n> ---- ERROR -----\n>\n> But as you can see in the pom below, I do have the wanted configuration\n> settings.  Thanks for looking into this.\n>\n> bye, Michael\n>\n> ---pom starts here---\n>\n> <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n> <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n>       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n>       xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n> http://maven.apache.org/maven-v4_0_0.xsd\">\n>       <parent>\n>               <artifactId>abc</artifactId>\n>               <groupId>de.customer</groupId>\n>               <version>1.0.0-SNAPSHOT</version>\n>       </parent>\n>       <modelVersion>4.0.0</modelVersion>\n>       <groupId>de.customer.abc</groupId>\n>       <artifactId>product-config</artifactId>\n>       <packaging>jar</packaging>\n>       <version>${parent.version}</version>\n>       <name>product-config</name>\n>       <dependencies>\n>               <dependency>\n>                       <groupId>de.customer.abc.common</groupId>\n>                       <artifactId>abc-basis-config</artifactId>\n>                       <version>${abc.common.version}</version>\n>                       <scope>compile</scope>\n>               </dependency>\n>       </dependencies>\n>       <profiles>\n>               <profile>\n>                       <id>local</id>\n>                       <activation>\n>                               <property>\n>                                       <name>local</name>\n>                               </property>\n>                       </activation>\n>                       <build />\n>                       <properties>\n>                               <maven.test.skip>true</maven.test.skip>\n>                               <mvn.filter.file>\n>                                       ${basedir}/src/main/filters/local.properties\n>                               </mvn.filter.file>\n>                       </properties>\n>               </profile>\n>               <!--other profiles here as well - intentionally left them out -->\n>       </profiles>\n>       <build>\n>               <filters>\n>                       <filter>${mvn.filter.file}</filter>\n>               </filters>\n>               <resources>\n>                       <resource>\n>                               <directory>src/main/resources</directory>\n>                               <filtering>true</filtering>\n>                       </resource>\n>                       <resource>\n>                               <directory>target/work/conf</directory>\n>                               <!-- copies the contents of \"conf\" to \"target/conf\" -->\n>                               <targetPath>../conf</targetPath>\n>                               <filtering>true</filtering>\n>                       </resource>\n>               </resources>\n>\n>               <plugins>\n>                       <!-- Java 1.5 -->\n>                       <plugin>\n>                               <groupId>org.apache.maven.plugins</groupId>\n>                               <artifactId>maven-compiler-plugin</artifactId>\n>                               <configuration>\n>                                       <source>1.5</source>\n>                                       <target>1.5</target>\n>                               </configuration>\n>                       </plugin>\n>\n>                       <plugin>\n>                               <groupId>org.apache.maven.plugins</groupId>\n>                               <artifactId>maven-dependency-plugin</artifactId>\n>                               <version>2.0</version>\n>                               <inherited>false</inherited>\n>                               <configuration>\n>                                       <artifactItems>\n>                                               <artifactItem>\n>                                                       <groupId>de.customer.abc.common</groupId>\n>                                                       <artifactId>abc-basis-config</artifactId>\n>                                                       <version>${abc.common.version}</version>\n>                                                       <type>jar</type>\n>                                                       <outputDirectory>\n>                                                               ${project.build.directory}/work\n>                                                       </outputDirectory>\n>                                               </artifactItem>\n>                                       </artifactItems>\n>                                       <excludes>\n>                                               <exclude>META-INF/**</exclude>\n>                                       </excludes>\n>                               </configuration>\n>                               <!-- if I put this in, no more eclipse:eclipse\n>                               <executions>\n>                                       <execution>\n>                                               <id>get-config</id>\n>                                               <phase>generate-resources</phase>\n>                                               <goals>\n>                                                       <goal>unpack</goal>\n>                                               </goals>\n>                                               <configuration>\n>                                                       <artifactItems>\n>                                                               <artifactItem>\n>                                                                       <groupId>de.customer.abc.common</groupId>\n>                                                                       <artifactId>abc-basis-config</artifactId>\n>                                                                       <version>${abc.common.version}</version>\n>                                                                       <type>jar</type>\n>                                                                       <outputDirectory>\n>                                                                               ${project.build.directory}/work\n>                                                                       </outputDirectory>\n>                                                               </artifactItem>\n>                                                       </artifactItems>\n>                                                       <excludes>\n>                                                               <exclude>META-INF/**</exclude>\n>                                                       </excludes>\n>                                               </configuration>\n>                                       </execution>\n>                               </executions>\n>                               -->\n>                       </plugin>\n>                       <plugin>\n>                               <artifactId>maven-assembly-plugin</artifactId>\n>                               <executions>\n>                                       <execution>\n>                                               <id>conf</id>\n>                                               <phase>package</phase>\n>                                               <goals>\n>                                                       <goal>attached</goal>\n>                                               </goals>\n>                                               <configuration>\n>                                                       <outputDirectory>\n>                                                               ${project.build.directory}\n>                                                       </outputDirectory>\n>                                                       <appendAssemblyId>true</appendAssemblyId>\n>                                                       <descriptors>\n>                                                               <descriptor>\n>                                                                       src/main/assembly/conf.xml\n>                                                               </descriptor>\n>                                                       </descriptors>\n>                                               </configuration>\n>                                       </execution>\n>                               </executions>\n>                       </plugin>\n>               </plugins>\n>       </build>\n> </project>\n>\n>\n>\n> Brian E. Fox schrieb:\n>> The faq entry about the executions/non executions would only apply when\n>> running dependency:unpack directly...it shouldn't have any issues with\n>> eclipse:eclipse. (although I haven't tested it recently).\n>>\n>> Can you paste your pom so I can look at it?\n>>\n>> -----Original Message-----\n>> From: Michael He\u00df [mailto:mhe@ordix.de]\n>> Sent: Tuesday, February 12, 2008 10:34 AM\n>> To: users@maven.apache.org\n>> Subject: dependency:unpack vs. eclipse:eclipse\n>>\n>> Hi list,\n>>\n>> I've been searching and fiddling around all day, with no success so far.\n>> So this is my only hope of finding an answer.\n>>\n>> My basic setup looks like the following:\n>>\n>> I have an artifact which creates a ZIP-assembly. Lets call it\n>> artifact-resources.zip\n>>\n>> Furthermore I have anotherArtifact which depends on\n>> artifact-resources.zip. As the name states, the artifact does not\n>> contain\n>> any sources, but resources. These resources I want to have unpacked and\n>> filtered during anotherArtifacts build. So what I did, was to add a\n>> dependency-plugin-configuration to anotherArtifacts pom.xml, and I bound\n>> it to the generate-resources phase. At that point everything was still\n>> fine. My build went all the way through, the resources got unpacked and\n>> filtered, and were used correctly afterwards as the build lifecycle went\n>> on.\n>>\n>> Then I wanted to use maven-eclipse-plugin on anotherArtifact. At that\n>> point, I ran into the problem, that dependency:unpack fails, because\n>> eclipse:eclipse seems to trigger it in the \"CLI\" way. Although I do not\n>> really know what it maven internally means, I did as I was told in the\n>> maven-dependency-plugin faq, and removed my execution entries out of the\n>> configuration. This fixed the eclipse:eclipse problem.\n>>\n>> But, now this again leads to the following problems:\n>> Since my maven-dependency-plugin configuration is no longer bound to any\n>> specific phase it should run during process-sources. At least the\n>> plugins\n>> documentation says so. But it does not, I don't know why.\n>>\n>> So, right now my conclusion for today is (and I really do hope someone\n>> can\n>> prove me wrong):\n>>\n>> Either - I can have dependency:unpack attached to a specific phase\n>> OR     - I can have eclipse:eclipse working\n>>\n>> As stated before. I spent the whole afternoon trying things out.\n>> Although\n>> I probably learned a lot, I'm desperate for help. I really do not have\n>> any\n>> more ideas what to do.\n>>\n>> Thanks for reading all this, and maybe providing any insight.\n>>\n>> bye, Michael",
        "Required parameters of self written Mojo configured in execution part of POM are ignored and causing error Required parameters configured in execution part of POM are ignored if:\n\n the parameter ist set as required AND\n (no default value is set OR\n  default-Value is set to \"\") AND\n configuration of parameter values are done in the execution element.\n\nExample:\n\nParameter definition in Mojo:\n\n{code}\n\t/** \n\t * @parameter  default-value=\"ATTENTION DEFAULT\"\n\t * @required\n\t */\t\n\tprivate File dummy1;\n{code}\n\nand snip from POM:\n\n{code:xml}\n    <plugins>\n      <plugin>\n        <groupId>myownartifact.plugin</groupId>\n        <artifactId>maven-myownartifact-plugin</artifactId>\n        <extensions>true</extensions>\n        <executions>\n          <execution>\n             <id>extract</id>\n             <configuration>\n              <dummy1>c:/my files/test/dummy1</dummy1>\n             </configuration>\n             <goals>\n               <goal>extract</goal>\n             </goals>\n          </execution>\n        </executions>\n      </plugin>     \n    </plugins>\n{code}\n\nruns fine.\n\nIf I change the definition of the parameter to\n\n{code}\n\t/** \n\t * @parameter \n\t * @required\n\t */\t\n\tprivate File dummy1;\n{code}\n\nor \n{code}\n      * @parameter default-value=\"\"\n{code}\n\nthen I got an error:\n\n[0] inside the definition for plugin: 'maven-myownartifact-plugin'specify the following:\n\n<configuration>\n  ...\n  <dummy2>VALUE</dummy2>\n</configuration>.\n\nIn my opinion this is a bug because with @required I have already tagged this parameter as mandatory. So I'm already forced to configure it.\n\nBTW, if I configure the parameters outside the execution element evrything works fine as expected!\n\nMore info:\n- the plugin is bind to the package phase\n\nIf a runable example is needed  it's possible to provide one."
    ],
    [
        "MNG-3415",
        "MNG-2941",
        "Transfer errors cause junk metadata in the local repo I see this all the time and I swear there was an issue for it, but now I can't find it. Sometimes there is metadata in the repo, usually after an offline build or a build where something went wrong downloading artifacts. Maven will apparently decide based on the metadata that the file can never be found and will simply fail on a missing artifact. You can tell this has happened because no attempt has actually been made to download the artifact from a repository. Subsequent clearing of (portions) the localrepo fixes the issue. This is terribly confusing to new users...and annoying to everyone.",
        "Sometime SNAPSHOTs can not be downloaded in an an online build      When an offline build fails because a SNPSHOT was not available locally, the SNAPSHOT can not be downloaded during a subsequent online build. During the offline build a  file maven-metadata-apache-snpshots.xml (with the following contents in this example) is created in .m2 repo:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><metadata>\n  <groupId>org.apache.geronimo.genesis</groupId>\n  <artifactId>genesis</artifactId>\n  <version>1.2-SNAPSHOT</version>\n</metadata>\n   All subsequent online builds fail to download this artifact from the repository with error message given below. After deleting the metadata file corresponding to the repository in which this artifact is available (maven-metadata-apache-snpshots.xml file in this example) , the artifact can be downloaded successfully. \n\nThis trace can be produced by any SNAPSHOT in any project, the following steps are for geronimo:\n1. Delete the above SNAPSHOT from the local repo.\n2. Build geronimo offlne, the build will fail.\n3. Build online, the following message will be generated.\n4. Delete the above metadata file, and build online, the SNAPSHOT will get downloaded successfully.\n\n[INFO] Scanning for projects...\nDownloading: http://people.apache.org/repo/m2-snapshot-repository/org/apache/ger\nonimo/genesis/genesis/1.2-SNAPSHOT/genesis-1.2-SNAPSHOT.pom\n[WARNING] Unable to get resource 'org.apache.geronimo.genesis:genesis:pom:1.2-SN\nAPSHOT' from repository apache-snapshots (http://people.apache.org/repo/m2-snaps\nhot-repository)\nDownloading: http://snapshots.repository.codehaus.org/org/apache/geronimo/genesi\ns/genesis/1.2-SNAPSHOT/genesis-1.2-SNAPSHOT.pom\n[WARNING] Unable to get resource 'org.apache.geronimo.genesis:genesis:pom:1.2-SN\nAPSHOT' from repository codehaus-snapshots (http://snapshots.repository.codehaus\n.org)\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nGroupId: org.apache.geronimo.genesis\nArtifactId: genesis\nVersion: 1.2-SNAPSHOT\n\nReason: Unable to download the artifact from any repository\n\n  org.apache.geronimo.genesis:genesis:pom:1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  apache-snapshots (http://people.apache.org/repo/m2-snapshot-repository),\n  codehaus-snapshots (http://snapshots.repository.codehaus.org),\n  apache-incubator (http://people.apache.org/repo/m2-incubating-repository/),\n  tomcat-m2-repo (http://tomcat.apache.org/dev/dist/m2-repository)\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Cannot find parent: org.apache\n.geronimo.genesis:genesis for project: org.apache.geronimo.genesis.config:config\n:pom:null\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:373)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:286)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:123)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Cannot find parent\n: org.apache.geronimo.genesis:genesis for project: org.apache.geronimo.genesis.c\nonfig:config:pom:null\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1198)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1214)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1214)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(Def\naultMavenProjectBuilder.java:697)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFi\nleInternal(DefaultMavenProjectBuilder.java:431)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMave\nnProjectBuilder.java:195)\n        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:523)\n        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:455)\n        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:359)\n        ... 11 more\nCaused by: org.apache.maven.project.ProjectBuildingException: POM 'org.apache.ge\nronimo.genesis:genesis' not found in repository: Unable to download the artifact\n from any repository\n\n  org.apache.geronimo.genesis:genesis:pom:1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  apache-snapshots (http://people.apache.org/repo/m2-snapshot-repository),\n  codehaus-snapshots (http://snapshots.repository.codehaus.org),\n  apache-incubator (http://people.apache.org/repo/m2-incubating-repository/),\n  tomcat-m2-repo (http://tomcat.apache.org/dev/dist/m2-repository)\n\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepo\nsitory(DefaultMavenProjectBuilder.java:528)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(D\nefaultMavenProjectBuilder.java:1194)\n        ... 19 more\nCaused by: org.apache.maven.artifact.resolver.ArtifactNotFoundException: Unable\nto download the artifact from any repository\n\n  org.apache.geronimo.genesis:genesis:pom:1.2-SNAPSHOT\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  apache-snapshots (http://people.apache.org/repo/m2-snapshot-repository),\n  codehaus-snapshots (http://snapshots.repository.codehaus.org),\n  apache-incubator (http://people.apache.org/repo/m2-incubating-repository/),\n  tomcat-m2-repo (http://tomcat.apache.org/dev/dist/m2-repository)\n\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(De\nfaultArtifactResolver.java:197)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(De\nfaultArtifactResolver.java:73)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepo\nsitory(DefaultMavenProjectBuilder.java:482)\n        ... 20 more\nCaused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to downl\noad the artifact from any repository\n        at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(Def\naultWagonManager.java:308)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(De\nfaultArtifactResolver.java:185)\n        ... 22 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Sat Apr 07 23:01:19 EDT 2007\n[INFO] Final Memory: 1M/3M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3415",
        "MNG-3399",
        "Transfer errors cause junk metadata in the local repo I see this all the time and I swear there was an issue for it, but now I can't find it. Sometimes there is metadata in the repo, usually after an offline build or a build where something went wrong downloading artifacts. Maven will apparently decide based on the metadata that the file can never be found and will simply fail on a missing artifact. You can tell this has happened because no attempt has actually been made to download the artifact from a repository. Subsequent clearing of (portions) the localrepo fixes the issue. This is terribly confusing to new users...and annoying to everyone.",
        "Maven shows fake network error until the next updatePolicy period Hi,\n\nThe default updatePolicy is daily.\n\nIf it has any problems in updating it marks that plugin as checked and keeping showing the same error message without trying to hit the server again.\n\nAt my work they changed the proxy configuration making the build fail, we started to have the following message:\n\nThe plugin 'org.apache.maven.plugins:maven-clean-plugin' does not exist or no valid version could be found.\n\nEven after they rollback the network configuration, maven still showing the same error.\n\nTo solve the problem I had to put this lines\n    <pluginRepository>\n      <releases>\n        <updatePolicy>always</updatePolicy>\n      </releases>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <id>central</id>\n      <name>Maven Plugin Repository</name>\n      <url>http://repo1.maven.org/maven2</url>\n    </pluginRepository>\n\nas the first pluginRepository and run for every developer just to force the update.\n\nThis workaround works fine but until I realized that this is the behavior of maven it generated a lot problems trying setup the network configuration (it was not trying to hit the network, but it still showing the same error, so all configuration attempts were worthless).\n\nShow a network error that was not checked against the current configuration is a bug.\n\nMy suggestion for an easy solution is to update timestamp of the latest hit in the repository *after* it has a success, if it fails does not update the timestamp and updatePolicy will make it keep trying for every execution until it finally hit with success. This way you don't need to verify any extra condition to see if the previous try resulted in an error. This way will make the debug of network problems much easier for the users that have the same problem.\n\nI didn't look your sources, so maybe this solution is not practical in your architecture. Feel free to use another route to solve this bug.\n\nThanks for your excellent work in maven (it is first bug in years),\nJonas Fagundes"
    ],
    [
        "MNG-3420",
        "MNG-2151",
        "In a reactor, attached artifacts with classifier should be used when generating classpath, instead of the whole output directory of the related project In a reactor, when a project depends on attached artifacts with classifier of other projects (such as jar assemblies), the generated classpath includes all the output directory of the related projects.\nThis can lead to problems for example if these attached artifacts contains only a subset of the output directory of the related project.\n\nI attached an example that shows this problem :\n1/ launch \"mvn install\" in the \"test-classifier\" directory (POM project basedir), you'll get a compilation failure for module3.\n2/ launch \"mvn install\" in the \"module3\" directory, it works.\n\nI also attached a patch (it affects only MavenProject class).",
        "classpath used to build a module affects compile classpath for building another module Here's my project layout:\n\ndaytrader/\n  ejb/\n  streamer/\n\nwhere streamer depends on the ejb-client produced by the ejb/ build.\n\nIf I do a \"mvn install\" in daytrader/ the build works. If I do it in streamer/ it fails.\n\nAfter investigation the problem was that the ejb-client produced by the ejb module was excluding by default a class required to compile streamer/.\n\nThe build when run at the top level should have failed when building the streamer/ module."
    ],
    [
        "MNG-3420",
        "MNG-2720",
        "In a reactor, attached artifacts with classifier should be used when generating classpath, instead of the whole output directory of the related project In a reactor, when a project depends on attached artifacts with classifier of other projects (such as jar assemblies), the generated classpath includes all the output directory of the related projects.\nThis can lead to problems for example if these attached artifacts contains only a subset of the output directory of the related project.\n\nI attached an example that shows this problem :\n1/ launch \"mvn install\" in the \"test-classifier\" directory (POM project basedir), you'll get a compilation failure for module3.\n2/ launch \"mvn install\" in the \"module3\" directory, it works.\n\nI also attached a patch (it affects only MavenProject class).",
        "Multiproject dependencies not accurate for project.compileClasspathElements when run from root project In a plugin I wrote (jspc), needs the dependency jars.  It asks for this with the request for the project.compileClasspathElements.  In a multiproject environment, when each project is built individually, it seems correct.  Example (when run with -X ina subproject dir) showing classpath:\n\n/Users/mbp/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar\n/Users/mbp/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar\n/Users/mbp/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar\n/Users/mbp/.m2/repository/tldtestapp/testexttld/1/testexttld-1.jar  <-----------------NOTICE HERE - THIS IS AN ARTIFACT FROM ANOTHER SUBPROJECT\n/Users/mbp/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar]\n\nWhen it is run from the Top level/Root project...here is the output:\n\nUsers/mbp/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar\n/Users/mbp/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar\n/Users/mbp/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar\n/Users/mbp/Desktop/jsp-example/TestTldProject/target/classes  <----------------NOTICE - THE JAR IS NOT BEING ASKED FOR, BUT A CLASSES DIR INSTEAD\n/Users/mbp/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar]\n\nThe second project has a dependency on the testexttld-1.jar because it contains tag libs which must be wrapped in a jar.  When run from a top level, it uses the other project's classes directory instead of the JAR artifact.  WIth JSPC and taglibs, this makes it so it cannot work.  If I have a dependency on a jar, that jar should be the dependency as expected and not a classes directory.  For full explanation and example see here:\n\nhttp://jira.codehaus.org/browse/MJSPC-4\n\n"
    ],
    [
        "MNG-3422",
        "MNG-3352",
        "[regression] deploy:deploy-file does not work mvn deploy:deploy-file -Dfile=test.sh -DrepositoryId=testing -DartifactId=artifactId -DgroupId=groupId -Dversion=1.0 -Dpackaging=jar -Durl=http://vesuvius.devzuz.com/private/devzuz/releases\n\n[INFO] Searching repository for plugin with prefix: 'deploy'.\n[INFO] Attempting to resolve a version for plugin: org.apache.maven.plugins:maven-deploy-plugin using meta-version: LATEST\n[INFO] Using version: 2.3 of plugin: org.apache.maven.plugins:maven-deploy-plugin\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Maven Default Project\n[INFO] \n[INFO] Id: org.apache.maven:super-pom:jar:2.1\n[INFO] task-segment: [deploy:deploy-file] (aggregator-style)\n[INFO] ------------------------------------------------------------------------\n[INFO] [deploy:deploy-file]\n[INFO] artifact groupId:artifactId: checking for updates from testing\n---------------------------------------------------\nconstituent[0]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/aspectjrt-1.5.3.jar\nconstituent[1]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/backport-util-concurrent-3.0.jar\nconstituent[2]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/commons-cli-1.0.jar\nconstituent[3]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/doxia-sink-api-1.0-alpha-9.jar\nconstituent[4]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/jsch-0.1.27.jar\nconstituent[5]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/jtidy-4aug2000r7-dev.jar\nconstituent[6]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-artifact-3.0-SNAPSHOT.jar\nconstituent[7]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-core-2.1-SNAPSHOT.jar\nconstituent[8]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-embedder-2.1-SNAPSHOT.jar\nconstituent[9]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-lifecycle-2.1-SNAPSHOT.jar\nconstituent[10]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-model-2.1-SNAPSHOT.jar\nconstituent[11]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-plugin-api-2.1-SNAPSHOT.jar\nconstituent[12]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-profile-2.1-SNAPSHOT.jar\nconstituent[13]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-project-2.1-SNAPSHOT.jar\nconstituent[14]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/maven-reporting-api-2.1-SNAPSHOT.jar\nconstituent[15]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/plexus-container-default-1.0-alpha-44.jar\nconstituent[16]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/plexus-interactivity-api-1.0-alpha-6.jar\nconstituent[17]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/plexus-utils-1.5.1.jar\nconstituent[18]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/retrotranslator-runtime-1.2.1.jar\nconstituent[19]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/wagon-file-1.0-beta-2.jar\nconstituent[20]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/wagon-http-lightweight-1.0-beta-2.jar\nconstituent[21]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/wagon-http-shared-1.0-beta-2.jar\nconstituent[22]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/wagon-provider-api-1.0-beta-2.jar\nconstituent[23]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-1.0-beta-2.jar\nconstituent[24]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-common-1.0-beta-2.jar\nconstituent[25]: file:/Applications/maven/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-external-1.0-beta-2.jar\n---------------------------------------------------\njava.lang.NullPointerException\n\tat org.apache.maven.artifact.repository.DefaultArtifactRepository.pathOfRemoteRepositoryMetadata(DefaultArtifactRepository.java:123)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifactMetadata(DefaultWagonManager.java:390)\n\tat org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager.resolveAlways(DefaultRepositoryMetadataManager.java:349)\n\tat org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager.resolve(DefaultRepositoryMetadataManager.java:107)\n\tat org.apache.maven.project.artifact.MavenMetadataSource.retrieveAvailableVersions(MavenMetadataSource.java:433)\n\tat org.apache.maven.artifact.deployer.DefaultArtifactDeployer.artifactHasBeenDeployed(DefaultArtifactDeployer.java:169)\n\tat org.apache.maven.artifact.deployer.DefaultArtifactDeployer.deploy(DefaultArtifactDeployer.java:91)\n\tat org.apache.maven.plugin.deploy.DeployFileMojo.execute(DeployFileMojo.java:239)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:549)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:498)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentsForProject(DefaultLifecycleExecutor.java:265)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:180)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:149)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:225)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:304)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody4(MavenEmbedder.java:880)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody5$advice(MavenEmbedder.java:304)\n\tat org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:176)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\n",
        "install:install-file fails in plexus-tools/plexus-javadoc with NPE related to an ArtifactRepositoryLayout that cannot be found. "
    ],
    [
        "MNG-3426",
        "MNG-2972",
        "regression : <dependency> in plugin configuration doesn't override plugin classpath Many maven plugins are wrapper around other tools. The plugin is designed for a version of the tool, and in many case user will want to use a specific version without having to patch the plugin. The <dependency> element on plugin configuration is a common way to do this, by overriding the plugin POM dependency with another version. \n\n<plugin>\n   <artifactId>castor-maven-plugin</artifactId>\n   <dependencies>\n       <dependency>\n            <groupId>org.codehaus.castor</groupId>\n            <artifactId>castor</artifactId>\n            <version>VERSION OF CASTOR I WANT TO USE FOR CODE GENERATION</version>\n       </dependency>\n   </dependencies>\n</plugin>\n\nThis used to work with maven < 2.0.8\n\nIn maven 2.0.8, this doesn't work anymore as the <dependency> set in plugin configuration is added to plugin classpath, as a duplicate for the one declared by the plugin but LATER in the classpath (but I may be wrong on this analysis).",
        "Ignores version of plugin dependency specified in my pom xmlbeans-maven-plugin declares a dependency on xmlbeans-2.0.0\n\nI want to use xmlbeans-2.2.0\n\nSo in my pom I put:\n\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>xmlbeans-maven-plugin</artifactId>\n        <executions>\n           <execution>\n              <goals>\n                 <goal>xmlbeans</goal>\n              </goals>\n           </execution>\n        </executions>\n        <configuration>\n\t\t...\n        </configuration>\n\t  <dependencies>\n\t    <dependency>\n\t      <groupId>xmlbeans</groupId>\n\t      <artifactId>xbean</artifactId>\n\t      <version>2.2.0</version>\n\t    </dependency>\n\t  </dependencies>\n      </plugin\n\nBut it still downloads 2.0.0. (as well as 2.2.0). Haven't got a clue which it is using as it doesn't seem to output stuff like that. Couldn't see a verbose or debug switch mentioned in the docs. Anyway I think it is still using 2.0.0.\n\nSeems like I'm not the first to experience this:\nhttp://www.nabble.com/Override-plugin-dependency-version-tf2357806s177.html#a6568092\n\nApparently this should be possible: http://maven.apache.org/pom.html#plugins\n\n\"dependencies: Dependencies are seen a lot within the POM, and are an element under all plugins element blocks. The dependencies have the same structure and function as under that base build. The major difference in this case is that instead of applying as dependencies of the project, they now apply as dependencies of the plugin that they are under. The power of this is to alter the dependency list of a plugin, perhaps by removing an unused runtime dependency via exclusions, or by altering the version of a required dpendency. See above under Dependencies for more information.\""
    ],
    [
        "MNG-3426",
        "MNG-3059",
        "regression : <dependency> in plugin configuration doesn't override plugin classpath Many maven plugins are wrapper around other tools. The plugin is designed for a version of the tool, and in many case user will want to use a specific version without having to patch the plugin. The <dependency> element on plugin configuration is a common way to do this, by overriding the plugin POM dependency with another version. \n\n<plugin>\n   <artifactId>castor-maven-plugin</artifactId>\n   <dependencies>\n       <dependency>\n            <groupId>org.codehaus.castor</groupId>\n            <artifactId>castor</artifactId>\n            <version>VERSION OF CASTOR I WANT TO USE FOR CODE GENERATION</version>\n       </dependency>\n   </dependencies>\n</plugin>\n\nThis used to work with maven < 2.0.8\n\nIn maven 2.0.8, this doesn't work anymore as the <dependency> set in plugin configuration is added to plugin classpath, as a duplicate for the one declared by the plugin but LATER in the classpath (but I may be wrong on this analysis).",
        "Allow pom to override plugin dependencies Let <plugin><dependencies> win out over a plugin's own dependencies."
    ],
    [
        "MNG-3443",
        "MNG-1995",
        "boolean values in the POM specified as expressions are not interpolated, result in value == false The problem is the ModelReader generated by Modello uses something akin to Boolean.valueOf( element.getValue() ) to set boolean model values. If the value in XML is actually an expression, it is resolved to false and never interpolated.\n\nTo correct this, we should consider revising Modelllo's generated reader architecture to use a two-stage approach:\n\n1. Construct a raw structure of String: String and String: Collection associations (basically something like a perlish hash, IIRC)\n2. Pass an arbitrary number of transformers over the raw structure to interpolate it (this includes path translation, etc. and should include a notion of transformation context to allow transformations to collaborate)\n3. Construct the Model instance based on the transformed raw structure.\n\nThis will incur a little extra transient overhead for model construction, but its effects should be mitigated through the caching strategies we employ for models and projects.",
        "filtering element in pom.xml ignore properties <jvanzyl> you can mention it0091 as the test case\nThe following pom.xml does not end up filtering the resources:\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n     <modelVersion>4.0.0</modelVersion>\n    <groupId>org.objectweb.celtix</groupId>\n    <artifactId>test</artifactId>\n    <packaging>jar</packaging>\n    <version>1.0</version>\n    <name>Test</name>\n \n    <properties>\n        <filter.resources>true</filter.resources>\n    </properties>\n \n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>**</include>\n                </includes>\n                <filtering>${filter.resources}</filtering>\n            </resource>\n        </resources>\n    </build>\n</project>\n\n\n\n"
    ],
    [
        "MNG-3443",
        "MNG-2223",
        "boolean values in the POM specified as expressions are not interpolated, result in value == false The problem is the ModelReader generated by Modello uses something akin to Boolean.valueOf( element.getValue() ) to set boolean model values. If the value in XML is actually an expression, it is resolved to false and never interpolated.\n\nTo correct this, we should consider revising Modelllo's generated reader architecture to use a two-stage approach:\n\n1. Construct a raw structure of String: String and String: Collection associations (basically something like a perlish hash, IIRC)\n2. Pass an arbitrary number of transformers over the raw structure to interpolate it (this includes path translation, etc. and should include a notion of transformation context to allow transformations to collaborate)\n3. Construct the Model instance based on the transformed raw structure.\n\nThis will incur a little extra transient overhead for model construction, but its effects should be mitigated through the caching strategies we employ for models and projects.",
        "Interpolation in resources section appears not to work correctly This is captured by it0091 and reported by David Kulp. This might be duplicated because I'm sure I put this in JIRA.\n\nThis may specifically be a property which is a boolean value, or a general interpolation problem in the resources section.\n\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.apache.maven.it</groupId>\n  <artifactId>maven-core-it0090</artifactId>\n  <version>1.0</version>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <type>jar</type>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <properties>\n    <filter.resources>true</filter.resources>\n    <name>jason</name>\n  </properties>\n  <build>\n    <resources>\n      <resource>\n        <directory>src/main/resources</directory>\n        <filtering>${filter.resources}</filtering>\n      </resource>\n    </resources>\n  </build>\n</project>\n"
    ],
    [
        "MNG-3452",
        "MNG-3391",
        "StackOverflowError building Apache ServiceMix 3 Maven 2.1-SNAPSHOT fail on building ServiceMix projects. Steps to reproduce:\n\n* Checkout https://svn.apache.org/repos/asf/servicemix/smx3/trunk \n* Run mvn install\n\nThis works with maven 2.0.8 but fails with the following exception with recent 2.1-SNAPSHOT",
        "StackOverflowError in DefaultMavenProjectBuilder checkout https://svn.apache.org/repos/asf/servicemix/smx3/trunk and try to run a goail in samples/cxf-wsdl-first \nif you checkout only https://svn.apache.org/repos/asf/servicemix/smx3/trunk/samples/cxf-wsdl-first  there's no problem, so it must be something to do with the parents\n\nRevisions tested: 619946 and 609730\n\n$ mvn process-test-resources\n[WARNING] Deprecated expression: ${version} - missing prefix. Use ${pom.version} (model: org.apache.servicemix:servicemix:pom:3.3-SNAPSHOT)\n[INFO] Attempting to resolve a version for plugin: org.apache.servicemix.tooling:jbi-maven-plugin using meta-version: LATEST\n---------------------------------------------------\nconstituent[0]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/aspectjrt-1.5.3.jar\nconstituent[1]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/backport-util-concurrent-3.0.jar\nconstituent[2]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/commons-cli-1.0.jar\nconstituent[3]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/doxia-sink-api-1.0-alpha-9.jar\nconstituent[4]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/jsch-0.1.27.jar\nconstituent[5]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/jtidy-4aug2000r7-dev.jar\nconstituent[6]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-artifact-3.0-20080208.175410-49.jar\nconstituent[7]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-core-2.1-20080208.175921-35.jar\nconstituent[8]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-embedder-2.1-SNAPSHOT-sources.jar\nconstituent[9]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-embedder-2.1-SNAPSHOT.jar\nconstituent[10]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-lifecycle-2.1-20080208.175921-36.jar\nconstituent[11]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-model-2.1-20080208.175921-40.jar\nconstituent[12]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-plugin-api-2.1-20080208.175921-35.jar\nconstituent[13]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-profile-2.1-20080208.175921-37.jar\nconstituent[14]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-project-2.1-20080208.175921-38.jar\nconstituent[15]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/maven-reporting-api-2.1-20080208.175921-19.jar\nconstituent[16]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/plexus-container-default-1.0-alpha-44.jar\nconstituent[17]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/plexus-interactivity-api-1.0-alpha-6.jar\nconstituent[18]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/plexus-utils-1.4.5.jar\nconstituent[19]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/retrotranslator-runtime-1.2.1.jar\nconstituent[20]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-file-1.0-beta-2.jar\nconstituent[21]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-http-lightweight-1.0-beta-2.jar\nconstituent[22]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-http-shared-1.0-beta-2.jar\nconstituent[23]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-provider-api-1.0-beta-2.jar\nconstituent[24]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-1.0-beta-2.jar\nconstituent[25]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-common-1.0-beta-2.jar\nconstituent[26]: file:/d:/apps/apache-maven-2.1-SNAPSHOT/lib/wagon-ssh-external-1.0-beta-2.jar\n---------------------------------------------------\nException in thread \"main\" java.lang.StackOverflowError\n        at java.lang.Character.toUpperCase(Character.java:4278)\n        at java.lang.String.regionMatches(String.java:1384)\n        at java.lang.String.equalsIgnoreCase(String.java:1120)\n        at sun.net.www.protocol.jar.Handler.parseURL(Handler.java:59)\n        at java.net.URL.<init>(URL.java:596)\n        at java.net.URL.<init>(URL.java:464)\n        at sun.misc.URLClassPath$JarLoader.checkResource(URLClassPath.java:671)\n        at sun.misc.URLClassPath$JarLoader.getResource(URLClassPath.java:756)\n        at sun.misc.URLClassPath$JarLoader.findResource(URLClassPath.java:732)\n        at sun.misc.URLClassPath.findResource(URLClassPath.java:145)\n        at java.net.URLClassLoader$2.run(URLClassLoader.java:362)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findResource(URLClassLoader.java:359)\n        at java.lang.ClassLoader.getResource(ClassLoader.java:977)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.getRealmResource(ClassRealm.java:179)\n        at org.codehaus.plexus.classworlds.strategy.DefaultStrategy.getResource(DefaultStrategy.java:94)\n        at org.codehaus.plexus.classworlds.strategy.ForeignStrategy.getResource(ForeignStrategy.java:53)\n        at org.codehaus.plexus.classworlds.realm.ClassRealm.getResource(ClassRealm.java:206)\n        at java.lang.Class.getResource(Class.java:2074)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.getSuperModel(DefaultMavenProjectBuilder.java:1395)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:630)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody0(DefaultMavenProjectBuilder.java:199)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody1$advice(DefaultMavenProjectBuilder.java:206)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:1)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.mergeManagedDependencies(DefaultMavenProjectBuilder.java:1114)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:745)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody2(DefaultMavenProjectBuilder.java:210)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository_aroundBody3$advice(DefaultMavenProjectBuilder.java:206)"
    ],
    [
        "MNG-3486",
        "MNG-1944",
        "Incorrect dependency resolution when there are cyclic dependencies Maven's transitive dependency algorithm fails silently when there are cycles in the dependency graph.  The symptom is that Maven sometimes fails to find all the dependencies that it should.  For instance, suppose A depends on B, B and C depend on each other, and C depends on D.  Maven will fail to discover that A transitively depends on D.\n\nI would expect Maven to do one of two things in this case: Either it should find that A transitively depends on B, C, and D, or it should terminate with an error.  In either case it should report that there is a cycle involving B and C.",
        "cyclic dependencies causes maven to not include all transitive dependencies Try including dom4j 1.5.2 and see what dependencies are resolved. dom4j depends on jaxen, which depends on dom4j. When maven sees the cyclic dependency, it stops processing the jaxen dependency. This leaves everything else jaxen depends on not included in the final artifact list. This is mvn -x output:\n dom4j:dom4j:jar:1.5.2 (selected for compile)\n[DEBUG]     stax:stax-api:jar:1.0 (selected for compile)\n[DEBUG]     pull-parser:pull-parser:jar:2 (selected for compile)\n[DEBUG]     jaxme:jaxme-api:jar:0.3 (selected for compile)\n[WARNING]\n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2 (selected for compile)\n[DEBUG]     msv:xsdlib:jar:20030807 (selected for compile)\n[DEBUG]     xpp3:xpp3:jar:1.1.3.3 (selected for compile)\n[DEBUG]     dom4j:dom4j:jar:1.5.2 (removed - causes a cycle in the\ngraph)\n[DEBUG]     jaxen:jaxen:jar:1.1-beta-4 (selected for compile)\n[DEBUG]     msv:relaxngDatatype:jar:20030807 (selected for compile)\n\n\n\n\nNotice that xerces and xom and everything else jaxen depends on isn't included.\nTaking dom4j out of the jaxen pom locally causes everything to be included:\n\n\n\n[DEBUG] com.stchome.maven.mojo:helloUser:jar:1.0-SNAPSHOT (selected for null)\n[DEBUG]   dom4j:dom4j:jar:1.5.2 (selected for compile)\n[DEBUG]     stax:stax-api:jar:1.0 (selected for compile)\n[DEBUG]     pull-parser:pull-parser:jar:2 (selected for compile)\n[DEBUG]     jaxme:jaxme-api:jar:0.3 (selected for compile)\n[WARNING] \n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]     xml-apis:xml-apis:jar:1.0.b2 (selected for compile)\n[DEBUG]     msv:xsdlib:jar:20030807 (selected for compile)\n[DEBUG]     xpp3:xpp3:jar:1.1.3.3 (selected for compile)\n[DEBUG]     jaxen:jaxen:jar:1.1-beta-4 (selected for compile)\n[DEBUG]       jdom:jdom:jar:b10 (selected for compile)\n[DEBUG]       xom:xom:jar:1.0b3 (selected for compile)\n[DEBUG]         xerces:xmlParserAPIs:jar:2.6.1 (selected for compile)\n[DEBUG]         xerces:xercesImpl:jar:2.2.1 (selected for compile)\n[DEBUG]         xalan:xalan:jar:2.6.0 (selected for compile)\n[WARNING] \n  This artifact has been relocated to xml-apis:xml-apis:1.0.b2.\n\n\n[DEBUG]           xml-apis:xml-apis:jar:1.0.b2 (selected for compile)\n[WARNING] \n  This artifact has been relocated to com.ibm.icu:icu4j:2.6.1.\n\n\n[DEBUG]         com.ibm.icu:icu4j:jar:2.6.1 (selected for compile)\n[WARNING] \n  This artifact has been relocated to javax.servlet:servlet-api:2.4.\n\n\n[DEBUG]         javax.servlet:servlet-api:jar:2.4 (selected for compile)\n[WARNING] \n  This artifact has been relocated to org.ccil.cowan.tagsoup:tagsoup:0.9.7.\n\n\n[DEBUG]         org.ccil.cowan.tagsoup:tagsoup:jar:0.9.7 (selected for compile)\n[DEBUG]       xerces:xmlParserAPIs:jar:2.6.1 (removed - nearer found: 2.6.2)\n[DEBUG]       xerces:xmlParserAPIs:jar:2.6.2 (selected for compile)\n[DEBUG]       xerces:xercesImpl:jar:2.2.1 (removed - nearer found: 2.6.2)\n[DEBUG]       xerces:xercesImpl:jar:2.6.2 (selected for compile)\n[DEBUG]     msv:relaxngDatatype:jar:20030807 (selected for compile)\n\n\n"
    ],
    [
        "MNG-3506",
        "MNG-1682",
        "Custom ArtifactHandler not resolved for project when an additional plugin with extensions is defined in parent pom Hi,\n\nI've found an annoying bug regarding custom artifact handlers. A custom artifact handler provided by a plugin with extensions is not resolved when another plugin with extensions is defined in parent pom. Note that the behavior is the same whether the first plugin is defined in child project or parent project.\n\nIn order to illustrate the problem, I've used the maven-eclipse-plugin. It generates a .classpath only when the project's artifact handler's language is set to java. My child project's packaging is \"jboss-sar\" whose artifact handler is provided by jboss-packaging-maven-plugin. \"jboss-sar\" 's language is set to java, so whenever the jboss'sar artifact handler is properly resolved, the .classpath file should be generated.\n\nI've used the nbm-maven-plugin as the second perturbing plugin in order to break the resolution.\n\nI've attached a set of it tests which each illustrate a working or broken scenario. In order to test those, simply run the following command at the root of each parent project:\nmvn clean eclipse:clean install eclipse:eclipse\n\nIf the file .classpath is properly generated in \"module1\" child project, then the test passes, else it fails. Attached it tests contain \"OK\" when they pass and \"KO\" when then fails.\n\nI've tried hard to debug plexus component resolution internals but after a whole day of headackes I gave up and ended up posting this issue hoping that somebody more used to maven and plexus internals would find a solution.\n\nKind regards,\n\nC\u00e9dric Vidal\nhttp://proxiad.com\n",
        "Plugins do not honor the correct extension when run as a part of a multiproject build I have a plugin with a component.xml described here.\n\nI think the component.xml is correct - it certainly looks the\nsame as the plexus examples.\n\nMy project that uses this plugin works entirely correctly, *unless* it\nis a part of a multiproject build, in which case it uses the wrong\nextension. I don't know why this would be the case unless I've missed\nsomething?\n\nIn same directory:\nW:\\kms\\dev\\apps\\kms>mvn install\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.war\n[INFO] ----------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ----------------------------------------------------------------------------\n[INFO] Total time: 1 minute 9 seconds\n[INFO] Finished at: Thu Nov 24 11:46:53 GMT 2005\n[INFO] Final Memory: 3M/6M\n[INFO] ----------------------------------------------------------------------------\n\nAs a part of a multiproject:\n....\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building KMS Application Code\n[INFO]    task-segment: [install]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [cargo2:uberwar]\n[INFO] [install:install]\n[INFO] Installing W:\\1244 - Knowledge Management System\n(KMS)\\dev\\apps\\kms\\target\\kms-2.0-SNAPSHOT.war to C:\\Documents and\nSettings\\nig\nel.magnay\\.m2\\repository\\com\\cswgroup\\kms\\kms\\2.0-SNAPSHOT\\kms-2.0-SNAPSHOT.uberwar\n....\n\nConfig of plugin:\n<component-set>\n <components>\n   <component>\n     <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n     <configuration>\n       <phases>\n             <package>\n               org.codehaus.cargo.maven2:cargo-maven2-plugin:uberwar\n             </package>\n             <install>org.apache.maven.plugins:maven-install-plugin:install</install>\n             <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n           </phases>\n     </configuration>\n   </component>\n\n       <component>\n     <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n     <role-hint>uberwar</role-hint>\n     <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n     <configuration>\n       <type>uberwar</type>\n                <extension>war</extension>\n       <packaging>uberwar</packaging>\n     </configuration>\n   </component>\n </components>\n</component-set>\n"
    ],
    [
        "MNG-3506",
        "MNG-2240",
        "Custom ArtifactHandler not resolved for project when an additional plugin with extensions is defined in parent pom Hi,\n\nI've found an annoying bug regarding custom artifact handlers. A custom artifact handler provided by a plugin with extensions is not resolved when another plugin with extensions is defined in parent pom. Note that the behavior is the same whether the first plugin is defined in child project or parent project.\n\nIn order to illustrate the problem, I've used the maven-eclipse-plugin. It generates a .classpath only when the project's artifact handler's language is set to java. My child project's packaging is \"jboss-sar\" whose artifact handler is provided by jboss-packaging-maven-plugin. \"jboss-sar\" 's language is set to java, so whenever the jboss'sar artifact handler is properly resolved, the .classpath file should be generated.\n\nI've used the nbm-maven-plugin as the second perturbing plugin in order to break the resolution.\n\nI've attached a set of it tests which each illustrate a working or broken scenario. In order to test those, simply run the following command at the root of each parent project:\nmvn clean eclipse:clean install eclipse:eclipse\n\nIf the file .classpath is properly generated in \"module1\" child project, then the test passes, else it fails. Attached it tests contain \"OK\" when they pass and \"KO\" when then fails.\n\nI've tried hard to debug plexus component resolution internals but after a whole day of headackes I gave up and ended up posting this issue hoping that somebody more used to maven and plexus internals would find a solution.\n\nKind regards,\n\nC\u00e9dric Vidal\nhttp://proxiad.com\n",
        "Handling of custom lifecycle artifacts is not working properly I am using a custom lifecycle, resource, as follows:\n\n    <component>\n      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>\n      <configuration>\n        <phases>\n          <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources>          \n          <package>org.apache.maven.plugins:maven-jar-plugin:jar</package>\n          <install>org.apache.maven.plugins:maven-install-plugin:install,com.dcx.NGST:maven-bundle-plugin:install</install>\n          <deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy</deploy>\n        </phases>\n      </configuration>\n    </component>\n\n    <component>\n      <role>org.apache.maven.artifact.handler.ArtifactHandler</role>\n      <role-hint>resource</role-hint>\n      <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>\n      <configuration>\n        <extension>jar</extension>\n        <type>resource</type>\n        <packaging>resource</packaging>\n        <language>java</language>\n        <addedToClasspath>true</addedToClasspath>\n      </configuration>\n    </component>\n\n\n\nI have a pom structure that looks like this:\napp\\data\\production\\ecuDB\\ABS\\01\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\02\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\03\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\04\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\05\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\06\\pom.xml\napp\\data\\production\\ecuDB\\ABS\\07\\pom.xml\n\nEach folder in the structure contains a pom type, and references the child modules; 0X are resource type artifacts as defined above.  I attached the text output of maven install on one of the resource projects, namely 01, followed by 'cd ..' and maven install on all ABS modules.  Comparing the 2 runs, you will find that the 01 resource artifact has been installed with different extensions.  It uses the correct .jar extension on the first run, but it defaults to .resource when build as a multiproject.  It appears that the component definition isn't available, and it defaults the extension to the type value\n\nI am also going to attach the 01/pom.xml\n\n\n"
    ],
    [
        "MNG-3506",
        "MNG-2426",
        "Custom ArtifactHandler not resolved for project when an additional plugin with extensions is defined in parent pom Hi,\n\nI've found an annoying bug regarding custom artifact handlers. A custom artifact handler provided by a plugin with extensions is not resolved when another plugin with extensions is defined in parent pom. Note that the behavior is the same whether the first plugin is defined in child project or parent project.\n\nIn order to illustrate the problem, I've used the maven-eclipse-plugin. It generates a .classpath only when the project's artifact handler's language is set to java. My child project's packaging is \"jboss-sar\" whose artifact handler is provided by jboss-packaging-maven-plugin. \"jboss-sar\" 's language is set to java, so whenever the jboss'sar artifact handler is properly resolved, the .classpath file should be generated.\n\nI've used the nbm-maven-plugin as the second perturbing plugin in order to break the resolution.\n\nI've attached a set of it tests which each illustrate a working or broken scenario. In order to test those, simply run the following command at the root of each parent project:\nmvn clean eclipse:clean install eclipse:eclipse\n\nIf the file .classpath is properly generated in \"module1\" child project, then the test passes, else it fails. Attached it tests contain \"OK\" when they pass and \"KO\" when then fails.\n\nI've tried hard to debug plexus component resolution internals but after a whole day of headackes I gave up and ended up posting this issue hoping that somebody more used to maven and plexus internals would find a solution.\n\nKind regards,\n\nC\u00e9dric Vidal\nhttp://proxiad.com\n",
        "Artifact copied to local repository with wrong file extension when using jboss-packaging plugin When using the jboss-packaging plugin and setting <packaging> to jboss-sar in my pom, the artifact is copied into the local repository with the wrong file extension (.jboss-sar instead of .sar).  The jboss-packaging components.xml has <extension> set to sar.  The file in the build target directory has the correct .sar extension.\n\nHere's the relevant excerpt from my pom.xml:\n\n<packaging>jboss-sar</packaging>\n...\n<build>\n<plugins>\n<plugin>\n<groupId>org.codehaus.mojo</groupId>\n<artifactId>jboss-packaging-maven-plugin</artifactId>\n<version>2.0-SNAPSHOT</version>\n<extensions>true</extensions>\n..."
    ],
    [
        "MNG-3506",
        "MNG-2534",
        "Custom ArtifactHandler not resolved for project when an additional plugin with extensions is defined in parent pom Hi,\n\nI've found an annoying bug regarding custom artifact handlers. A custom artifact handler provided by a plugin with extensions is not resolved when another plugin with extensions is defined in parent pom. Note that the behavior is the same whether the first plugin is defined in child project or parent project.\n\nIn order to illustrate the problem, I've used the maven-eclipse-plugin. It generates a .classpath only when the project's artifact handler's language is set to java. My child project's packaging is \"jboss-sar\" whose artifact handler is provided by jboss-packaging-maven-plugin. \"jboss-sar\" 's language is set to java, so whenever the jboss'sar artifact handler is properly resolved, the .classpath file should be generated.\n\nI've used the nbm-maven-plugin as the second perturbing plugin in order to break the resolution.\n\nI've attached a set of it tests which each illustrate a working or broken scenario. In order to test those, simply run the following command at the root of each parent project:\nmvn clean eclipse:clean install eclipse:eclipse\n\nIf the file .classpath is properly generated in \"module1\" child project, then the test passes, else it fails. Attached it tests contain \"OK\" when they pass and \"KO\" when then fails.\n\nI've tried hard to debug plexus component resolution internals but after a whole day of headackes I gave up and ended up posting this issue hoping that somebody more used to maven and plexus internals would find a solution.\n\nKind regards,\n\nC\u00e9dric Vidal\nhttp://proxiad.com\n",
        "When building a multiproject build, maven2 may incorrectly store output files in the repository with a wrong extension. It does not do this if the project is built on its own.  I have created two new maven plugins to customize the way war et ejb projects are built (i.e. maven 2 default plugins are not compliant with my requirements). In order to use these custom plugins, I have also creating two new packaging (named xnet-ejb and xnet-war) but output files I want to store in the maven repository must have .war and .jar extensions. So I have added plexus components descriptor in order to change the extension (by default, the role-hint will be the extension of the file). \n\nIn a multiproject build, if I use only one of my plugin, it works well; the file install in the repository has the correct extension. But if I use both plugin, only one works and for project manage by the other one plugin, the file install in the repository will have a wrong extension (i.e. the role-hint). \n\nThis problem seems to be known (see http://cargo.codehaus.org/Merging+WAR+files) but I haven't found any fix.\n\nThanks for your help\n\nAttached are my both plugin jar files."
    ],
    [
        "MNG-3521",
        "MNG-2578",
        "mvn site does not use the plugin version from the pluginManagement section In the attached pom the pmd version specified in the pluginManagement is 2.3 but the one used when executing mvn site is the latest one in the local repository (in my case it was 2.2).\nWhen executing mvn pmd:pmd the newer version is downloaded from the remote repository.",
        "Make it possible to set default versions  for reporting-plugins (i.e. plugins under <reporting>) Make it possible to set default versions  for reporting-plugins (i.e. plugins under <reporting>).\ndependencies have dependencyManagement and plugins have pluginManagement, but there doesn't seem to be anything for reportPluginManagement.\n\nCould be that I missed out on something, but I doubt it since I stumbled on this issue with aspectj-maven-plugin and it's aspectj-report (similar to javadoc).\nThe same plugin is used under build and reporting. pluginManagement stated that version 1.0-beta-4-SNAPSHOT should be used, but it was only for build.\nInstead 1.0-beta-2 (not snapshot) was used for the report.\n\nThis issue came up in the following thread in mojo-user:\nhttp://www.nabble.com/Problems-with-aspectj-maven-plugin-and-reporting-using-ajdoc-tf2060246.html#a6507979"
    ],
    [
        "MNG-3521",
        "MNG-3385",
        "mvn site does not use the plugin version from the pluginManagement section In the attached pom the pmd version specified in the pluginManagement is 2.3 but the one used when executing mvn site is the latest one in the local repository (in my case it was 2.2).\nWhen executing mvn pmd:pmd the newer version is downloaded from the remote repository.",
        "PluginManagement does not work for report-plugins {code:xml} <build>\n   ...\n    </pluginManagement>\n       <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-pmd-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n   ...\n  </build>\n  <reporting>\n    <plugins>  \n       <plugin>\n         <artifactId>maven-pmd-plugin</artifactId>\n       </plugin>\n    </plugins>\n  </reporting>  {code}\n\nmvn site ... use pmd-2.4-SNAPSHOT instead of the defined 2.2 ... why?"
    ],
    [
        "MNG-3524",
        "MNG-1775",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing.",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-3524",
        "MNG-2363",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing.",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory."
    ],
    [
        "MNG-3524",
        "MNG-2627",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing.",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile."
    ],
    [
        "MNG-3524",
        "MNG-2809",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing.",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>"
    ],
    [
        "MNG-3524",
        "MNG-3017",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing.",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n...."
    ],
    [
        "MNG-3524",
        "MNG-3140",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing.",
        "add support for ${basedir} property in profile activation The profile <activation> supports file based activation (exists/missing), but properties are not supported to set the path.\n\nMy project use such a file-based activation, based on some generated-source file :\n<activation>\n        <file>\n          <missing>target/generated-sources/sql2java.tstamp</missing>\n        </file>\n</activation>\n\nMy project is a module, and when I run the project from the parent project the path is considered based on current dir (parent root) and not module root, so the profile gets activated but shouldn't.\n\nThere's no support for properties in profile activation. I can understand this as profile can themself change properties. Support for the ${basedir} property could solve this issue. As this is a default maven property, it should be immutable, so have no impact on profiles activations and other properties setup.\n\nI would like to submit a patch, to enhance FileProfileActivator and replace ${basedir} with actual value in isActive, but I don't know where to get the basedir value.\n\n"
    ],
    [
        "MNG-3528",
        "MNG-3522",
        "Order of executing plugins in maven 2.0.9 Suppose you include a plugin like this:\n\n<plugin>\n\t<groupId>my.bug.test</groupId>\n\t<artifactId>plugin</artifactId>\n\t<version>1.0</version>\n\t<executions>\n\t\t<execution>\n\t\t\t<id>first</id>\n\t\t\t<phase>compile</phase>\n\t\t\t<goals>\n\t\t\t\t<goal>first</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>\n<plugin>\n\t<groupId>my.bug.test</groupId>\n\t<artifactId>plugin</artifactId>\n\t<version>1.0</version>\n\t<executions>\n\t\t<execution>\n\t\t\t<id>second</id>\n\t\t\t<phase>compile</phase>\n\t\t\t<goals>\n\t\t\t\t<goal>second</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>\n\nThen SECOND will execute before FIRST. The reason is in ModelUtils.java:MergePluginDefinitions the new definition is passed as parent and the old as child - and the parent comes first in the merged executions.\n\nHowever, this works correctly:\n\n<plugin>\n\t<groupId>my.bug.test</groupId>\n\t<artifactId>plugin</artifactId>\n\t<version>1.0</version>\n\t<executions>\n\t\t<execution>\n\t\t\t<id>both</id>\n\t\t\t<phase>test</phase>\n\t\t\t<goals>\n\t\t\t\t<goal>first</goal>\n\t\t\t\t<goal>second</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>\n\nI have included a tiny test case that demonstrates this. Here's my output:\n\n[INFO] [compiler:compile]\n[INFO] No sources to compile\n[INFO] [:second {execution: second}]\nSECOND\n[INFO] [:first {execution: first}]\nFIRST\n[INFO] [resources:testResources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:testCompile]\n[INFO] No sources to compile\n[INFO] [surefire:test]\n[INFO] No tests to run.\n[INFO] [:first {execution: both}]\nFIRST\n[INFO] [:second {execution: both}]\nSECOND\n",
        "Cannot define Mojo execution order explicitly In this example antrun:run is excuted after dependency:copy-dependencies by virtue of plugin order. Preferable would be an explicit order definition. For example, a plugin could export a 'phase-id' that another uses in its 'phase' element.\n{code:xml}\n<plugins>\n  <plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-dependency-plugin</artifactId>\n    <executions>\n      <execution>\n        <id>copy-dependencies</id>\n        <phase>package</phase>\n        <goals>\n          <goal>copy-dependencies</goal>\n        </goals>\n        <configuration>\n          <outputDirectory>${project.build.directory}/thirdparty</outputDirectory>\n          <stripVersion>true</stripVersion>\n        </configuration>\n      </execution>\n    </executions>\n  </plugin>\n  <plugin>\n    <artifactId>maven-antrun-plugin</artifactId>\n    <executions>\n      <execution>\n        <phase>package</phase>\n        <goals>\n          <goal>run</goal>\n        </goals>\n        <configuration>\n          <tasks>\n            <ant antfile=\"ant/build-concat.xml\"/>\n          </tasks>\n        </configuration>\n      </execution>\n    </executions>\n  </plugin>\n</plugins>\n{code}\n"
    ],
    [
        "MNG-3545",
        "MNG-3527",
        "Option -P-profile overridden if profile is activebyDefault In maven 2.0.9, deactivating a profile \"foo\" that is declared and marked activeByDefault in the local POM does not work, as in DefaultProfileManager.java:227 all activeByDefault profiles are added if no profile is explicitly given (\"-Pbar\").\n\nIn the attached zip, run \n mvn -P-foo help:active-profiles\nand note that foo *is* active.\n\nThe patch fixes these issues by checking all default-activated profiles against the exclusions list when they are added \"by default\".\n",
        "profile deactivation has no affect Brian looked at the source code, and it appears that deactivation of profiles should work.  I'm using a profile that is active by default, and I want to override this.\n\nThe following command shows that deactivating my profile is not working.  I tried this on 2.0.8 and 2.0.9\n\nmvn help:active-profiles -P-oros\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building oros web component\n[INFO]    task-segment: [help:active-profiles] (aggregator-style)\n[INFO] ------------------------------------------------------------------------\n[INFO] [help:active-profiles]\n[INFO]\nActive Profiles for Project 'ca.athabascau.banner:web:war:1.1.23-SNAPSHOT':\n\nThe following profiles are active:\n\n - oros (source: settings.xml)\n - dev (source: settings.xml)\n - oros (source: settings.xml)\n - dev (source: settings.xml)\n\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Tue Apr 15 16:25:15 MDT 2008\n[INFO] Final Memory: 3M/5M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3560",
        "MNG-3330",
        "unable to use plugins that exist in multiple repositories I created two test cases using maven-2.0.9\n\nA. Here's the settings for my first test case which builds successfully using mvn site or mvn site -up\n\n1. Created two remote repository\n     - sandbox has maven-project-info-reports-plugin 2.0.1\n     - corporate has maven-project-info-reports-plugin 2.0\n\n2. No maven-project-info-reports-plugin in my local repository\n\n3. Access to central repository is disabled\n\n4. The order in my settings.xml for the plugin repositories is sandbox first before corporate\n<pluginRepository>\n<id>sandbox</id>\n<url>http://localhost:9091/repository/sandbox</url>\n</pluginRepository>\n<pluginRepository>\n<id>corporate</id>\n<url>http://localhost:9091/repository/corporate</url>\n</pluginRepository>\n\nResult:\n\n    * downloaded maven-project-info-reports-plugin 2.0 pom in corporate\n    * check maven-project-info-reports-plugin 2.0 jar in sandbox\n    * downloaded maven-project-info-reports-plugin 2.0 jar in corporate\n\n{code}\nmarica@kamejin:~/projects/testproject$ mvn site -up\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building testproject\n[INFO]    task-segment: [site]\n[INFO] ------------------------------------------------------------------------\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from sandbox\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from corporate\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from central\n[WARNING] repository metadata for: 'artifact org.apache.maven.plugins:maven-project-info-reports-plugin' could not be retrieved from repository: central due to an error: Error transferring file\n[INFO] Repository 'central' will be blacklisted\nDownloading: http://localhost:9091/repository/corporate/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.pom\n5K downloaded\nDownloading: http://localhost:9091/repository/sandbox/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\nDownloading: http://localhost:9091/repository/corporate/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\n[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.\n[INFO] Setting property: velocimacro.messages.on => 'false'.\n[INFO] Setting property: resource.loader => 'classpath'.\n[INFO] Setting property: resource.manager.logwhenfound => 'false'.\n[INFO] [site:site]\n[INFO] Generating \"Source Repository\" report.\n[INFO] Generating \"Issue Tracking\" report.\n[INFO] Generating \"About\" report.\n[INFO] Generating \"Project License\" report.\n[INFO] Generating \"Project Summary\" report.\n[INFO] Generating \"Dependencies\" report.\n[INFO] Generating \"Continuous Integration\" report.\n[INFO] Generating \"Project Team\" report.\n[INFO] Generating \"Mailing Lists\" report.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n{code}\n\n\nB. Here's the settings for my second test case which replicate this issue\n\n1. Created two remote repository\n     - sandbox has maven-project-info-reports-plugin 2.0.1\n     - corporate has maven-project-info-reports-plugin 2.0\n\n2. No maven-project-info-reports-plugin in my local repository\n\n3. Access to central repository is disabled\n\n4. The order in my settings.xml for the plugin repositories is corporate first before sandbox\n<pluginRepository>\n<id>corporate</id>\n<url>http://localhost:9091/repository/corporate</url>\n</pluginRepository>\n<pluginRepository>\n<id>sandbox</id>\n<url>http://localhost:9091/repository/sandbox</url>\n</pluginRepository>\n\nResult:\n\n    * downloaded maven-project-info-reports-plugin 2.0 pom in sandbox which it did not find and never tries to check the corporate where the pom could be found\n    * downloaded maven-project-info-reports-plugin 2.0 jar in corporate\n\n{code}\nmarica@kamejin:~/projects/testproject$ mvn site -up\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building testproject\n[INFO]    task-segment: [site]\n[INFO] ------------------------------------------------------------------------\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from corporate\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from sandbox\n[INFO] artifact org.apache.maven.plugins:maven-project-info-reports-plugin: checking for updates from central\n[WARNING] repository metadata for: 'artifact org.apache.maven.plugins:maven-project-info-reports-plugin' could not be retrieved from repository: central due to an error: Error transferring file\n[INFO] Repository 'central' will be blacklisted\nDownloading: http://localhost:9091/repository/sandbox/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.pom\nDownloading: http://localhost:9091/repository/corporate/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\n-----------------------------------------------------\nthis realm = app0.child-container[org.apache.maven.plugins:maven-project-info-reports-plugin]\nurls[0] = file:/home/marica/.m2/repository/org/apache/maven/plugins/maven-project-info-reports-plugin/2.0/maven-project-info-reports-plugin-2.0.jar\nurls[1] = file:/home/marica/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nNumber of imports: 6\nimport: org.codehaus.classworlds.Entry@4891bb28\nimport: org.codehaus.classworlds.Entry@f8e44ca4\nimport: org.codehaus.classworlds.Entry@c51bc9e7\nimport: org.codehaus.classworlds.Entry@bece5185\nimport: org.codehaus.classworlds.Entry@3fee8e37\nimport: org.codehaus.classworlds.Entry@3fee19d8\n\n\nthis realm = plexus.core\nurls[0] = file:/opt/maven-2.0.8/lib/maven-2.0.8-uber.jar\nNumber of imports: 6\nimport: org.codehaus.classworlds.Entry@4891bb28\nimport: org.codehaus.classworlds.Entry@f8e44ca4\nimport: org.codehaus.classworlds.Entry@c51bc9e7\nimport: org.codehaus.classworlds.Entry@bece5185\nimport: org.codehaus.classworlds.Entry@3fee8e37\nimport: org.codehaus.classworlds.Entry@3fee19d8\n-----------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error getting reports from the plugin 'org.apache.maven.plugins:maven-project-info-reports-plugin': Unable to find the mojo 'org.apache.maven.plugins:maven-project-info-reports-plugin:2.0:scm' in the plugin 'org.apache.maven.plugins:maven-project-info-reports-plugin'\norg/apache/maven/reporting/AbstractMavenReport\n{code}",
        "reporting plugin poms are retrieved from the wrong repository Pull the staged 2.4 into your local repo, and run surefire-report:report-only on a POM configured to use 2.4.  The build will fail.  Try again, this time running \"mvn org.apache.maven.plugins:maven-surefire-report-plugin:2.4:report-only\"\n\n-----------------------------------------------------\nthis realm = app0.child-container[org.apache.maven.plugins:maven-surefire-report-plugin]\nurls[0] = file:/c:/weirdlocalrepo/org/apache/maven/plugins/maven-surefire-report-plugin/2.4/maven-surefire-report-plugin-2.4.jar\nurls[1] = file:/c:/weirdlocalrepo/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nNumber of imports: 4\nimport: org.codehaus.classworlds.Entry@4891bb28\nimport: org.codehaus.classworlds.Entry@f8e44ca4\nimport: org.codehaus.classworlds.Entry@c51bc9e7\nimport: org.codehaus.classworlds.Entry@bece5185\n\n\nthis realm = plexus.core\nurls[0] = file:/C:/devtools/maven-2.0.7/lib/maven-core-2.0.7-uber.jar\nNumber of imports: 4\nimport: org.codehaus.classworlds.Entry@4891bb28\nimport: org.codehaus.classworlds.Entry@f8e44ca4\nimport: org.codehaus.classworlds.Entry@c51bc9e7\nimport: org.codehaus.classworlds.Entry@bece5185\n-----------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Internal error in the plugin manager executing goal 'org.apache.maven.plugins:maven-surefire-report-plugin:2.4:report-only': Unable to find the mojo 'org.apache.maven.plugins:maven-surefire-report-plugin:2.4:report-only' in the p\nlugin 'org.apache.maven.plugins:maven-surefire-report-plugin'\norg/apache/maven/reporting/AbstractMavenReport"
    ],
    [
        "MNG-3563",
        "MNG-3542",
        "Content of a property ending with .url gets overwritten with the content of <url></url> from the pom.xml If one creates a property e.g. named jdbc.url in a parent pom.xml and then refers to that property via ${jdbc.url} in a resource file of a subproject whose pom.xml is derived from the one that declares the jdbc.url property the content is overwritten with the content of the <url> tag during the filtering step.\n\nE.g.\n\ncom.example.project contains:\n<jdbc.url>jdbc:mysql://localhost:3306/TestDB</jdbc.url>\nin its pom.xml\n\ncom.example.subproject is derived from com.example.project and contains \nurl=\"${jdbc.url}\nin some db setup file and\n<url>http://maven.apache.org</url>\nin its pom.xml\n\nThe resulting content, after the filtering step, will be \"url=\"http://maven.apache.org\"\" instead of \"url=\"jdbc:mysql://localhost:3306/TestDB\"\".",
        "Filtering test resources replaces the wrong value Noticed an oddity with filtering in that it is replacing the wrong properties under certain conditions. The key thing to note in below mockup is the url property in pom.xml\n\nContents of pom.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<url>http://THIS_IS_A_URL_TO_HIGHLIGHT_THE_BUG</url>\n\t<groupId>com.maven.bugs</groupId>\n\t<artifactId>bug1</artifactId>\n\t<version>1</version>\n\t<packaging>jar</packaging>\n\t<name>Maven Bug 1</name>\n\t<build>\n\t\t<testResources>\n\t\t\t<testResource>\n\t\n<directory>src/test/resources</directory>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</testResource>\n\t\t</testResources>\n\t</build>\n</project>\n\nIn the src/test/resources directory is a file that contains:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<filtering>\n\t<property name=\"url\">\n\t\t<value>${test.url}</value>\n\t</property>\n</filtering>\n\nWhen running mvn clean process-test-resources the file generated in target/test-classes now contains:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<filtering>\n\t<property name=\"url\">\n\t\t<value>http://THIS_IS_A_URL_TO_HIGHLIGHT_THE_BUG</value>\n\t</property>\n</filtering>\n\nThis is not what I expect as I don't have a property for test.url defined\n"
    ],
    [
        "MNG-3593",
        "MNG-2433",
        "Maven tries to download artifacts while it runs in offline mode I encounter a problem that has been filed before (http://jira.codehaus.org/browse/MNG-2433), then closed but actually I think it is not solved yet !\n\nI run maven with -o option. All artifacts are in my local repository (I am totally sure about this !) so there should have been no downloads ... but Maven tries to download artifacts and I can't understand why.\n\nI have the following error message :\n\n{quote}[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nMissing:\n----------\n1) org.andromda.profiles.uml14:andromda-profile-service:xml.zip:3.3-SNAPSHOT\n\nTry downloading the file manually from the project website.\n\nThen, install it using the command:\nmvn install:install-file -DgroupId=org.andromda.profiles.uml14 -DartifactId=andromda-profile-service -Dversion=3.3-SNAPSHOT -Dpackaging=xml.zip -Dfile=/path/to/file\n\nAlternatively, if you host your own repository you can deploy the file there:\nmvn deploy:deploy-file -DgroupId=org.andromda.profiles.uml14 -DartifactId=andromda-profile-service -Dversion=3.3-SNAPSHOT -Dpackaging=xml.zip -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]\n\nPath to dependency:\n1) fr.xxx.t4:t4-core-mda:pom:1.0-SNAPSHOT\n2) org.andromda.cartridges:andromda-ejb3-cartridge:jar:1.0-SNAPSHOT\n3) org.andromda.profiles.uml14:andromda-profile:xml.zip:3.3-SNAPSHOT\n4) org.andromda.profiles.uml14:andromda-profile-service:xml.zip:3.3-SNAPSHOT\n\n----------\n1 required artifact is missing.\n\nfor artifact:\nfr.xxx.t4:t4-core-mda:pom:1.0-SNAPSHOT\n\nfrom the specified remote repositories:\ncentral (http://10.11.4.108:8080/artifactory/repo),\nandromda (http://10.11.4.108:8080/artifactory/repo),\nsnapshots (http://10.11.4.108:8080/artifactory/repo)\n\nNOTE: Maven is executing in offline mode. Any artifacts not already in your local\nrepository will be inaccessible.{quote}\n\nTo help to reproduce the problem, note I use artifactory as a repository. I have the following config in pom.xml :\n\n{code:xml}<repositories>\n<repository>\n<id>andromda</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>true</enabled>\n<updatePolicy>daily</updatePolicy>\n</snapshots>\n</repository>\n<repository>\n<id>central</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>false</enabled>\n</snapshots>\n</repository>\n<repository>\n<id>snapshots</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<releases>\n<enabled>true</enabled>\n<updatePolicy>daily</updatePolicy>\n</releases>\n</repository>\n</repositories>\n<pluginRepositories>\n<pluginRepository>\n<id>andromda</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>false</enabled>\n</snapshots>\n</pluginRepository>\n<pluginRepository>\n<id>central</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>false</enabled>\n</snapshots>\n</pluginRepository>\n<pluginRepository>\n<id>snapshots</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<releases>\n<enabled>false</enabled>\n</releases>\n</pluginRepository>\n</pluginRepositories>{code}\n\nI tried with updatePolicy as \"weekly\" or \"never\" but it changed nothing.\n\nI also have the following mirrors in maven settings.xml, but removing them changed nothing :\n\n{code:xml}<mirror>\n<id>andromda</id>\n<mirrorOf>andromda</mirrorOf>\n<name>AndroMDA Repository</name>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n</mirror>\n\n<mirror>\n<id>apache-incubator</id>\n<mirrorOf>apache-incubator</mirrorOf>\n<name>Apache Incubator Repository</name>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n</mirror>{code}\n\nI really think there is a bug somewhere, as we run maven with -o option, it should not try to download artifacts. Maybe a problem with transitive dependencies ? Or a problem with snapshots ?",
        "Maven looks for snapshots in offline mode It seems that sometimes Maven2 is looking for snapshots in offline mode (this happens for example in the Cocoon project). here is an output that might help:\n:\\dev\\workspace\\cocoon-2.2\\core\\cocoon-webapp>mvn -o -Dmaven.test.skip=true coc\noon:deploy\n[INFO]\nNOTE: Maven is executing in offline mode. Any artifacts not already in your loca\nl\nrepository will be inaccessible.\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'cocoon'.\n[INFO] org.apache.maven.plugins: checking for updates from snapshots\n[INFO] org.apache.maven.plugins: checking for updates from mortbay-repo\n[INFO] org.codehaus.mojo: checking for updates from snapshots\n[INFO] org.codehaus.mojo: checking for updates from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from central\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from apache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from apache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-SNAPSHOT: checkin\ng for updates from apache.snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from central\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from apache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from apache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon-deployer:1-SNAPSHOT: checking for updat\nes from apache.snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from mortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from central\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from apache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from apache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon-tools-modules:1-SNAPSHOT: checking for\nupdates from apache.snapshots\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from s\nnapshots\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from m\nortbay-repo\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from c\nentral\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from a\npache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from a\npache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon:1-SNAPSHOT: checking for updates from a\npache.snapshots"
    ],
    [
        "MNG-3593",
        "MNG-3314",
        "Maven tries to download artifacts while it runs in offline mode I encounter a problem that has been filed before (http://jira.codehaus.org/browse/MNG-2433), then closed but actually I think it is not solved yet !\n\nI run maven with -o option. All artifacts are in my local repository (I am totally sure about this !) so there should have been no downloads ... but Maven tries to download artifacts and I can't understand why.\n\nI have the following error message :\n\n{quote}[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nMissing:\n----------\n1) org.andromda.profiles.uml14:andromda-profile-service:xml.zip:3.3-SNAPSHOT\n\nTry downloading the file manually from the project website.\n\nThen, install it using the command:\nmvn install:install-file -DgroupId=org.andromda.profiles.uml14 -DartifactId=andromda-profile-service -Dversion=3.3-SNAPSHOT -Dpackaging=xml.zip -Dfile=/path/to/file\n\nAlternatively, if you host your own repository you can deploy the file there:\nmvn deploy:deploy-file -DgroupId=org.andromda.profiles.uml14 -DartifactId=andromda-profile-service -Dversion=3.3-SNAPSHOT -Dpackaging=xml.zip -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]\n\nPath to dependency:\n1) fr.xxx.t4:t4-core-mda:pom:1.0-SNAPSHOT\n2) org.andromda.cartridges:andromda-ejb3-cartridge:jar:1.0-SNAPSHOT\n3) org.andromda.profiles.uml14:andromda-profile:xml.zip:3.3-SNAPSHOT\n4) org.andromda.profiles.uml14:andromda-profile-service:xml.zip:3.3-SNAPSHOT\n\n----------\n1 required artifact is missing.\n\nfor artifact:\nfr.xxx.t4:t4-core-mda:pom:1.0-SNAPSHOT\n\nfrom the specified remote repositories:\ncentral (http://10.11.4.108:8080/artifactory/repo),\nandromda (http://10.11.4.108:8080/artifactory/repo),\nsnapshots (http://10.11.4.108:8080/artifactory/repo)\n\nNOTE: Maven is executing in offline mode. Any artifacts not already in your local\nrepository will be inaccessible.{quote}\n\nTo help to reproduce the problem, note I use artifactory as a repository. I have the following config in pom.xml :\n\n{code:xml}<repositories>\n<repository>\n<id>andromda</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>true</enabled>\n<updatePolicy>daily</updatePolicy>\n</snapshots>\n</repository>\n<repository>\n<id>central</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>false</enabled>\n</snapshots>\n</repository>\n<repository>\n<id>snapshots</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<releases>\n<enabled>true</enabled>\n<updatePolicy>daily</updatePolicy>\n</releases>\n</repository>\n</repositories>\n<pluginRepositories>\n<pluginRepository>\n<id>andromda</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>false</enabled>\n</snapshots>\n</pluginRepository>\n<pluginRepository>\n<id>central</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<snapshots>\n<enabled>false</enabled>\n</snapshots>\n</pluginRepository>\n<pluginRepository>\n<id>snapshots</id>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n<releases>\n<enabled>false</enabled>\n</releases>\n</pluginRepository>\n</pluginRepositories>{code}\n\nI tried with updatePolicy as \"weekly\" or \"never\" but it changed nothing.\n\nI also have the following mirrors in maven settings.xml, but removing them changed nothing :\n\n{code:xml}<mirror>\n<id>andromda</id>\n<mirrorOf>andromda</mirrorOf>\n<name>AndroMDA Repository</name>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n</mirror>\n\n<mirror>\n<id>apache-incubator</id>\n<mirrorOf>apache-incubator</mirrorOf>\n<name>Apache Incubator Repository</name>\n<url>http://10.11.4.108:8080/artifactory/repo</url>\n</mirror>{code}\n\nI really think there is a bug somewhere, as we run maven with -o option, it should not try to download artifacts. Maybe a problem with transitive dependencies ? Or a problem with snapshots ?",
        "offline build not running, when having SNAPSHOT dependencies am having troubles with\nmvn ... -o\n(with maven 2.0.7)\n\nsays not able to download (but, really, the file is in my local repo)\nThe dependency is a -SNAPSHOT (for what's worth)\n\nLuckily, when traveling by train, I had maven 2.0.4 on my box as well.\nA change to use 2.0.4 works fine.\n\nSo, is this an already know bug in 2.0.7 ?\nTo my understanding it is a bug, since offline just shouldn't try to get a newer\nSNAPSHOT, perhaps I am wrong.\n\nI know that relying on SNAPSHOTs can be dangerous, but from -o I would expect\njust not checking for new stuff.\n\nand... for some reasons, sometimes,\nit just downloads a new SNAPSHOT.\n\nThat is a pain, when you are \"maintaining\" the same snapshot on your\nbox, but the build just goes ahead and actually downloads a version."
    ],
    [
        "MNG-3614",
        "MNG-2276",
        "settings.xml active profiles executed AFTER project profiles have been loaded and activated/not activated If you have the following settings.xml in ~/.m2:\n{code:xml}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings>\n  <profiles>\n    <profile>\n      <id>userSettings</id>\n      <activation>\n        <activeByDefault/>\n      </activation>\n      <properties>\n        <someproperty>true</someproperty>\n      </properties>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <activeProfile>userSettings</activeProfile>\n  </activeProfiles>\n</settings>\n{code}\nand another child pom.xml somewhere down the line has a profile with an activation like this:\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\">\n  <modelVersion>4.0.0</modelVersion>\n  <profiles>\n    <profile>\n    \t<id>with-something</id>    \n    \t<activation>\n       \t\t<activeByDefault>false</activeByDefault>\n       \t\t<property>\n       \t\t\t<name>someproperty</name>\n       \t\t\t<value>true</value>\n       \t\t</property>\n    \t</activation>\n    </profile>\n  </profiles>    \n</project>\n{code}\nDuring run-time, the profile with-something will load before userSettings.  This causes with-something to be incorrectly not activated (as the property someproperty does not exist).  This can be seen with mvn help:active-profiles.\n\nI know why this is true, but it is non-intuitive and one would expect settings.xml profiles to be loaded before anything else.\n",
        "profile activation by property doesn't work with properties defined in settings. Activating a profile like below doesn't get activated unless the property is set on the CLI. I need to have the property defined in the settings.xml so it's always set.\n    <profiles>\n     <profile>\n      <id>prod</id>\n      <activation>\n          <property>\n             <name>deploy-ct</name>\n          </property>\n      </activation>\n\nFurther, I noticed that if I set it so that the activation is like:\n      <activation>\n          <property>\n             <name>deploy-ct</name><value>true</value>\n          </property>\n      </activation>\n\nThe profile is triggered just by setting the cli like \"mvn -Ddeploy-ct\"  It is not active if I use \"-Ddeploy-ct=false\" but the settings descriptor says that the existence of the property is only used if value is not set.\n"
    ],
    [
        "MNG-3618",
        "MNG-3580",
        "maven 2.0.9 return NPE on Linux with IBM JVM 1.6.0 SR1 If you try to run any goal on any POM  maven will return a error like the that\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.9\nJava version: 1.6.0\nOS name: \"linux\" version: \"2.6.24-19-386\" arch: \"x86\" Family: \"unix\"\n[DEBUG] Building Maven user-level plugin registry from: '/home/kismet-sl/.m2/plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: '/home/kismet-sl/i686/maven/conf/plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: it.cnr.isti.wnlab.proximity:proximity::1.0.0 of project: it.cnr.isti.wnlab.proximity:proximity.workflow.api:jar:1.1.2-SNAPSHOT in relative path: ../pom.xml\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: it.cnr.isti.wnlab.proximity:proximity.workflow.api:jar:1.1.2-SNAPSHOT\n[DEBUG] Searching for parent-POM: it.cnr.isti.wnlab:wnlab::1.0.0 of project: it.cnr.isti.wnlab.proximity:proximity:pom:1.0.0 in relative path: ../pom.xml\n[DEBUG] Parent-POM: it.cnr.isti.wnlab:wnlab::1.0.0 not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: it.cnr.isti.wnlab:wnlab::1.0.0 for project: it.cnr.isti.wnlab.proximity:proximity:pom:1.0.0 from the repository.\n[INFO] Searching repository for plugin with prefix: 'help'.\n[DEBUG] Loading plugin prefixes from group: org.apache.maven.plugins\n[DEBUG] Loading plugin prefixes from group: org.codehaus.mojo\n[DEBUG] maven-help-plugin: resolved to version 2.0.2 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::10 for project: null:maven-help-plugin:maven-plugin:2.0.2 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::7 for project: org.apache.maven.plugins:maven-plugins:pom:10 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::4 for project: org.apache.maven:maven-parent:pom:7 from the repository.\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\njava.lang.NullPointerException\n\tat org.apache.maven.project.ModelUtils.mergePluginLists(ModelUtils.java:164)\n\tat org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleBuildInheritance(DefaultModelInheritanceAssembler.java:366)\n\tat org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:168)\n\tat org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:61)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:852)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:253)\n\tat org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:106)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolveMetaVersion(DefaultPluginVersionManager.java:673)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolvePluginVersion(DefaultPluginVersionManager.java:187)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolvePluginVersion(DefaultPluginVersionManager.java:91)\n\tat org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:171)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1274)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1542)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.segmentTaskListByAggregationNeeds(DefaultLifecycleExecutor.java:405)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:137)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39)\n\tat java.lang.reflect.Method.invoke(Method.java:612)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Mon Jun 09 14:34:28 GMT+01:00 2008\n[INFO] Final Memory: 2M/7M\n[INFO] ------------------------------------------------------------------------\n\nIf I use Sun JVM it works, also works with IBM JVM 1.6.0 SR1 and maven 2.0.7",
        "FATAL ERROR and NPE on start Any mvn command does give me the following error message\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Business Rules Extractor\n[INFO]   Business Rules Extractor core functions\n[INFO]   COBOL Parser and ANTLR Tools\n[INFO]   Business Rules Extractor data model\n[INFO]   Documentation Extractor module\n[INFO]   Extractor module\n[INFO]   Business Rules Navigator\nWAGON_VERSION: 1.0-beta-2\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Business Rules Extractor\n[INFO]    task-segment: [install]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.project.ModelUtils.mergePluginLists(ModelUtils.java:164)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleBuildInheritance(DefaultModelInheritanceAssembler.java:366)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:168)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:61)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:852)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:253)\n        at org.apache.maven.plugin.DefaultPluginManager.checkRequiredMavenVersion(DefaultPluginManager.java:265)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:197)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:176)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1274)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1542)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindLifecycleForPackaging(DefaultLifecycleExecutor.java:1033)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:997)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:477)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39)\n        at java.lang.reflect.Method.invoke(Method.java:612)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Fri May 16 13:10:16 EDT 2008\n[INFO] Final Memory: 6M/19M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3640",
        "MNG-3527",
        "CLI cannot deactivate a profile that's activated in POM via <activeByDefault> Consider the following POM:\n{noformat}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>test</groupId>\n  <artifactId>test</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>test</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <profiles>\n    <profile>\n      <id>yuck</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>no-such-plugin</groupId>\n            <artifactId>just-to-cause-error</artifactId>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n{noformat}\n\nI'd like to deactivate the \"yuck\" profile that kicks in by default. I cannot do this even if I run \"mvn -P -yuck\".\n\nThis is because the DefaultProfileManager.getActiveProfiles() is implemented as follows:\n{noformat}\n    public List getActiveProfiles()\n        throws ProfileActivationException\n    {\n        List activeFromPom = new ArrayList();\n        List activeExternal = new ArrayList();\n\n        for ( Iterator it = profilesById.entrySet().iterator(); it.hasNext(); )\n        {\n            Map.Entry entry = (Entry) it.next();\n\n            String profileId = (String) entry.getKey();\n            Profile profile = (Profile) entry.getValue();\n\n            boolean shouldAdd = false;\n            if ( activatedIds.contains( profileId ) )\n            {\n                shouldAdd = true;\n            }\n            else if ( !deactivatedIds.contains( profileId ) && isActive( profile ) )\n            {\n                shouldAdd = true;\n            }\n\n            if ( shouldAdd )\n            {\n                if ( \"pom\".equals( profile.getSource() ) )\n                {\n                    activeFromPom.add( profile );\n                }\n                else\n                {\n                    activeExternal.add( profile );\n                }\n            }\n        }\n\n        if ( activeFromPom.isEmpty() )\n        {\n            for ( Iterator it = defaultIds.iterator(); it.hasNext(); )\n            {\n                String profileId = (String) it.next();\n\n                Profile profile = (Profile) profilesById.get( profileId );\n\n                activeFromPom.add( profile );\n            }\n        }\n\n        List allActive = new ArrayList( activeFromPom.size() + activeExternal.size() );\n\n        allActive.addAll( activeExternal );\n        allActive.addAll( activeFromPom );\n\n        return allActive;\n    }\n{noformat}\n\n... and therefore the {{defaultIds}} set (which contains \"yuck\") is considered active, even if {{deactivatedIds}} contain them. The fix should be obvious by now.",
        "profile deactivation has no affect Brian looked at the source code, and it appears that deactivation of profiles should work.  I'm using a profile that is active by default, and I want to override this.\n\nThe following command shows that deactivating my profile is not working.  I tried this on 2.0.8 and 2.0.9\n\nmvn help:active-profiles -P-oros\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building oros web component\n[INFO]    task-segment: [help:active-profiles] (aggregator-style)\n[INFO] ------------------------------------------------------------------------\n[INFO] [help:active-profiles]\n[INFO]\nActive Profiles for Project 'ca.athabascau.banner:web:war:1.1.23-SNAPSHOT':\n\nThe following profiles are active:\n\n - oros (source: settings.xml)\n - dev (source: settings.xml)\n - oros (source: settings.xml)\n - dev (source: settings.xml)\n\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Tue Apr 15 16:25:15 MDT 2008\n[INFO] Final Memory: 3M/5M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3640",
        "MNG-3545",
        "CLI cannot deactivate a profile that's activated in POM via <activeByDefault> Consider the following POM:\n{noformat}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>test</groupId>\n  <artifactId>test</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>test</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <profiles>\n    <profile>\n      <id>yuck</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>no-such-plugin</groupId>\n            <artifactId>just-to-cause-error</artifactId>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n{noformat}\n\nI'd like to deactivate the \"yuck\" profile that kicks in by default. I cannot do this even if I run \"mvn -P -yuck\".\n\nThis is because the DefaultProfileManager.getActiveProfiles() is implemented as follows:\n{noformat}\n    public List getActiveProfiles()\n        throws ProfileActivationException\n    {\n        List activeFromPom = new ArrayList();\n        List activeExternal = new ArrayList();\n\n        for ( Iterator it = profilesById.entrySet().iterator(); it.hasNext(); )\n        {\n            Map.Entry entry = (Entry) it.next();\n\n            String profileId = (String) entry.getKey();\n            Profile profile = (Profile) entry.getValue();\n\n            boolean shouldAdd = false;\n            if ( activatedIds.contains( profileId ) )\n            {\n                shouldAdd = true;\n            }\n            else if ( !deactivatedIds.contains( profileId ) && isActive( profile ) )\n            {\n                shouldAdd = true;\n            }\n\n            if ( shouldAdd )\n            {\n                if ( \"pom\".equals( profile.getSource() ) )\n                {\n                    activeFromPom.add( profile );\n                }\n                else\n                {\n                    activeExternal.add( profile );\n                }\n            }\n        }\n\n        if ( activeFromPom.isEmpty() )\n        {\n            for ( Iterator it = defaultIds.iterator(); it.hasNext(); )\n            {\n                String profileId = (String) it.next();\n\n                Profile profile = (Profile) profilesById.get( profileId );\n\n                activeFromPom.add( profile );\n            }\n        }\n\n        List allActive = new ArrayList( activeFromPom.size() + activeExternal.size() );\n\n        allActive.addAll( activeExternal );\n        allActive.addAll( activeFromPom );\n\n        return allActive;\n    }\n{noformat}\n\n... and therefore the {{defaultIds}} set (which contains \"yuck\") is considered active, even if {{deactivatedIds}} contain them. The fix should be obvious by now.",
        "Option -P-profile overridden if profile is activebyDefault In maven 2.0.9, deactivating a profile \"foo\" that is declared and marked activeByDefault in the local POM does not work, as in DefaultProfileManager.java:227 all activeByDefault profiles are added if no profile is explicitly given (\"-Pbar\").\n\nIn the attached zip, run \n mvn -P-foo help:active-profiles\nand note that foo *is* active.\n\nThe patch fixes these issues by checking all default-activated profiles against the exclusions list when they are added \"by default\".\n"
    ],
    [
        "MNG-3645",
        "MNG-2747",
        "Maven doesn't do strict model validation for POMs in the current reactor For example, adding a dependencyManagement section like the following doesn't result in a parser/validation error:\n\n{code:xml}\n<dependencyManagement>\n  <dependencies>\n    <groupId>org.group</groupId>\n    <artifactId>foo</artifactId>\n    <version>1</version>\n  </dependencies>\n</dependencyManagement>\n{code}\n\nHint: It's missing the dependency element to contain the groupId/artifactId/version.\n\nThis is probably a duplicate, but if so it looks like the original is buried somewhere deep...I can't find it.",
        "Maven doesn't detect invalid dependency descriptions in the pom Maven doesn't detect that the following pom snippet is not valid:\n\n[...]\n<dependencies>\n    <groupId>jdom</groupId>\n    <artifactId>jdom</artifactId>\n    <version>1.0</version>\t  \n</dependencies>\n[...]\n\nif 'mvn compile' is run on the included test project, this is what happens:\n\ntik@tweety:~/Develop/testpom$ mvn compile\n[INFO] Scanning for projects...\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building testproject\n[INFO]    task-segment: [compile]\n[INFO] ----------------------------------------------------------------------------\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:compile]\nCompiling 1 source file to /home/tik/Develop/testpom/target/classes\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Compilation failure\n\n/home/tik/Develop/testpom/src/main/java/TestClass.java:[1,16] package org.jdom does not exist\n\n/home/tik/Develop/testpom/src/main/java/TestClass.java:[5,12] cannot find symbol\nsymbol  : class Element\nlocation: class TestClass\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Mon Jan 08 19:23:14 CET 2007\n[INFO] Final Memory: 3M/8M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-3662",
        "MNG-3657",
        "Model interpolation crashes if property resolves to value with ampersand Halo!\n\nMaven don't work when In Windows user has ampersand in the name for example username=Tom&Jerry. Windows allows usernames like this, but Maven treat ampersand in the name of users main folder as a part of some url (?) or something ... and cannot get path properly. Windows do not allow to change username with all user's foldernames.\n\nArtur",
        "Ampersand characters cannot be used in profiles.xml (XML parsed twice) It is not possible to use ampersand characters in the profiles.xml because this is evaluated twice.\n\nMy case:\nIn my profiles.xml, I specify a database connection URL for MySQL where the ampersand character is\nused for separating connection parameters:\njdbc:mysql://localhost/myproject?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8\n\nBecause of the XML format, amperands are specified as \"&amp;\". However, this results in an exception (see attached\nexcerpt of the stack trace). Is is also not possible to specify the URL in a CDATA section (or even in a combination\nof &amp; and CDATA).\n"
    ],
    [
        "MNG-3712",
        "MNG-3586",
        "[regression] java.lang.NoClassDefFoundError in maven-jaxb-schemagen-plugin When running maven-jaxb-schemagen-plugin with Maven 2.1-SNAPSHOT and latest 3.0-SNAPSHOT from trunk it fails with java.lang.NoClassDefFoundError. See attached test project and debug log from the build.\n\n{noformat}\nException in thread \"main\" java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessorFactory\n\tat com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:143)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:638)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:521)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentForProject(DefaultLifecycleExecutor.java:288)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:214)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:172)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:223)\n\tat org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:303)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody2(MavenEmbedder.java:904)\n\tat org.apache.maven.embedder.MavenEmbedder.execute_aroundBody3$advice(MavenEmbedder.java:303)\n\tat org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:176)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:31)\n{noformat}",
        "[regression] jaxws mojo wsgen failure with maven 3.0 due to system-scope dependencies being excluded I can build jar projects using the jaxws wsgen mojo (1.9) under maven\n2.0.x but it failed under m2eclipse (0.9.3) when using maven 2.1\nembedded (it works if I switch m2eclipse to use the maven 2.0.9 on my\nsystem).\n\nI tried with various JVM (Sun and IBM 5 and 6) but still got the\nproblem with maven 2.1 embedded (maven 2.1-620417 and 2.1-655675):\n\nerror is :\n\nFrom file: C:\\workspace\\xxx-er-go\\pom.xml\nReason: Failed to execute wsgen\n\njava.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessorFactory\n      at java.lang.ClassLoader.defineClass1(Native Method)\n      at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n      at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n      at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n      at java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n      at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n      at java.security.AccessController.doPrivileged(Native Method)\n      at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n      at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n      at java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n      at org.codehaus.plexus.classworlds.realm.ClassRealm.loadRealmClass(ClassRealm.java:174)\n      at org.codehaus.plexus.classworlds.strategy.DefaultStrategy.loadClass(DefaultStrategy.java:67)\n      at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:201)\n      at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n      at com.sun.tools.ws.WsGen.doMain(WsGen.java:69)\n      at org.codehaus.mojo.jaxws.AbstractWsGenMojo.execute(AbstractWsGenMojo.java:91)\n      at org.codehaus.mojo.jaxws.MainWsGenMojo.execute(MainWsGenMojo.java:14)\n      at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:577)\n      at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:498)\n      at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentForProject(DefaultLifecycleExecutor.java:265)\n      at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:191)\n      at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:149)\n      at org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:223)\n      at org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:304)\n      at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)\n      at org.apache.maven.embedder.MavenEmbedder.execute_aroundBody2(MavenEmbedder.java:903)\n      at org.apache.maven.embedder.MavenEmbedder.execute_aroundBody3$advice(MavenEmbedder.java:304)\n      at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)\n      at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:176)\n      at org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n      at org.apache.maven.cli.MavenCli.main(MavenCli.java:52)\n\nAny idea or fixes ?\n\nmy pom.xml wsgen is standard :\n\n      <build>\n\n              <plugins>\n\n                      <plugin>\n                              <artifactId>maven-compiler-plugin</artifactId>\n                              <configuration>\n                                      <source>1.5</source>\n                                      <target>1.5</target>\n                              </configuration>\n\n                              <executions>\n                                      <execution>\n                                              <id>compile</id>\n                                              <goals>\n                                                      <goal>compile</goal>\n                                              </goals>\n                                              <phase>initialize</phase>\n                                      </execution>\n                              </executions>\n                      </plugin>\n\n                      <!-- We need JAX-WS support for Annotation processing -->\n                      <!-- NB: wsgen can handle only one SEI at a\ntime so we define an\nexecution by SEI -->\n                      <plugin>\n                              <groupId>org.codehaus.mojo</groupId>\n                              <artifactId>jaxws-maven-plugin</artifactId>\n                              <executions>\n                                      <execution>\n                                              <id>go-wsgen</id>\n                                              <goals>\n                                                      <goal>wsgen</goal>\n                                              </goals>\n                                              <phase>generate-sources</phase>\n                                              <configuration>\n\n<resourceDestDir>${project.build.directory}/classes/com/mycorp/service/resources/wsdl</resourceDestDir>\n\n<sei>com.mycorp.service.MyService</sei>\n                                                      <genWsdl>true</genWsdl>\n                                                      <keep>false</keep>\n                                              </configuration>\n                                      </execution>\n                              </executions>\n                      </plugin>\n\n              </plugins>\n\n      </build>\n\nI attached a simple project so you could try it.\n\nFrom others reports, it seems the tools.jar is missing in embedded mode.\n\n\n\n"
    ],
    [
        "MNG-4369",
        "MNG-624",
        "Maven does not expand expressions while installing artifacts locally  When a pom uses expressions like:   grizzly.version  in the following pom.xml\n\n> <project> \n>     <parent> \n   ... \n>     <artifactId>grizzly-module</artifactId> \n>     <packaging>jar</packaging> \n>     <version>${grizzly.version}</version> \n\nEverything works well when the  project.version above is defined as a property as 'grizzly.version'  \nThe  local repository layout also seems to be correct, for a given property value for, grizzly.version.\n\nWhat's going wrong is,  maven just copies the same pom.xml to the local repo directory and from there to the remote repo while deploying the\nartifacts of the same project, whose version is parameterized.\n\nIn the strict sense,  while parsing the pom and resolving the artifacts, maven  got the right version for the project.version for the project; the same should have been used inside the pom file while installing locally. By doing this,  the expanded pom files will have right artifact information.\nUsers should be given a choice if they want maven to expand expressions in the pom.xml or leave them as it is.     \n\nI don't know the right category of the project and component. Please reassign / redirect as appropriate.   \nThis belongs somewhere pom parsing, artifact resolver and mvn install.\n\nthanks..\n\n\n",
        "automatic parent versioning (this may be bumped to 2.1 or even made WON't FIX as it is contentious - see MNG-521)\n\ncurrently, you have to specify the parent version when extending which makes a project stand alone very easily, but has the drawback of being a maintainance problem when you start development on a new version. Tools can help, but it would be nice not to have to rely on them.\n\nOne alternative is to allow the parent version to be omitted, and when it is it is assumed you want the latest. The parent is used from the reactor or the universal source directory. IT may also be read from a LATEST in the repository though this is contentious - it may be better to simply fail in that environment and require builds be in a known checkout structure for building individual projects.\n\nThis also introduces the need for tool support to populate the version on release and deployment for reproducibility."
    ],
    [
        "MNG-4369",
        "MNG-2971",
        "Maven does not expand expressions while installing artifacts locally  When a pom uses expressions like:   grizzly.version  in the following pom.xml\n\n> <project> \n>     <parent> \n   ... \n>     <artifactId>grizzly-module</artifactId> \n>     <packaging>jar</packaging> \n>     <version>${grizzly.version}</version> \n\nEverything works well when the  project.version above is defined as a property as 'grizzly.version'  \nThe  local repository layout also seems to be correct, for a given property value for, grizzly.version.\n\nWhat's going wrong is,  maven just copies the same pom.xml to the local repo directory and from there to the remote repo while deploying the\nartifacts of the same project, whose version is parameterized.\n\nIn the strict sense,  while parsing the pom and resolving the artifacts, maven  got the right version for the project.version for the project; the same should have been used inside the pom file while installing locally. By doing this,  the expanded pom files will have right artifact information.\nUsers should be given a choice if they want maven to expand expressions in the pom.xml or leave them as it is.     \n\nI don't know the right category of the project and component. Please reassign / redirect as appropriate.   \nThis belongs somewhere pom parsing, artifact resolver and mvn install.\n\nthanks..\n\n\n",
        "Variables are not replaced into installed pom file Variables are not replaced into installed pom file.\nHere is a sample pom file\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.xxx.root</groupId>\n\t<artifactId>root</artifactId>\n\t<packaging>pom</packaging>\n\t<version>${prop.version}</version>\n\t<name>My Project</name>\n        ...\n\t<properties>\n\t\t<prop.version>3.0.20</prop.version>\n\t</properties>\n\n</project>\n{code}\nThe installed pom is into $\\{localRepository}/com/xxx/root/root/3.0.20/root-3.0.20.pom\nis the same as the project pom file but the version referenced into the installed pom file is $\\{prop.version} instead of 3.0.20\nwhich creates problem to artifacts depending of this one.\n\nThanks in advance"
    ],
    [
        "MNG-4369",
        "MNG-2569",
        "Maven does not expand expressions while installing artifacts locally  When a pom uses expressions like:   grizzly.version  in the following pom.xml\n\n> <project> \n>     <parent> \n   ... \n>     <artifactId>grizzly-module</artifactId> \n>     <packaging>jar</packaging> \n>     <version>${grizzly.version}</version> \n\nEverything works well when the  project.version above is defined as a property as 'grizzly.version'  \nThe  local repository layout also seems to be correct, for a given property value for, grizzly.version.\n\nWhat's going wrong is,  maven just copies the same pom.xml to the local repo directory and from there to the remote repo while deploying the\nartifacts of the same project, whose version is parameterized.\n\nIn the strict sense,  while parsing the pom and resolving the artifacts, maven  got the right version for the project.version for the project; the same should have been used inside the pom file while installing locally. By doing this,  the expanded pom files will have right artifact information.\nUsers should be given a choice if they want maven to expand expressions in the pom.xml or leave them as it is.     \n\nI don't know the right category of the project and component. Please reassign / redirect as appropriate.   \nThis belongs somewhere pom parsing, artifact resolver and mvn install.\n\nthanks..\n\n\n",
        "Expressions not evaluated inside <parent> The version tag within the parrent  block does not evaluate properties.\nIf I put a Version String directly in there, it works.\nA correctly defined property doesn't."
    ],
    [
        "MNG-4369",
        "MNG-2756",
        "Maven does not expand expressions while installing artifacts locally  When a pom uses expressions like:   grizzly.version  in the following pom.xml\n\n> <project> \n>     <parent> \n   ... \n>     <artifactId>grizzly-module</artifactId> \n>     <packaging>jar</packaging> \n>     <version>${grizzly.version}</version> \n\nEverything works well when the  project.version above is defined as a property as 'grizzly.version'  \nThe  local repository layout also seems to be correct, for a given property value for, grizzly.version.\n\nWhat's going wrong is,  maven just copies the same pom.xml to the local repo directory and from there to the remote repo while deploying the\nartifacts of the same project, whose version is parameterized.\n\nIn the strict sense,  while parsing the pom and resolving the artifacts, maven  got the right version for the project.version for the project; the same should have been used inside the pom file while installing locally. By doing this,  the expanded pom files will have right artifact information.\nUsers should be given a choice if they want maven to expand expressions in the pom.xml or leave them as it is.     \n\nI don't know the right category of the project and component. Please reassign / redirect as appropriate.   \nThis belongs somewhere pom parsing, artifact resolver and mvn install.\n\nthanks..\n\n\n",
        "parent resolution is done first before property interpolation Possible problems\n* using properties in the parent tag\n* using proeprties in the repositories tag with the parent being unknown except to that repo\n\nAttach is a sample project whose child project does not get built. "
    ],
    [
        "MNG-3727",
        "MNG-1549",
        "maven searches in wrong repos while resolving artifacts and their matadata and there by wastes lots of cycles In brief,  the way maven resolves artifacts by searching  across all the repos given in the parent pom seems like a \nvery expensive operation.   For example, if a product (an assembly of various projects) uses  5-6 repos,  maven walks through each  repository  until it finds the needed metadata or the artifact itself.  This appears to be very expensive (to network resources and the time it spends in resolving an artifact)  operation.  \n\nIt is also interesting to note that, even if the repository  policy is set to never for SNAPSHOTS,  maven checks for updates  of that particular artifact  snapshot.  For the very first time while resolving the artifact this approach make sense.  But, not every time we resolve artifacts whose corresponding repos are already have update policy set to never.  Something fishy going on in the  maven-artifact-manager /src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java",
        "metadata needs different policy to <releases> currently, metadata is looked for updates on the same interval as releases. However, if that is never (which is valid if you want a purely snapshot repository), then finding out the available snapshot versions is impossible.\n\nThe metadata update policy probably should not be individually configurable, as that would be confusing, but instead should be the more frequent of snapshots and releases, and the more permissive of thetwo  checksum policies."
    ],
    [
        "MNG-3727",
        "MNG-2608",
        "maven searches in wrong repos while resolving artifacts and their matadata and there by wastes lots of cycles In brief,  the way maven resolves artifacts by searching  across all the repos given in the parent pom seems like a \nvery expensive operation.   For example, if a product (an assembly of various projects) uses  5-6 repos,  maven walks through each  repository  until it finds the needed metadata or the artifact itself.  This appears to be very expensive (to network resources and the time it spends in resolving an artifact)  operation.  \n\nIt is also interesting to note that, even if the repository  policy is set to never for SNAPSHOTS,  maven checks for updates  of that particular artifact  snapshot.  For the very first time while resolving the artifact this approach make sense.  But, not every time we resolve artifacts whose corresponding repos are already have update policy set to never.  Something fishy going on in the  maven-artifact-manager /src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java",
        "configure a repository as the 'preferred' download location for certain artifactIds or groupIds ivy has this feature where you can tell it where an artifact is located. During dependency resolution, this avoids a lot of unnecessary http lookups to the configured repositories while searching for the artifact because it will go straight to the correct one. \n\nin pom speak:\n\n        <repository>\n          <releases>\n            <enabled/>\n            <updatePolicy/>\n            <checksumPolicy/>\n          </releases>\n          <snapshots>\n            <enabled/>\n            <updatePolicy/>\n            <checksumPolicy/>\n          </snapshots>\n          <id/>\n          <name/>\n          <url/>\n          <layout/>\n          <preferredFor>\n             <groupId>org.apache.cocoon</groupId>\n             <artifactId>my.special.artifact</artifactId>\n          </preferredFor>\n        </repository>\n\nIf the groupid or artifactid was not found on the 'preferred' server then you could still try and contact the other configured repositories ofcourse.\n\nAs an example: output of artifact resolution in cocoon while looking for an updated snapshot\n\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-M2-SNAPSHOT: checking for updates from snapshots\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-M2-SNAPSHOT: checking for updates from reinhard-m2-snapshot-repository\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-M2-SNAPSHOT: checking for updates from central\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-M2-SNAPSHOT: checking for updates from apache.snapshot\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-M2-SNAPSHOT: checking for updates from apache-cvs\n[INFO] snapshot org.apache.cocoon:cocoon-deployer-plugin:1.0.0-M2-SNAPSHOT: checking for updates from apache.snapshots\n\n"
    ],
    [
        "MNG-3727",
        "MNG-3513",
        "maven searches in wrong repos while resolving artifacts and their matadata and there by wastes lots of cycles In brief,  the way maven resolves artifacts by searching  across all the repos given in the parent pom seems like a \nvery expensive operation.   For example, if a product (an assembly of various projects) uses  5-6 repos,  maven walks through each  repository  until it finds the needed metadata or the artifact itself.  This appears to be very expensive (to network resources and the time it spends in resolving an artifact)  operation.  \n\nIt is also interesting to note that, even if the repository  policy is set to never for SNAPSHOTS,  maven checks for updates  of that particular artifact  snapshot.  For the very first time while resolving the artifact this approach make sense.  But, not every time we resolve artifacts whose corresponding repos are already have update policy set to never.  Something fishy going on in the  maven-artifact-manager /src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java",
        "Add filtering to determine if a artifact should be downloaded from a repository. Then the settings.xml starts to contain various repositories maven will try to download artifacts from all defined repository until it is found.\nSince the central repo is the last repo being queried all other repositories will be queried for all artifacts as well.\nThis causes the build to take extra unneccesary time and additional load on some repository servers.\n\nIn order to prevent this I would like to be able to specify some filters on the repostories, so maven can check whether or not to ask a repository for a certain component. \n\n\nSuggestion for adjustments in settings.xml:\n\n<repository>\n\t<id>atlassian</id>\n\t<name>Atlassian Repository</name>\n\t<url>http://repository.atlassian.com</url>\n\t<layout>legacy</layout>\n\t<includes>\n\t\t<include>com.atlassion</include\n\t</includes>\n</repository>\n\n\n<repository>\n\t<id>codehaus</id>\n\t<name>Codehaus Repository</name>\n\t<url>http://repository.codehaus.org//</url>\n\t<includes>\n\t\t<include>org.codehaus</include\n\t</includes>\n</repository>\n\n<repository>\n  <id>central</id>\n  <name>The default maven2 repository</name>\n  <url>http://repo1.maven.org/maven2/</url>\n  <excludes>\n  \t<exclude>com.atlassion</exclude>\n  \t<exclude>org.codehaus</exclude>\n  </excludes>\n</repository>\n\n\nMaven should only attempt to download a certain artifact from a defined repository if the groupId of the artifact could be found on that server.\nIf a repository contains an includes-filter, then only those groupId's configured should be downloaded there.\nIf a repository contains an excludes-filter, then everything except those should be downloaded there.\n"
    ],
    [
        "MNG-3734",
        "MNG-3616",
        "npe when settings missing <mirrorOf> tag When mirrors section in settings.xml is missing <mirrorOf>:\n\n{code}\n<mirror>\n<id>ATOS-XA</id>\n<url>http://xa.atosworldline.com/repository/maven/</url>\n</mirror>\n{code}\n\nIt cause an NPE:\n\n{noformat}\njava.lang.NullPointerException\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.matchPattern(DefaultWagonManager.java:857)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getMirror(DefaultWagonManager.java:829)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getMirrorRepository(DefaultWagonManager.java:668)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:418)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:335)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:193)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:83)\n\tat org.maven.ide.eclipse.internal.project.EclipseArtifactResolver.resolve(EclipseArtifactResolver.java:34)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:552)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:233)\n\tat org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:131)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:518)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:138)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:88)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:526)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildProjectWithDependencies(DefaultMavenProjectBuilder.java:404)\n\tat org.apache.maven.embedder.MavenEmbedder.readProjectWithDependencies_aroundBody0(MavenEmbedder.java:453)\n\tat org.apache.maven.embedder.MavenEmbedder.readProjectWithDependencies_aroundBody1$advice(MavenEmbedder.java:304)\n\tat org.apache.maven.embedder.MavenEmbedder.readProjectWithDependencies(MavenEmbedder.java:1)\n\tat org.maven.ide.eclipse.internal.project.MavenProjectManagerImpl$MavenProjectReader.execute(MavenProjectManagerImpl.java:1053)\n\tat org.maven.ide.eclipse.internal.project.MavenProjectManagerImpl.execute(MavenProjectManagerImpl.java:995)\n\tat org.maven.ide.eclipse.internal.project.MavenProjectManagerImpl.refresh(MavenProjectManagerImpl.java:377)\n\tat org.maven.ide.eclipse.internal.project.MavenProjectManagerImpl.refresh(MavenProjectManagerImpl.java:351)\n\tat org.maven.ide.eclipse.internal.project.MavenProjectManagerRefreshJob.run(MavenProjectManagerRefreshJob.java:85)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)\n{noformat}\n\nAdding <mirrorOf> fixes issue. See MNGECLIPSE-872 for more details\n\nIt would really help if build failed with more meaningful error.\n",
        "Null Pointer Exception when mirrorOf missing from mirror in settings.xml When attempting to generate any archetype from the mvn archetype:generate command I get a null pointer exception thrown if I have mirrors defined in my settings.xml file but fail to have the mirrorOf element set. \n\nThe stack trace for the archetype generation is:\n\nChoose a number: (1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/2\n4/25/26/27/28/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44) 15: : 6\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] : java.lang.NullPointerException\nnull\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.BuildFailureException\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Defa\nultLifecycleExecutor.java:579)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandalone\nGoal(DefaultLifecycleExecutor.java:512)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Defau\nltLifecycleExecutor.java:482)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHan\ndleFailures(DefaultLifecycleExecutor.java:330)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmen\nts(DefaultLifecycleExecutor.java:227)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLi\nfecycleExecutor.java:142)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\nat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\nat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\nat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.MojoFailureException\nat org.apache.maven.archetype.mojos.CreateProjectFromArchetypeMojo.execu\nte(CreateProjectFromArchetypeMojo.java:202)\nat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPlugi\nnManager.java:451)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Defa\nultLifecycleExecutor.java:558)\n... 16 more\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 7 seconds\n[INFO] Finished at: Wed May 28 17:49:39 EST 2008\n[INFO] Final Memory: 8M/14M\n[INFO] ------------------------------------------------------------------------\n\nC:\\Documents and Settings\\frank\\My Documents\\Development\\Sandbox>mvn -v\nMaven version: 2.0.9\nJava version: 1.5.0_08\nOS name: \"windows xp\" version: \"5.1\" arch: \"x86\" Family: \"windows\"\n\nThe mirrored settings from the settings.xml file are:\n\n<mirrors>\n<mirror>\n<id>nexus-central</id>\n<url>http://maven.ho.bushlife.com.au:8081/nexus/content/groups/public</url>\n</mirror>\n</mirrors>\n\n\nAs a user you receive a null pointer exception because of something missing in the settings.xml file.\n\nAt the very least you should receive an error message indicating the problem. If you can have a situation where the mirrorOf setting is optional, then it should not be throwing a null pointer exception but handling it better.\n"
    ],
    [
        "MNG-3751",
        "MNG-2222",
        "Multi-module project is non-deterministic in evaluating reactor artifacts defined as dependencies unless they are installed in the local repository Summary: Multi-module project is non-deterministic in evaluating reactor artifacts defined as dependencies unless they are installed in the local repository\n\nI cannot build either a leaf project (sub1-module1) or the master project (master) until I 'mvn install' the sub-modules (sub<N>-module<M>).\n\nI believe that dependency modules found only in the reactor should be added to:\n\n[DEBUG]   (f) classpathElements = [/Users/evanchsa/src/maven-test/subproject1/sub1-module1/target/classes] \n\n\n\nDetailed setup:\n\nI have a multi-module project that is laid out in the following POM inheritance (this is not the filesystem layout):\n\nmaster\n + sub1-master\n    - sub1-module1\n    - sub1-module2\n + sub2-master\n    - sub2-module1\n    - sub2-module2\n\nSub-modules are type \"jar\" and 1 \"war\" and there are dependencies within the sub-modules as follows (using mvn dependency:tree):\n\n1. sub1-module1\n     - Depends on no other modules\n\n2. sub1-module2\n\n     - test-group:sub1-module2:jar:0.0.1\n       \\- test-group:sub1-module1:jar:0.0.1:compile\n\n3. sub2-module1\n\n     - test-group:sub2-module1:jar:0.0.1\n       \\- test-group:sub1-module2:jar:0.0.1:compile\n          \\- test-group:sub1-module1:jar:0.0.1:compile\n\n4. sub2-module2 (this is the WAR)\n\n     - test-group:sub2-module2:jar:0.0.1\n       \\- test-group:sub2-module1:jar:0.0.1:compile\n          \\- test-group:sub1-module2:jar:0.0.1:compile\n             \\- test-group:sub1-module1:jar:0.0.1:compile\n\n\nProject filesystem layout:\n\n build/master/pom.xml\n subproject1/sub1-master/pom.xml\n subproject1/sub1-module1/pom.xml\n subproject1/sub1-module2/pom.xml\n subproject2/sub2-master/pom.xml\n subproject2/sub2-module1/pom.xml\n subproject2/sub2-module2/pom.xml\n\n",
        "dependency to dependency without source code fails - project1\n- project2 (dep project1)\n- project3 (dep project2)\n- parent pom (module project1,project2,project3)\n\nmvn compile\n\nbuild project1\nbuild project2\n\n[INFO] [compiler:compile]\n[INFO] Nothing to compile - all classes are up to date\n\nbuild project3\n\n[INFO] Failed to resolve artifact.\n\nin project2 no target created\n\n-------------------------------\n\nWorkaround\n\nput Noop.java into source so it will build some sources"
    ],
    [
        "MNG-3766",
        "MNG-3429",
        "toolchains not found in extensions There's currently no way to plugin in new toolchains without placing them in M2_HOME/lib. For wagons to be available in extensions, the extension manager explicitly registers them - so I propose to do the same in 2.1.0-M2 for toolchains, and only support the Java toolchains in 2.0.9.\n\n",
        "Toolchain classes not being picked up in uber jar The toolchain classes are not being picked up in the packaging of the uber jar. The toolchain classes need to be located under the maven/lib directory to work."
    ],
    [
        "MNG-3773",
        "MNG-3228",
        "Activation by Property does not work if profile is in parent pom  If i have a parent pom with a profile like this:\n<profile>\n  <id>esb</id>\n  <activation>\n    <property>\n      <name>test</name>\n      <value>true</value>\n    </property>\n</activation>\n\ni could not activate it using either:\n<properties>\n  <test>true</test>\n</properties>\nor on CLI (mvn -Dtest=true) in the submodule.",
        "Maven profile activation does not work when profile is defined in inherited 'parent' pom The goal is to activate a maven profile based on OS user name.\nWhen I create a standalone project with a profile activation, it works,\nhowever, when I define the profile in a \"parent\" pom, it is never activated.\n\nthis works:\n...\n  <profile>\n    <id>TONY</id>\n<activation>\n<property>\n<name>user.name</name>\n<value>WINTONY</value>\n</property>\n</activation>\n    <properties>\n    </properties>\n   \nSo in this case, my profile is activated based on my OS user name\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Proj1\n[INFO] task-segment: [help:active-profiles] (aggregator-style)\n[INFO] ----------------------------------------------------------------------------\n[INFO] [help:active-profiles]\n[INFO]\nActive Profiles for Project 'com.capgemini.be.proj1:parent:pom:4.0.2':\n\nThe following profiles are active:\n\n - TONY (source: pom)\n\n\n------------------\n\n\nHowever, if I now have the profiles definition in the \"parent\" pom, it doesn't work when I build a child project\nSo the child project references the parent pom containing the profiles and the activation, but when it is built,\nthe profile is not activated\nPARENT POM:\n...\n  <profiles>\n  <profile>\n    <id>TONY</id>\n<activation>\n<property>\n<name>user.name</name>\n<value>WINTONY</value>\n</property>\n</activation>\n    <properties>\n...\n\nCHILD POM (the one being built)\n<project>\n<parent>\n<groupId>com.capgemini.be.proj1</groupId>\n<artifactId>parent</artifactId>\n<version>4.0.2</version>\n</parent>\n\n\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Proj1 Application\n[INFO] task-segment: [help:active-profiles] (aggregator-style)\n[INFO] ----------------------------------------------------------------------------\n[INFO] [help:active-profiles]\n[INFO]\nActive Profiles for Project 'com.capgemini.be.proj1:proj1-webapp:jar:4.0.2':\n\nThere are no active profiles. "
    ],
    [
        "MNG-3788",
        "MNG-2605",
        "Profiles in profiles.xml not activated properly I created a profiles.xml file with three profiles in it as shown below.  When I execute a Maven command like:\n\n>mvn -f <path-to-basedir>\\pom.xml   -PconwebDev ...\n\nthe properties defined by profile conwebFinal are used.  I shuffled the profiles around in the file and whichever one was defined last was the one whose values took effect.  It seems as if all profiles are being activated and the last one wins.\n\nWhen I put these same profiles in settings.xml or inside the main pom.xml, everything works properly.\n\nHere are the profiles:\n\n<profiles>\n    <!-- conweb Project-specific profiles -->\n    <profile>\n      <id>conwebDev</id>\n      <properties>\n        <app.properties>conweb.properties</app.properties>\n        <app.version.qualifier>DEV</app.version.qualifier>\n      </properties>\n    </profile>\n    \n    <profile>\n      <id>conwebTest</id>\n      <properties>\n        <app.properties>conweb.properties</app.properties>\n        <app.version.qualifier>TEST</app.version.qualifier>\n      </properties>\n    </profile>\n\n    <profile>\n      <id>conwebFinal</id>\n      <properties>\n        <app.properties>conweb.properties</app.properties>\n        <app.version.qualifier>FINAL</app.version.qualifier>\n      </properties>\n    </profile>\n</profiles>    \n",
        "Profiles in profiles.xml are active by default Profile specification on command line is ignored and all profiles are active.\n\nHow to reproduce:\n\n - open attachment\n - extract to folder\n - type: cd my-app\n - type: mvn help:active-profiles -Pproduction\n - you get the following:\n                    The following profiles are active:\n\n                             - skipunittest (source: profiles.xml)\n                             - test (source: profiles.xml)\n                             - production (source: profiles.xml)\n\n - you should get:\n\n                    The following profiles are active:\n\n                             - production (source: profiles.xml)\n\nthanks,\nAttila\n"
    ],
    [
        "MNG-3802",
        "MNG-3627",
        "test scoped dependencies are being resolved even if tests are skipped I'd think that dependencies with scope=test shouldn't be resolved if tests are skipped.\n\nTo reproduce, try building continuum 1.3-SNAPSHOT with an empty local repo (or just remove continuum-store:1.3-SNAPSHOT:tests; note the \"tests\" classifier) with tests skipped.\n\nWhen the build reaches continuum-data-management, it will fail saying the dependency continuum-store:1.3-SNAPSHOT:tests cannot be resolved.\n\n",
        "Maven complains for the lack of a test dependency even when skipping tests Trying to build GeoServer trunk without tests (-Dmaven.test.skip=true) we're getting an error message stating that some jars marked as test dependencies are not found. In particular, these are the tests jar of another module in the build, which is not getting built because of the test.skip setting and it's not already available on the repository.\n\nYet mvn dependency:tree does report the following:\n\n{panel}\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'dependency'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Web Coverage Service 1.1.1 Module\n[INFO]    task-segment: [dependency:tree]\n[INFO] ------------------------------------------------------------------------\n[INFO] [dependency:tree]\n[INFO] org.geoserver:wcs1_1:jar:1.8.0-SNAPSHOT\n[INFO] +- org.geoserver:main:jar:1.8.0-SNAPSHOT:compile\n[INFO] |  +- org.geoserver:data:jar:1.8.0-SNAPSHOT:compile\n[INFO] |  |  +- org.geoserver:platform:jar:1.8.0-SNAPSHOT:compile\n[INFO] |  |  |  +- javax.media:jai_core:jar:1.1.3:compile\n[INFO] |  |  |  +- javax.media:jai_codec:jar:1.1.3:compile\n[INFO] |  |  |  \\- javax.media:jai_imageio:jar:1.1:compile\n[INFO] |  |  +- org.geotools:gt-epsg-hsql:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  +- org.geotools:gt-h2:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  |  +- org.h2database:h2:jar:1.0-SNAPSHOT:compile\n[INFO] |  |  |  +- org.openplans:spatialdbbox:jar:1.0-SNAPSHOT:compile\n[INFO] |  |  |  \\- mysql:mysql-connector-java:jar:5.1.5:compile\n[INFO] |  |  +- org.geotools:gt-property:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  +- org.geotools.xsd:gt-xsd-gml2:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  \\- xml-apis:xml-apis-xerces:jar:2.7.1:compile\n[INFO] |  +- org.geoserver:ows:jar:1.8.0-SNAPSHOT:compile\n[INFO] |  |  +- org.acegisecurity:acegi-security:jar:1.0.3:compile\n[INFO] |  |  |  +- org.springframework:spring-jdbc:jar:2.5.2:compile (version managed from 1.2.8)\n[INFO] |  |  |  |  \\- org.springframework:spring-tx:jar:2.5.2:compile\n[INFO] |  |  |  \\- commons-codec:commons-codec:jar:1.3:compile\n[INFO] |  |  +- commons-lang:commons-lang:jar:2.1:compile\n[INFO] |  |  +- org.geotools.xsd:gt-xsd-core:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  \\- xpp3:xpp3:jar:1.1.3.4.O:compile\n[INFO] |  +- javax.servlet:servlet-api:jar:2.4:compile\n[INFO] |  +- org.restlet:org.restlet:jar:1.0.8:compile (version managed from 1.0.5)\n[INFO] |  +- org.restlet:org.restlet.ext.freemarker:jar:1.0.8:compile (version managed from 1.0.5)\n[INFO] |  +- com.noelios.restlet:com.noelios.restlet.ext.servlet:jar:1.0.8:compile (version managed from 1.0.5)\n[INFO] |  |  \\- com.noelios.restlet:com.noelios.restlet:jar:1.0.8:compile\n[INFO] |  +- net.sf.json-lib:json-lib:jar:jdk13:2.1:compile\n[INFO] |  |  +- commons-collections:commons-collections:jar:3.1:compile\n[INFO] |  |  \\- net.sf.ezmorph:ezmorph:jar:1.0.3:compile\n[INFO] |  +- struts:struts:jar:1.2.9:compile\n[INFO] |  |  \\- antlr:antlr:jar:2.7.2:compile\n[INFO] |  +- xml-apis:xml-apis:jar:1.0.b2:compile\n[INFO] |  +- xerces:xercesImpl:jar:2.6.2:compile\n[INFO] |  +- xalan:xalan:jar:2.7.0:compile\n[INFO] |  +- commons-beanutils:commons-beanutils:jar:1.7.0:compile\n[INFO] |  +- commons-digester:commons-digester:jar:1.7:compile\n[INFO] |  +- commons-fileupload:commons-fileupload:jar:1.2.1:compile\n[INFO] |  +- commons-io:commons-io:jar:1.3.2:compile\n[INFO] |  +- commons-httpclient:commons-httpclient:jar:2.0:compile\n[INFO] |  +- commons-validator:commons-validator:jar:1.1.4:compile\n[INFO] |  +- org.freemarker:freemarker:jar:2.3.13:compile\n[INFO] |  +- oro:oro:jar:2.0.8:compile\n[INFO] |  +- org.geotools:gt-cql:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- log4j:log4j:jar:1.2.14:compile\n[INFO] |  +- org.geotools:gt-coverage:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.geotools:gt-validation:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  \\- org.geotools:gt-graph:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.geotools:gt-data:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.geotools:gt-jdbc:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  \\- commons-dbcp:commons-dbcp:jar:1.2.2:compile\n[INFO] |  +- org.geotools:gt-metadata:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  +- java3d:vecmath:jar:1.3.1:compile\n[INFO] |  |  +- org.opengis:geoapi:jar:2.2-SNAPSHOT:compile\n[INFO] |  |  \\- net.java.dev.jsr-275:jsr-275:jar:1.0-beta-2:compile\n[INFO] |  +- org.springframework:spring-aop:jar:2.5.2:compile\n[INFO] |  \\- com.thoughtworks.xstream:xstream:jar:1.3:compile\n[INFO] |     \\- xpp3:xpp3_min:jar:1.1.4c:compile\n[INFO] +- org.geotools.ogc:net.opengis.wcs:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.geotools.ogc:net.opengis.ows:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  \\- org.geotools.ogc:org.w3.xlink:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.eclipse.emf:common:jar:2.2.1:compile\n[INFO] |  \\- org.eclipse.emf:ecore:jar:2.2.2:compile\n[INFO] +- org.geoserver:wcs:jar:1.8.0-SNAPSHOT:compile\n[INFO] |  +- org.geotools:gt-referencing:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  \\- commons-pool:commons-pool:jar:1.3:compile\n[INFO] |  +- org.geotools:gt-arcgrid:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  \\- it.geosolutions.imageio-ext:imageio-ext-arcgrid:jar:1.0-SNAPSHOT:compile\n[INFO] |  |     \\- it.geosolutions.imageio-ext:imageio-ext-customstreams:jar:1.0-SNAPSHOT:compile\n[INFO] |  +- org.geotools:gt-geotiff:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.geotools:gt-gtopo30:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.geotools:gt-image:jar:2.5-SNAPSHOT:compile\n[INFO] |  \\- org.geotools:gt-imagemosaic:jar:2.5-SNAPSHOT:compile\n[INFO] |     +- hsqldb:hsqldb:jar:1.8.0.7:compile\n[INFO] |     \\- org.geotools:gt-shapefile:jar:2.5-SNAPSHOT:compile\n[INFO] |        \\- velocity:velocity:jar:1.4:compile\n[INFO] |           \\- velocity:velocity-dep:jar:1.4:runtime\n[INFO] +- org.geotools.xsd:gt-gml3:jar:2.5-SNAPSHOT:compile\n[INFO] |  +- org.geotools.xsd:gt-core:jar:2.5-SNAPSHOT:compile\n[INFO] |  |  +- picocontainer:picocontainer:jar:1.2:compile\n[INFO] |  |  +- xsdlib:xsdlib:jar:20050614:compile\n[INFO] |  |  +- relaxng:relaxngDatatype:jar:X:compile\n[INFO] |  |  +- jaxb:jaxb-api:jar:2.1.5:compile\n[INFO] |  |  +- jaxb:jaxb-impl:jar:2.1.5:compile\n[INFO] |  |  +- commons-jxpath:commons-jxpath:jar:1.2:compile\n[INFO] |  |  |  \\- ant:ant-optional:jar:1.5.1:compile\n[INFO] |  |  \\- org.eclipse.xsd:xsd:jar:2.2.2:compile\n[INFO] |  \\- org.geotools.xsd:gt-gml2:jar:2.5-SNAPSHOT:compile\n[INFO] +- org.geotools.xsd:gt-filter:jar:2.5-SNAPSHOT:compile\n[INFO] +- org.geotools.xsd:gt-ows:jar:2.5-SNAPSHOT:compile\n[INFO] +- javax.mail:mail:jar:1.4:compile\n[INFO] +- javax.activation:activation:jar:1.1:compile\n[INFO] +- org.geoserver:data:jar:tests:1.8.0-SNAPSHOT:test\n[INFO] +- org.geoserver:main:jar:tests:1.8.0-SNAPSHOT:test\n[INFO] +- com.mockrunner:mockrunner:jar:0.3.1:test\n[INFO] +- xmlunit:xmlunit:jar:1.1:test\n[INFO] +- org.springframework:spring-beans:jar:2.5.2:compile\n[INFO] |  \\- commons-logging:commons-logging:jar:1.0.3:compile\n[INFO] +- org.springframework:spring-core:jar:2.5.2:compile\n[INFO] +- org.springframework:spring-context:jar:2.5.2:compile\n[INFO] |  \\- aopalliance:aopalliance:jar:1.0:compile\n[INFO] +- org.springframework:spring-webmvc:jar:2.5.2:compile\n[INFO] |  +- org.springframework:spring-context-support:jar:2.5.2:compile\n[INFO] |  \\- org.springframework:spring-web:jar:2.5.2:compile\n[INFO] +- org.geotools:gt-api:jar:2.5-SNAPSHOT:compile\n[INFO] |  \\- com.vividsolutions:jts:jar:1.9.1-SNAPSHOT:compile\n[INFO] +- org.geotools:gt-main:jar:2.5-SNAPSHOT:compile\n[INFO] |  \\- jdom:jdom:jar:1.0:compile\n[INFO] \\- junit:junit:jar:3.8.2:test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 18 seconds\n[INFO] Finished at: Mon Jun 23 15:36:37 CEST 2008\n[INFO] Final Memory: 17M/33M\n[INFO] ------------------------------------------------------------------------\n{panel}\n\nIt seems to me this is a bug, the dependencies are marked with a test scope, so why complian if they are not around?"
    ],
    [
        "MNG-3884",
        "MNG-1992",
        "Command line arguments don't overwrite settings.xml properties when invoking a plugin To explain the issue, let's start with the following example:\n\n1\u00b0) Run a plugin goal with an argument specified in the command line with the \"-D\" option only\n\nmvn eclipse:eclipse -Declipse.projectNameTemplate=CommandLineProjectName\n\nWe can see if we open the generated .project file that the name of the project is as we expect: \"CommandLineProjectName\"\nThis is normal, the goal input parameter is set with the command line property.\n\n2\u00b0) Run a plugin goal with an argument specified in the \"settings.xml\" file only\n\nmvn eclipse:eclipse\n\nwith settings.xml containing the following enabled profile:\n\n<profiles>\n  <profile>\n    <id>testProfile</id>\n      <properties>\n      <eclipse.projectNameTemplate>SettingsProjectName</eclipse.projectNameTemplate>\n    </properties>\n  </profile>\n</profiles>\n\n<activeProfiles>\n  <activeProfile>testProfile</activeProfile>\n</activeProfiles>\n\nWe can see if we open the generated .project file that the name of the project is as we expect: \"SettingsProjectName\".\nThis is normal, the input parameter of the goal is set with the \"settings.xml\" file property.\n\n3\u00b0) Run a plugin goal with an argument specified in the command line with the \"-D\" option and with another value in the \"settngs.xml\" file\n\nIf we use both scenarios, the property value set in the \"settings.xml\" file will overwrite the value set via the command line with the \"-D\" option.\nMaven should not react in that way but in the opposite: the command line value should overwite the \"settings.xml\" file value.\n\nIt is already the case if we reuse the value somewhere in the pom.xml file. It should be the same when invoking a plugin goal.",
        "CLI -D should override properties in settings.xml I have a mojo that takes a parameter as an expression, simple boolean. If I set it to true in my settings.xml, setting it to false with -D doesn't have any effect. The CLI should have the final say."
    ],
    [
        "MNG-3897",
        "MNG-3228",
        "Profile with jdk activation is not inherited from parent pom If I declare a profile in a parent pom with jdk activation, it isn't being activated for projects that inherit the parent pom.\n\n(Note that I think profiles in general are being inherited.  I suspect this issue is limited to jdk activation.)\n\n\nI have attached a simple test project to prove the issue.  If you run {{mvn help:all-profiles}}, you can see that {{my.jdk16}} is not activated for the module _my-app_ (but it should).\n\n{noformat}\n[INFO] [help:all-profiles]\n[INFO] Listing Profiles for Project: com.mycompany.app:mvn-bug:pom:1.0-SNAPSHOT\n  Profile Id: my.jdk16 (Active: true , Source: pom)\nListing Profiles for Project: com.mycompany.app:my-app:jar:1.0-SNAPSHOT\n  Profile Id: my.jdk16 (Active: false , Source: pom)\n{noformat}\n",
        "Maven profile activation does not work when profile is defined in inherited 'parent' pom The goal is to activate a maven profile based on OS user name.\nWhen I create a standalone project with a profile activation, it works,\nhowever, when I define the profile in a \"parent\" pom, it is never activated.\n\nthis works:\n...\n  <profile>\n    <id>TONY</id>\n<activation>\n<property>\n<name>user.name</name>\n<value>WINTONY</value>\n</property>\n</activation>\n    <properties>\n    </properties>\n   \nSo in this case, my profile is activated based on my OS user name\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Proj1\n[INFO] task-segment: [help:active-profiles] (aggregator-style)\n[INFO] ----------------------------------------------------------------------------\n[INFO] [help:active-profiles]\n[INFO]\nActive Profiles for Project 'com.capgemini.be.proj1:parent:pom:4.0.2':\n\nThe following profiles are active:\n\n - TONY (source: pom)\n\n\n------------------\n\n\nHowever, if I now have the profiles definition in the \"parent\" pom, it doesn't work when I build a child project\nSo the child project references the parent pom containing the profiles and the activation, but when it is built,\nthe profile is not activated\nPARENT POM:\n...\n  <profiles>\n  <profile>\n    <id>TONY</id>\n<activation>\n<property>\n<name>user.name</name>\n<value>WINTONY</value>\n</property>\n</activation>\n    <properties>\n...\n\nCHILD POM (the one being built)\n<project>\n<parent>\n<groupId>com.capgemini.be.proj1</groupId>\n<artifactId>parent</artifactId>\n<version>4.0.2</version>\n</parent>\n\n\n\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ----------------------------------------------------------------------------\n[INFO] Building Proj1 Application\n[INFO] task-segment: [help:active-profiles] (aggregator-style)\n[INFO] ----------------------------------------------------------------------------\n[INFO] [help:active-profiles]\n[INFO]\nActive Profiles for Project 'com.capgemini.be.proj1:proj1-webapp:jar:4.0.2':\n\nThere are no active profiles. "
    ],
    [
        "MNG-3897",
        "MNG-3773",
        "Profile with jdk activation is not inherited from parent pom If I declare a profile in a parent pom with jdk activation, it isn't being activated for projects that inherit the parent pom.\n\n(Note that I think profiles in general are being inherited.  I suspect this issue is limited to jdk activation.)\n\n\nI have attached a simple test project to prove the issue.  If you run {{mvn help:all-profiles}}, you can see that {{my.jdk16}} is not activated for the module _my-app_ (but it should).\n\n{noformat}\n[INFO] [help:all-profiles]\n[INFO] Listing Profiles for Project: com.mycompany.app:mvn-bug:pom:1.0-SNAPSHOT\n  Profile Id: my.jdk16 (Active: true , Source: pom)\nListing Profiles for Project: com.mycompany.app:my-app:jar:1.0-SNAPSHOT\n  Profile Id: my.jdk16 (Active: false , Source: pom)\n{noformat}\n",
        "Activation by Property does not work if profile is in parent pom  If i have a parent pom with a profile like this:\n<profile>\n  <id>esb</id>\n  <activation>\n    <property>\n      <name>test</name>\n      <value>true</value>\n    </property>\n</activation>\n\ni could not activate it using either:\n<properties>\n  <test>true</test>\n</properties>\nor on CLI (mvn -Dtest=true) in the submodule."
    ],
    [
        "MNG-3946",
        "MNG-2577",
        "user.home not expanded in conf/settngs.xml I have the following in conf/settings.xml in my maven install tree.\n\n  <localRepository>${user.home}/.m2/btrepository</localRepository>\n\nThe user.home does not expand. Using a ~ doesn't help. I still end up with a .m2 directory in the root.\n\n\n\n\n[INFO] [install:install]\n[INFO] Installing /Users/benson/x/tip/rlp/utilities/source/maven-buildtools/target/common-buildtools-7.0-SNAPSHOT.jar to /.m2/btrepository/com/basistech/common-buildtools/7.0-SNAPSHOT/common-buildtools-7.0-SNAPSHOT.jar\n\n",
        "Allow interpolation of Properties in settings.xml the attached patch (against 2.0.4) allows interpolation of system properties into the .m2/settings.xml\nand interpolation of system properties and the properties of profiles found in .m2/settings.xml (if they are activeByDefault) into conf/settings.xml\n\nthese features are necessary in order to propagate user account settings defined in user-specific .m2/settings.xml into server sections of the institution-wide conf/settings.xml"
    ],
    [
        "MNG-3950",
        "MNG-1323",
        "With multiple modules using the same plugin later invocations of the plugin are not initialized In Module A I have an invocation of the antrun plugin. In module B I have another invocation of antrun but this plugin has an additional dependency on ant-contrib. If I run mvn in the root of the project I get a taskdef not found error from ant because the additional dependency is not on the classpath for the invocation in module B.\n\nEmbedded error: The following error occurred while executing this line:\n/data/workspaces/workspace/MoleTracker/uberjar/build.xml:20: Could not create task or type of type: foreach.\n\nIf I run mvn -f moduleB/pom.xml it runs fine.\n\nworkaround is to configure all plugin configurations the same but this seems a tad ham fisted.\n\nI assume this is a general fault for all plugins.",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-3950",
        "MNG-1836",
        "With multiple modules using the same plugin later invocations of the plugin are not initialized In Module A I have an invocation of the antrun plugin. In module B I have another invocation of antrun but this plugin has an additional dependency on ant-contrib. If I run mvn in the root of the project I get a taskdef not found error from ant because the additional dependency is not on the classpath for the invocation in module B.\n\nEmbedded error: The following error occurred while executing this line:\n/data/workspaces/workspace/MoleTracker/uberjar/build.xml:20: Could not create task or type of type: foreach.\n\nIf I run mvn -f moduleB/pom.xml it runs fine.\n\nworkaround is to configure all plugin configurations the same but this seems a tad ham fisted.\n\nI assume this is a general fault for all plugins.",
        "inherited plugin dependencies I have project composed of a reactor/parent pom.xml and a few module.\n\nIn the parent pom.xml, I have somthing like this :\n\n<plugins>\n....\n          <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n     \t\t\t\t<!-- The assembly plugin is not flexible enought for what we have to do -->\n       \t\t\t\t<phase>package</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<property name=\"version.number\" value=\"${project.version}\"/>\n         \t\t\t\t\t<ant antfile=\"src/build/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals><goal>run</goal></goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<inherited>false</inherited>\n\t\t</plugin>\n...\n</plugins>\n\nIn one of the module, I have \n\n  \t<plugins> \n...\n \t    <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n       \t\t\t\t<phase>generate-test-sources</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<ant antfile=\"src/test/ant/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n\t        \t\t\t<testSourceRoot>target/generated-sources/nextmock</testSourceRoot>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals>\n         \t\t\t\t<goal>run</goal>\n       \t\t\t\t</goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<dependencies>\n   \t\t\t\t     <dependency>\n\t\t\t\t\t\t<!-- Required to use javac --> \n\t\t\t\t\t\t<groupId>sun.jdk</groupId>\n\t\t\t\t\t\t<artifactId>tools</artifactId>\n\t\t\t\t\t\t<version>1.5</version>\n\t\t\t\t\t\t<scope>system</scope>\n\t\t\t\t\t\t<systemPath>${java.home}/../lib/tools.jar</systemPath>\n\t\t\t\t\t</dependency>\n   \t\t\t</dependencies>\n\t\t</plugin>\n...\n</plugins>\n\nIt seems that the dependencies is in the sub-module is not loaded, probably because the plugin is loaded in the parent pom (or in the reactor pom which is the same in many cases) and not updated afterward.\n\nThe simple work around is to place the dependencies into the reactor plugin declaration. (A strange thing is that the dependecy doesn't need to be present in the module declaration anymore in that case)\n\nI tried also to place it only int the pluginManagment section but it doesn't work.  The dependency is not loaded.\n"
    ],
    [
        "MNG-3950",
        "MNG-1949",
        "With multiple modules using the same plugin later invocations of the plugin are not initialized In Module A I have an invocation of the antrun plugin. In module B I have another invocation of antrun but this plugin has an additional dependency on ant-contrib. If I run mvn in the root of the project I get a taskdef not found error from ant because the additional dependency is not on the classpath for the invocation in module B.\n\nEmbedded error: The following error occurred while executing this line:\n/data/workspaces/workspace/MoleTracker/uberjar/build.xml:20: Could not create task or type of type: foreach.\n\nIf I run mvn -f moduleB/pom.xml it runs fine.\n\nworkaround is to configure all plugin configurations the same but this seems a tad ham fisted.\n\nI assume this is a general fault for all plugins.",
        "project-level plugin dependencies not handled correctly in multimodule builds plugin containers are only initialized once per build, which means they may contain incorrect project-introduced dependencies for project Y in a multimodule build (polluted by project X predecessor). We should look at ways of dumping plugin containers with project-specific configurations, or else providing a container overlay to handle project-specific dependencies, etc.\n\nNOTE: This is tied into the notions of build extensions, which will have similar consequences on the core container."
    ],
    [
        "MNG-3950",
        "MNG-2174",
        "With multiple modules using the same plugin later invocations of the plugin are not initialized In Module A I have an invocation of the antrun plugin. In module B I have another invocation of antrun but this plugin has an additional dependency on ant-contrib. If I run mvn in the root of the project I get a taskdef not found error from ant because the additional dependency is not on the classpath for the invocation in module B.\n\nEmbedded error: The following error occurred while executing this line:\n/data/workspaces/workspace/MoleTracker/uberjar/build.xml:20: Could not create task or type of type: foreach.\n\nIf I run mvn -f moduleB/pom.xml it runs fine.\n\nworkaround is to configure all plugin configurations the same but this seems a tad ham fisted.\n\nI assume this is a general fault for all plugins.",
        "<pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins (potentially scoped to only affecting child POM plugins that live within a <profile>) <pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins.\n\nKenny believe this works OKAY if the childs are using the parent <pluginManagement> preconfigured plugins in their main <build> section however it does NOT work if the childs are trying to use those preconfigured plugins via their own <profiles>. Configuration propogates through okay but dependencies are missing and have to be respecified in the child POMs.\n\n\n"
    ],
    [
        "MNG-3950",
        "MNG-2946",
        "With multiple modules using the same plugin later invocations of the plugin are not initialized In Module A I have an invocation of the antrun plugin. In module B I have another invocation of antrun but this plugin has an additional dependency on ant-contrib. If I run mvn in the root of the project I get a taskdef not found error from ant because the additional dependency is not on the classpath for the invocation in module B.\n\nEmbedded error: The following error occurred while executing this line:\n/data/workspaces/workspace/MoleTracker/uberjar/build.xml:20: Could not create task or type of type: foreach.\n\nIf I run mvn -f moduleB/pom.xml it runs fine.\n\nworkaround is to configure all plugin configurations the same but this seems a tad ham fisted.\n\nI assume this is a general fault for all plugins.",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n"
    ],
    [
        "MNG-3994",
        "MNG-3529",
        "StringIndexOutOfBoundsException with -Darguments=\" \" When i run the following command i get a StringIndexOutOfBoundsException:\nmvn -Darguments=\" \"\nNote the space: 'arguments' equal double-quote space double-quote\n\nHere is the stacktrace (with maven 2.0.10 svn r736029):\n---------------------------------------------------\nconstituent[0]: file:/home/ricardvi/Application/maven/lib/maven-2.0.10-uber.jar\n---------------------------------------------------\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n        at java.lang.AbstractStringBuilder.setLength(AbstractStringBuilder.java:146)\n        at java.lang.StringBuffer.setLength(StringBuffer.java:154)\n        at org.apache.maven.cli.MavenCli$CLIManager.cleanArgs(MavenCli.java:842)\n        at org.apache.maven.cli.MavenCli$CLIManager.parse(MavenCli.java:795)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:116)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nI'm not sure if it's a bug in cleanArgs method or a bug in the classworlds project... so i report this here.",
        "mvn -Da=\" \" throws an excepltion Doing,\n\nmvn -Da=\" \"\n\nthrows,\n\n---------------------------------------------------\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n        at java.lang.AbstractStringBuilder.setLength(AbstractStringBuilder.java:146)\n        at java.lang.StringBuffer.setLength(StringBuffer.java:154)\n        at org.apache.maven.cli.MavenCli$CLIManager.cleanArgs(MavenCli.java:793)\n        at org.apache.maven.cli.MavenCli$CLIManager.parse(MavenCli.java:746)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:100)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n"
    ],
    [
        "MNG-4032",
        "MNG-2151",
        "Test jar dependency not available for for main classes in multi module builds I have a module layout like this:\n{noformat}\nroot -+- first\n      +- second\n{noformat}\nI have the test-jar plugin enabled, thus a *-tests.jar is built for each module.  In the second module, I have defined a dependency to first's tests jar:\n{noformat}\n       <dependency>\n          <groupId>me</groupId>\n          <artifactId>first</artifactId>\n          <classifier>tests</classifier>\n          <version>1.0-SNAPSHOT</version>\n          <scope>compile</scope>\n       </dependency>\n{noformat}\n\nAnd here's the problem:  A class in the second main folder imports a class from the first test folder.   If I build the second module separately it builds like it should.  But if I build both modules from the root module I get a compilation failure:\n{noformat}\n/.../root/second/src/main/java/me/SecondMain.java:[3,10] cannot find symbol\nsymbol  : class FirstTest\nlocation: package me\n{noformat}\nA class in second's test folder also includes me.FirstTest, and it always compiles.  The scope somehow seems to be overridden when doing multi module builds.\n",
        "classpath used to build a module affects compile classpath for building another module Here's my project layout:\n\ndaytrader/\n  ejb/\n  streamer/\n\nwhere streamer depends on the ejb-client produced by the ejb/ build.\n\nIf I do a \"mvn install\" in daytrader/ the build works. If I do it in streamer/ it fails.\n\nAfter investigation the problem was that the ejb-client produced by the ejb module was excluding by default a class required to compile streamer/.\n\nThe build when run at the top level should have failed when building the streamer/ module."
    ],
    [
        "MNG-4032",
        "MNG-2720",
        "Test jar dependency not available for for main classes in multi module builds I have a module layout like this:\n{noformat}\nroot -+- first\n      +- second\n{noformat}\nI have the test-jar plugin enabled, thus a *-tests.jar is built for each module.  In the second module, I have defined a dependency to first's tests jar:\n{noformat}\n       <dependency>\n          <groupId>me</groupId>\n          <artifactId>first</artifactId>\n          <classifier>tests</classifier>\n          <version>1.0-SNAPSHOT</version>\n          <scope>compile</scope>\n       </dependency>\n{noformat}\n\nAnd here's the problem:  A class in the second main folder imports a class from the first test folder.   If I build the second module separately it builds like it should.  But if I build both modules from the root module I get a compilation failure:\n{noformat}\n/.../root/second/src/main/java/me/SecondMain.java:[3,10] cannot find symbol\nsymbol  : class FirstTest\nlocation: package me\n{noformat}\nA class in second's test folder also includes me.FirstTest, and it always compiles.  The scope somehow seems to be overridden when doing multi module builds.\n",
        "Multiproject dependencies not accurate for project.compileClasspathElements when run from root project In a plugin I wrote (jspc), needs the dependency jars.  It asks for this with the request for the project.compileClasspathElements.  In a multiproject environment, when each project is built individually, it seems correct.  Example (when run with -X ina subproject dir) showing classpath:\n\n/Users/mbp/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar\n/Users/mbp/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar\n/Users/mbp/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar\n/Users/mbp/.m2/repository/tldtestapp/testexttld/1/testexttld-1.jar  <-----------------NOTICE HERE - THIS IS AN ARTIFACT FROM ANOTHER SUBPROJECT\n/Users/mbp/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar]\n\nWhen it is run from the Top level/Root project...here is the output:\n\nUsers/mbp/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar\n/Users/mbp/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar\n/Users/mbp/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar\n/Users/mbp/Desktop/jsp-example/TestTldProject/target/classes  <----------------NOTICE - THE JAR IS NOT BEING ASKED FOR, BUT A CLASSES DIR INSTEAD\n/Users/mbp/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar]\n\nThe second project has a dependency on the testexttld-1.jar because it contains tag libs which must be wrapped in a jar.  When run from a top level, it uses the other project's classes directory instead of the JAR artifact.  WIth JSPC and taglibs, this makes it so it cannot work.  If I have a dependency on a jar, that jar should be the dependency as expected and not a classes directory.  For full explanation and example see here:\n\nhttp://jira.codehaus.org/browse/MJSPC-4\n\n"
    ],
    [
        "MNG-4032",
        "MNG-3420",
        "Test jar dependency not available for for main classes in multi module builds I have a module layout like this:\n{noformat}\nroot -+- first\n      +- second\n{noformat}\nI have the test-jar plugin enabled, thus a *-tests.jar is built for each module.  In the second module, I have defined a dependency to first's tests jar:\n{noformat}\n       <dependency>\n          <groupId>me</groupId>\n          <artifactId>first</artifactId>\n          <classifier>tests</classifier>\n          <version>1.0-SNAPSHOT</version>\n          <scope>compile</scope>\n       </dependency>\n{noformat}\n\nAnd here's the problem:  A class in the second main folder imports a class from the first test folder.   If I build the second module separately it builds like it should.  But if I build both modules from the root module I get a compilation failure:\n{noformat}\n/.../root/second/src/main/java/me/SecondMain.java:[3,10] cannot find symbol\nsymbol  : class FirstTest\nlocation: package me\n{noformat}\nA class in second's test folder also includes me.FirstTest, and it always compiles.  The scope somehow seems to be overridden when doing multi module builds.\n",
        "In a reactor, attached artifacts with classifier should be used when generating classpath, instead of the whole output directory of the related project In a reactor, when a project depends on attached artifacts with classifier of other projects (such as jar assemblies), the generated classpath includes all the output directory of the related projects.\nThis can lead to problems for example if these attached artifacts contains only a subset of the output directory of the related project.\n\nI attached an example that shows this problem :\n1/ launch \"mvn install\" in the \"test-classifier\" directory (POM project basedir), you'll get a compilation failure for module3.\n2/ launch \"mvn install\" in the \"module3\" directory, it works.\n\nI also attached a patch (it affects only MavenProject class)."
    ],
    [
        "MNG-4034",
        "MNG-3957",
        "[regression] dependency version is not inherited from parent dependencyManagement Dependency version is missing for dependencies defined inside a profile and actual version provided in dependencyManagement section of the parent pom. I will attach sample (effective) pom shortly.",
        "[regression] For artifact {stax:stax-api:null:jar}: The version cannot be empty.  A module in my build includes a dep to spring-ws:\n\n{code}\n    <dependency>\n      <groupId>org.springframework.ws</groupId>\n      <artifactId>spring-ws-core</artifactId>\n      <version>1.5.5</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-context</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-aop</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-web</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-webmvc</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-core</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-beans</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n{code}\n\ndoing clean install i get this exception:\n\n{code}\nconstituent[0]: file:/d:/tools/maven2/lib/bcpg-jdk15-140.jar\nconstituent[1]: file:/d:/tools/maven2/lib/bcprov-jdk15-140.jar\nconstituent[2]: file:/d:/tools/maven2/lib/commons-cli-1.0.jar\nconstituent[3]: file:/d:/tools/maven2/lib/commons-logging-api-1.1.jar\nconstituent[4]: file:/d:/tools/maven2/lib/doxia-sink-api-1.0-alpha-9.jar\nconstituent[5]: file:/d:/tools/maven2/lib/google-collect-snapshot-20080530.jar\nconstituent[6]: file:/d:/tools/maven2/lib/jetty-6.1.12.jar\nconstituent[7]: file:/d:/tools/maven2/lib/jetty-client-6.1.12.jar\nconstituent[8]: file:/d:/tools/maven2/lib/jetty-sslengine-6.1.12.jar\nconstituent[9]: file:/d:/tools/maven2/lib/jetty-util-6.1.12.jar\nconstituent[10]: file:/d:/tools/maven2/lib/jsch-0.1.38.jar\nconstituent[11]: file:/d:/tools/maven2/lib/log4j-1.2.12.jar\nconstituent[12]: file:/d:/tools/maven2/lib/maven-compat-3.0-alpha-1.jar\nconstituent[13]: file:/d:/tools/maven2/lib/maven-core-3.0-alpha-1.jar\nconstituent[14]: file:/d:/tools/maven2/lib/maven-distribution-3.0-alpha-1.jar\nconstituent[15]: file:/d:/tools/maven2/lib/maven-embedder-3.0-alpha-1.jar\nconstituent[16]: file:/d:/tools/maven2/lib/maven-lifecycle-3.0-alpha-1.jar\nconstituent[17]: file:/d:/tools/maven2/lib/maven-mercury-3.0-alpha-1.jar\nconstituent[18]: file:/d:/tools/maven2/lib/maven-model-3.0-alpha-1.jar\nconstituent[19]: file:/d:/tools/maven2/lib/maven-plugin-api-3.0-alpha-1.jar\nconstituent[20]: file:/d:/tools/maven2/lib/maven-project-3.0-alpha-1.jar\nconstituent[21]: file:/d:/tools/maven2/lib/maven-project-builder-3.0-alpha-1.jar\nconstituent[22]: file:/d:/tools/maven2/lib/maven-reporting-api-3.0-alpha-1.jar\nconstituent[23]: file:/d:/tools/maven2/lib/maven-toolchain-3.0-alpha-1.jar\nconstituent[24]: file:/d:/tools/maven2/lib/mercury-artifact-1.0.0-alpha-2.jar\nconstituent[25]: file:/d:/tools/maven2/lib/mercury-crypto-api-1.0.0-alpha-2.jar\nconstituent[26]: file:/d:/tools/maven2/lib/mercury-crypto-basic-1.0.0-alpha-2.jar\nconstituent[27]: file:/d:/tools/maven2/lib/mercury-event-1.0.0-alpha-2.jar\nconstituent[28]: file:/d:/tools/maven2/lib/mercury-external-1.0.0-alpha-2.jar\nconstituent[29]: file:/d:/tools/maven2/lib/mercury-logging-1.0.0-alpha-2.jar\nconstituent[30]: file:/d:/tools/maven2/lib/mercury-md-sat-1.0.0-alpha-2.jar\nconstituent[31]: file:/d:/tools/maven2/lib/mercury-md-shared-1.0.0-alpha-2.jar\nconstituent[32]: file:/d:/tools/maven2/lib/mercury-plexus-1.0.0-alpha-2.jar\nconstituent[33]: file:/d:/tools/maven2/lib/mercury-repo-api-1.0.0-alpha-2.jar\nconstituent[34]: file:/d:/tools/maven2/lib/mercury-repo-cache-fs-1.0.0-alpha-2.jar\nconstituent[35]: file:/d:/tools/maven2/lib/mercury-repo-local-m2-1.0.0-alpha-2.jar\nconstituent[36]: file:/d:/tools/maven2/lib/mercury-repo-remote-m2-1.0.0-alpha-2.jar\nconstituent[37]: file:/d:/tools/maven2/lib/mercury-repo-virtual-1.0.0-alpha-2.jar\nconstituent[38]: file:/d:/tools/maven2/lib/mercury-transport-api-1.0.0-alpha-2.jar\nconstituent[39]: file:/d:/tools/maven2/lib/mercury-transport-http-1.0.0-alpha-2.jar\nconstituent[40]: file:/d:/tools/maven2/lib/mercury-util-1.0.0-alpha-2.jar\nconstituent[41]: file:/d:/tools/maven2/lib/model-builder-1.0.jar\nconstituent[42]: file:/d:/tools/maven2/lib/nekohtml-1.9.6.2.jar\nconstituent[43]: file:/d:/tools/maven2/lib/org.sat4j.core-2.0.4.jar\nconstituent[44]: file:/d:/tools/maven2/lib/org.sat4j.pb-2.0.4.jar\nconstituent[45]: file:/d:/tools/maven2/lib/plexus-component-annotations-1.0-beta-3.0.1.jar\nconstituent[46]: file:/d:/tools/maven2/lib/plexus-container-default-1.0-beta-3.0.1.jar\nconstituent[47]: file:/d:/tools/maven2/lib/plexus-interactivity-api-1.0-alpha-6.jar\nconstituent[48]: file:/d:/tools/maven2/lib/plexus-interpolation-1.1.jar\nconstituent[49]: file:/d:/tools/maven2/lib/plexus-lang-1.1.jar\nconstituent[50]: file:/d:/tools/maven2/lib/plexus-plugin-manager-1.0-alpha-1.jar\nconstituent[51]: file:/d:/tools/maven2/lib/plexus-utils-1.5.6.jar\nconstituent[52]: file:/d:/tools/maven2/lib/servlet-api-2.5-6.1.12.jar\nconstituent[53]: file:/d:/tools/maven2/lib/slf4j-api-1.5.3.jar\nconstituent[54]: file:/d:/tools/maven2/lib/slf4j-jdk14-1.5.3.jar\nconstituent[55]: file:/d:/tools/maven2/lib/stax-api-1.0.1.jar\nconstituent[56]: file:/d:/tools/maven2/lib/wagon-file-1.0-beta-4.jar\nconstituent[57]: file:/d:/tools/maven2/lib/wagon-http-lightweight-1.0-beta-4.jar\nconstituent[58]: file:/d:/tools/maven2/lib/wagon-http-shared-1.0-beta-4.jar\nconstituent[59]: file:/d:/tools/maven2/lib/wagon-provider-api-1.0-beta-4.jar\nconstituent[60]: file:/d:/tools/maven2/lib/wagon-ssh-1.0-beta-4.jar\nconstituent[61]: file:/d:/tools/maven2/lib/wagon-ssh-common-1.0-beta-4.jar\nconstituent[62]: file:/d:/tools/maven2/lib/wagon-ssh-external-1.0-beta-4.jar\nconstituent[63]: file:/d:/tools/maven2/lib/wstx-asl-3.2.6.jar\nconstituent[64]: file:/d:/tools/maven2/lib/xbean-reflect-3.4.jar\nconstituent[65]: file:/d:/tools/maven2/lib/xercesMinimal-1.9.6.2.jar\n---------------------------------------------------\norg.apache.maven.artifact.InvalidArtifactRTException: For artifact {stax:stax-api:null:jar}: The version cannot be empty.\n        at org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:159)\n        at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:134)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:216)\n        at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact(DefaultArtifactFactory.java:98)\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:489)\n        at org.apache.maven.project.MavenProject.createArtifacts(MavenProject.java:1681)\n        at org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:354)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:524)\n        at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:132)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:347)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:321)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:289)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1505)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:543)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:492)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentForProject(DefaultLifecycleExecutor.java:259)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:201)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:164)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:207)\n        at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:846)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:160)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:63)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)\n{code}"
    ],
    [
        "MNG-4052",
        "MNG-3939",
        "import scope dependencies prefer to download pom rather than find it in the current project I've run into this in geronimo trunk.\n\nInitial project state:\n\nroot pom includes dependency A in dependencyManagement.\nthis dependency is used (in dependencies) in several places including plugins/clustering/plugin-farm-datasource/\n\nSnapshots for this project are deployed (at apache snapshot repo)\n\nproject update:\nmove A to dependencyManagement of plugins/system-database/pom.xml (also a pom packaging)\ninclude in plugins/clustering/plugin-farm-datasource/pom.xml\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.apache.geronimo.plugins</groupId>\n                <artifactId>system-database</artifactId>\n                <version>${version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n(this is a car packaging project, using the geronimo car-maven-plugin)\n\nnow, clean the local repo and try to build the project from root.\n\nwe see:\n\npb:trunk david$ mvn clean install -Pit\n[INFO] Scanning for projects...\n[INFO] snapshot org.apache.geronimo.plugins:system-database:2.2-SNAPSHOT: checking for updates from apache.snapshots\n[INFO] snapshot org.apache.geronimo.plugins:system-database:2.2-SNAPSHOT: checking for updates from apache-snapshots\n[INFO] snapshot org.apache.geronimo.plugins:system-database:2.2-SNAPSHOT: checking for updates from codehaus-snapshots\nDownloading: http://people.apache.org/repo/m2-snapshot-repository/org/apache/geronimo/plugins/system-database/2.2-SNAPSHOT/system-database-2.2-SNAPSHOT.pom\n\nrather than using the system-database pom in the local project it is downloading the obsolete snapshot.\n\nI've worked around this by uploading the system-database pom by hand.\n\nI may try to write a sample project but since seeing the bug depends on having a deployed snapshot and then changing it locally I have no idea how to write an automated test.",
        "dependencyManagement does not inherit imported dependencies I've attached a zip that has two versions of the same multi-module project. In the first version there is a parent-pom which defines a dependencyManagement section with one dependency (junit 4.4). I child project then inherits from the parent-pom and inherits the dependency management section including the version number for junit. Then then child project can have a dependency for junit and not care about the version number which is managed by the dependencyManagement inherited from the parent.\n\nIn the second version, the dependencyManagement of the parent has been moved to a dependency-pom. This makes sense because the dependencyManagement section for a multi-module project could get huge and it would be nice to keep the parent-pom small and clean and just import dependencyManagement as needed. The problem is that the child project does not inherit these imported dependencies. It seems to me that imported dependencyManagement sections should be inherited too. This is the error given when the child doesn't what version of junit to use:\n    Project ID: maven.dependency.example:child\n    POM Location: C:\\sandbox\\eclipse\\default\\maven example\\child\\pom.xml\n    Validation Messages:\n        [0]  'dependencies.dependency.version' is missing for junit:junit\n\nThis is somewhat related (maybe only tangentially) to the following issues:\n    http://jira.codehaus.org/browse/MNG-3553\n    http://jira.codehaus.org/browse/MNG-2314\n    http://jira.codehaus.org/browse/MNG-3537\n    maybe more ...\n\nHowever, all those other issues seem to involve a more complex example than this issue. This issue is just dependencyManagement, import and inheritance."
    ],
    [
        "MNG-4054",
        "MNG-2452",
        "Command Line interprets bogus options The command line interpreter obviously only matches against the starting portion of a known option. \n\nTo execute offline, this is acceptable: mvn -outside\nTo execute in debug mode, this is acceptable mvn -XOXOXOXOXOX\n\nYou can do this with any option. Get the first couple letters right and you'll trigger perhaps an unintended option.\n\n\n\n",
        "parameter parse error typing \"mvn -Uinstall\" will result on a forced update and then an install phase.\n\nThis is incorrect (if we wish to be compatible with GNU type arguments) it should force \"mvn -U install\".\n\n\"-Uinstall\" should imply 8 options, not 1 and the install command"
    ],
    [
        "MNG-4080",
        "MNG-3580",
        "running mvn fails on IBM JDK 6 with NullPointerException Running mvn under IBM SDK 6.0 fails with NullPointerException:\n\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building AlertBatches\n[INFO]    task-segment: [compile]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.project.ModelUtils.mergePluginLists(ModelUtils.java\n164)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssemble\n.assembleBuildInheritance(DefaultModelInheritanceAssembler.java:369)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssemble\n.assembleModelInheritance(DefaultModelInheritanceAssembler.java:168)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssemble\n.assembleModelInheritance(DefaultModelInheritanceAssembler.java:61)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(De\naultMavenProjectBuilder.java:851)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromReposit\nry(DefaultMavenProjectBuilder.java:252)\n        at org.apache.maven.plugin.DefaultPluginManager.checkRequiredMavenVersi\nn(DefaultPluginManager.java:265)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(D\nfaultPluginManager.java:197)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPlu\ninManager.java:176)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(Def\nultLifecycleExecutor.java:1275)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLife\nycle(DefaultLifecycleExecutor.java:1239)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecyc\neMappings(DefaultLifecycleExecutor.java:1005)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Defa\nltLifecycleExecutor.java:478)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHa\ndleFailures(DefaultLifecycleExecutor.java:331)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegme\nts(DefaultLifecycleExecutor.java:292)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultL\nfecycleExecutor.java:142)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:301)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl\njava:59)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcce\nsorImpl.java:39)\n        at java.lang.reflect.Method.invoke(Method.java:612)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue Mar 10 17:49:51 CET 2009\n[INFO] Final Memory: 5M/1024M\n[INFO] ------------------------------------------------------------------------",
        "FATAL ERROR and NPE on start Any mvn command does give me the following error message\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Business Rules Extractor\n[INFO]   Business Rules Extractor core functions\n[INFO]   COBOL Parser and ANTLR Tools\n[INFO]   Business Rules Extractor data model\n[INFO]   Documentation Extractor module\n[INFO]   Extractor module\n[INFO]   Business Rules Navigator\nWAGON_VERSION: 1.0-beta-2\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Business Rules Extractor\n[INFO]    task-segment: [install]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.project.ModelUtils.mergePluginLists(ModelUtils.java:164)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleBuildInheritance(DefaultModelInheritanceAssembler.java:366)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:168)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:61)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:852)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:253)\n        at org.apache.maven.plugin.DefaultPluginManager.checkRequiredMavenVersion(DefaultPluginManager.java:265)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(DefaultPluginManager.java:197)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:176)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1274)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1542)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindLifecycleForPackaging(DefaultLifecycleExecutor.java:1033)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:997)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:477)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39)\n        at java.lang.reflect.Method.invoke(Method.java:612)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Fri May 16 13:10:16 EDT 2008\n[INFO] Final Memory: 6M/19M\n[INFO] ------------------------------------------------------------------------\n"
    ],
    [
        "MNG-4080",
        "MNG-3618",
        "running mvn fails on IBM JDK 6 with NullPointerException Running mvn under IBM SDK 6.0 fails with NullPointerException:\n\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building AlertBatches\n[INFO]    task-segment: [compile]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.apache.maven.project.ModelUtils.mergePluginLists(ModelUtils.java\n164)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssemble\n.assembleBuildInheritance(DefaultModelInheritanceAssembler.java:369)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssemble\n.assembleModelInheritance(DefaultModelInheritanceAssembler.java:168)\n        at org.apache.maven.project.inheritance.DefaultModelInheritanceAssemble\n.assembleModelInheritance(DefaultModelInheritanceAssembler.java:61)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(De\naultMavenProjectBuilder.java:851)\n        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromReposit\nry(DefaultMavenProjectBuilder.java:252)\n        at org.apache.maven.plugin.DefaultPluginManager.checkRequiredMavenVersi\nn(DefaultPluginManager.java:265)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyVersionedPlugin(D\nfaultPluginManager.java:197)\n        at org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPlu\ninManager.java:176)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(Def\nultLifecycleExecutor.java:1275)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLife\nycle(DefaultLifecycleExecutor.java:1239)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecyc\neMappings(DefaultLifecycleExecutor.java:1005)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Defa\nltLifecycleExecutor.java:478)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHa\ndleFailures(DefaultLifecycleExecutor.java:331)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegme\nts(DefaultLifecycleExecutor.java:292)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultL\nfecycleExecutor.java:142)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:301)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl\njava:59)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcce\nsorImpl.java:39)\n        at java.lang.reflect.Method.invoke(Method.java:612)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430\n\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Tue Mar 10 17:49:51 CET 2009\n[INFO] Final Memory: 5M/1024M\n[INFO] ------------------------------------------------------------------------",
        "maven 2.0.9 return NPE on Linux with IBM JVM 1.6.0 SR1 If you try to run any goal on any POM  maven will return a error like the that\n\n+ Error stacktraces are turned on.\nMaven version: 2.0.9\nJava version: 1.6.0\nOS name: \"linux\" version: \"2.6.24-19-386\" arch: \"x86\" Family: \"unix\"\n[DEBUG] Building Maven user-level plugin registry from: '/home/kismet-sl/.m2/plugin-registry.xml'\n[DEBUG] Building Maven global-level plugin registry from: '/home/kismet-sl/i686/maven/conf/plugin-registry.xml'\n[INFO] Scanning for projects...\n[DEBUG] Searching for parent-POM: it.cnr.isti.wnlab.proximity:proximity::1.0.0 of project: it.cnr.isti.wnlab.proximity:proximity.workflow.api:jar:1.1.2-SNAPSHOT in relative path: ../pom.xml\n[DEBUG] Using parent-POM from the project hierarchy at: '../pom.xml' for project: it.cnr.isti.wnlab.proximity:proximity.workflow.api:jar:1.1.2-SNAPSHOT\n[DEBUG] Searching for parent-POM: it.cnr.isti.wnlab:wnlab::1.0.0 of project: it.cnr.isti.wnlab.proximity:proximity:pom:1.0.0 in relative path: ../pom.xml\n[DEBUG] Parent-POM: it.cnr.isti.wnlab:wnlab::1.0.0 not found in relative path: ../pom.xml\n[DEBUG] Retrieving parent-POM: it.cnr.isti.wnlab:wnlab::1.0.0 for project: it.cnr.isti.wnlab.proximity:proximity:pom:1.0.0 from the repository.\n[INFO] Searching repository for plugin with prefix: 'help'.\n[DEBUG] Loading plugin prefixes from group: org.apache.maven.plugins\n[DEBUG] Loading plugin prefixes from group: org.codehaus.mojo\n[DEBUG] maven-help-plugin: resolved to version 2.0.2 from repository central\n[DEBUG] Retrieving parent-POM: org.apache.maven.plugins:maven-plugins::10 for project: null:maven-help-plugin:maven-plugin:2.0.2 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache.maven:maven-parent::7 for project: org.apache.maven.plugins:maven-plugins:pom:10 from the repository.\n[DEBUG] Retrieving parent-POM: org.apache:apache::4 for project: org.apache.maven:maven-parent:pom:7 from the repository.\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[DEBUG] Trace\njava.lang.NullPointerException\n\tat org.apache.maven.project.ModelUtils.mergePluginLists(ModelUtils.java:164)\n\tat org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleBuildInheritance(DefaultModelInheritanceAssembler.java:366)\n\tat org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:168)\n\tat org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler.assembleModelInheritance(DefaultModelInheritanceAssembler.java:61)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:852)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:253)\n\tat org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:106)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolveMetaVersion(DefaultPluginVersionManager.java:673)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolvePluginVersion(DefaultPluginVersionManager.java:187)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolvePluginVersion(DefaultPluginVersionManager.java:91)\n\tat org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:171)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1274)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1542)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.segmentTaskListByAggregationNeeds(DefaultLifecycleExecutor.java:405)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:137)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39)\n\tat java.lang.reflect.Method.invoke(Method.java:612)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Mon Jun 09 14:34:28 GMT+01:00 2008\n[INFO] Final Memory: 2M/7M\n[INFO] ------------------------------------------------------------------------\n\nIf I use Sun JVM it works, also works with IBM JVM 1.6.0 SR1 and maven 2.0.7"
    ],
    [
        "MNG-4083",
        "MNG-3747",
        "project.build.directory not set properly for plugins Maven 2.0.9 and above do not seem to set project.build.directory properly in down stream plugins.  I have the below test case that shows the problem in the ant plugin, but I have also seen in in the javadoc plugin.  Below is my test case and the results as seen from 2.0.7, 2.0.8, 2.0.9, and 2.0.10.\n\nTest POM:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>test</groupId>\n  <artifactId>test</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0.0</version>\n  <name>Foo</name>\n  <properties>\n    <djobj>E:\\obj</djobj>\n  </properties>\n  <build>\n    <defaultGoal>package</defaultGoal>\n    <outputDirectory>${djobj}/${project.artifactId}/classes</outputDirectory>\n    <testOutputDirectory>${djobj}/${project.artifactId}/test-classes</testOutputDirectory>\n    <directory>${djobj}/${project.artifactId}</directory>\n    <plugins>\n      <plugin>\n        <artifactId>maven-antrun-plugin</artifactId>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <configuration>\n              <tasks>\n                <echo message=\"Debug data\"/>\n                <echo message=\"basedir                             = ${basedir}\"/>\n                <echo message=\"djobj                               = ${djobj}\"/>\n                <echo message=\"project.build.sourceDirectory       = ${project.build.sourceDirectory}\"/>\n                <echo message=\"project.build.scriptSourceDirectory = ${project.build.scriptSourceDirectory}\"/>\n                <echo message=\"project.build.testSourceDirectory   = ${project.build.testSourceDirectory}\"/>\n                <echo message=\"project.build.outputDirectory       = ${project.build.outputDirectory}\"/>\n                <echo message=\"project.build.testOutputDirectory   = ${project.build.testOutputDirectory}\"/>\n                <echo message=\"project.build.directory             = ${project.build.directory}\"/>\n              </tasks>\n            </configuration>\n            <goals>\n              <goal>run</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n\n\n\nTest output:\n\nMaven 2.0.7\n\n[INFO] [antrun:run {execution: default}]\n[INFO] Executing tasks\n     [echo] Debug data\n     [echo] basedir                             = E:\\foo\n     [echo] djobj                               = E:\\obj\n     [echo] project.build.sourceDirectory       = E:\\foo\\src\\main\\java\n     [echo] project.build.scriptSourceDirectory = src/main/scripts\n     [echo] project.build.testSourceDirectory   = E:\\foo\\src\\test\\java\n     [echo] project.build.outputDirectory       = E:\\obj/test/classes\n     [echo] project.build.testOutputDirectory   = E:\\obj/test/test-classes\n     [echo] project.build.directory             = E:\\obj/test\n[INFO] Executed tasks\n\nMaven 2.0.8\n\n[INFO] [antrun:run {execution: default}]\n[INFO] Executing tasks\n     [echo] Debug data\n     [echo] basedir                             = E:\\foo\n     [echo] djobj                               = E:\\obj\n     [echo] project.build.sourceDirectory       = E:\\foo\\src\\main\\java\n     [echo] project.build.scriptSourceDirectory = src/main/scripts\n     [echo] project.build.testSourceDirectory   = E:\\foo\\src\\test\\java\n     [echo] project.build.outputDirectory       = E:\\obj/test/classes\n     [echo] project.build.testOutputDirectory   = E:\\obj/test/test-classes\n     [echo] project.build.directory             = E:\\obj/test\n[INFO] Executed tasks\n\nMaven 2.0.9\n\n[INFO] [antrun:run {execution: default}]\n[INFO] Executing tasks\n     [echo] Debug data\n     [echo] basedir                             = E:\\foo\n     [echo] djobj                               = E:\\obj\n     [echo] project.build.sourceDirectory       = E:\\foo\\src\\main\\java\n     [echo] project.build.scriptSourceDirectory = src/main/scripts\n     [echo] project.build.testSourceDirectory   = E:\\foo\\src\\test\\java\n     [echo] project.build.outputDirectory       = E:\\foo\\E:\\obj\\test\\classes\n     [echo] project.build.testOutputDirectory   = E:\\foo\\E:\\obj\\test\\test-classes\n     [echo] project.build.directory             = E:\\foo\\E:\\obj\\test\n[INFO] Executed tasks\n\nMaven 2.0.10\n\n[INFO] [antrun:run {execution: default}]\n[INFO] Executing tasks\n     [echo] Debug data\n     [echo] basedir                             = E:\\foo\n     [echo] djobj                               = E:\\obj\n     [echo] project.build.sourceDirectory       = E:\\foo\\src\\main\\java\n     [echo] project.build.scriptSourceDirectory = src/main/scripts\n     [echo] project.build.testSourceDirectory   = E:\\foo\\src\\test\\java\n     [echo] project.build.outputDirectory       = E:\\foo\\E:\\obj\\test\\classes\n     [echo] project.build.testOutputDirectory   = E:\\foo\\E:\\obj\\test\\test-classes\n     [echo] project.build.directory             = E:\\foo\\E:\\obj\\test\n[INFO] Executed tasks\n\n\n\n",
        "relative build paths are not path-translated when using prefixed expressions (eg. project.build.directory) in plugin configurations example:\n\n{noformat}\n  <build>\n    <directory>bld</directory>\n    <plugins>\n      <plugin>\n        <artifactId>maven-antrun-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>test</id>\n            <phase>test</phase>\n            <goals>\n              <goal>run</goal>\n            </goals>\n            <configuration>\n              <tasks>\n                <ant dir=\"${project.build.directory}/test-classes\" antfile=\"${project.build.directory}/test-classes/test.build.xml\" />\n              </tasks>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n{noformat}\n\nWhen the antrun plugin executes, the expressions will be resolved with relative paths, not absolute ones (as would be the case if they were run through the pathTranslator).\n\nThis is a problem with the interpolation post-processor that handles path translation, because it doesn't have any sensitivity to prefixed expressions. In other words, it'll handle build.directory but not project.build.directory."
    ],
    [
        "MNG-4088",
        "MNG-2276",
        "[regression] settings.xml profiles are executed after project profiles Examples like the one at http://www.sonatype.com/books/maven-book/reference/profiles-sect-tips-tricks.html do not work anymore.\n\nThe active profiles output is:\n$ mvn help:active-profiles\nActive Profiles for Project 'My Project':\n\nThe following profiles are active:\n\n - my-internal-profile (source: pom.xml)\n - my-external-profile (source: profiles.xml)\n - my-settings-profile (source: settings.xml)\n\ninstead of:\n$ mvn help:active-profiles\nActive Profiles for Project 'My Project':\n\nThe following profiles are active:\n\n - my-settings-profile (source: settings.xml)\n - my-external-profile (source: profiles.xml)\n - my-internal-profile (source: pom.xml)",
        "profile activation by property doesn't work with properties defined in settings. Activating a profile like below doesn't get activated unless the property is set on the CLI. I need to have the property defined in the settings.xml so it's always set.\n    <profiles>\n     <profile>\n      <id>prod</id>\n      <activation>\n          <property>\n             <name>deploy-ct</name>\n          </property>\n      </activation>\n\nFurther, I noticed that if I set it so that the activation is like:\n      <activation>\n          <property>\n             <name>deploy-ct</name><value>true</value>\n          </property>\n      </activation>\n\nThe profile is triggered just by setting the cli like \"mvn -Ddeploy-ct\"  It is not active if I use \"-Ddeploy-ct=false\" but the settings descriptor says that the existence of the property is only used if value is not set.\n"
    ],
    [
        "MNG-4088",
        "MNG-3614",
        "[regression] settings.xml profiles are executed after project profiles Examples like the one at http://www.sonatype.com/books/maven-book/reference/profiles-sect-tips-tricks.html do not work anymore.\n\nThe active profiles output is:\n$ mvn help:active-profiles\nActive Profiles for Project 'My Project':\n\nThe following profiles are active:\n\n - my-internal-profile (source: pom.xml)\n - my-external-profile (source: profiles.xml)\n - my-settings-profile (source: settings.xml)\n\ninstead of:\n$ mvn help:active-profiles\nActive Profiles for Project 'My Project':\n\nThe following profiles are active:\n\n - my-settings-profile (source: settings.xml)\n - my-external-profile (source: profiles.xml)\n - my-internal-profile (source: pom.xml)",
        "settings.xml active profiles executed AFTER project profiles have been loaded and activated/not activated If you have the following settings.xml in ~/.m2:\n{code:xml}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings>\n  <profiles>\n    <profile>\n      <id>userSettings</id>\n      <activation>\n        <activeByDefault/>\n      </activation>\n      <properties>\n        <someproperty>true</someproperty>\n      </properties>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <activeProfile>userSettings</activeProfile>\n  </activeProfiles>\n</settings>\n{code}\nand another child pom.xml somewhere down the line has a profile with an activation like this:\n{code:xml}\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\">\n  <modelVersion>4.0.0</modelVersion>\n  <profiles>\n    <profile>\n    \t<id>with-something</id>    \n    \t<activation>\n       \t\t<activeByDefault>false</activeByDefault>\n       \t\t<property>\n       \t\t\t<name>someproperty</name>\n       \t\t\t<value>true</value>\n       \t\t</property>\n    \t</activation>\n    </profile>\n  </profiles>    \n</project>\n{code}\nDuring run-time, the profile with-something will load before userSettings.  This causes with-something to be incorrectly not activated (as the property someproperty does not exist).  This can be seen with mvn help:active-profiles.\n\nI know why this is true, but it is non-intuitive and one would expect settings.xml profiles to be loaded before anything else.\n"
    ],
    [
        "MNG-4089",
        "MNG-3109",
        "Allow LATEST and RELEASE to peg major version similar to SNAPSHOT If we could do 25-RELEASE/25-LATEST it would provide a huge functionality boost over the current implementation of these 2 keywords.\nCurrently if I use a value range to try to simulate 25-RELEASE (LATEST)\nI would do:\n\n{code}\n[25,26)\n{code}\n\nThis doesn't work very well as SNAPSHOT would be included for 26 even if no 26 released versions are.\nDoing:\n{code}\n[RELEASE,25-SNAPSHOT)\n{code}\n\nWorks slightly better until you release a release version greater than 25 then it again breaks since it doesn't look at (and can't really be expected to) the numerical comparison of 25 vs anything higher than it.\n\nDeploying w. alpha names in versioning will break both these approaches.\nFor example: alpha-1.1, beta-1.2, etc\n\n",
        "version ranges can include snapshots {code}\n<version>[1.1.0,)</version>\n{code}\n\nThis version range can resolve to the latest dev SNAPSHOT which causes the release plugin to fail due to a SNAPSHOT dependency.  The release plugin should check that the original version specification includes a non-SNAPSHOT version (1.1.0) and so can be released without harm."
    ],
    [
        "MNG-4089",
        "MNG-2978",
        "Allow LATEST and RELEASE to peg major version similar to SNAPSHOT If we could do 25-RELEASE/25-LATEST it would provide a huge functionality boost over the current implementation of these 2 keywords.\nCurrently if I use a value range to try to simulate 25-RELEASE (LATEST)\nI would do:\n\n{code}\n[25,26)\n{code}\n\nThis doesn't work very well as SNAPSHOT would be included for 26 even if no 26 released versions are.\nDoing:\n{code}\n[RELEASE,25-SNAPSHOT)\n{code}\n\nWorks slightly better until you release a release version greater than 25 then it again breaks since it doesn't look at (and can't really be expected to) the numerical comparison of 25 vs anything higher than it.\n\nDeploying w. alpha names in versioning will break both these approaches.\nFor example: alpha-1.1, beta-1.2, etc\n\n",
        "Assembly plugin does not resolve version ranges correctly Similar to MRELEASE-134 in maven-release-plugin\n\n<dependency>\n            <groupId>myGroup</groupId>\n            <artifactId>myArtifact</artifactId>\n            <version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range.  This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented."
    ],
    [
        "MNG-4089",
        "MNG-3001",
        "Allow LATEST and RELEASE to peg major version similar to SNAPSHOT If we could do 25-RELEASE/25-LATEST it would provide a huge functionality boost over the current implementation of these 2 keywords.\nCurrently if I use a value range to try to simulate 25-RELEASE (LATEST)\nI would do:\n\n{code}\n[25,26)\n{code}\n\nThis doesn't work very well as SNAPSHOT would be included for 26 even if no 26 released versions are.\nDoing:\n{code}\n[RELEASE,25-SNAPSHOT)\n{code}\n\nWorks slightly better until you release a release version greater than 25 then it again breaks since it doesn't look at (and can't really be expected to) the numerical comparison of 25 vs anything higher than it.\n\nDeploying w. alpha names in versioning will break both these approaches.\nFor example: alpha-1.1, beta-1.2, etc\n\n",
        "Maven2 does not resolve version ranges correctly [PATCH INCLUDED] Maven does not properly handle version ranges when the high end is unbounded.  The spec clearly states that it should not resolve to a SNAPSHOT unless included as an explicit boundary.  Currently maven2 does resolve to a SNAPSHOT which makes usage of version ranges to control versions of dependencies unworkable.  (We currently use a local build of maven with this fix else we could not use version ranges.  This is a major issue can you please include in the next release?)\n\nCode fix and unit tests are included.\n\nExample:\n\n<dependency>\n<groupId>myGroup</groupId>\n<artifactId>myArtifact</artifactId>\n<version>[1.0,)</version>\n</dependency>\n\nThis version range can resolve to the latest development 1.0-SNAPSHOT. All artifact dependencies should ignore SNAPSHOTS as that is not intended by the unbounded high end of the version range. This should resolve to any released version of 1.1 or higher.\n\nThis document:\nhttp://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges\naddressed the requirements for version ranges and stated that \"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary\". I think this requirement was forgotten when version ranges were implemented.\n\nI have included a patch for this bug. The fix is in the containsVersion method of VersionRange. I have added tests in VersionRangeTest and DefaultArtifactCollectorTest. All tests in maven pass with this fix."
    ],
    [
        "MNG-4089",
        "MNG-3092",
        "Allow LATEST and RELEASE to peg major version similar to SNAPSHOT If we could do 25-RELEASE/25-LATEST it would provide a huge functionality boost over the current implementation of these 2 keywords.\nCurrently if I use a value range to try to simulate 25-RELEASE (LATEST)\nI would do:\n\n{code}\n[25,26)\n{code}\n\nThis doesn't work very well as SNAPSHOT would be included for 26 even if no 26 released versions are.\nDoing:\n{code}\n[RELEASE,25-SNAPSHOT)\n{code}\n\nWorks slightly better until you release a release version greater than 25 then it again breaks since it doesn't look at (and can't really be expected to) the numerical comparison of 25 vs anything higher than it.\n\nDeploying w. alpha names in versioning will break both these approaches.\nFor example: alpha-1.1, beta-1.2, etc\n\n",
        "Resolution of version ranges with non-snapshot bounds can resolve to a snapshot version Contrary to the 2.0 design docs:\n\n\"Resolution of dependency ranges should not resolve to a snapshot (development version) unless it is included as an explicit boundary.\"\n-- from http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-Incorporating%7B%7BSNAPSHOT%7D%7Dversionsintothespecification\n\nThe following is equates to true:\n\nVersionRange.createFromVersionSpec( \"[1.0,1.1]\" ).containsVersion( new DefaultArtifactVersion( \"1.1-SNAPSHOT\" ) )\n\nThe attached patch only allows snapshot versions to be contained in a range if they are equal to one of the boundaries.  Note that this is a strict equality, so [1.0,1.2-SNAPSHOT] will not contain 1.1-SNAPSHOT."
    ],
    [
        "MNG-4090",
        "MNG-3397",
        "Allow attribute based configuration Currently we do:\n{code}\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.5</version>\n            <scope>test</scope>\n        </dependency>\n{code}\n\nIt would reduce alot of verbosity in xml configurations if we could instead do:\n{code}\n        <dependency groupId=\"junit\" artifactId=\"junit\" version=\"4.5\" scope=\"test\"/>\n{code}\n\nI understand that we are using xstream and it didn't support attribute based xml but now it does so it would be nice to add this feature.\n",
        "[RFC] change the POM to use attributes "
    ],
    [
        "MNG-4113",
        "MNG-4053",
        "Antrun chmod task fails using maven 3 I'm not sure if this is an issue in the antrun plugin or a problem with maven 3.  I put it under maven 3 because the antrun plugin works fine using maven-2.0.10 or 2.1.0.\nThe problem is that the plugin seems to crash when using the \"perm\" attribute of the chmod task.\n\nI attached the debug log and a sample project.",
        "[regression] XML attributes in plugin configuration get duplicated to other elements in combination with plugin management Running \"mvn help:effective-pom -P emma\" on our core-it-suite/pom.xml delivers\n{code:xml}\n<configuration>\n  <tasks>\n    <delete dir=\"M:\\maven\\core-it\\core-it-suite/target/distro\" />\n    <copy todir=\"M:\\maven\\core-it\\core-it-suite/target/distro\" overwrite=\"true\">\n      <fileset todir=\"M:\\maven\\core-it\\core-it-suite/target/distro\" dir=\"M:\\am\\3.0\\bin\\..\" overwrite=\"true\"/>\n    </copy>\n  </tasks>\n</configuration>\n{code}\nNote that the {{todir}} and {{overwrite}} attribute in {{<fileset>}} got copied from {{<copy>}}."
    ],
    [
        "MNG-4120",
        "MNG-1775",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis.",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-4120",
        "MNG-2363",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis.",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory."
    ],
    [
        "MNG-4120",
        "MNG-2627",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis.",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile."
    ],
    [
        "MNG-4120",
        "MNG-2809",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis.",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>"
    ],
    [
        "MNG-4120",
        "MNG-3017",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis.",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n...."
    ],
    [
        "MNG-4120",
        "MNG-3140",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis.",
        "add support for ${basedir} property in profile activation The profile <activation> supports file based activation (exists/missing), but properties are not supported to set the path.\n\nMy project use such a file-based activation, based on some generated-source file :\n<activation>\n        <file>\n          <missing>target/generated-sources/sql2java.tstamp</missing>\n        </file>\n</activation>\n\nMy project is a module, and when I run the project from the parent project the path is considered based on current dir (parent root) and not module root, so the profile gets activated but shouldn't.\n\nThere's no support for properties in profile activation. I can understand this as profile can themself change properties. Support for the ${basedir} property could solve this issue. As this is a default maven property, it should be immutable, so have no impact on profiles activations and other properties setup.\n\nI would like to submit a patch, to enhance FileProfileActivator and replace ${basedir} with actual value in isActive, but I don't know where to get the basedir value.\n\n"
    ],
    [
        "MNG-4120",
        "MNG-3524",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis.",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing."
    ],
    [
        "MNG-4174",
        "MNG-1775",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-4174",
        "MNG-2363",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory."
    ],
    [
        "MNG-4174",
        "MNG-2627",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile."
    ],
    [
        "MNG-4174",
        "MNG-2809",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>"
    ],
    [
        "MNG-4174",
        "MNG-3017",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n...."
    ],
    [
        "MNG-4174",
        "MNG-3140",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "add support for ${basedir} property in profile activation The profile <activation> supports file based activation (exists/missing), but properties are not supported to set the path.\n\nMy project use such a file-based activation, based on some generated-source file :\n<activation>\n        <file>\n          <missing>target/generated-sources/sql2java.tstamp</missing>\n        </file>\n</activation>\n\nMy project is a module, and when I run the project from the parent project the path is considered based on current dir (parent root) and not module root, so the profile gets activated but shouldn't.\n\nThere's no support for properties in profile activation. I can understand this as profile can themself change properties. Support for the ${basedir} property could solve this issue. As this is a default maven property, it should be immutable, so have no impact on profiles activations and other properties setup.\n\nI would like to submit a patch, to enhance FileProfileActivator and replace ${basedir} with actual value in isActive, but I don't know where to get the basedir value.\n\n"
    ],
    [
        "MNG-4174",
        "MNG-3524",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing."
    ],
    [
        "MNG-4174",
        "MNG-4120",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis."
    ],
    [
        "MNG-4178",
        "MNG-1323",
        "Plugin dependency not always included to classpath Plugins not always see their dependencies.\n\nFor example. I got project with parent project -\n- if I run mvn install on child project mvn package runs correctly.\n- if i run mvn install on parent project then child project is build with error, plugin doesn't see their dependency and fails with class not found\n\nExample of child project \nShort example\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>oss</groupId>\n\t\t<artifactId>oss</artifactId>\n\t\t<version>1.0.0-SNAPSHOT</version>\n\t\t<relativePath>../pom.xml</relativePath>\n\t</parent>\n\n\t<groupId>oss</groupId>\n\t<artifactId>oss-ws</artifactId>\n\t<packaging>war</packaging>\n(...)\n                     <dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n                          <scope>provided</scope>             <!-- if dependecy is compile evething runs ok-->\n\t  </dependency>\n\t</dependencies>\n        <build>\n\t  <plugins>\n            <plugin>\n\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t<artifactId>jaxws-maven-plugin</artifactId>\n\t\t<executions>\n\t\t<execution>\n\t\t  <id>wsdl_generate_service_classes</id>\n\t\t<phase>process-classes</phase>\n\t  \t<goals>\n\t          <goal>wsgen</goal>\n                </goals>\n\t\t<configuration>\t\n \t\t<genWsdl>true</genWsdl>\n                <sei>oss.ossServiceImpl</sei>\n              </configuration>\n\t    </execution>\n\t  </executions>\n\t<dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n\t  </dependency>\n\t</dependencies>\n      </plugin>\n(...)\n\nParent project \n\n(..)\n<modules>\n\t\t<module>oss</module>\n\t</modules>\n",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-4178",
        "MNG-1836",
        "Plugin dependency not always included to classpath Plugins not always see their dependencies.\n\nFor example. I got project with parent project -\n- if I run mvn install on child project mvn package runs correctly.\n- if i run mvn install on parent project then child project is build with error, plugin doesn't see their dependency and fails with class not found\n\nExample of child project \nShort example\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>oss</groupId>\n\t\t<artifactId>oss</artifactId>\n\t\t<version>1.0.0-SNAPSHOT</version>\n\t\t<relativePath>../pom.xml</relativePath>\n\t</parent>\n\n\t<groupId>oss</groupId>\n\t<artifactId>oss-ws</artifactId>\n\t<packaging>war</packaging>\n(...)\n                     <dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n                          <scope>provided</scope>             <!-- if dependecy is compile evething runs ok-->\n\t  </dependency>\n\t</dependencies>\n        <build>\n\t  <plugins>\n            <plugin>\n\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t<artifactId>jaxws-maven-plugin</artifactId>\n\t\t<executions>\n\t\t<execution>\n\t\t  <id>wsdl_generate_service_classes</id>\n\t\t<phase>process-classes</phase>\n\t  \t<goals>\n\t          <goal>wsgen</goal>\n                </goals>\n\t\t<configuration>\t\n \t\t<genWsdl>true</genWsdl>\n                <sei>oss.ossServiceImpl</sei>\n              </configuration>\n\t    </execution>\n\t  </executions>\n\t<dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n\t  </dependency>\n\t</dependencies>\n      </plugin>\n(...)\n\nParent project \n\n(..)\n<modules>\n\t\t<module>oss</module>\n\t</modules>\n",
        "inherited plugin dependencies I have project composed of a reactor/parent pom.xml and a few module.\n\nIn the parent pom.xml, I have somthing like this :\n\n<plugins>\n....\n          <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n     \t\t\t\t<!-- The assembly plugin is not flexible enought for what we have to do -->\n       \t\t\t\t<phase>package</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<property name=\"version.number\" value=\"${project.version}\"/>\n         \t\t\t\t\t<ant antfile=\"src/build/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals><goal>run</goal></goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<inherited>false</inherited>\n\t\t</plugin>\n...\n</plugins>\n\nIn one of the module, I have \n\n  \t<plugins> \n...\n \t    <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n       \t\t\t\t<phase>generate-test-sources</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<ant antfile=\"src/test/ant/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n\t        \t\t\t<testSourceRoot>target/generated-sources/nextmock</testSourceRoot>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals>\n         \t\t\t\t<goal>run</goal>\n       \t\t\t\t</goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<dependencies>\n   \t\t\t\t     <dependency>\n\t\t\t\t\t\t<!-- Required to use javac --> \n\t\t\t\t\t\t<groupId>sun.jdk</groupId>\n\t\t\t\t\t\t<artifactId>tools</artifactId>\n\t\t\t\t\t\t<version>1.5</version>\n\t\t\t\t\t\t<scope>system</scope>\n\t\t\t\t\t\t<systemPath>${java.home}/../lib/tools.jar</systemPath>\n\t\t\t\t\t</dependency>\n   \t\t\t</dependencies>\n\t\t</plugin>\n...\n</plugins>\n\nIt seems that the dependencies is in the sub-module is not loaded, probably because the plugin is loaded in the parent pom (or in the reactor pom which is the same in many cases) and not updated afterward.\n\nThe simple work around is to place the dependencies into the reactor plugin declaration. (A strange thing is that the dependecy doesn't need to be present in the module declaration anymore in that case)\n\nI tried also to place it only int the pluginManagment section but it doesn't work.  The dependency is not loaded.\n"
    ],
    [
        "MNG-4178",
        "MNG-1949",
        "Plugin dependency not always included to classpath Plugins not always see their dependencies.\n\nFor example. I got project with parent project -\n- if I run mvn install on child project mvn package runs correctly.\n- if i run mvn install on parent project then child project is build with error, plugin doesn't see their dependency and fails with class not found\n\nExample of child project \nShort example\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>oss</groupId>\n\t\t<artifactId>oss</artifactId>\n\t\t<version>1.0.0-SNAPSHOT</version>\n\t\t<relativePath>../pom.xml</relativePath>\n\t</parent>\n\n\t<groupId>oss</groupId>\n\t<artifactId>oss-ws</artifactId>\n\t<packaging>war</packaging>\n(...)\n                     <dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n                          <scope>provided</scope>             <!-- if dependecy is compile evething runs ok-->\n\t  </dependency>\n\t</dependencies>\n        <build>\n\t  <plugins>\n            <plugin>\n\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t<artifactId>jaxws-maven-plugin</artifactId>\n\t\t<executions>\n\t\t<execution>\n\t\t  <id>wsdl_generate_service_classes</id>\n\t\t<phase>process-classes</phase>\n\t  \t<goals>\n\t          <goal>wsgen</goal>\n                </goals>\n\t\t<configuration>\t\n \t\t<genWsdl>true</genWsdl>\n                <sei>oss.ossServiceImpl</sei>\n              </configuration>\n\t    </execution>\n\t  </executions>\n\t<dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n\t  </dependency>\n\t</dependencies>\n      </plugin>\n(...)\n\nParent project \n\n(..)\n<modules>\n\t\t<module>oss</module>\n\t</modules>\n",
        "project-level plugin dependencies not handled correctly in multimodule builds plugin containers are only initialized once per build, which means they may contain incorrect project-introduced dependencies for project Y in a multimodule build (polluted by project X predecessor). We should look at ways of dumping plugin containers with project-specific configurations, or else providing a container overlay to handle project-specific dependencies, etc.\n\nNOTE: This is tied into the notions of build extensions, which will have similar consequences on the core container."
    ],
    [
        "MNG-4178",
        "MNG-2174",
        "Plugin dependency not always included to classpath Plugins not always see their dependencies.\n\nFor example. I got project with parent project -\n- if I run mvn install on child project mvn package runs correctly.\n- if i run mvn install on parent project then child project is build with error, plugin doesn't see their dependency and fails with class not found\n\nExample of child project \nShort example\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>oss</groupId>\n\t\t<artifactId>oss</artifactId>\n\t\t<version>1.0.0-SNAPSHOT</version>\n\t\t<relativePath>../pom.xml</relativePath>\n\t</parent>\n\n\t<groupId>oss</groupId>\n\t<artifactId>oss-ws</artifactId>\n\t<packaging>war</packaging>\n(...)\n                     <dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n                          <scope>provided</scope>             <!-- if dependecy is compile evething runs ok-->\n\t  </dependency>\n\t</dependencies>\n        <build>\n\t  <plugins>\n            <plugin>\n\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t<artifactId>jaxws-maven-plugin</artifactId>\n\t\t<executions>\n\t\t<execution>\n\t\t  <id>wsdl_generate_service_classes</id>\n\t\t<phase>process-classes</phase>\n\t  \t<goals>\n\t          <goal>wsgen</goal>\n                </goals>\n\t\t<configuration>\t\n \t\t<genWsdl>true</genWsdl>\n                <sei>oss.ossServiceImpl</sei>\n              </configuration>\n\t    </execution>\n\t  </executions>\n\t<dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n\t  </dependency>\n\t</dependencies>\n      </plugin>\n(...)\n\nParent project \n\n(..)\n<modules>\n\t\t<module>oss</module>\n\t</modules>\n",
        "<pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins (potentially scoped to only affecting child POM plugins that live within a <profile>) <pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins.\n\nKenny believe this works OKAY if the childs are using the parent <pluginManagement> preconfigured plugins in their main <build> section however it does NOT work if the childs are trying to use those preconfigured plugins via their own <profiles>. Configuration propogates through okay but dependencies are missing and have to be respecified in the child POMs.\n\n\n"
    ],
    [
        "MNG-4178",
        "MNG-2946",
        "Plugin dependency not always included to classpath Plugins not always see their dependencies.\n\nFor example. I got project with parent project -\n- if I run mvn install on child project mvn package runs correctly.\n- if i run mvn install on parent project then child project is build with error, plugin doesn't see their dependency and fails with class not found\n\nExample of child project \nShort example\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>oss</groupId>\n\t\t<artifactId>oss</artifactId>\n\t\t<version>1.0.0-SNAPSHOT</version>\n\t\t<relativePath>../pom.xml</relativePath>\n\t</parent>\n\n\t<groupId>oss</groupId>\n\t<artifactId>oss-ws</artifactId>\n\t<packaging>war</packaging>\n(...)\n                     <dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n                          <scope>provided</scope>             <!-- if dependecy is compile evething runs ok-->\n\t  </dependency>\n\t</dependencies>\n        <build>\n\t  <plugins>\n            <plugin>\n\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t<artifactId>jaxws-maven-plugin</artifactId>\n\t\t<executions>\n\t\t<execution>\n\t\t  <id>wsdl_generate_service_classes</id>\n\t\t<phase>process-classes</phase>\n\t  \t<goals>\n\t          <goal>wsgen</goal>\n                </goals>\n\t\t<configuration>\t\n \t\t<genWsdl>true</genWsdl>\n                <sei>oss.ossServiceImpl</sei>\n              </configuration>\n\t    </execution>\n\t  </executions>\n\t<dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n\t  </dependency>\n\t</dependencies>\n      </plugin>\n(...)\n\nParent project \n\n(..)\n<modules>\n\t\t<module>oss</module>\n\t</modules>\n",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n"
    ],
    [
        "MNG-4178",
        "MNG-3950",
        "Plugin dependency not always included to classpath Plugins not always see their dependencies.\n\nFor example. I got project with parent project -\n- if I run mvn install on child project mvn package runs correctly.\n- if i run mvn install on parent project then child project is build with error, plugin doesn't see their dependency and fails with class not found\n\nExample of child project \nShort example\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>oss</groupId>\n\t\t<artifactId>oss</artifactId>\n\t\t<version>1.0.0-SNAPSHOT</version>\n\t\t<relativePath>../pom.xml</relativePath>\n\t</parent>\n\n\t<groupId>oss</groupId>\n\t<artifactId>oss-ws</artifactId>\n\t<packaging>war</packaging>\n(...)\n                     <dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n                          <scope>provided</scope>             <!-- if dependecy is compile evething runs ok-->\n\t  </dependency>\n\t</dependencies>\n        <build>\n\t  <plugins>\n            <plugin>\n\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t<artifactId>jaxws-maven-plugin</artifactId>\n\t\t<executions>\n\t\t<execution>\n\t\t  <id>wsdl_generate_service_classes</id>\n\t\t<phase>process-classes</phase>\n\t  \t<goals>\n\t          <goal>wsgen</goal>\n                </goals>\n\t\t<configuration>\t\n \t\t<genWsdl>true</genWsdl>\n                <sei>oss.ossServiceImpl</sei>\n              </configuration>\n\t    </execution>\n\t  </executions>\n\t<dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n\t  </dependency>\n\t</dependencies>\n      </plugin>\n(...)\n\nParent project \n\n(..)\n<modules>\n\t\t<module>oss</module>\n\t</modules>\n",
        "With multiple modules using the same plugin later invocations of the plugin are not initialized In Module A I have an invocation of the antrun plugin. In module B I have another invocation of antrun but this plugin has an additional dependency on ant-contrib. If I run mvn in the root of the project I get a taskdef not found error from ant because the additional dependency is not on the classpath for the invocation in module B.\n\nEmbedded error: The following error occurred while executing this line:\n/data/workspaces/workspace/MoleTracker/uberjar/build.xml:20: Could not create task or type of type: foreach.\n\nIf I run mvn -f moduleB/pom.xml it runs fine.\n\nworkaround is to configure all plugin configurations the same but this seems a tad ham fisted.\n\nI assume this is a general fault for all plugins."
    ],
    [
        "MNG-4183",
        "MNG-3373",
        "CLONE -Maven 2 says host is unavailable while in browser I can download from that repository I am using the offical Glassfish repository on java.net.\n\nMaven tells me that it cannot resolve one of the references pointing into that repository. The stack trace tells me that the host is not available (see below).\n\nIn fact, when I go to that same URL in the browser, it downloads the artifact without any problem!\n\nAlso that worked for weeks and now is broken, but my POM didn't change!\n\nSo I assume a bug in WAGON.\n\nHere is the POM excerpt, below the POM is the stack trace.\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>glassfish-repository.dev.java.net</id>\n\t\t\t<name>Java.net Repository for Glassfish</name>\n\t\t\t<url>http://download.java.net/maven/glassfish</url>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>javax.resource</groupId>\n\t\t\t<artifactId>connector-api</artifactId>\n\t\t\t<version>1.5</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t</dependencies>\n\norg.apache.maven.lifecycle.LifecycleExecutionException: Unable to get dependency\n information: Unable to read the metadata file for artifact 'javax.resource:conn\nector-api:jar': Cannot find parent: org.glassfish.api:api for project: javax.res\nource:connector-api:jar:1.5 for project javax.resource:connector-api:jar:1.5\n  javax.resource:connector-api:jar:1.5\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  glassfish-repository.dev.java.net (http://download.java.net/maven/glassfish)\nPath to dependency:\n        1) net.sourceforge.rafc:rafc:jar:1.1.1\n...\nCaused by: java.net.UnknownHostException: download.java.net\n        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:177)\n        at java.net.Socket.connect(Socket.java:519)\n        at java.net.Socket.connect(Socket.java:469)\n        at sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n        at sun.net.www.http.HttpClient.openServer(HttpClient.java:394)\n        at sun.net.www.http.HttpClient.openServer(HttpClient.java:529)\n        at sun.net.www.http.HttpClient.<init>(HttpClient.java:233)\n        at sun.net.www.http.HttpClient.New(HttpClient.java:306)\n        at sun.net.www.http.HttpClient.New(HttpClient.java:323)\n        at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLC\nonnection.java:788)\n        at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConne\nction.java:729)\n        at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection\n.java:654)\n        at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLCon\nnection.java:977)\n        at org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputD\nata(LightweightHttpWagon.java:83)\n        ... 33 more",
        "Maven 2 says host in unavailable while in browser I can download from that repository I am using the offical Glassfish repository on java.net.\n\nMaven tells me that it cannot resolve one of the references pointing into that repository. The stack trace tells me that the host is not available (see below).\n\nIn fact, when I go to that same URL in the browser, it downloads the artifact without any problem!\n\nAlso that worked for weeks and now is broken, but my POM didn't change!\n\nSo I assume a bug in WAGON.\n\nHere is the POM excerpt, below the POM is the stack trace.\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>glassfish-repository.dev.java.net</id>\n\t\t\t<name>Java.net Repository for Glassfish</name>\n\t\t\t<url>http://download.java.net/maven/glassfish</url>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>javax.resource</groupId>\n\t\t\t<artifactId>connector-api</artifactId>\n\t\t\t<version>1.5</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t</dependencies>\n\norg.apache.maven.lifecycle.LifecycleExecutionException: Unable to get dependency\n information: Unable to read the metadata file for artifact 'javax.resource:conn\nector-api:jar': Cannot find parent: org.glassfish.api:api for project: javax.res\nource:connector-api:jar:1.5 for project javax.resource:connector-api:jar:1.5\n  javax.resource:connector-api:jar:1.5\n\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2),\n  glassfish-repository.dev.java.net (http://download.java.net/maven/glassfish)\nPath to dependency:\n        1) net.sourceforge.rafc:rafc:jar:1.1.1\n...\nCaused by: java.net.UnknownHostException: download.java.net\n        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:177)\n        at java.net.Socket.connect(Socket.java:519)\n        at java.net.Socket.connect(Socket.java:469)\n        at sun.net.NetworkClient.doConnect(NetworkClient.java:157)\n        at sun.net.www.http.HttpClient.openServer(HttpClient.java:394)\n        at sun.net.www.http.HttpClient.openServer(HttpClient.java:529)\n        at sun.net.www.http.HttpClient.<init>(HttpClient.java:233)\n        at sun.net.www.http.HttpClient.New(HttpClient.java:306)\n        at sun.net.www.http.HttpClient.New(HttpClient.java:323)\n        at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLC\nonnection.java:788)\n        at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConne\nction.java:729)\n        at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection\n.java:654)\n        at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLCon\nnection.java:977)\n        at org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputD\nata(LightweightHttpWagon.java:83)\n        ... 33 more"
    ],
    [
        "MNG-4191",
        "MNG-3540",
        "separate plugin and artifact repositories MavenProject has single remoteArtifactRepositories member that is used to resolve both application dependencies and plugin dependencies. Need to separate the two.",
        "No plugin update from a staged repository The archetype plugin depends on other projects.\nOne of them is staged along with the plugin in a\nstaged repository.\n\nWhen i define that repository in settings.xml in a profile\nwhich is always activated (both repository and pluginRepository)\nand remove all references from archetype in my local repository.\nI then call mvn archetype:create-from-project.\nMaven downloads the plugin but don't download the dependencies\nthere it fails to instantiate the first used class from these dependencies.\nThe first attachment (with-profile.txt) holds the trace\n\nWhen i define the repository in nexus (grouping first the repository then \ncentral in one url) and defining that url as mirror of central in my setting,\nAlso using a fresh repository. I call the same goal, and it works.\nThe second attachment (with-nexus.txt) holds the trace."
    ],
    [
        "MNG-4263",
        "MNG-1412",
        "Dependencies resolution & the order in the declaration Hi, I've got som trouble with Maven resolution.\n\nI read  (here : http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html ): \n\nbq. Dependency mediation - this determines what version of a dependency will be used when multiple versions of an artifact are encountered. Currently, Maven 2.0 only supports using the \"nearest definition\" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, until Maven 2.0.4 it was not defined which one would win, but since Maven 2.0.5 it's the order in the declaration that counts: the first declaration wins.\n\nSo what does 'the order in the declaration' mean ? if it is the pom declaration i ve got a probleme.\n\n*I ve got 3 projects :*\n\n*project-test-a*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-a</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.8</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\n*project-test-b*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-b</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.7</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\nproject-test,  (use project-test-a and project-test-b)\n{code}\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-a</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-b</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t</dependencies>\n{code}\n\n\nSo the \"nearest definition\" is not usefull here because they has got the same depth.\nSo i use the 'the order in the declaration' and for me, the project 'project-test-a' is above the 'b' \nSo the top project (project-test) must use the LOG4J:1.2.8 no ????\n\n\n{code}\nD:\\CNT2\\wk\\wkTest\\project-test>mvn dependency:tree\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'dependency'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - test:project-test:jar:0.0.1-SNAPSHOT\n[INFO]    task-segment: [dependency:tree]\n[INFO] ------------------------------------------------------------------------\n[INFO] snapshot test:project-test-b:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] snapshot test:project-test-a:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] [dependency:tree]\n[INFO] test:project-test:jar:0.0.1-SNAPSHOT\n[INFO] +- test:project-test-b:jar:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- log4j:log4j:jar:1.2.7:compile\n[INFO] \\- test:project-test-a:jar:0.0.1-SNAPSHOT:compile\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6 seconds\n[INFO] Finished at: Tue Jul 28 15:23:22 CEST 2009\n[INFO] Final Memory: 8M/17M\n[INFO] ------------------------------------------------------------------------\n{code}\n\nWhere is the problemes ???\n\nThx\n\n",
        "dependency sorting in classpath The .classpath file entries should be ordered by nearest transitiveness (if that's a word).\n\nFor example, I have project A that depends on B that depends on C.  The classpath for A is generated in the order C, B.  Ideally the classpath should be in order of how near they are to the project, i.e. B, C."
    ],
    [
        "MNG-4263",
        "MNG-2541",
        "Dependencies resolution & the order in the declaration Hi, I've got som trouble with Maven resolution.\n\nI read  (here : http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html ): \n\nbq. Dependency mediation - this determines what version of a dependency will be used when multiple versions of an artifact are encountered. Currently, Maven 2.0 only supports using the \"nearest definition\" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, until Maven 2.0.4 it was not defined which one would win, but since Maven 2.0.5 it's the order in the declaration that counts: the first declaration wins.\n\nSo what does 'the order in the declaration' mean ? if it is the pom declaration i ve got a probleme.\n\n*I ve got 3 projects :*\n\n*project-test-a*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-a</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.8</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\n*project-test-b*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-b</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.7</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\nproject-test,  (use project-test-a and project-test-b)\n{code}\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-a</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-b</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t</dependencies>\n{code}\n\n\nSo the \"nearest definition\" is not usefull here because they has got the same depth.\nSo i use the 'the order in the declaration' and for me, the project 'project-test-a' is above the 'b' \nSo the top project (project-test) must use the LOG4J:1.2.8 no ????\n\n\n{code}\nD:\\CNT2\\wk\\wkTest\\project-test>mvn dependency:tree\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'dependency'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - test:project-test:jar:0.0.1-SNAPSHOT\n[INFO]    task-segment: [dependency:tree]\n[INFO] ------------------------------------------------------------------------\n[INFO] snapshot test:project-test-b:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] snapshot test:project-test-a:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] [dependency:tree]\n[INFO] test:project-test:jar:0.0.1-SNAPSHOT\n[INFO] +- test:project-test-b:jar:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- log4j:log4j:jar:1.2.7:compile\n[INFO] \\- test:project-test-a:jar:0.0.1-SNAPSHOT:compile\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6 seconds\n[INFO] Finished at: Tue Jul 28 15:23:22 CEST 2009\n[INFO] Final Memory: 8M/17M\n[INFO] ------------------------------------------------------------------------\n{code}\n\nWhere is the problemes ???\n\nThx\n\n",
        "Dependecy order is lost  in org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler:\n\n    private void assembleDependencyInheritance( Model child, Model parent )\n    {\n        Map depsMap = new HashMap();\n\n        List deps = parent.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        deps = child.getDependencies();\n\n        if ( deps != null )\n        {\n            for ( Iterator it = deps.iterator(); it.hasNext(); )\n            {\n                Dependency dependency = (Dependency) it.next();\n                depsMap.put( dependency.getManagementKey(), dependency );\n            }\n        }\n\n        child.setDependencies( new ArrayList( depsMap.values() ) );\n    }\n\nThis method mixes up the order of the dependenies due to the use of the Map."
    ],
    [
        "MNG-4263",
        "MNG-2914",
        "Dependencies resolution & the order in the declaration Hi, I've got som trouble with Maven resolution.\n\nI read  (here : http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html ): \n\nbq. Dependency mediation - this determines what version of a dependency will be used when multiple versions of an artifact are encountered. Currently, Maven 2.0 only supports using the \"nearest definition\" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, until Maven 2.0.4 it was not defined which one would win, but since Maven 2.0.5 it's the order in the declaration that counts: the first declaration wins.\n\nSo what does 'the order in the declaration' mean ? if it is the pom declaration i ve got a probleme.\n\n*I ve got 3 projects :*\n\n*project-test-a*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-a</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.8</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\n*project-test-b*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-b</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.7</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\nproject-test,  (use project-test-a and project-test-b)\n{code}\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-a</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-b</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t</dependencies>\n{code}\n\n\nSo the \"nearest definition\" is not usefull here because they has got the same depth.\nSo i use the 'the order in the declaration' and for me, the project 'project-test-a' is above the 'b' \nSo the top project (project-test) must use the LOG4J:1.2.8 no ????\n\n\n{code}\nD:\\CNT2\\wk\\wkTest\\project-test>mvn dependency:tree\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'dependency'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - test:project-test:jar:0.0.1-SNAPSHOT\n[INFO]    task-segment: [dependency:tree]\n[INFO] ------------------------------------------------------------------------\n[INFO] snapshot test:project-test-b:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] snapshot test:project-test-a:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] [dependency:tree]\n[INFO] test:project-test:jar:0.0.1-SNAPSHOT\n[INFO] +- test:project-test-b:jar:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- log4j:log4j:jar:1.2.7:compile\n[INFO] \\- test:project-test-a:jar:0.0.1-SNAPSHOT:compile\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6 seconds\n[INFO] Finished at: Tue Jul 28 15:23:22 CEST 2009\n[INFO] Final Memory: 8M/17M\n[INFO] ------------------------------------------------------------------------\n{code}\n\nWhere is the problemes ???\n\nThx\n\n",
        "order of elements in ClassPathElement is not as in pom.xml The order of dependencies in classPathElements is not same as the order specified in pom.xml.\n\nI have tried running on Maven 2.0.5/Maven 2.0.6 but it does not work. Have tested on both Linux/Windows."
    ],
    [
        "MNG-4263",
        "MNG-3197",
        "Dependencies resolution & the order in the declaration Hi, I've got som trouble with Maven resolution.\n\nI read  (here : http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html ): \n\nbq. Dependency mediation - this determines what version of a dependency will be used when multiple versions of an artifact are encountered. Currently, Maven 2.0 only supports using the \"nearest definition\" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, until Maven 2.0.4 it was not defined which one would win, but since Maven 2.0.5 it's the order in the declaration that counts: the first declaration wins.\n\nSo what does 'the order in the declaration' mean ? if it is the pom declaration i ve got a probleme.\n\n*I ve got 3 projects :*\n\n*project-test-a*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-a</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.8</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\n*project-test-b*\n{code}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>test</groupId>\n\t<artifactId>project-test-b</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<description></description>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>1.2.7</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n{code}\n\nproject-test,  (use project-test-a and project-test-b)\n{code}\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-a</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>test</groupId>\n\t\t\t<artifactId>project-test-b</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\t</dependencies>\n{code}\n\n\nSo the \"nearest definition\" is not usefull here because they has got the same depth.\nSo i use the 'the order in the declaration' and for me, the project 'project-test-a' is above the 'b' \nSo the top project (project-test) must use the LOG4J:1.2.8 no ????\n\n\n{code}\nD:\\CNT2\\wk\\wkTest\\project-test>mvn dependency:tree\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'dependency'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - test:project-test:jar:0.0.1-SNAPSHOT\n[INFO]    task-segment: [dependency:tree]\n[INFO] ------------------------------------------------------------------------\n[INFO] snapshot test:project-test-b:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] snapshot test:project-test-a:0.0.1-SNAPSHOT: checking for updates from inhouse_snapshots\n[INFO] [dependency:tree]\n[INFO] test:project-test:jar:0.0.1-SNAPSHOT\n[INFO] +- test:project-test-b:jar:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- log4j:log4j:jar:1.2.7:compile\n[INFO] \\- test:project-test-a:jar:0.0.1-SNAPSHOT:compile\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6 seconds\n[INFO] Finished at: Tue Jul 28 15:23:22 CEST 2009\n[INFO] Final Memory: 8M/17M\n[INFO] ------------------------------------------------------------------------\n{code}\n\nWhere is the problemes ???\n\nThx\n\n",
        "Direct dependencies should come before transitive dependencies in build classpath. Currently the transitive dependencies appear to take priority over direct dependencies in the compile and test classpaths.\nFor example project A depends on B version 2 and C version 1:\nA -> B.2\nA -> C.1 -> B.1\n\nWhen the tests are run, the classpath will be in an order similar to:\nB.1:C.1:B.2\n\nSince B.1 comes first in the classpath, it will be used when running the tests.  But it seems that B.2 should be used when testing because it has the direct dependency."
    ],
    [
        "MNG-4295",
        "MNG-2525",
        "version ranges are not resolved from snapshot only repositories If a repository is defined like:\n\n  <repositories>\n    <repository>\n      <id>...</id>\n      <name>...</name>\n      <url>....</url>\n      <releases>\n        <enabled>false</enabled>\n      </releases>\n    </repository>\n  </repositories>\n\nThen the following call chain results with no versions being resolved from this repository\n\nWe ask the ArtifactMetadataSource to give us a list of available versions... that is this method:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/project/artifact/MavenMetadataSource.html#495\n\nThis method creates a RepositoryMetadata object of type:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/ArtifactRepositoryMetadata.html#31\n\nThis metadata object is passed to the RepositoryMetadataManager:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.html#58\n\nWhich asks the RepositoryMetadata object if it is a snapshot...\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.html#69\n\nbut our metadata object can never be a snapshot:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/ArtifactRepositoryMetadata.html#81\n\nSo the end result is that we never look in non-release repositories...\n\nTo verify, run the attached test case like so\n\nmvn clean verify -Dusernum=2 \n\nThis will fail as the repository is disabled for releases, while\n\nmvn clean verify -Dusernum=3\n\nWill pass, the only change being that the remote repository is now enabled for releases",
        "SNAPSHOT dependencies aren't found when repository has 'release' disabled and a version range is used When a repository is configured (POM, profiles, etc), 'releases' is disabled, 'snapshots' is enabled and a dependency uses a version range, the dependency fails to resolve. The dependency is found when an explicit version is used. The following can be used to recreate the issue.\n\nSetup the maven snapshot repository in an active profile like this:\n\n        <repository>\n          <id>apache.snapshots</id>\n          <name>Maven Snapshots</name>\n          <url>http://people.apache.org/maven-snapshot-repository</url>\n          <releases>\n            <enabled>false</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n\nCheck out the maven-install-plugin at revision 427494 (or any revision or other plugin that has a dependency that's a SNAPSHOT). Run a build (mvn package) and all dependencies should download. Modify the dependency in the POM to use a version range, instead of an explict version. For example, change the version \"1.0-SNAPSHOT\" to \"[0,1)\", which includes the same version. Run another build (mvn package) and the dependency will fail to download."
    ],
    [
        "MNG-4295",
        "MNG-2994",
        "version ranges are not resolved from snapshot only repositories If a repository is defined like:\n\n  <repositories>\n    <repository>\n      <id>...</id>\n      <name>...</name>\n      <url>....</url>\n      <releases>\n        <enabled>false</enabled>\n      </releases>\n    </repository>\n  </repositories>\n\nThen the following call chain results with no versions being resolved from this repository\n\nWe ask the ArtifactMetadataSource to give us a list of available versions... that is this method:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/project/artifact/MavenMetadataSource.html#495\n\nThis method creates a RepositoryMetadata object of type:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/ArtifactRepositoryMetadata.html#31\n\nThis metadata object is passed to the RepositoryMetadataManager:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.html#58\n\nWhich asks the RepositoryMetadata object if it is a snapshot...\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.html#69\n\nbut our metadata object can never be a snapshot:\n\nhttp://maven.apache.org/ref/current/xref/org/apache/maven/artifact/repository/metadata/ArtifactRepositoryMetadata.html#81\n\nSo the end result is that we never look in non-release repositories...\n\nTo verify, run the attached test case like so\n\nmvn clean verify -Dusernum=2 \n\nThis will fail as the repository is disabled for releases, while\n\nmvn clean verify -Dusernum=3\n\nWill pass, the only change being that the remote repository is now enabled for releases",
        "Snapshot repositories are not checked when using ranges The attached patch demonstrates the problem by adding it0121.  If the test repository has releases enabled, the test passes, when they are disabled, the test fails.  This appears to be due to DefaultArtifact.isSnapshot returning false for unresolved ranges, thus causing snapshot repositories to be disabled when resolving artifacts."
    ],
    [
        "MNG-4343",
        "MNG-1902",
        "maven always checks missing release artifacts As I tried to explain in MARTIFACT-25, maven always checks for missing release artifacts and even though this does not have noticeable performance impact on regular maven cli builds (unless, -fn, I guess), this does cause significant performance problems in embedding applications like m2e in some scenarios.\n\nTo demonstrate the problem, I've added new (and currently disable) testResolveMissingArtifact to P001EmbedderTest performance regression test suite. On my development machine, running doTestResolveMissingArtifact(delay=false) takes ~2ms on average. Running doTestResolveMissingArtifact(delay=true), on the other hand, takes ~202ms, which means that remote repository is accessed twice during each doTestResolveMissingArtifact(delay=true) call.\n\n\nhttps://svn.sonatype.org/m2eclipse/sandbox/trunk/maven-performance-tests/src/test/java/org/apache/maven/performance/tests/p001/P001EmbedderTest.java",
        "track attempted downloads and only re-attempt on certain intervals currently, because files are not stored locally when not found, files are always looked for.\n\nOTOH, we don't want to store incorrect info, especially if it is permanent (ie, not a snapshot).\n\nWe should track in the local repo metadata files that were not found and when, and check again on intervals. This should be part of the resolver so the site plugin (site descriptors), poms and more all benefit."
    ],
    [
        "MNG-4343",
        "MNG-2194",
        "maven always checks missing release artifacts As I tried to explain in MARTIFACT-25, maven always checks for missing release artifacts and even though this does not have noticeable performance impact on regular maven cli builds (unless, -fn, I guess), this does cause significant performance problems in embedding applications like m2e in some scenarios.\n\nTo demonstrate the problem, I've added new (and currently disable) testResolveMissingArtifact to P001EmbedderTest performance regression test suite. On my development machine, running doTestResolveMissingArtifact(delay=false) takes ~2ms on average. Running doTestResolveMissingArtifact(delay=true), on the other hand, takes ~202ms, which means that remote repository is accessed twice during each doTestResolveMissingArtifact(delay=true) call.\n\n\nhttps://svn.sonatype.org/m2eclipse/sandbox/trunk/maven-performance-tests/src/test/java/org/apache/maven/performance/tests/p001/P001EmbedderTest.java",
        "no downloading attempts of non-existing artifact I'm converting a project to maven 2.  Some dependencies do not exist in\nibiblio, so I've 'installed' these into my local repository.\n\nI'm unhappy because every time I perform a run, there is a significant\ndelay (sometimes) when maven tries to download these non-existent\nartifacts.  I get these messages:\nDownloading: http://repo1.maven.org/maven2/......./...pom\n\n\nHow can I prevent maven's attempt to download these non-existent\nartifacts?   I'm most interested in eliminating the delay.\n\nI know I can run with the 'offline' option.   This is OK as long as I'm\nsure all existing artifacts that are already downloaded into my cache. \nSo I can do this until I build on a system with no local cache of add a\nnew dependency to my projects, at which time the delay is experienced\ndue to these non-existent artifacts."
    ],
    [
        "MNG-4343",
        "MNG-2443",
        "maven always checks missing release artifacts As I tried to explain in MARTIFACT-25, maven always checks for missing release artifacts and even though this does not have noticeable performance impact on regular maven cli builds (unless, -fn, I guess), this does cause significant performance problems in embedding applications like m2e in some scenarios.\n\nTo demonstrate the problem, I've added new (and currently disable) testResolveMissingArtifact to P001EmbedderTest performance regression test suite. On my development machine, running doTestResolveMissingArtifact(delay=false) takes ~2ms on average. Running doTestResolveMissingArtifact(delay=true), on the other hand, takes ~202ms, which means that remote repository is accessed twice during each doTestResolveMissingArtifact(delay=true) call.\n\n\nhttps://svn.sonatype.org/m2eclipse/sandbox/trunk/maven-performance-tests/src/test/java/org/apache/maven/performance/tests/p001/P001EmbedderTest.java",
        "Don't download pom if artifact is already in the local repository There are many projects out there just providing their artifact without a pom (whether this is good or not is a different question). Now in this case m2 always tries to download a pom for those artifacts, even if the artifact itself is already in the local repository. And if you have several of those artifacts combined with more than one repository configured, then there are a lot of unnecessary download attempts.\nI think this falls into the same category as changing a pom in the repository (which should be forbidden) - so if for the first time the artifact is downloaded no pom available, then there will never be a pom for this specific artifact."
    ],
    [
        "MNG-4380",
        "MNG-2098",
        "Failure to resolve artifact if there is a dependency that uses version range I have a  simple pom.xml that defines a dependency on jsp-impl from the Maven repository:  http://download.java.net/maven/2\n\n--------------------------pom.xml-----------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>maven.test</groupId>\n<artifactId>simple</artifactId>\n<version>1.0</version>\n<name>SimpleTest</name>\n<repositories>\n    <repository>\n        <id>java.net</id>\n        <name>Java Net Maven 2 </name>\n        <url>http://download.java.net/maven/2</url>\n    </repository>\n</repositories>\n<dependencies>\n <dependency>\n    <groupId>org.glassfish.web</groupId>\n    <artifactId>jsp-impl</artifactId>\n    <version>2.1.3-b17</version>\n  </dependency>\n</dependencies>\n</project>\n\n-------------------------------------------------------------------\n\nRunning \"mvn install\" will fail with the message:\n\nDownloading: http://repo1.maven.org/maven2/javax/servlet/jsp/jsp-api/2.1.3-b05/jsp-api-2.1.3-b05.jar\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\n\nMissing:\n----------\n1) javax.servlet.jsp:jsp-api:jar:2.1.3-b05\n\nTry downloading the file manually from the project website.\n\nThen, install it using the command:\n  mvn install:install-file -DgroupId=javax.servlet.jsp -DartifactId=jsp-api -Dversion=2.1.3-b05 -Dpackaging=jar -Dfile=/path/to/file\n\nAlternatively, if you host your own repository you can deploy the file there:\n  mvn deploy:deploy-file -DgroupId=javax.servlet.jsp -DartifactId=jsp-api -Dversion=2.1.3-b05 -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]\n\nPath to dependency:\n    1) maven.test:simple:jar:1.0\n    2) org.glassfish.web:jsp-impl:jar:2.1.3-b17\n    3) javax.servlet.jsp:jsp-api:jar:2.1.3-b05\n\n----------\n1 required artifact is missing.\n\nfor artifact:\nmaven.test:simple:jar:1.0\n\nfrom the specified remote repositories:\ncentral (http://repo1.maven.org/maven2),\njava.net (http://download.java.net/maven/2)\n\n\nIt's complaining about resolving the artifact jsp-api.  But this artifact (javax.servlet.jsp:jsp-api:jar:2.1.3-b05) exists in java.net (http://download.java.net/maven/2/javax/servlet/jsp/jsp-api/2.1.3-b05/).   Looks like it's trying to download the artifact from the Central repo (http://repo1.maven.org/maven2) and not  even search for it in java.net.    The message at the end is not true.\n\nIf I explicitly define jsp-api artifact in the pom.xml then it compiles successfully. \n\nNote:  The dependency of jsp-api uses version range.  \n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>[2.1.3-b02,2.2)</version>\n        </dependency>\n\nIt maybe related to MNG-2742 but this is not a plugin dependency.\n",
        "Artifact resolver incorrectly selects repository which doesn't contain the selected version The current logic for resolution of an artifact which has groupId/artifactId and then a range is for the DefaultArtifactCollector to call MavenMetadataSource and retrieve the available versions and then match the available versions to the range.\n\nHowever, a side effect exists in that the DefaultRepositoryMetadataManager in its call to mergeMetadata sets the repository for the artifact.  It currently just sets it to the last repository that had versions to merge.  What occurs here though is that it can be set to a repository that doesn't actually have the artifact that is selected as part of the match of version range to available versions.  Then when this artifact is passed to the resolver to download the JAR it references, it of course can't find it and an exception is thrown.\n\nSo there are a couple of issues here\n1) Should the DefaultArtifactResolver really use artifact.getRepository() exclusively if it's not null?  Perhaps the Artifact really ought to contain a list of repositories that are acceptable (from the transformation phase) from which to try.  This may be a good enhancment.\n\nbut the more pressing issue is\n2) Shouldn't the DefaultArtifactCollector actually do the repository selection, not have it be a side effect of getting the metadata.\n\nThe simple patch I've attached solves the problem by just removing the call to setRepository in the mergeMetadata method.  This has the effect that there will be no repository chosen by the time the DefaultArtifactResolver gets a hold of the artifact and it will then go through the list of remoteRepositories until it finds a succesful match.\n\nWhat I'd like to do though is really modify the DefaultArtifactCollector and MavenMetadataSource so that the collector can make the decision about what repository/list of repositories to use, and in the very least choose the repository that has the version that was matched in the range."
    ],
    [
        "MNG-4419",
        "MNG-2578",
        "Plugin versions of a reporting section are not inherited from the pluginManagement section of a parent pom and default to nearest *-SNAPSHOT \nAssume the following scenario:\n\nparent\n-- pom.xml:\n    ...\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.codehaus.mojo</groupId>\n                    <artifactId>findbugs-maven-plugin</artifactId>\n                    <version>2.0.1</version>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    ...\n\nmodule\n-- pom.xml:\n    ...\n    <reporting>\n        <plugins>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>findbugs-maven-plugin</artifactId>\n                <configuration>\n                    <findbugsXmlOutput>true</findbugsXmlOutput>\n                    <findbugsXmlWithMessages>true</findbugsXmlWithMessages>\n                    <xmlOutput>true</xmlOutput>\n                    <threshold>Normal</threshold>\n                    <effort>Default</effort>\n                </configuration>\n           </plugin>\n        </plugins>\n    </reporting>\n    ...\n\n\nWhen the parent is installed and you build the module invoking \"mvn clean install site\", you get org.codehaus.mojo:findbugs-maven-plugin:pom:2.2-SNAPSHOT downloaded instead. This happens for various other plugins. If the plugin is defined in a pluginManagement section, the version is okay, only if you use it in another module which extends the parent and it's not used for reporting. You have to explicitly set the version of the plugin inside the module's reporting section as well, if you would like it not to download the nearest snapshot. This kind of behavior is incorrect, as the whole idea of having a parent pom is to be able to define all versions in it.\n\nI've also tried defining the plugin both in the build and in the reporting sections of the module at the same time (without a hardcoded version). This didn't work.\n\nIt is not a blocker bug, but it breaks part of the concept of having centralized dependencies/versions.\n\nPlease advise,\nSincerely,\n\nMartin Todorov\n\n\n",
        "Make it possible to set default versions  for reporting-plugins (i.e. plugins under <reporting>) Make it possible to set default versions  for reporting-plugins (i.e. plugins under <reporting>).\ndependencies have dependencyManagement and plugins have pluginManagement, but there doesn't seem to be anything for reportPluginManagement.\n\nCould be that I missed out on something, but I doubt it since I stumbled on this issue with aspectj-maven-plugin and it's aspectj-report (similar to javadoc).\nThe same plugin is used under build and reporting. pluginManagement stated that version 1.0-beta-4-SNAPSHOT should be used, but it was only for build.\nInstead 1.0-beta-2 (not snapshot) was used for the report.\n\nThis issue came up in the following thread in mojo-user:\nhttp://www.nabble.com/Problems-with-aspectj-maven-plugin-and-reporting-using-ajdoc-tf2060246.html#a6507979"
    ],
    [
        "MNG-4419",
        "MNG-3385",
        "Plugin versions of a reporting section are not inherited from the pluginManagement section of a parent pom and default to nearest *-SNAPSHOT \nAssume the following scenario:\n\nparent\n-- pom.xml:\n    ...\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.codehaus.mojo</groupId>\n                    <artifactId>findbugs-maven-plugin</artifactId>\n                    <version>2.0.1</version>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    ...\n\nmodule\n-- pom.xml:\n    ...\n    <reporting>\n        <plugins>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>findbugs-maven-plugin</artifactId>\n                <configuration>\n                    <findbugsXmlOutput>true</findbugsXmlOutput>\n                    <findbugsXmlWithMessages>true</findbugsXmlWithMessages>\n                    <xmlOutput>true</xmlOutput>\n                    <threshold>Normal</threshold>\n                    <effort>Default</effort>\n                </configuration>\n           </plugin>\n        </plugins>\n    </reporting>\n    ...\n\n\nWhen the parent is installed and you build the module invoking \"mvn clean install site\", you get org.codehaus.mojo:findbugs-maven-plugin:pom:2.2-SNAPSHOT downloaded instead. This happens for various other plugins. If the plugin is defined in a pluginManagement section, the version is okay, only if you use it in another module which extends the parent and it's not used for reporting. You have to explicitly set the version of the plugin inside the module's reporting section as well, if you would like it not to download the nearest snapshot. This kind of behavior is incorrect, as the whole idea of having a parent pom is to be able to define all versions in it.\n\nI've also tried defining the plugin both in the build and in the reporting sections of the module at the same time (without a hardcoded version). This didn't work.\n\nIt is not a blocker bug, but it breaks part of the concept of having centralized dependencies/versions.\n\nPlease advise,\nSincerely,\n\nMartin Todorov\n\n\n",
        "PluginManagement does not work for report-plugins {code:xml} <build>\n   ...\n    </pluginManagement>\n       <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-pmd-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n   ...\n  </build>\n  <reporting>\n    <plugins>  \n       <plugin>\n         <artifactId>maven-pmd-plugin</artifactId>\n       </plugin>\n    </plugins>\n  </reporting>  {code}\n\nmvn site ... use pmd-2.4-SNAPSHOT instead of the defined 2.2 ... why?"
    ],
    [
        "MNG-4419",
        "MNG-3521",
        "Plugin versions of a reporting section are not inherited from the pluginManagement section of a parent pom and default to nearest *-SNAPSHOT \nAssume the following scenario:\n\nparent\n-- pom.xml:\n    ...\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.codehaus.mojo</groupId>\n                    <artifactId>findbugs-maven-plugin</artifactId>\n                    <version>2.0.1</version>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    ...\n\nmodule\n-- pom.xml:\n    ...\n    <reporting>\n        <plugins>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>findbugs-maven-plugin</artifactId>\n                <configuration>\n                    <findbugsXmlOutput>true</findbugsXmlOutput>\n                    <findbugsXmlWithMessages>true</findbugsXmlWithMessages>\n                    <xmlOutput>true</xmlOutput>\n                    <threshold>Normal</threshold>\n                    <effort>Default</effort>\n                </configuration>\n           </plugin>\n        </plugins>\n    </reporting>\n    ...\n\n\nWhen the parent is installed and you build the module invoking \"mvn clean install site\", you get org.codehaus.mojo:findbugs-maven-plugin:pom:2.2-SNAPSHOT downloaded instead. This happens for various other plugins. If the plugin is defined in a pluginManagement section, the version is okay, only if you use it in another module which extends the parent and it's not used for reporting. You have to explicitly set the version of the plugin inside the module's reporting section as well, if you would like it not to download the nearest snapshot. This kind of behavior is incorrect, as the whole idea of having a parent pom is to be able to define all versions in it.\n\nI've also tried defining the plugin both in the build and in the reporting sections of the module at the same time (without a hardcoded version). This didn't work.\n\nIt is not a blocker bug, but it breaks part of the concept of having centralized dependencies/versions.\n\nPlease advise,\nSincerely,\n\nMartin Todorov\n\n\n",
        "mvn site does not use the plugin version from the pluginManagement section In the attached pom the pmd version specified in the pluginManagement is 2.3 but the one used when executing mvn site is the latest one in the local repository (in my case it was 2.2).\nWhen executing mvn pmd:pmd the newer version is downloaded from the remote repository."
    ],
    [
        "MNG-4422",
        "MNG-4307",
        "[regression] Property expansion does not work for phase of plugin executions As originally reported by Marc Rohlfs in MNG-4319, something like\n{code:xml}\n<execution>\n  <phase>${someProperty}</phase>\n  ...\n</execution>\n{code}\nis no longer interpolated in Maven 2.1+.",
        "Properties are not expanded in Plugin execution phase attribute when executed from child project, from parent they are. The attached tarball has the following project structure:\n\nparent-tests/\nparent-tests/test/\n\nThe parent project has a <modules> section only.\nThe tests sub project has a single plugin and execution block.  The <phase> is a property <phase>${failsafeIntegrationTestPhase}</phase>\n\nThe pom has a single property:\n"
    ],
    [
        "MNG-4478",
        "MNG-4469",
        "deploy plugin altDeploymentRepository does not use authorization credentials When using the altDeploymentRepository of the deploy plugin (2.4 or 2.5-SNAPSHOT) the (Default)ArtifactRepository will have no Authorization object set, thus deployment will fail if the repository requires authorization.\n\nMy expectation was that authorization credentials are picked up if a <server> with matching ID is configured in the settings.xml.\n\nThe attached patch fixes this the hard way in the deploy plugin, but the change requires building the deploy plugin against maven 3.0-alpha. I think this should rather be fixed in Maven itself if possible, but I don't know how to do that.",
        "[regression] deploy:deploy-file fails with secured repository {{deploy:deploy-file}} or any other mojo that creates artifact repositories on its own will appear to ignore mirror, proxy and authentication infos from the settings when run with Maven 3.0. This is due to the {{ArtifactRepositoryFactory}} and the {{WagonManager}} being stateless and not injecting these infos any longer automatically."
    ],
    [
        "MNG-4524",
        "MNG-4486",
        "Error while installing dependencies Actually i am new to maven, while i am trying to work on the example given in Maven Definitive guide pdf(example in Chapter 4) its giving me the below error. I have also attached pom.xml for your reference.\n\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk/poms/jmxtools-1.2.1.pom\n357b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b662aa01d4\n9d8a571aa79f67a1d4a92a7d9c6359'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk\n/poms/jmxtools-1.2.1.pom\n357b downloaded\n\n\nThanks,\nRamesh.V",
        "Maven appears to ignore http 301; downloads html as jar Our Maven builds are configured with just two repositories,\nhttp://repo1.maven.org/maven2 and http://scala-tools.org/repo-releases\n(We use Artifactory as a central repo cache)\n\nBut since Friday, I've noticed builds failing because builds are trying to\ndownload jms-1.1.jar from maven-repository.dev.java.net even though that is not in our repo path\nor configuration.\n\nwhen I run with -X I see a failure trying to download jmx-1.1.jar from central,\nfollowed by:\n\n Downloading:\nhttps://maven-repository.dev.java.net/nonav/repository/javax.jms/jars/jms-1.1.jar\n 347b downloaded\n [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local =\n'd0b7ce08d257e8fefdc6ad0f0f0368635bbeb3d0'; remote = '<!DOCTYPE' - RETRYING\n\nWorse, what gets downloaded is not a jar but some html. Maven seems to\nignore the 301 status and thinks this is a jar. The contents are:\n\n   <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n   <html><head>\n   <title>301 Moved Permanently</title>\n   </head><body>\n   <h1>Moved Permanently</h1>\n   <p>The document has moved <a href=\"\nhttp://download.java.net/maven/1/javax.jms/jars/jms-1.1.jar\">here</a>.</p>\n   <hr>\n   <address>Apache Server at maven-repository.dev.java.net Port\n443</address>\n   </body></html>\n\nhttp://repo2.maven.org/maven2/javax/jms/jms/1.1/ contains a pom.xml but no jar.\nHowever, http://repository.jboss.com/maven2/javax/jms/jms/1.1/ has the jar.\n\nmy project does not even depend on jms directly; it appears to be one of the\ninternal Maven compile or site targets that cause it to get loaded, but I'm not sure which.\n\nIn artifactory's config, we specify:\n\n  <remoteRepositories>\n       <remoteRepository>\n           <key>repo1</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n\n <excludesPattern>org/artifactory/**,org/jfrog/**</excludesPattern>\n           <url>http://repo1.maven.org/maven2</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n\n       <remoteRepository>\n           <key>scala-tools.org</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n           <url>http://scala-tools.org/repo-releases</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n  </remoteRepositories>\n\nMy ~/.m2/settings.xml is empty and /usr/local/maven/conf/settings.xml simply\npoints to my Artifactory server, no other repos in the profile:\n\n <profiles>\n   <profile>\n     <id>artifactory</id>\n     <activation><activeByDefault>true</activeByDefault></activation>\n\n        <repositories>\n            <repository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </repository>\n            <repository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </repository>\n        </repositories>\n        <pluginRepositories>\n            <pluginRepository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </pluginRepository>\n            <pluginRepository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </pluginRepository>\n        </pluginRepositories>\n\n   </profile>\n </profiles>\n\nI was able to workaround this by downloading jms-1.1.jar and putting it in our\nArtifactory repo, but I think that is simply masking a problem, so this will\nprobably pop back up.\n\nPerhaps the problem is at central; I don't know if it every had a jms-1.1.jar;\nas I said, we did not depend on it directly, so we suspect some other\nplugin now uses it that did not, or the jar was incorrectly removed\nfrom central. But the fact that Maven downloaded the html as a jar\ncaused problems, because after each build failure, I had to manually\nclean up my bad ~/.m2/repository\n"
    ],
    [
        "MNG-4538",
        "MNG-4148",
        "dependencyManagament dependencies within profiles are not activated by settings.xml  This issue is *not* reproducable with Maven 2.0.9, 2.0.10 and 2.2.2-RC1-SNAPSHOT.          \n\nI'm referring to the sample projects contained in profileBug.zip:\npreparation:\n\n- You need to set in your settings.xml: \n\n  <activeProfiles>\n     <activeProfile>testing</activeProfile>\n  </activeProfiles>\n\n- Install main-parent\n\nreproducing:\n\n- Install project parent. This will fail because of ChildTwo. \n\nThe transivite dependency of junit is not beeing resolved correctly through project ChildOne even it's not necessary. I guess not finding commons-lang is just a \"sequence error\" of the \"invalid\" pom of ChildOne.\n\nIt seems like the profile isn't activated by the settings.xml and so the dependencies aren't known in context of project ChildTwo transitive dependencies.\nBut e.g. childOne or childThree can be installed without any problems so the profile should be loaded correctly, the only difference to ChildTwo is that they don't have any transitive dependencies to other projects with the same parent. \n\nIf you cange in project parent the profile \"testing\" to:\n\n<activation>\n   <activeByDefault>true</activeByDefault>\n</activation>\n\nor change the profile activation by property and install project parent with -Dtesting, childTwo will be installed correctly.\n\nThis issue only occurs with maven 3.0 or 2.2.1. It works fine with maven 2.0.10 or 2.2.2-RC1-SNAPSHOT\n\nWill this error be fixed in maven 3.0?",
        "Apply profiles from settings.xml to POMs built from the repository When we declare a profile in the settings.xml, it will never be applied to POMs loaded from the Maven repository. This means that overriding the central repository definition - for instance - cannot be done without using mirror definitions, since transitive dependencies (any dependency of a direct dependency) will skip the modified definition and use the original from the super-POM instead.\n\nI'm attaching a testing setup that was originally reported for MNG-3553, which exhibits this problem when dealing with scope == import. The instructions for using it are as follows:\n\n{noformat}\nI installed locally a nexus server (1.3.3 Open Source) and I'm using maven 2.1.0 (I reproduced the issue with 2.0.10).\nIn the releases repository of nexus you upload all artifacts given in the toUpload directory :\n\n    * parent 1.0.0 pom\n    * dependencies 1.0.0 pom\n    * module 1.0.0 pom and jar\n\nYou'll find in the root of the archive my settings. It defines to use nexus for the central repository.\nYou launch a build of the project and you'll have :\n\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - org.apache.maven.it.mng3553:project:jar:1.0.0-SNAPSHOT\n[INFO]    task-segment: [install]\n[INFO] ------------------------------------------------------------------------\n[INFO] [resources:resources]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory E:\\jtb\\workspaces\\tests\\test-mng3553\\project\\src\\main\\resources\nDownloading: http://localhost:8081/nexus/content/groups/public//org/apache/maven/it/mng3553/module/1.0.0/module-1.0.0.pom\n867b downloaded  (module-1.0.0.pom)\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/it/mng3553/dependencies/1.0.0/dependencies-1.0.0.pom\n[WARNING] Unable to get resource 'org.apache.maven.it.mng3553:dependencies:pom:1.0.0'\nfrom repository central (http://repo1.maven.org/maven2): Authorization failed: Access denied to:\n  http://repo1.maven.org/maven2/org/apache/maven/it/mng3553/dependencies/1.0.0/dependencies-1.0.0.pom\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\nGroupId: org.apache.maven.it.mng3553\nArtifactId: dependencies\nVersion: 1.0.0\nReason: Unable to download the artifact from any repository\n  org.apache.maven.it.mng3553:dependencies:pom:1.0.0\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Apr 30 15:19:47 CEST 2009\n[INFO] Final Memory: 6M/254M\n[INFO] ------------------------------------------------------------------------\n\n\nYou can see that the project downloads successfully the module-1.0.0 from nexus but\nit fails for depencencies which is an import. It tries to download it from the real central repository\nand not from the one I defined in my settings.\nThe behavior is inconsistent...\n{noformat}"
    ],
    [
        "MNG-4545",
        "MNG-4379",
        "It seems to me that the following construct should not render a POM invalid It seems to me that the following construct should not render a POM invalid\n{code:xml}\n        <dependency>\n            <groupId>sun.jdk</groupId>\n            <artifactId>jce</artifactId>\n            <version>1.6.0</version>\n            <scope>system</scope>\n            <systemPath>\n                ${env.JAVA_HOME}/jre/lib/ext/sunjce_provider.jar\n            </systemPath>\n        </dependency>\n{code}\n\nmvn -e -X clean install _(for the project that depends on the project from which POM quotation came)_.\n\n{quote}\n[WARNING] POM for 'com.navteq.ncs.common:ncs-common-utils-core:pom:2.2-SNAPSHOT:compile' is invalid.\n\nIts dependencies (if any) will NOT be available to the current build.\n[DEBUG] Reason: Failed to validate POM for project com.navteq.ncs.common:ncs-common-utils-core at Artifact [com.navteq.ncs.common:ncs-common-utils-core:pom:2.2-SNAPSHOT:compile]\n[DEBUG] \nValidation Errors:\n[DEBUG] For dependency Dependency \\{groupId=sun.jdk, artifactId=jce, version=1.6.0, type=jar\\}: system-scoped dependency must specify an absolute path systemPath.\n{quote}\n\nAs result the build fails as transitive dependencies from com.navteq.ncs.common:ncs-common-utils-core are not resolved.\n\n",
        "Properties defined in parent POM and used in systemPath element cause POM validation warnings and dependencies ignoration - compilation error In parent POM of some \"common_jar\" module we have property definition:\n\n<properties>\n        <WEBSPHERE_HOME>${env.WAS7_HOME}</WEBSPHERE_HOME>\n</properties>\n\nthen in child module \"common_jar\" we use this property\n\n<!-- WebSphere 7 libraries-->\n<dependency>\n       <groupId>com.ibm.ws</groupId>\n       <artifactId>webservices.thinclient</artifactId>\n       <version>7.0.0</version>\n       <systemPath>${WEBSPHERE_HOME}/runtimes/com.ibm.ws.webservices.thinclient_7.0.0.jar</systemPath>\n       <scope>system</scope>\n</dependency>\n\nNext we use this \"common_jar\" as dependency for our \"other module\":\n\n<dependency>\n    <groupId>our_company.common</groupId>\n    <artifactId>common_jar</artifactId>\n    <version>1.0-SNAPSHOT</version>\n</dependency>\n\nbut unfortunatelly this \"other module\" can not be compiled because of\n\n[WARNING] POM for 'our_company.common:common_jar:pom:1.0.102:compile' is invalid.\n\nIts dependencies (if any) will NOT be available to the current build.\n\nThis causes that the libraries from \"common_jar\" are not available to \"other module\" and therefore \"other module\" can not be compiled.\n\n\nIf I replace the WEBSPHERE_HOME's property in \"common_jar\"'s parent POM with absolute path then \"other module\" compiles OK. So it seems that it can not read environment properties in \"common_jar\" from \"other module\". Module \"common_jar\" compiles OK under all circumstances (there is no problem with this property in systemPath).\n\n\nOther thing is that in parent of \"other module\" there is also a property WEBSPHERE_HOME defined which points to the same directory as WEBSPHERE_HOME in \"common_jar\" parent POM (simple copy paste by project creation), but it seems that does not affect the issue. There was no problem with this configuration (setup) in Maven 2.0.10. Problem started with Maven 2.1.0 and continues with Maven 2.2.1. We can not use Maven 2.0.10 due to old version of Maven-Eclipse plugin which is generatin wrong \".settings\" for EAR project.\n\nFor test case to run please modify WEBSPHERE_HOME property and WS libraries dependency in \"common_jar\" and its parent POM."
    ],
    [
        "MNG-4560",
        "MNG-3529",
        "Crash if command line parameter ends in space I want to pass -DscmCommentPrefix=\"BUG1234 - \" (note the space before the end quote) to the release plugin, but that crashes Maven before the plugin code is even reached.  Without the space everything works fine (but the resulting commit comment looks ugly).\n\n{code}\njohan@transwarp:/localhome/johan/clients/johan/enginfra/sandboxes/johan/punit$ mvn \"-Dx=endsinspace \"\n---------------------------------------------------\nconstituent[0]: file:/opt/maven/lib/maven-2.2.1-uber.jar\n---------------------------------------------------\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.AbstractStringBuilder.setLength(AbstractStringBuilder.java:143)\n\tat java.lang.StringBuffer.setLength(StringBuffer.java:153)\n\tat org.apache.maven.cli.CLIManager.cleanArgs(CLIManager.java:271)\n\tat org.apache.maven.cli.CLIManager.parse(CLIManager.java:224)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:119)\n\tat org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:376)\n{code}\n",
        "mvn -Da=\" \" throws an excepltion Doing,\n\nmvn -Da=\" \"\n\nthrows,\n\n---------------------------------------------------\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n        at java.lang.AbstractStringBuilder.setLength(AbstractStringBuilder.java:146)\n        at java.lang.StringBuffer.setLength(StringBuffer.java:154)\n        at org.apache.maven.cli.MavenCli$CLIManager.cleanArgs(MavenCli.java:793)\n        at org.apache.maven.cli.MavenCli$CLIManager.parse(MavenCli.java:746)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:100)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n"
    ],
    [
        "MNG-4560",
        "MNG-3994",
        "Crash if command line parameter ends in space I want to pass -DscmCommentPrefix=\"BUG1234 - \" (note the space before the end quote) to the release plugin, but that crashes Maven before the plugin code is even reached.  Without the space everything works fine (but the resulting commit comment looks ugly).\n\n{code}\njohan@transwarp:/localhome/johan/clients/johan/enginfra/sandboxes/johan/punit$ mvn \"-Dx=endsinspace \"\n---------------------------------------------------\nconstituent[0]: file:/opt/maven/lib/maven-2.2.1-uber.jar\n---------------------------------------------------\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.AbstractStringBuilder.setLength(AbstractStringBuilder.java:143)\n\tat java.lang.StringBuffer.setLength(StringBuffer.java:153)\n\tat org.apache.maven.cli.CLIManager.cleanArgs(CLIManager.java:271)\n\tat org.apache.maven.cli.CLIManager.parse(CLIManager.java:224)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:119)\n\tat org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:376)\n{code}\n",
        "StringIndexOutOfBoundsException with -Darguments=\" \" When i run the following command i get a StringIndexOutOfBoundsException:\nmvn -Darguments=\" \"\nNote the space: 'arguments' equal double-quote space double-quote\n\nHere is the stacktrace (with maven 2.0.10 svn r736029):\n---------------------------------------------------\nconstituent[0]: file:/home/ricardvi/Application/maven/lib/maven-2.0.10-uber.jar\n---------------------------------------------------\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n        at java.lang.AbstractStringBuilder.setLength(AbstractStringBuilder.java:146)\n        at java.lang.StringBuffer.setLength(StringBuffer.java:154)\n        at org.apache.maven.cli.MavenCli$CLIManager.cleanArgs(MavenCli.java:842)\n        at org.apache.maven.cli.MavenCli$CLIManager.parse(MavenCli.java:795)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:116)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nI'm not sure if it's a bug in cleanArgs method or a bug in the classworlds project... so i report this here."
    ],
    [
        "MNG-4582",
        "MNG-4580",
        "Extensions not working when defined in a module We want to use Maven Extensions so we can easily look up configuration files. This is our project configuration:\n\nbuild-project (contains only list of modules):\n\n<modules>\n  <module>parent-project</module>\n  <module>subproject1</module>\n  <!-- more modules -->\n</modules>\n\nparent-project (contains only configurations, has no declared <parent> project):\n\n<build>\n  <extensions>\n    <extension>\n      <!-- artifact with config files -->\n    </extension>\n  </extensions>\n  <plugins>\n    <plugin>\n      <!-- plugin that searches config files on classpath (with Plexus ResourceManager) -->\n    </plugin>\n  </plugin>\n</build>\n\nsubproject1 (has parent-project as <parent>, executes plugin)\n\nWith maven-2.2.1 the config files are correctly loaded and available on the classpath. With maven-3.0-alpha-6, the config files are not on the classpath. \n\nIf we move the extension up into the \"build-project\", the config files are available again, but we would like to keep configurations out of the build-project. \n\nCan you please fix the extension classpath loading?",
        "Plugin dependencies for module ignored when building from aggregator project using direct plugin invocation I have declared a plugin in the _build.plugins_ section of a module project. When building the project from the module directory, everything works fine. But when I build the project from the aggregator project, the plugin dependencies are ignored."
    ],
    [
        "MNG-4620",
        "MNG-1775",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "No property expansion in profile activation I have a profile specified in the pom.xml of a project. It is inteded to be activated based on the presence or absence of a file, using the <file> profile activator.\n\nThe profiles are simple:\n      <profile>\n          <id>metis</id>\n          <activation>\n              <file><missing>${basedir}/../build.properties</missing></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties.metis</filter></filters>\n          </build>\n      </profile>\n      <profile>\n          <id>dev</id>\n          <activation>\n              <file><exists>${basedir}/../build.properties</exists></file>\n          </activation>\n          <build>\n              <filters><filter>${basedir}/../build.properties</filter></filters>\n          </build>\n      </profile>\n\nThe problem comes in with ${basedir} -- it isn't being expanded for purposes of evaluating the file. It's trying to look for a file named \"${basedir}/../build.properties\", rather than \"/home/joe/projectX/projY/../build.properties\"; as a result, the \"missing\" directive is always true, and the dev profile is never activated. When the filter path is evaluated, the ${basedir} property *is* evaluated, however."
    ],
    [
        "MNG-4620",
        "MNG-2363",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "<profile><activation><file><exists/> does not work in a multi-project build I would expect each subproject to have the profile turned on or off depending on whether {{${basedir\\}/file-to-check-for}} exists.\n\nInstead, during a multi-project build the profile is either on or off depending on whether the file exists relative to the *aggregator pom*. The decision is made once.\n\nVariable substitution doesn't work, so I can't explicitly use {{<exists>${basedir\\}/file-to-check-for</exists>}} or any variation on this theme to workaround the bug.\n\n\n\n\nSome background to my particular problem. I have 10 modules to build. Some of them are GUI modules and contain a file called plugin.xml in the subproject directory. I want to package these up specially and sign them, ready for deployment to webstart. The other modules are shared and server code and I don't want these packaged in the same way. So, I've got a dependency in my *parent* pom file which activates a profile called \"guibundle\" if a plugin.xml file exists in the subproject directory."
    ],
    [
        "MNG-4620",
        "MNG-2627",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "properties substitutions in exists The substitution of properties doens't seems to work inside the exists tag in the pom.xml.\n\n\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>${share}</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nDoesn't seems to work (the profile is not activated),\n\nwhile :\n{code}\n \t<profiles>\n\t\t<profile>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>u:\\SCOKART_Gilles\\Public</exists>\n\t\t\t\t</file>\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t....\n\t\t\t</build>\n\t\t</profile>\n\t</profiles>\n\t<properties>\n\t\t<share>u:\\SCOKART_Gilles\\Public</share>\n\t</properties>\n{code}\n\nactivate the profile."
    ],
    [
        "MNG-4620",
        "MNG-2809",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "Can't activate a profile by checking for the presence of a file in ${user.home} The following won't activate. If I move it to a path without a space it works. This is for windows xp.\n<file><exists>${user.home}/.m2/ydoc/lib/ydoc.jar</exists></file>"
    ],
    [
        "MNG-4620",
        "MNG-3017",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "Profile activation by file fails when maven is run outside the pom's directory When calling maven outside the pom's directory, the profile activation fails:\n\nmacb:~/Development/maven-test/parent jl$ mvn install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO]   Example module2\n[INFO] ----------------------------------------------------------------------------\n....\n\n\nmacb:~/Development/maven-test jl$ mvn -f parent/pom.xml install\n[INFO] Scanning for projects...\n[INFO] Reactor build order:\n[INFO]   Example parent\n[INFO]   Example module1\n[INFO] ----------------------------------------------------------------------------\n...."
    ],
    [
        "MNG-4620",
        "MNG-3140",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "add support for ${basedir} property in profile activation The profile <activation> supports file based activation (exists/missing), but properties are not supported to set the path.\n\nMy project use such a file-based activation, based on some generated-source file :\n<activation>\n        <file>\n          <missing>target/generated-sources/sql2java.tstamp</missing>\n        </file>\n</activation>\n\nMy project is a module, and when I run the project from the parent project the path is considered based on current dir (parent root) and not module root, so the profile gets activated but shouldn't.\n\nThere's no support for properties in profile activation. I can understand this as profile can themself change properties. Support for the ${basedir} property could solve this issue. As this is a default maven property, it should be immutable, so have no impact on profiles activations and other properties setup.\n\nI would like to submit a patch, to enhance FileProfileActivator and replace ${basedir} with actual value in isActive, but I don't know where to get the basedir value.\n\n"
    ],
    [
        "MNG-4620",
        "MNG-3524",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "Profile to be activated when file is missing is always activated When I run \"mvn integration-test\" with the attached pom.xml, the antrun:run goal is always executed, even when the ${project.build.directory}/built file is present.\n\nI would expect that the <missing> element would ensure that the profile containing the antrun:run goal would only be activated when that file is missing."
    ],
    [
        "MNG-4620",
        "MNG-4120",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "Profile activation should be per module In a multi-module-project, one might wish to run certain targets dependent on the existance of some file or directory.\n\nIn a single-module-project, I'd say\n\n<profiles><profile><id>do-if-file-exists</id>\n<activation><exists>some/special/path</exists></activation>\n<plugins><!-- my specific configuration --></plugins></profile></profiles>\n\nThis however does not work on a per-module base in a multi-module project, but the profile is (de)activated depending on the situation on the run pom only, and this is not even documented.\n\nIn my opinion, profile activation should be on a per-module basis."
    ],
    [
        "MNG-4620",
        "MNG-4174",
        "Reporting profiles not executed in child modules. In a parent pom there's a profile that's activated on the existence of a directory/file. Add that pom as the parent of a sub-module in a multi-module build; the profile activation never happens. If I build that module independently, then the profile activation works as expected.\n\nAn example project has been attached.",
        "Inheritance from profiles from parent-pom to child-pom what is the problem with the <activation> tag wich is passed from a parent-pom (and works there) to a child-pom.?!\nIn the child-pom, the <activation> tag (for example with an <exists> clause) isn\u00b4t observed.\nI\u00b4ve an example project attached...\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Parent POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<parent>\n\t\t<artifactId>root</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version> \n\t</parent>-\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces</groupId>\n\t<artifactId>samples</artifactId>\n\t<packaging>pom</packaging>\n\t<name>RichFaces Components Examples</name>\n\t<url>http://labs.jboss.com/jbossrichfaces/samples</url>\n\n\n\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>TEST_PROFILE</id>\n\t\t\t<activation>\n\t\t\t\t<file>\n\t\t\t\t\t<exists>123text.txt</exists>\n\t\t\t\t</file>\t\t\t\n\t\t\t</activation>\n\t\t\t<build>\n\t\t\t\t<plugins>\n\t\t\t\t\t<plugin>\n\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>1.4</source>\n\t\t\t\t\t\t\t<target>1.4</target>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</plugin>\n\t\t\t\t</plugins>\n\t\t\t</build>\n\t\t\t<dependencies>\n\t\t\t\t\n\t\t\t</dependencies>\n\t\t</profile>\n\n\t</profiles>\n\t<modules>\n\n  </modules>\n</project>\n\n---------------------------------------------------------------------------------------------------------\nXXXXXXXXXXXXXXXX Child POM XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n---------------------------------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<project>\n\t<parent>\n\t\t<artifactId>samples</artifactId>\n\t\t<groupId>org.richfaces</groupId>\n\t\t<version>3.2.3-SNAPSHOT</version>\n\t</parent>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.richfaces.samples</groupId>\n\t<artifactId>beanValidatorSample</artifactId>\n\t<packaging>war</packaging>\n\t<name>beanValidatorSample Maven Webapp</name>\n\t<version>3.2.3-SNAPSHOT</version>\n\t<build>\n\t\t<finalName>beanValidatorSample</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.5</source>\n\t\t\t\t\t<target>1.5</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t\n</project>\n"
    ],
    [
        "MNG-4627",
        "MNG-2259",
        "error in opening zip file Maven sometimes downloads artifact from repository (a jar), but the repository is no longer there (often html page is fetched). \nMaven thinks it's a proper jar and continues build. Later, it fails with error in opening zip file.\n\nReproduction steps:\ndownload:\nhttp://svn.apache.org/repos/asf/ode/branches/APACHE_ODE_1.X/ rev. 931628\n\ndo mvn install. It ends with this:\n\nDownloading: https://maven-repository.dev.java.net/nonav/repository//xalan/jars/xalan-2.7.1.jar\n347b downloaded  (xalan-2.7.1.jar)\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '58bd24b3f26e94ee0bcb402a2abf301d3456e146'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository//xalan/jars/xalan-2.7.1.jar\n347b downloaded  (xalan-2.7.1.jar)\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '58bd24b3f26e94ee0bcb402a2abf301d3456e146'; remote = '<!DOCTYPE' - IGNORING\n[INFO] [compiler:compile {execution: default-compile}]\n[INFO] Compiling 87 source files to /home/joker/ode-1.X/utils/target/classes\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Compilation failure\nerror: error reading /home/joker/.m2/repository/xalan/xalan/2.7.1/xalan-2.7.1.jar; error in opening zip file\n\n",
        "Maven should check the contents of the POMs and jars that it downloads Sometimes they are corrupt."
    ],
    [
        "MNG-4627",
        "MNG-2490",
        "error in opening zip file Maven sometimes downloads artifact from repository (a jar), but the repository is no longer there (often html page is fetched). \nMaven thinks it's a proper jar and continues build. Later, it fails with error in opening zip file.\n\nReproduction steps:\ndownload:\nhttp://svn.apache.org/repos/asf/ode/branches/APACHE_ODE_1.X/ rev. 931628\n\ndo mvn install. It ends with this:\n\nDownloading: https://maven-repository.dev.java.net/nonav/repository//xalan/jars/xalan-2.7.1.jar\n347b downloaded  (xalan-2.7.1.jar)\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '58bd24b3f26e94ee0bcb402a2abf301d3456e146'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository//xalan/jars/xalan-2.7.1.jar\n347b downloaded  (xalan-2.7.1.jar)\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '58bd24b3f26e94ee0bcb402a2abf301d3456e146'; remote = '<!DOCTYPE' - IGNORING\n[INFO] [compiler:compile {execution: default-compile}]\n[INFO] Compiling 87 source files to /home/joker/ode-1.X/utils/target/classes\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Compilation failure\nerror: error reading /home/joker/.m2/repository/xalan/xalan/2.7.1/xalan-2.7.1.jar; error in opening zip file\n\n",
        "invalid remote repository metadata file installed in local repo When I install my project, a metadata file is placed in my local repository for each of the remote repositories my project uses.  For some reason, maven is creating an invalid remote repository file.  This breaks my m2eclipse integration and eclipse complains that it can't read the metadata file.\n\n\nhere are the contents of maven-metadata-codecrate-maven-repo.xml that's in my local repository:\n<HTML><HEAD><META HTTP-EQUIV=\"Refresh\" CONTENT=\"0.1; URL=/com/codecrate/shard/shard-dice/0.5.0-SNAPSHOT/maven-metadata.xml\">\n<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no cache\">\n<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">\n</HEAD></HTML>\n\nThis is blatently wrong, and should be more like this maven-metadata-spring-rich-client-maven-repo.xml file:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><metadata>\n  <groupId>com.codecrate.shard</groupId>\n  <artifactId>shard-dice</artifactId>\n  <version>0.5.0-SNAPSHOT</version>\n</metadata>\n"
    ],
    [
        "MNG-4655",
        "MNG-3043",
        "'mvn test' tries to locate tests jar of other module in repository Normally when running 'compile' or 'test' phases, Maven uses the path to the build directory ('target/classes') of modules in the dependency list. \n\nHowever, if the dependency list contains a dependency with classifier 'tests' (that was created with test-jar goal of the jar plugin), then it is searched in the local repository. \n\nI imagine the issue is because the dependency is on something that is created in the package stage and therefore doesn't exist in the 'test' phase. However, I think there should be a way to get to target/test-classes (similarly to getting target/classes in compile) \n\nNote: In my case extracting the dependency test code to a separate module is not an option since the module has tests that rely on it and it relies on the core code of the module, creating a cyclic dependency.",
        "Allow 'mvn test' to work with test-jar dependencies in a reactor Basically the issue is demonstrated by MNG-2045, but instead of running 'mvn install', you run 'mvn test'.\n\nTest classes of dependencies should be resolved from the reactor, just as main classes, if there's no archive available.\n\nI'm not sure how to go about this. Specifying a dependency on something with <type>test-jar</type>,\nand having that dependency declare the maven-jar-plugin with the 'test-jar' goal is insufficient.\nPerhaps we can just add a standard classifier that maven is aware of, in this case 'tests'. The jar packaging\nwould export this as a known classifier, and tells maven how it contributes to what classpath.\n\nSince test sources are a first class citizen, just as main sources are (they have the same phases, same\nelements in the pom (but differently named)).\n\nIt seems logical to me that somehow the test classes should be made available to dependencies,\nif they declare a dependency with classifier 'tests'."
    ],
    [
        "MNG-4655",
        "MNG-3076",
        "'mvn test' tries to locate tests jar of other module in repository Normally when running 'compile' or 'test' phases, Maven uses the path to the build directory ('target/classes') of modules in the dependency list. \n\nHowever, if the dependency list contains a dependency with classifier 'tests' (that was created with test-jar goal of the jar plugin), then it is searched in the local repository. \n\nI imagine the issue is because the dependency is on something that is created in the package stage and therefore doesn't exist in the 'test' phase. However, I think there should be a way to get to target/test-classes (similarly to getting target/classes in compile) \n\nNote: In my case extracting the dependency test code to a separate module is not an option since the module has tests that rely on it and it relies on the core code of the module, creating a cyclic dependency.",
        "Dependency on test-jar is not resolved with 'package' target, must use 'install' The multi-module project looks like this:\n/ipb -- this is where the build is run from\n/ipb-base -- this guy builds a test jar, ipb-base-1.0-SNAPSHOT-tests.jar\n/ipb-something, it has some tests that use ipb-base-1.0-SNAPSHOT-tests.jar so its dependency looks like this:\n\n<!-- regular stuff from base project -->\n    <dependency>\n      <groupId>com.exigen.ipb</groupId>\n      <artifactId>ipb-base</artifactId>\n    </dependency>\n<!-- stuff for unit tests from base project -->\n    <dependency>\n      <groupId>com.exigen.ipb</groupId>\n      <artifactId>ipb-base</artifactId>\n      <type>test-jar</type>\n      <scope>test</scope>\n    </dependency>\n\nBoth /ipb-base and /ipb-something are packaged as jars.\n\nNow when the build is run as 'mvn clean package' it cannot resolve the dependecy as it is not in the repo.\n\nRuning build as 'mvn clean install' does the trick however this seems to be a workaround -- one would expect 'clean package' to do the job.\n"
    ],
    [
        "MNG-4661",
        "MNG-4648",
        "NPE in DefaultPluginRealmCache.pluginHashCode() mvn tomcat:run-war in https://test.kuali.org/svn/student/ks-web/branches/ks-web-dev\nWorks with mvn 2.2.1\n\n    George\n\n\n\n[ERROR] NullPointerException\njava.lang.NullPointerException\n\tat org.apache.maven.plugin.DefaultPluginRealmCache.pluginHashCode(DefaultPluginRealmCache.java:161)\n\tat org.apache.maven.plugin.DefaultPluginRealmCache$CacheKey.<init>(DefaultPluginRealmCache.java:73)\n\tat org.apache.maven.plugin.DefaultPluginRealmCache.get(DefaultPluginRealmCache.java:114)\n\tat org.apache.maven.plugin.internal.DefaultMavenPluginManager.setupPluginRealm(DefaultMavenPluginManager.java:261)\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.getPluginRealm(DefaultBuildPluginManager.java:184)\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:80)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:133)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:77)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:69)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:82)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:54)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.singleThreadedBuild(DefaultLifecycleExecutor.java:218)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:190)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:246)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:95)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:430)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:160)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:124)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\n[ERROR] \n",
        "NullPointerException thrown from DefaultPluginRealmCache#pluginHashCode method if project-level plugin dependency misses version As a user i would like to see better error reporting from DefaultPluginRealmCache#pluginHashCode method\n\nCurrently it calculates hash value based on a dependency metadata, but if I omit version it fails with NullPointer exception.\n\nIt would be more user friendly to validate metadata prior to calculating hash value and to display more meaningful error to the end user.\n\nTest scenario:\n - configure plugin and create dependencies\n - add dependency but DO NOT specify version\n - run maven such that plugin is invoked\nmaven will fail without reporting which dependency doesn't have version"
    ],
    [
        "MNG-4704",
        "MNG-4611",
        "Maven 3.0 beta 1 password decryption log verbosity with FileNotFoundException I'm using decrypted passwords like described here:\nhttp://blogs.jfrog.org/2009/01/avoiding-clear-text-passwords-in-maven.html\n\nIt works fine no problem. The only problem I have now, is the log verbosity while using mvn -X or Maven in DEBUG mode.\nIt prints out hundreds of stack traces and so becomes unusable.\n\nPlease change the logging of this kind of messages. Maybe log only the first stack trace and then stop repeating this stack trace printing.\n\nI don't have a settings-security.xml, because I don't need one and so I get this FileNotFoundException stack trace:\n[DEBUG] Failed to decrypt password for server central: org.sonatype.plexus.components.sec.dispatcher\n.SecDispatcherException: java.io.FileNotFoundException: C:\\Dokumente und Einstellungen\\stijoc\\.m2\\\nsettings-security.xml (Das System kann die angegebene Datei nicht finden)\norg.sonatype.plexus.components.sec.dispatcher.SecDispatcherException: org.sonatype.plexus.components\n.sec.dispatcher.SecDispatcherException: java.io.FileNotFoundException: C:\\Dokumente und Einstellunge\nn\\stijoc\\.m2\\settings-security.xml (Das System kann die angegebene Datei nicht finden)\n        at org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher.decrypt(DefaultSecDisp\natcher.java:121)\n        at org.apache.maven.settings.crypto.DefaultSettingsDecrypter.decrypt(DefaultSettingsDecrypte\nr.java:106)\n        at org.apache.maven.settings.crypto.DefaultSettingsDecrypter.decrypt(DefaultSettingsDecrypte\nr.java:62)\n        at org.apache.maven.repository.legacy.LegacyRepositorySystem.injectAuthentication(LegacyRepo\nsitorySystem.java:477)\n        at org.apache.maven.project.DefaultProjectBuildingHelper.createArtifactRepositories(DefaultP\nrojectBuildingHelper.java:117)\n        at org.apache.maven.project.DefaultModelBuildingListener.buildExtensionsAssembled(DefaultMod\nelBuildingListener.java:127)\n        at org.apache.maven.model.building.ModelBuildingEventCatapult$1.fire(ModelBuildingEventCatap\nult.java:43)\n        at org.apache.maven.model.building.DefaultModelBuilder.fireEvent(DefaultModelBuilder.java:88\n8)\n        at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:288)\n        at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:271)\n        at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:262)\n        at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:129)\n        at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:117)\n        at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:245)\n        at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:204)\n        at org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedProject(MavenMetad\nataSource.java:576)\n        at org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:1\n89)\n        at org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector.recurse(Defaul\ntLegacyArtifactCollector.java:533)\n        at org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector.recurse(Defaul\ntLegacyArtifactCollector.java:594)\n        at org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector.collect(Defaul\ntLegacyArtifactCollector.java:150)\n        at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolve\nr.java:590)\n        at org.apache.maven.repository.legacy.LegacyRepositorySystem.resolve(LegacyRepositorySystem.\njava:325)\n        at org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver.resolve(DefaultPluginD\nependenciesResolver.java:123)\n        at org.apache.maven.plugin.internal.DefaultMavenPluginManager.createPluginRealm(DefaultMaven\nPluginManager.java:324)\n        at org.apache.maven.plugin.internal.DefaultMavenPluginManager.setupPluginRealm(DefaultMavenP\nluginManager.java:272)\n        at org.apache.maven.plugin.DefaultBuildPluginManager.getPluginRealm(DefaultBuildPluginManage\nr.java:184)\n        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.j\nava:80)\n        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:133)\n        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:77)\n        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:69)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBu\nilder.java:82)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBu\nilder.java:54)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.singleThreadedBuild(DefaultLifecycleE\nxecutor.java:218)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java\n:190)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:246)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:95)\n        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:430)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:160)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:124)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)",
        "3.0-alpha7 password decryption log verbosity The log verbosity of password decryption in 3.0-alpha7 that makes the mvn -X option effectively unusable.  The password I've got in my settings.xml file looks like this: \n\n            <password>{DESede}y+qq...==</password> \n\nThis is an Artifactory setup password and it does work, however mvn -X logs exceptions about it so frequently that it makes -X almost impossible to use.  Is there some way I can suppress this behavior through configuration?  The exception that it logs over and over again is: \n\n[DEBUG] Failed to decrypt password for server central: org.sonatype.plexus.components.cipher.PlexusCipherException: java.lang.ArrayIndexOutOfBoundsException \norg.sonatype.plexus.components.sec.dispatcher.SecDispatcherException: org.sonatype.plexus.components.cipher.PlexusCipherException: java.lang.ArrayIndexOutOfBoundsException \n... \nCaused by: java.lang.ArrayIndexOutOfBoundsException \n        at java.lang.System.arraycopy(Native Method) \n        at org.sonatype.plexus.components.cipher.PBECipher.decrypt64(PBECipher.java:175) \n        ... 47 more \n"
    ],
    [
        "MNG-4708",
        "MNG-2714",
        "I am not able to add name space prefixes to pom.xml consider following pom.xml, I am not able to run package goal on this pom.xml\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<abc:project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:abc=\"http://maven.apache.org/POM/4.0.0\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>mavenproj</groupId>\n  <artifactId>mavenproj</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>2.0.2</version>\n      </plugin>\n    </plugins>\n  </build>\n  <parent>\n    <groupId>AppPOM</groupId>\n    <artifactId>AppPOM</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n</abc:project>\n",
        "Maven does not comply to XML rules regarding prefixes. I am new to Maven and have been trying to learn how to create a simple project.\nLet me walk through my scenario of creating a pom.xml file:\n1. I bind the {http://maven.apache.org/POM/4.0.0} namespace (defined at \"http://maven.apache.org/maven-v4_0_0.xsd\") to Java classes using an XML Binding solution.\n2. I use the bound classes to create a simple <project/> as one would expect to see in a pom.xml file.\n3. I marshal the bound Java objects into xml and write it into pom.xml. Here is the xml I use:\n<ns1:project\n\txmlns:ns1=\"http://maven.apache.org/POM/4.0.0\">\n\t<ns1:modelVersion>4.0.0</ns1:modelVersion>\n\t<ns1:groupId>com.myapp</ns1:groupId>\n\t<ns1:artifactId>sample-project</ns1:artifactId>\n\t<ns1:name>Sample Maven Project</ns1:name>\n\t<ns1:version>1.0</ns1:version>\n\t<ns1:developers>\n\t\t<ns1:developer>\n\t\t\t<ns1:id>ssafris</ns1:id>\n\t\t\t<ns1:name>Seva Safris</ns1:name>\n\t\t</ns1:developer>\n\t</ns1:developers>\n\t<ns1:build>\n\t\t<ns1:sourceDirectory>${basedir}/src/java</ns1:sourceDirectory>\n\t</ns1:build>\n</ns1:project>\n4. I run mvn, and am promptly given a \"Not a v4.0.0 POM.\" exception.\n\nTracing through Maven's source, I went to the exact location of the exception in DefaultMavenProjectBuilder.java. On line 1297 it has:\n"
    ],
    [
        "MNG-4708",
        "MNG-2715",
        "I am not able to add name space prefixes to pom.xml consider following pom.xml, I am not able to run package goal on this pom.xml\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<abc:project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:abc=\"http://maven.apache.org/POM/4.0.0\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>mavenproj</groupId>\n  <artifactId>mavenproj</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>2.0.2</version>\n      </plugin>\n    </plugins>\n  </build>\n  <parent>\n    <groupId>AppPOM</groupId>\n    <artifactId>AppPOM</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n</abc:project>\n",
        "Maven does not comply to XML rules regarding prefixes. I am new to Maven and have been trying to learn how to create a simple project.\nLet me walk through my scenario of creating a pom.xml file:\n1. I bind the {http://maven.apache.org/POM/4.0.0} namespace (defined at \"http://maven.apache.org/maven-v4_0_0.xsd\") to Java classes using an XML Binding solution.\n2. I use the bound classes to create a simple <project/> as one would expect to see in a pom.xml file.\n3. I marshal the bound Java objects into xml and write it into pom.xml. Here is the xml I use:\n<ns1:project\n\txmlns:ns1=\"http://maven.apache.org/POM/4.0.0\">\n\t<ns1:modelVersion>4.0.0</ns1:modelVersion>\n\t<ns1:groupId>com.myapp</ns1:groupId>\n\t<ns1:artifactId>sample-project</ns1:artifactId>\n\t<ns1:name>Sample Maven Project</ns1:name>\n\t<ns1:version>1.0</ns1:version>\n\t<ns1:developers>\n\t\t<ns1:developer>\n\t\t\t<ns1:id>ssafris</ns1:id>\n\t\t\t<ns1:name>Seva Safris</ns1:name>\n\t\t</ns1:developer>\n\t</ns1:developers>\n\t<ns1:build>\n\t\t<ns1:sourceDirectory>${basedir}/src/java</ns1:sourceDirectory>\n\t</ns1:build>\n</ns1:project>\n4. I run mvn, and am promptly given a \"Not a v4.0.0 POM.\" exception.\n\nTracing through Maven's source, I went to the exact location of the exception in DefaultMavenProjectBuilder.java. On line 1297 it has:\n\nif ( modelSource.indexOf( \"<modelVersion>4.0.0\" ) < 0 )\n{\n    throw new InvalidProjectModelException( projectId, pomLocation, \"Not a v4.0.0 POM.\" );\n}\n\nSince modelSource is checked explicitly for <modelVersion[...], my <project/> xml as shown above will fail this test because it has: <ns1:modelVersion[...].\n\nThis is most definitely a bug in Maven and should be fixed as soon as possible. The workaround is to use a xmlns=\"http://maven.apache.org/POM/4.0.0\" and define all elements without a prefix. However, my use of xmlns:ns1=\"http://maven.apache.org/POM/4.0.0\" should not break Maven as it is not merely legal by xml conventions, but is also a better practice for xml documents.\n\nI hope you see the importance of getting this bug fixed: My use of a XML Binding solution to bind Maven's xml to Java allows me a strongly-typed level of indirection that will deterministically create proper xml that will validate successfully. If this bug is not fixed, then this level of indirection is not possible (or very very very difficult because the XML Binding solution would have to be hacked to use the xmlns=\"[...]\" convention). I have only found this one instance of where the bug is obvious, but perhaps there are more locations in Maven where the same kind of error can occur.\n\nThank you for your time, and I hope you consider this issue as seriously as I do.\n\nSincerely,\n\nSeva Safris"
    ],
    [
        "MNG-4722",
        "MNG-3991",
        "Maven does not validate <scope> values <scope>xx</scope> does not generate an error. IMO it should.",
        "POM validator allows <scope>optional</scope> but it is not valid. In my project I did a mistake and I wrote\n{code}\n<dependency>\n\t<groupId>org.slf4j</groupId>\n\t<artifactId>slf4j-log4j12</artifactId>\n\t<version>1.5.0</version>\n\t<scope>optional</scope>\n</dependency>\n{code}\n\nbut in fact I intended to write\n{code}\n<dependency>\n\t<groupId>org.slf4j</groupId>\n\t<artifactId>slf4j-log4j12</artifactId>\n\t<version>1.5.0</version>\n\t<optional>true</optional>\n</dependency>\n{code}\n\nI'm very surprised that Maven doesn't detect such a mistake during the validate phase. Could it be possible to add a check to allow only valid scopes.\n\nThanks"
    ],
    [
        "MNG-4726",
        "MNG-4301",
        "Maven generates incorrect MD5 and SHA1 on deply The project exhibiting the problem is JCSP at Codehaus, there are no wiki or web pages at Codehaus for the project, but the Codehaus project page is at http://xircles.codehaus.org/projects/jcsp. (This is a mirror of the Kent Subversion repository in Git for the purpose of getting artefacts into the Maven repository.)  To date only the 1.1-rc5-SNAPSHOT has been tried there is no release upload.\n\nThere are issue with the tests so I have to do \"mvn -Dmaven.test.skip=true deploy\".\n\nFirst deploy appears to go to plan, but the checksums are written wrong.  Every deploy after that gets errors of the form:\n{code}\n[INFO] [deploy:deploy {execution: default-deploy}]\n[INFO] Retrieving previous build number from codehaus.org\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '110ada6eb9e8c34d368f3bd1a6b7ffe0ab4f3f25'; remote = '35bed1f3738459f97c0937df4a741f6182749a82' - RETRYING\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '110ada6eb9e8c34d368f3bd1a6b7ffe0ab4f3f25'; remote = '35bed1f3738459f97c0937df4a741f6182749a82' - IGNORING\nUploading: https://dav.codehaus.org/snapshots.repository/jcsp/org/codehaus/jcsp/jcsp/1.1-rc5-SNAPSHOT/jcsp-1.1-rc5-20100712.171732-2.jar\n691K uploaded  (jcsp-1.1-rc5-20100712.171732-2.jar)\n[INFO] Uploading project information for jcsp 1.1-rc5-20100712.171732-2\n[INFO] Retrieving previous metadata from codehaus.org\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '7c238a5ed9006729bd1dffbe45b41a8259c502cc'; remote = '1f7bcc732be23a69e3c087194e1693f7c9439ba2' - RETRYING\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '7c238a5ed9006729bd1dffbe45b41a8259c502cc'; remote = '1f7bcc732be23a69e3c087194e1693f7c9439ba2' - IGNORING\n[INFO] Uploading repository metadata for: 'artifact org.codehaus.jcsp:jcsp'\n[INFO] Retrieving previous metadata from codehaus.org\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '110ada6eb9e8c34d368f3bd1a6b7ffe0ab4f3f25'; remote = '35bed1f3738459f97c0937df4a741f6182749a82' - RETRYING\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '110ada6eb9e8c34d368f3bd1a6b7ffe0ab4f3f25'; remote = '35bed1f3738459f97c0937df4a741f6182749a82' - IGNORING\n[INFO] Uploading repository metadata for: 'snapshot org.codehaus.jcsp:jcsp:1.1-rc5-SNAPSHOT'\n[INFO] [bundle:deploy {execution: default-deploy}]\n[INFO] Remote OBR update disabled (enable with -DremoteOBR)\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 34 seconds\n[INFO] Finished at: Mon Jul 12 18:18:02 BST 2010\n[INFO] Final Memory: 26M/292M\n[INFO] ------------------------------------------------------------------------\n{code}\n\nIn all cases anyone attempting to obtain the artefacts from the Codehaus snapshot repository is told there is a problem with the checksums.\n \nMy version of Maven locally is:\n{code}\n|> mvn -version\nApache Maven 2.2.1 (r801777; 2009-08-06 20:16:01+0100)\nJava version: 1.6.0_18\nJava home: /usr/lib/jvm/java-6-openjdk/jre\nDefault locale: en_GB, platform encoding: UTF-8\nOS name: \"linux\" version: \"2.6.32-23-generic\" arch: \"amd64\" Family: \"unix\"\n{code}",
        "Invalid checksums on deploy when using webdav without extension With maven 2.2.1, our deployments via webdav are producing invalid checksums, similar to the issue reported in MNG-4235.\n\nFrom maven 2.0.8 and previous, the following build extension was required to deploy via webdav:\n\n<extensions>\n   <extension>\n      <groupId>org.apache.maven.wagon</groupId>\n      <artifactId>wagon-webdav</artifactId>\n      <version>1.0-beta-2</version>\n   </extension>\n</extensions>\n\nStarting with maven 2.0.9 (see MNG-3418), webdav was included by default and the aforementioned build extension must be removed from the project.  If it was included in the project the deployment would fail as Maven would report multiple versions of wagon-webdav present.\n\nWith maven 2.2.0, our deployment suffered from invalid checksums reported in MNG-4235.\n\nWith maven 2.2.1, we still see the invalid checksums on deployment as reported in MNG-4235.  However, I've found that if you add the above build extension into the project, we don't experience this issue (of generating invalid checksums).  Is this workaround an intentional change brought about by the fix of MNG-4235?"
    ],
    [
        "MNG-4730",
        "MNG-4654",
        "packaging aar declared in one module affects the following modules When there is an aar module in the reactor, it causes the following modules to install (and then to deploy) their main artifact with the '.aar' extension, although they are regular JAR modules. This is a regression from 2.1.0-M1.\nAttached is a project that demonstrates the problem. Inside there's also a log of mvn --debug clean install.",
        "Maven erroneously selects artifact handler contributed by extension plugin for use with project main artifact based on the handler's packaging rather than type This is mostly to track the result of [Compilation problem with Maven 3.0-beta-1|http://www.mail-archive.com/dev@maven.apache.org/msg84507.html] reported by Henrique Prange. In essence, given an artifact handler with\n{code:xml}\n<configuration>\n  <type>woframework</type>\n  <extension>jar</extension>\n  <packaging>jar</packaging>\n</configuration>\n{code}\nand a project with {{<packaging>woframework</packaging>}} using an extension plugin contributing the above artifact handler, Maven ignores the artifact handler because it tries to match {{project.packaging}} with {{artifactHandler.packaging}}. As a result, the project's main artifacts ends up being installed/deployed with the file extension \"woframework\" instead of \"jar\"."
    ],
    [
        "MNG-4734",
        "MNG-4486",
        "Maven pom resolving does not respect a 301 permanent redirect When an attempt is made to depend upon the following dependency:\n\ncom/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nInstead of downloading the pom, a 301 Moved Permanently is saved in it's place. This breaks all maven builds on the particular machine:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"http://download.java.net/maven/1/com.sun.tools.xjc.maven2/poms/maven-jaxb-plugin-1.1.pom\">here</a>.</p>\n<hr>\n<address>Apache Server at maven-repository.dev.java.net Port 443</address>\n</body></html>\n{code}\n\nThis looks like a regression since v2.2.0, as another machine running v2.2.0 downloads the pom for the above artifact correctly.\n\nThis is what it looks like when it breaks:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: com.sun.tools.xjc.maven2:maven-jaxb-plugin\nPOM Location: /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nReason: Not a v4.0.0 POM. for project com.sun.tools.xjc.maven2:maven-jaxb-plugin at /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n",
        "Maven appears to ignore http 301; downloads html as jar Our Maven builds are configured with just two repositories,\nhttp://repo1.maven.org/maven2 and http://scala-tools.org/repo-releases\n(We use Artifactory as a central repo cache)\n\nBut since Friday, I've noticed builds failing because builds are trying to\ndownload jms-1.1.jar from maven-repository.dev.java.net even though that is not in our repo path\nor configuration.\n\nwhen I run with -X I see a failure trying to download jmx-1.1.jar from central,\nfollowed by:\n\n Downloading:\nhttps://maven-repository.dev.java.net/nonav/repository/javax.jms/jars/jms-1.1.jar\n 347b downloaded\n [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local =\n'd0b7ce08d257e8fefdc6ad0f0f0368635bbeb3d0'; remote = '<!DOCTYPE' - RETRYING\n\nWorse, what gets downloaded is not a jar but some html. Maven seems to\nignore the 301 status and thinks this is a jar. The contents are:\n\n   <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n   <html><head>\n   <title>301 Moved Permanently</title>\n   </head><body>\n   <h1>Moved Permanently</h1>\n   <p>The document has moved <a href=\"\nhttp://download.java.net/maven/1/javax.jms/jars/jms-1.1.jar\">here</a>.</p>\n   <hr>\n   <address>Apache Server at maven-repository.dev.java.net Port\n443</address>\n   </body></html>\n\nhttp://repo2.maven.org/maven2/javax/jms/jms/1.1/ contains a pom.xml but no jar.\nHowever, http://repository.jboss.com/maven2/javax/jms/jms/1.1/ has the jar.\n\nmy project does not even depend on jms directly; it appears to be one of the\ninternal Maven compile or site targets that cause it to get loaded, but I'm not sure which.\n\nIn artifactory's config, we specify:\n\n  <remoteRepositories>\n       <remoteRepository>\n           <key>repo1</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n\n <excludesPattern>org/artifactory/**,org/jfrog/**</excludesPattern>\n           <url>http://repo1.maven.org/maven2</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n\n       <remoteRepository>\n           <key>scala-tools.org</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n           <url>http://scala-tools.org/repo-releases</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n  </remoteRepositories>\n\nMy ~/.m2/settings.xml is empty and /usr/local/maven/conf/settings.xml simply\npoints to my Artifactory server, no other repos in the profile:\n\n <profiles>\n   <profile>\n     <id>artifactory</id>\n     <activation><activeByDefault>true</activeByDefault></activation>\n\n        <repositories>\n            <repository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </repository>\n            <repository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </repository>\n        </repositories>\n        <pluginRepositories>\n            <pluginRepository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </pluginRepository>\n            <pluginRepository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </pluginRepository>\n        </pluginRepositories>\n\n   </profile>\n </profiles>\n\nI was able to workaround this by downloading jms-1.1.jar and putting it in our\nArtifactory repo, but I think that is simply masking a problem, so this will\nprobably pop back up.\n\nPerhaps the problem is at central; I don't know if it every had a jms-1.1.jar;\nas I said, we did not depend on it directly, so we suspect some other\nplugin now uses it that did not, or the jar was incorrectly removed\nfrom central. But the fact that Maven downloaded the html as a jar\ncaused problems, because after each build failure, I had to manually\nclean up my bad ~/.m2/repository\n"
    ],
    [
        "MNG-4734",
        "MNG-4524",
        "Maven pom resolving does not respect a 301 permanent redirect When an attempt is made to depend upon the following dependency:\n\ncom/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nInstead of downloading the pom, a 301 Moved Permanently is saved in it's place. This breaks all maven builds on the particular machine:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"http://download.java.net/maven/1/com.sun.tools.xjc.maven2/poms/maven-jaxb-plugin-1.1.pom\">here</a>.</p>\n<hr>\n<address>Apache Server at maven-repository.dev.java.net Port 443</address>\n</body></html>\n{code}\n\nThis looks like a regression since v2.2.0, as another machine running v2.2.0 downloads the pom for the above artifact correctly.\n\nThis is what it looks like when it breaks:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: com.sun.tools.xjc.maven2:maven-jaxb-plugin\nPOM Location: /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nReason: Not a v4.0.0 POM. for project com.sun.tools.xjc.maven2:maven-jaxb-plugin at /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n",
        "Error while installing dependencies Actually i am new to maven, while i am trying to work on the example given in Maven Definitive guide pdf(example in Chapter 4) its giving me the below error. I have also attached pom.xml for your reference.\n\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk/poms/jmxtools-1.2.1.pom\n357b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b662aa01d4\n9d8a571aa79f67a1d4a92a7d9c6359'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk\n/poms/jmxtools-1.2.1.pom\n357b downloaded\n\n\nThanks,\nRamesh.V"
    ],
    [
        "MNG-4742",
        "MNG-4706",
        "Multi-threaded artifact resolver corrupts artifacts on download It seems that the artifact resolver is _not thread-safe_, resulting in corruption of artifacts as they are downloaded. \n\nWe have a large build and were seeing numerous CHECKSUM failures, even on Maven jars from Central. On closer inspection, the downloaded JARs themselves appeared corrupted, i.e. it wasn't just corrupt checksums. The other funny thing was that, for each build, it happened on random, _different_ JARs. This happened on JARs from any repository (public, or our own Nexus repo), so it had nothing to do with possible corruptions of our own jars on deploy.\n\nWe first tried all the suggestions on the Net, including setting the wagon provider to httpclient. Nothing worked. Then we found the answer:\n\n\t*-Dmaven.artifact.threads=1* \n\nAs soon as you restrict the artifact resolver to a single thread, the problem goes away (apparently the Maven default is to use up to 5 threads). This looks like a thread-safety issue, with threads perhaps overwriting each other's streams. \n\nWhat I don't understand is that this bug hasn't surfaced earlier, since we have a standard Maven installation. Note that it happens even when *not* using Nexus, i.e. when going directly to public repositories.",
        "Multithreaded building can create bad files for downloaded artifacts in local repository Within a parallel build, modules A and B can start at the same time and decide at the same time that they need to download artifact X. Since X is not available locally, both can start download of X. Both will download X and both will try to write the file for X to disk.\n\nOn Windows platforms, one of them can fail with file locking problems. On Unixes the contents of the written file can be non-deterministic.\n\nThis issue is related to MNG-2802 in the sense that it can create a corrupted artifact file in the local repository, and it can happen to ANY file written. But as opposed to MNG-2802 the synhronization needed to fix this issue is basically only within a single running maven process, so regular java mechanisms can apply, whereas MNG-2802 probably needs to use a totally different solution space.\n\n"
    ],
    [
        "MNG-4746",
        "MNG-1978",
        "A provided scoped transitive dependency of a provided scoped direct dependency will be omitted. Despite the fact that the whole Maven literature (I'm aware of, of course ;-))\n* the official web site (http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope)\n* the official online book 'Maven: The Complete Reference' (http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-transitive.html)\n* the book 'Maven: The Definitive Guide' ('Transitive dependencies and scope', Chapter 9, Page 164)\nstates that a provided scoped transitive dependency of a provided scoped direct dependency will become a provided dependency, Maven 2 just omitts this provided scoped transitive dependency.",
        "\"Provided\" scope transitive dependencies required + exclude dependencies for runtime scope only Why are provided scope dependencies not transitive?\n\nI have several examples in my project where I need to declare a dependency as on the compilation classpath but not on the runtime classpath and I need it to be transitive. I don't want the dependency to be packaged up in my deployment artifact but my entire multi-project hierarchy relies on the dependency.\n\nAt the moment, I have to workaround the problem, mostly by declaring duplicate provided scope dependencies in multiple projects.\n\nIf there's a well-known answer to this query then apologies, could it be placed in the \"Introduction to Dependency Mechanism\" documentation.\n\n\n\nI would also be able to model my dependency structure more accurately if I could <exclude/> a dependency from the runtime classpath only and keep it in the compile classpath.\n\nE.g. \n\n    <dependencies>\n        <dependency>\n            <groupId>SalesStation</groupId>\n            <artifactId>cds_ss_shared</artifactId>\n            <version>SNAPSHOT</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>SalesStation</groupId>\n                    <artifactId>ss_base_shared</artifactId>\n                    <!-- I want to be able to do this: -->\n                    <scope>runtime</scope> <!-- Exclude from runtime classpath only, not compile classpath -->\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>"
    ],
    [
        "MNG-4746",
        "MNG-2205",
        "A provided scoped transitive dependency of a provided scoped direct dependency will be omitted. Despite the fact that the whole Maven literature (I'm aware of, of course ;-))\n* the official web site (http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope)\n* the official online book 'Maven: The Complete Reference' (http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-transitive.html)\n* the book 'Maven: The Definitive Guide' ('Transitive dependencies and scope', Chapter 9, Page 164)\nstates that a provided scoped transitive dependency of a provided scoped direct dependency will become a provided dependency, Maven 2 just omitts this provided scoped transitive dependency.",
        "\"provided\" scope dependencies must be transitive A provided scope dependency can also be thought of as \"compile-only\".\n\nProject A requires Sybase JConnect on the runtime classpath. Project A declares a \"provided\" dependency on Sybase JConnect.\nProject B depends upon Project A. Project B declares a \"compile\" dependency on Project A.\nProject C depends upon Project B. Project C declares a \"compile\" dependency on Project B.\n\n{noformat}\nC\n| - compile dependency\nB\n| - compile dependency\nA\n| - provided dependency\nSybase JConnect\n{noformat}\n\nSo, does Project C transitively depend on Sybase JConnect. Yes, of course! The \"provided\" dependency needs to be transitive.\n\nUltimately, when Project C gets deployed, Sybase JConnect needs to be somewhere on the runtime classpath in order for the application to function. It's valid for Project C to assume that Sybase JConnect is available and use JDBC all over the Project C code. Project C is safe to do this because it can happily deduce that Sybase JConnect will be there in the runtime environment because Project A NEEDS IT.\n\nI've got Use Cases all over my aggregated build which make it absolutely critical and common sense that provided scope dependencies are transitive. For the (very rare) odd case where you don't want to inherit provided dependencies, you can <exclude/> them."
    ],
    [
        "MNG-4746",
        "MNG-2611",
        "A provided scoped transitive dependency of a provided scoped direct dependency will be omitted. Despite the fact that the whole Maven literature (I'm aware of, of course ;-))\n* the official web site (http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope)\n* the official online book 'Maven: The Complete Reference' (http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-transitive.html)\n* the book 'Maven: The Definitive Guide' ('Transitive dependencies and scope', Chapter 9, Page 164)\nstates that a provided scoped transitive dependency of a provided scoped direct dependency will become a provided dependency, Maven 2 just omitts this provided scoped transitive dependency.",
        "test scope should inherit provided scope When I run my tests, the classpath includes all my provided-scope dependencies. The docs online don't say they should be there, but I guess it makes sense, right? Provided scope means I need them to run, but they'll be available after I deploy. Therefore maven needs to provide them when I'm just running tests. So far so good.\n\nThe problem is that if my project relies on library A with a test scope, and A relies on B with a provided scope, I don't have B in my classpath when my project runs its tests.\n\nHere is the setup:\n\nProject depends on A with test scope.\nA depends on B with provided scope.\n\nWhen I run A's tests, I have B in my classpath.\nWhen I run Project's tests, I don't have B in my classpath.\n\nI see there were other bugs opened about how provided scope should be transitive, but they are closed. It looks like it is still not transitive through a test-scoped dependency.\n"
    ],
    [
        "MNG-4754",
        "MNG-4147",
        "long name and password combination fail upon authentication with maven repository with mvn 2.2.1 The problem seems to be with the wagon package or the module that calls wagon but I'm not a maven developer so I didn't look at what version of wagon is used. The only fix I could find was to revert to 2.2.0 which works.\n\nThis is an anonymized version of my repository credentials. I kept the length the same in both username and password\n    <server>\n      <id>repo</id>\n      <username>nmichalakis@xxxxxxxx.com</username>\n      <password>\\{DESede\\}xxxxxxxxxxxxxxxxxxxxxx==</password>\n    </server>\n\nHere is the exception I get (hiding the auth info):\n\njava.lang.RuntimeException: java.lang.IllegalArgumentException: Illegal character(s) in message header value: Basic bm1pXXXXXXXXXXXXXXXXXXXXpelN3\nPT0=\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1014)\n\tat sun.net.www.protocol.http.HttpURLConnection.getHeaderField(HttpURLConnection.java:2211)\n\tat java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:382)\n\tat sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:318)\n\tat org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:115)\n\tat org.apache.maven.wagon.StreamWagon.getInputStream(StreamWagon.java:116)\n\tat org.apache.maven.wagon.StreamWagon.getIfNewer(StreamWagon.java:88)\n\tat org.apache.maven.wagon.StreamWagon.get(StreamWagon.java:61)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:546)\n\tat org.apache.maven.artifact.manager.DefaultWagonManager.getArtifactMetadata(DefaultWagonManager.java:443)\n\tat org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager.resolve(DefaultRepositoryMetadataManager.java:97)\n\tat org.apache.maven.artifact.transform.AbstractVersionTransformation.resolveVersion(AbstractVersionTransformation.java:65)\n\tat org.apache.maven.artifact.transform.LatestArtifactTransformation.transformForResolve(LatestArtifactTransformation.java:41)\n\tat org.apache.maven.artifact.transform.DefaultArtifactTransformationManager.transformForResolve(DefaultArtifactTransformationManager.java:55)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:145)\n\tat org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:90)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:558)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:251)\n\tat org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedProject(MavenMetadataSource.java:163)\n\tat org.apache.maven.project.artifact.MavenMetadataSource.retrieve(MavenMetadataSource.java:299)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolveMetaVersion(DefaultPluginVersionManager.java:673)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolvePluginVersion(DefaultPluginVersionManager.java:187)\n\tat org.apache.maven.plugin.version.DefaultPluginVersionManager.resolvePluginVersion(DefaultPluginVersionManager.java:91)\n\tat org.apache.maven.plugin.DefaultPluginManager.verifyPlugin(DefaultPluginManager.java:179)\n\tat org.apache.maven.plugin.DefaultPluginManager.loadPluginDescriptor(DefaultPluginManager.java:1642)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.verifyPlugin(DefaultLifecycleExecutor.java:1540)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindPluginToLifecycle(DefaultLifecycleExecutor.java:1503)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:1282)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:534)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:362)\n\tat org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nIf I remove 3 characters from my username this exception is not thrown. Instead I get an (expected) authentication error.\n\nIt seems there was a bug in the past related to this, but it was on Maven 1 and it was fixed:\nhttp://jira.codehaus.org/browse/MAVEN-1273\n",
        "very long passwords cause LightweightHTTP wagon to line-wrap the Base64-encoded Authorization header I'll cross-file (and link) this issue into wagon, but Sun's HTTPURLConnection implementation uses a line-wrapping Base64 implementation. When passwords are very long, this causes an invalid HTTP request, since the Authorization header's value is line-wrapped."
    ],
    [
        "MNG-4758",
        "MNG-4592",
        "lastUpdated file created for releases I have a project depending transitively on easymock 2.4\n(http://repo2.maven.org/maven2/org/easymock/easymock/2.4/)\n\nWhen connecting to download the dependency, my network connection failed (for 5-10 seconds) which made maven stop with a connection timeout.\n\nThe issue is that a file has been created on my local repo for this release: easymock-2.4.jar.lastUpdated\n\nSo when i re-executed the mvn package command, Maven keeps stopping with the same error (connection timeout), whereas it is now came back and working.\n\nI understand the purpose of the lastUpdated file: for snapshots they are more than required. But i really don't understand why the lastUpdated is also applied to releases. If a project is deployed and depends on a release version, I think Maven should keep trying to get this dependency in all available repository until it is found, because it's an illegal state to not find it.\n\nAlso, by working in a large company, I really think this lastUpdated file on releases could really prevent or slow down Maven 3 adoption since this is quite an annoying think that will slow down people and increase the work load of the maven support team (at least because Maven will report false-problems that could be now solved).\n\nIs there an option or something that could be temporary put somewhere to get back to the same Maven 2 behavior ?\n\nThanks a lot,\n\nMathieu.",
        "Snapshot artifacts that could not be downloaded due to communication problems are \"blacklisted\" for a day by default. If an artifact could not be downloaded because of communication problems with the server Maven should not use the update check intervall before rechecking.\n\nThe fix for http://jira.codehaus.org/browse/MNG-3421 introduced a behaviour that has cost us some time to find a solution. We're facing network problems with one of our nexus servers and this results by default in a 24 hour \"blacklisting\" of that artifact. For a continuous integration scenario this is rather painful (build stays red for a whole day) and using a different policy increases the network overhead because then all snapshots are checked. For now we have a very ugly workaround that simply deletes all *.lastUpdated files from the local repository.\n\t\nA better solution from our point of view would be to only write the lastUpdated file if the resource really doesn't exist (DefaultWagonManager#getRemoteFile() threw ResourceDoesNotExistException?), but not if the wagon reported a communication problem (TransferFailedException?). That way the solution to MNG-3421 should still be valid, but without blocking CI in our case.\n\t\nIt would also be rather helpful if the real cause for such delayed lookups would be reported by default (\"Failure to resolve ... was cached in the local repository. Resolution will not be reattempted until ...\"). In our case we only had the standard error message in the log that the artifact could not be resolved from any repository and it took us a while to figure out that this was really because of the lastUpdated-check.\n"
    ],
    [
        "MNG-4758",
        "MNG-4673",
        "lastUpdated file created for releases I have a project depending transitively on easymock 2.4\n(http://repo2.maven.org/maven2/org/easymock/easymock/2.4/)\n\nWhen connecting to download the dependency, my network connection failed (for 5-10 seconds) which made maven stop with a connection timeout.\n\nThe issue is that a file has been created on my local repo for this release: easymock-2.4.jar.lastUpdated\n\nSo when i re-executed the mvn package command, Maven keeps stopping with the same error (connection timeout), whereas it is now came back and working.\n\nI understand the purpose of the lastUpdated file: for snapshots they are more than required. But i really don't understand why the lastUpdated is also applied to releases. If a project is deployed and depends on a release version, I think Maven should keep trying to get this dependency in all available repository until it is found, because it's an illegal state to not find it.\n\nAlso, by working in a large company, I really think this lastUpdated file on releases could really prevent or slow down Maven 3 adoption since this is quite an annoying think that will slow down people and increase the work load of the maven support team (at least because Maven will report false-problems that could be now solved).\n\nIs there an option or something that could be temporary put somewhere to get back to the same Maven 2 behavior ?\n\nThanks a lot,\n\nMathieu.",
        "Failure to download artifact stores & inspects HTTP response code When an artifact is unable to be downloaded, Maven 3 caches this result for future reference in the \"~/.m2/repo/.../<artifact>.lastUpdated\" file.  For \"not found\" situations, it seems that the HTTP code could be used to more granularly re-attempt retrieval rather than just cache the failure.\n\nFor example, for any 404, I agree, the result should cache the failure and require a -U to attempt to retrieve it again.  However, for 400, 500, 501, 502, 503, 301, 302 (what's the Maven behavior for 3xx today?) I think the resolution engine should try to re-retrieve the artifact each time.  With those error codes, it seems more likely a config issue or brief network hiccup, not one of the file being absent from that repo.  However, that brief network hiccup has longstanding cache implications in that the file is never attempted to be retrieved again.\n\nhttp://www.w3.org/Protocols/HTTP/HTRESP.html\n\nI've received this feedback from folks trying out Maven 3 Beta 1 and am just trying to aggregate the comments on their behalf."
    ],
    [
        "MNG-4778",
        "MNG-4776",
        "NPE when executing javadoc:aggregate in 3.0-beta2 Running mvn javadoc:aggregate -X produces:\n\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n        at org.apache.maven.lifecycle.internal.BuilderCommon.handleBuildError(BuilderCommon.java:140)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:98)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:58)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:252)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:100)\n        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:443)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:166)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:130)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n        at org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey.<init>(DefaultPluginDescriptorCache.java:148)\n        at org.apache.maven.plugin.DefaultPluginDescriptorCache.createKey(DefaultPluginDescriptorCache.java:61)\n        at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getPluginDescriptor(DefaultMavenPluginManager.java:125)\n        at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getMojoDescriptor(DefaultMavenPluginManager.java:245)\n        at org.apache.maven.plugin.DefaultBuildPluginManager.getMojoDescriptor(DefaultBuildPluginManager.java:199)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateLifecycleMappings(LifecycleExecutionPlanCalculatorImpl.java:309)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateForkedLifecycle(LifecycleExecutionPlanCalculatorImpl.java:546)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateForkedExecutions(LifecycleExecutionPlanCalculatorImpl.java:520)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.setupMojoExections(LifecycleExecutionPlanCalculatorImpl.java:160)\n        at org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateExecutionPlan(LifecycleExecutionPlanCalculatorImpl.java:123)\n        at org.apache.maven.lifecycle.internal.BuilderCommon.resolveBuildPlan(BuilderCommon.java:97)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:82)\n        ... 16 more",
        "NPE during build from parent but not from child The build is a bit large (~50+) modules for me to post, but the rough layout is like so:\n\nsuper\n|-sub\n| |-assembly\n\nAs part of the build of super, it fails with the exception below; as part of the build of sub, it succeeds.\n\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n\tat org.apache.maven.lifecycle.internal.BuilderCommon.handleBuildError(BuilderCommon.java:140)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:98)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:58)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:252)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:100)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:443)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:166)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:130)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n\tat org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey.<init>(DefaultPluginDescriptorCache.java:148)\n\tat org.apache.maven.plugin.DefaultPluginDescriptorCache.createKey(DefaultPluginDescriptorCache.java:61)\n\tat org.apache.maven.plugin.internal.DefaultMavenPluginManager.getPluginDescriptor(DefaultMavenPluginManager.java:125)\n\tat org.apache.maven.plugin.internal.DefaultMavenPluginManager.getMojoDescriptor(DefaultMavenPluginManager.java:245)\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.getMojoDescriptor(DefaultBuildPluginManager.java:199)\n\tat org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateForkedLifecycle(LifecycleExecutionPlanCalculatorImpl.java:555)\n\tat org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateForkedExecutions(LifecycleExecutionPlanCalculatorImpl.java:520)\n\tat org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.setupMojoExections(LifecycleExecutionPlanCalculatorImpl.java:160)\n\tat org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculatorImpl.calculateExecutionPlan(LifecycleExecutionPlanCalculatorImpl.java:123)\n\tat org.apache.maven.lifecycle.internal.BuilderCommon.resolveBuildPlan(BuilderCommon.java:97)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:82)\n\t... 16 more\n[ERROR] \n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/InternalErrorException\n"
    ],
    [
        "MNG-4798",
        "MNG-4794",
        "NullPointerException at NearestVersionConflictResolver.selectVersion() this error only occurs with Maven 3 beta-3 but not Maven 3 beta-2.\n\nMaby it is related to this error, but has a different stacktrace: MNG-4779\n\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n        at org.apache.maven.lifecycle.internal.BuilderCommon.handleBuildError(BuilderCommon.java:141)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:99)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:315)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:152)\n        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:445)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:168)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:132)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:600)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n        at org.sonatype.aether.util.graph.transformer.NearestVersionConflictResolver.selectVersion(NearestVersionConflictResolver.java:218)\n        at org.sonatype.aether.util.graph.transformer.NearestVersionConflictResolver.transformGraph(NearestVersionConflictResolver.java:81)\n        at org.sonatype.aether.util.graph.transformer.ChainedDependencyGraphTransformer.transformGraph(ChainedDependencyGraphTransformer.java:76)\n        at org.sonatype.aether.impl.internal.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:246)\n        at org.sonatype.aether.impl.internal.DefaultRepositorySystem.collectDependencies(DefaultRepositorySystem.java:265)\n        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:117)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:202)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:141)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveDependencies(LifecycleDependencyResolver.java:118)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveDependencies(LifecycleDependencyResolver.java:82)\n        at org.apache.maven.lifecycle.internal.BuilderCommon.resolveBuildPlan(BuilderCommon.java:130)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:83)\n        ... 16 more",
        "'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester This error doesn't show up on Windows with maven 3 beta-3, Java 1.6.0_21 !!!\nThis error also doesn't show up with maven 3 beta-2 on Linux and Windows, both Java 1.6.0_21.\n\nI switched from maven 3 beta-2 to beta-3 and got this error. \nI deleted the complete .m2/repository/ but nothing changed.\n\nOnly on Linux with maven 3 beta-3 I can reproduce this error:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install (default-install) on project nivadis: Execution default-install of goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install failed: Unable to load the mojo 'install' in the plugin 'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester\n-----------------------------------------------------\nrealm =    plugin>org.apache.maven.plugins:maven-install-plugin:2.3.1\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nurls[0] = file:/home/vbs/.m2/repository/org/apache/maven/plugins/maven-install-plugin/2.3.1/maven-install-plugin-2.3.1.jar\nurls[1] = file:/home/vbs/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nNumber of foreign imports: 4\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlSerializer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParserException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParser from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.Xpp3Dom from realm ClassRealm[plexus.core, parent: null]]\n\nrealm =    maven.api\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nNumber of foreign imports: 21\nimport: Entry[import org.sonatype.aether from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.personality from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.logging from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.lifecycle from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.context from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.container from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.configuration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.component from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusConstants from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.MutablePlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DuplicateChildContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultPlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.apache.maven from realm ClassRealm[plexus.core, parent: null]]\n\n-----------------------------------------------------\n-> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException\n"
    ],
    [
        "MNG-4808",
        "MNG-4319",
        "Maven does not resolve variables within a plugin's <goal> I have a Maven project with a Hudson profile, to be run when run under Hudson CI. The only relevant part of the Hudson profile is that the build should not fail when there are checksyle or findbugs errors. To achieve this, I've defined goal variables for both Checkstyle and Findbugs, see the attached (simplified) POM.\n\njust run mvn:clean, and you'll get:\n'${checkstyle.goal}' was specified in an execution, but not found in the plugin\n\n(and later also for findbugs)\n\nThe variable doesn't seem to be properly resolved. What's really strange, if I do mvn effective-pom, it all looks as I'd expect it, i.e it prints out <goal>check</goal> instead of <goal>${checkstyle.goal}</goal>\n\nThis used to work perfectly under Maven 2.0.9, i.e. it would run checkstyle:check normally, but checkstyle:checkstyle under Hudson. Seems to be a regression.\n",
        "Property expansion does not work for goals in plugin executions I am using a (global) property to control the goal(s) of the Assembly Plugin to be executed:\n{code:xml}\n<goals>\n  <goal>${build.assembly.goal}</goal>\n</goals>\n{code}\nThe property is pre-defined in my (parent) POM and may be overwritten using the {{-D}} option on the command line or (for convenience) using a profile. This is (was) a very convenient way to switch from ZIP (goal {{single}}) to directory (goal {{directory-single}}) packaging during development of programm packages.\n\nWhen I tried to upgrade from Maven 2.0.10 to Maven 2.2.1 I noticed that this doesn't work any more. I also tried intermediate versions and it seems that 2.0.10 was the last version where it works.\n"
    ],
    [
        "MNG-4816",
        "MNG-4486",
        "Maven 3 fails to follow 301 redirects See https://netbeans.org/bugzilla/show_bug.cgi?id=190033 for steps to reproduce, and in particular delete ~/.m2/repository/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar first. Maven 2.2.1 works; 3.0-beta-3 fails. The difference is that M3 tries to download this JAR but the HTTP transport does not handle redirects, so the JAR file in the local repo is actually a text file:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"https://nexus.codehaus.org/content/repositories/releases/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar\">here</a>.</p>\n<hr>\n<address>Apache/2.0.52 (Red Hat) Server at repository.codehaus.org Port 80</address>\n</body></html>\n{code}",
        "Maven appears to ignore http 301; downloads html as jar Our Maven builds are configured with just two repositories,\nhttp://repo1.maven.org/maven2 and http://scala-tools.org/repo-releases\n(We use Artifactory as a central repo cache)\n\nBut since Friday, I've noticed builds failing because builds are trying to\ndownload jms-1.1.jar from maven-repository.dev.java.net even though that is not in our repo path\nor configuration.\n\nwhen I run with -X I see a failure trying to download jmx-1.1.jar from central,\nfollowed by:\n\n Downloading:\nhttps://maven-repository.dev.java.net/nonav/repository/javax.jms/jars/jms-1.1.jar\n 347b downloaded\n [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local =\n'd0b7ce08d257e8fefdc6ad0f0f0368635bbeb3d0'; remote = '<!DOCTYPE' - RETRYING\n\nWorse, what gets downloaded is not a jar but some html. Maven seems to\nignore the 301 status and thinks this is a jar. The contents are:\n\n   <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n   <html><head>\n   <title>301 Moved Permanently</title>\n   </head><body>\n   <h1>Moved Permanently</h1>\n   <p>The document has moved <a href=\"\nhttp://download.java.net/maven/1/javax.jms/jars/jms-1.1.jar\">here</a>.</p>\n   <hr>\n   <address>Apache Server at maven-repository.dev.java.net Port\n443</address>\n   </body></html>\n\nhttp://repo2.maven.org/maven2/javax/jms/jms/1.1/ contains a pom.xml but no jar.\nHowever, http://repository.jboss.com/maven2/javax/jms/jms/1.1/ has the jar.\n\nmy project does not even depend on jms directly; it appears to be one of the\ninternal Maven compile or site targets that cause it to get loaded, but I'm not sure which.\n\nIn artifactory's config, we specify:\n\n  <remoteRepositories>\n       <remoteRepository>\n           <key>repo1</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n\n <excludesPattern>org/artifactory/**,org/jfrog/**</excludesPattern>\n           <url>http://repo1.maven.org/maven2</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n\n       <remoteRepository>\n           <key>scala-tools.org</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n           <url>http://scala-tools.org/repo-releases</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n  </remoteRepositories>\n\nMy ~/.m2/settings.xml is empty and /usr/local/maven/conf/settings.xml simply\npoints to my Artifactory server, no other repos in the profile:\n\n <profiles>\n   <profile>\n     <id>artifactory</id>\n     <activation><activeByDefault>true</activeByDefault></activation>\n\n        <repositories>\n            <repository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </repository>\n            <repository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </repository>\n        </repositories>\n        <pluginRepositories>\n            <pluginRepository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </pluginRepository>\n            <pluginRepository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </pluginRepository>\n        </pluginRepositories>\n\n   </profile>\n </profiles>\n\nI was able to workaround this by downloading jms-1.1.jar and putting it in our\nArtifactory repo, but I think that is simply masking a problem, so this will\nprobably pop back up.\n\nPerhaps the problem is at central; I don't know if it every had a jms-1.1.jar;\nas I said, we did not depend on it directly, so we suspect some other\nplugin now uses it that did not, or the jar was incorrectly removed\nfrom central. But the fact that Maven downloaded the html as a jar\ncaused problems, because after each build failure, I had to manually\nclean up my bad ~/.m2/repository\n"
    ],
    [
        "MNG-4816",
        "MNG-4524",
        "Maven 3 fails to follow 301 redirects See https://netbeans.org/bugzilla/show_bug.cgi?id=190033 for steps to reproduce, and in particular delete ~/.m2/repository/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar first. Maven 2.2.1 works; 3.0-beta-3 fails. The difference is that M3 tries to download this JAR but the HTTP transport does not handle redirects, so the JAR file in the local repo is actually a text file:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"https://nexus.codehaus.org/content/repositories/releases/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar\">here</a>.</p>\n<hr>\n<address>Apache/2.0.52 (Red Hat) Server at repository.codehaus.org Port 80</address>\n</body></html>\n{code}",
        "Error while installing dependencies Actually i am new to maven, while i am trying to work on the example given in Maven Definitive guide pdf(example in Chapter 4) its giving me the below error. I have also attached pom.xml for your reference.\n\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk/poms/jmxtools-1.2.1.pom\n357b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b662aa01d4\n9d8a571aa79f67a1d4a92a7d9c6359'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk\n/poms/jmxtools-1.2.1.pom\n357b downloaded\n\n\nThanks,\nRamesh.V"
    ],
    [
        "MNG-4816",
        "MNG-4734",
        "Maven 3 fails to follow 301 redirects See https://netbeans.org/bugzilla/show_bug.cgi?id=190033 for steps to reproduce, and in particular delete ~/.m2/repository/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar first. Maven 2.2.1 works; 3.0-beta-3 fails. The difference is that M3 tries to download this JAR but the HTTP transport does not handle redirects, so the JAR file in the local repo is actually a text file:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"https://nexus.codehaus.org/content/repositories/releases/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar\">here</a>.</p>\n<hr>\n<address>Apache/2.0.52 (Red Hat) Server at repository.codehaus.org Port 80</address>\n</body></html>\n{code}",
        "Maven pom resolving does not respect a 301 permanent redirect When an attempt is made to depend upon the following dependency:\n\ncom/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nInstead of downloading the pom, a 301 Moved Permanently is saved in it's place. This breaks all maven builds on the particular machine:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"http://download.java.net/maven/1/com.sun.tools.xjc.maven2/poms/maven-jaxb-plugin-1.1.pom\">here</a>.</p>\n<hr>\n<address>Apache Server at maven-repository.dev.java.net Port 443</address>\n</body></html>\n{code}\n\nThis looks like a regression since v2.2.0, as another machine running v2.2.0 downloads the pom for the above artifact correctly.\n\nThis is what it looks like when it breaks:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: com.sun.tools.xjc.maven2:maven-jaxb-plugin\nPOM Location: /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nReason: Not a v4.0.0 POM. for project com.sun.tools.xjc.maven2:maven-jaxb-plugin at /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n"
    ],
    [
        "MNG-4817",
        "MNG-4486",
        "Unable to use gwt-maven-plugin 1.3-SNAPSHOT Tried to create a project using the gwt-maven plugin. After generating the archetype using the current 1.2 version I attempted to update it to 1.3-SNAPSHOT\n\n{code:xml}\n<plugin>\n\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t\t\t<artifactId>gwt-maven-plugin</artifactId>\n\t\t\t\t<version>1.3-SNAPSHOT</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>compile</goal>\n\t\t\t\t\t\t\t<goal>generateAsync</goal>\n\t\t\t\t\t\t\t<goal>test</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t\t<configuration>\n\t\t\t\t\t<runTarget>com.rp.portal.campaign.Application/Application.html</runTarget>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n{code}\n\nAdded the repo for the plugin:\n\n{code:xml}\n\t<pluginRepositories>\n\t\t<pluginRepository>\n\t\t\t<id>Codehaus</id>\n\t\t\t<name>Codehaus Maven Plugin Repository</name>\n\t\t\t<url>http://repository.codehaus.org/org/codehaus/mojo</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</pluginRepository>\n\t</pluginRepositories>\n[code}\n\nGot this repeatedly:\n\n{code}\njacekf@jacekf:~/src/tmp/portal-campaign$ mvn eclipse:eclipse\n[INFO] Scanning for projects...\n[WARNING] Failed to retrieve plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT: Failed to parse plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT (/home/jacekf/.m2/repository/org/codehaus/mojo/gwt-maven-plugin/1.3-SNAPSHOT/gwt-maven-plugin-1.3-SNAPSHOT.jar): error in opening zip file\n[WARNING] Error reading plugin group metadata: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \nDownloading: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml\nDownloaded: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml (437 B at 1.6 KB/sec)\n[WARNING] Failed to read metadata /home/jacekf/.m2/repository/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata-Codehaus.xml: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \n{code}",
        "Maven appears to ignore http 301; downloads html as jar Our Maven builds are configured with just two repositories,\nhttp://repo1.maven.org/maven2 and http://scala-tools.org/repo-releases\n(We use Artifactory as a central repo cache)\n\nBut since Friday, I've noticed builds failing because builds are trying to\ndownload jms-1.1.jar from maven-repository.dev.java.net even though that is not in our repo path\nor configuration.\n\nwhen I run with -X I see a failure trying to download jmx-1.1.jar from central,\nfollowed by:\n\n Downloading:\nhttps://maven-repository.dev.java.net/nonav/repository/javax.jms/jars/jms-1.1.jar\n 347b downloaded\n [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local =\n'd0b7ce08d257e8fefdc6ad0f0f0368635bbeb3d0'; remote = '<!DOCTYPE' - RETRYING\n\nWorse, what gets downloaded is not a jar but some html. Maven seems to\nignore the 301 status and thinks this is a jar. The contents are:\n\n   <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n   <html><head>\n   <title>301 Moved Permanently</title>\n   </head><body>\n   <h1>Moved Permanently</h1>\n   <p>The document has moved <a href=\"\nhttp://download.java.net/maven/1/javax.jms/jars/jms-1.1.jar\">here</a>.</p>\n   <hr>\n   <address>Apache Server at maven-repository.dev.java.net Port\n443</address>\n   </body></html>\n\nhttp://repo2.maven.org/maven2/javax/jms/jms/1.1/ contains a pom.xml but no jar.\nHowever, http://repository.jboss.com/maven2/javax/jms/jms/1.1/ has the jar.\n\nmy project does not even depend on jms directly; it appears to be one of the\ninternal Maven compile or site targets that cause it to get loaded, but I'm not sure which.\n\nIn artifactory's config, we specify:\n\n  <remoteRepositories>\n       <remoteRepository>\n           <key>repo1</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n\n <excludesPattern>org/artifactory/**,org/jfrog/**</excludesPattern>\n           <url>http://repo1.maven.org/maven2</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n\n       <remoteRepository>\n           <key>scala-tools.org</key>\n           <handleReleases>true</handleReleases>\n           <handleSnapshots>false</handleSnapshots>\n           <url>http://scala-tools.org/repo-releases</url>\n           <proxyRef>SASproxy</proxyRef>\n       </remoteRepository>\n  </remoteRepositories>\n\nMy ~/.m2/settings.xml is empty and /usr/local/maven/conf/settings.xml simply\npoints to my Artifactory server, no other repos in the profile:\n\n <profiles>\n   <profile>\n     <id>artifactory</id>\n     <activation><activeByDefault>true</activeByDefault></activation>\n\n        <repositories>\n            <repository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </repository>\n            <repository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </repository>\n        </repositories>\n        <pluginRepositories>\n            <pluginRepository>\n                <id>central</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <snapshots>\n                    <enabled>false</enabled>\n                </snapshots>\n            </pluginRepository>\n            <pluginRepository>\n                <id>snapshots</id>\n                <url>http://aclmvn.unx.sas.com:8192/artifactory/repo</url>\n                <releases>\n                    <enabled>false</enabled>\n                </releases>\n            </pluginRepository>\n        </pluginRepositories>\n\n   </profile>\n </profiles>\n\nI was able to workaround this by downloading jms-1.1.jar and putting it in our\nArtifactory repo, but I think that is simply masking a problem, so this will\nprobably pop back up.\n\nPerhaps the problem is at central; I don't know if it every had a jms-1.1.jar;\nas I said, we did not depend on it directly, so we suspect some other\nplugin now uses it that did not, or the jar was incorrectly removed\nfrom central. But the fact that Maven downloaded the html as a jar\ncaused problems, because after each build failure, I had to manually\nclean up my bad ~/.m2/repository\n"
    ],
    [
        "MNG-4817",
        "MNG-4524",
        "Unable to use gwt-maven-plugin 1.3-SNAPSHOT Tried to create a project using the gwt-maven plugin. After generating the archetype using the current 1.2 version I attempted to update it to 1.3-SNAPSHOT\n\n{code:xml}\n<plugin>\n\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t\t\t<artifactId>gwt-maven-plugin</artifactId>\n\t\t\t\t<version>1.3-SNAPSHOT</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>compile</goal>\n\t\t\t\t\t\t\t<goal>generateAsync</goal>\n\t\t\t\t\t\t\t<goal>test</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t\t<configuration>\n\t\t\t\t\t<runTarget>com.rp.portal.campaign.Application/Application.html</runTarget>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n{code}\n\nAdded the repo for the plugin:\n\n{code:xml}\n\t<pluginRepositories>\n\t\t<pluginRepository>\n\t\t\t<id>Codehaus</id>\n\t\t\t<name>Codehaus Maven Plugin Repository</name>\n\t\t\t<url>http://repository.codehaus.org/org/codehaus/mojo</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</pluginRepository>\n\t</pluginRepositories>\n[code}\n\nGot this repeatedly:\n\n{code}\njacekf@jacekf:~/src/tmp/portal-campaign$ mvn eclipse:eclipse\n[INFO] Scanning for projects...\n[WARNING] Failed to retrieve plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT: Failed to parse plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT (/home/jacekf/.m2/repository/org/codehaus/mojo/gwt-maven-plugin/1.3-SNAPSHOT/gwt-maven-plugin-1.3-SNAPSHOT.jar): error in opening zip file\n[WARNING] Error reading plugin group metadata: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \nDownloading: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml\nDownloaded: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml (437 B at 1.6 KB/sec)\n[WARNING] Failed to read metadata /home/jacekf/.m2/repository/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata-Codehaus.xml: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \n{code}",
        "Error while installing dependencies Actually i am new to maven, while i am trying to work on the example given in Maven Definitive guide pdf(example in Chapter 4) its giving me the below error. I have also attached pom.xml for your reference.\n\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.mail/poms/mail-1.4.pom\n349b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b521e8e2d0286806e747b071b969ba7a78dab3fb'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\n[WARNING] POM for 'javax.mail:mail:pom:1.4:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.mail:mail at C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\mail\\mail\\1.4\\mail-1.4.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/javax.jms/poms/jms-1.1.pom\n347b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'c8f2a9fb3984c36fc4f4b6a53383b40b52cfec2c'; remote = '<!DOCTYPE' - IGNORING\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\n[WARNING] POM for 'javax.jms:jms:pom:1.1:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project javax.jms:jms at\n C:\\Documents and Settings\\Mahy\\.m2\\repository\\javax\\jms\\jms\\1.1\\jms-1.1.pom\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk/poms/jmxtools-1.2.1.pom\n357b downloaded\n[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'b662aa01d4\n9d8a571aa79f67a1d4a92a7d9c6359'; remote = '<!DOCTYPE' - RETRYING\nDownloading: https://maven-repository.dev.java.net/nonav/repository/com.sun.jdmk\n/poms/jmxtools-1.2.1.pom\n357b downloaded\n\n\nThanks,\nRamesh.V"
    ],
    [
        "MNG-4817",
        "MNG-4734",
        "Unable to use gwt-maven-plugin 1.3-SNAPSHOT Tried to create a project using the gwt-maven plugin. After generating the archetype using the current 1.2 version I attempted to update it to 1.3-SNAPSHOT\n\n{code:xml}\n<plugin>\n\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t\t\t<artifactId>gwt-maven-plugin</artifactId>\n\t\t\t\t<version>1.3-SNAPSHOT</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>compile</goal>\n\t\t\t\t\t\t\t<goal>generateAsync</goal>\n\t\t\t\t\t\t\t<goal>test</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t\t<configuration>\n\t\t\t\t\t<runTarget>com.rp.portal.campaign.Application/Application.html</runTarget>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n{code}\n\nAdded the repo for the plugin:\n\n{code:xml}\n\t<pluginRepositories>\n\t\t<pluginRepository>\n\t\t\t<id>Codehaus</id>\n\t\t\t<name>Codehaus Maven Plugin Repository</name>\n\t\t\t<url>http://repository.codehaus.org/org/codehaus/mojo</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</pluginRepository>\n\t</pluginRepositories>\n[code}\n\nGot this repeatedly:\n\n{code}\njacekf@jacekf:~/src/tmp/portal-campaign$ mvn eclipse:eclipse\n[INFO] Scanning for projects...\n[WARNING] Failed to retrieve plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT: Failed to parse plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT (/home/jacekf/.m2/repository/org/codehaus/mojo/gwt-maven-plugin/1.3-SNAPSHOT/gwt-maven-plugin-1.3-SNAPSHOT.jar): error in opening zip file\n[WARNING] Error reading plugin group metadata: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \nDownloading: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml\nDownloaded: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml (437 B at 1.6 KB/sec)\n[WARNING] Failed to read metadata /home/jacekf/.m2/repository/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata-Codehaus.xml: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \n{code}",
        "Maven pom resolving does not respect a 301 permanent redirect When an attempt is made to depend upon the following dependency:\n\ncom/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nInstead of downloading the pom, a 301 Moved Permanently is saved in it's place. This breaks all maven builds on the particular machine:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"http://download.java.net/maven/1/com.sun.tools.xjc.maven2/poms/maven-jaxb-plugin-1.1.pom\">here</a>.</p>\n<hr>\n<address>Apache Server at maven-repository.dev.java.net Port 443</address>\n</body></html>\n{code}\n\nThis looks like a regression since v2.2.0, as another machine running v2.2.0 downloads the pom for the above artifact correctly.\n\nThis is what it looks like when it breaks:\n\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: com.sun.tools.xjc.maven2:maven-jaxb-plugin\nPOM Location: /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n\nReason: Not a v4.0.0 POM. for project com.sun.tools.xjc.maven2:maven-jaxb-plugin at /home/chandler/minfrin/.m2/repository/com/sun/tools/xjc/maven2/maven-jaxb-plugin/1.1/maven-jaxb-plugin-1.1.pom\n"
    ],
    [
        "MNG-4817",
        "MNG-4816",
        "Unable to use gwt-maven-plugin 1.3-SNAPSHOT Tried to create a project using the gwt-maven plugin. After generating the archetype using the current 1.2 version I attempted to update it to 1.3-SNAPSHOT\n\n{code:xml}\n<plugin>\n\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t\t\t<artifactId>gwt-maven-plugin</artifactId>\n\t\t\t\t<version>1.3-SNAPSHOT</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>compile</goal>\n\t\t\t\t\t\t\t<goal>generateAsync</goal>\n\t\t\t\t\t\t\t<goal>test</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t\t<configuration>\n\t\t\t\t\t<runTarget>com.rp.portal.campaign.Application/Application.html</runTarget>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n{code}\n\nAdded the repo for the plugin:\n\n{code:xml}\n\t<pluginRepositories>\n\t\t<pluginRepository>\n\t\t\t<id>Codehaus</id>\n\t\t\t<name>Codehaus Maven Plugin Repository</name>\n\t\t\t<url>http://repository.codehaus.org/org/codehaus/mojo</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</pluginRepository>\n\t</pluginRepositories>\n[code}\n\nGot this repeatedly:\n\n{code}\njacekf@jacekf:~/src/tmp/portal-campaign$ mvn eclipse:eclipse\n[INFO] Scanning for projects...\n[WARNING] Failed to retrieve plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT: Failed to parse plugin descriptor for org.codehaus.mojo:gwt-maven-plugin:1.3-SNAPSHOT (/home/jacekf/.m2/repository/org/codehaus/mojo/gwt-maven-plugin/1.3-SNAPSHOT/gwt-maven-plugin-1.3-SNAPSHOT.jar): error in opening zip file\n[WARNING] Error reading plugin group metadata: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \nDownloading: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml\nDownloaded: http://repository.codehaus.org/org/codehaus/mojo/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata.xml (437 B at 1.6 KB/sec)\n[WARNING] Failed to read metadata /home/jacekf/.m2/repository/org/apache/maven/plugins/maven-eclipse-plugin/maven-metadata-Codehaus.xml: end tag name </body> must match start tag name <hr> from line 7 (position: TEXT seen ...</address>\\n</body>... @9:8) \n{code}",
        "Maven 3 fails to follow 301 redirects See https://netbeans.org/bugzilla/show_bug.cgi?id=190033 for steps to reproduce, and in particular delete ~/.m2/repository/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar first. Maven 2.2.1 works; 3.0-beta-3 fails. The difference is that M3 tries to download this JAR but the HTTP transport does not handle redirects, so the JAR file in the local repo is actually a text file:\n\n{code}\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"https://nexus.codehaus.org/content/repositories/releases/org/codehaus/mojo/archetypes/webapp-javaee6/1.1/webapp-javaee6-1.1.jar\">here</a>.</p>\n<hr>\n<address>Apache/2.0.52 (Red Hat) Server at repository.codehaus.org Port 80</address>\n</body></html>\n{code}"
    ],
    [
        "MNG-4819",
        "MNG-4022",
        "Inheritance Error in Object List Configuration for Custom Plugin When a parent defines an object list in a plugin configuration, and then a child of that parent also defines an object list for the same plugin leaving some values undefined (so as to use defaults), the object list is loaded into the plugin in an unpredictable manner, sometimes using parent-defined properties instead of defaults, and sometimes not.\n\nThe attached plugin/parent/child projects produce this incorrect output:\n\n$ mvn inherit_bug_demo:bugdemo\n...\n[INFO] Configuration: [InheritanceBugDemoMojo: objects='[[DemoObject: prop1='Child Object 1 Property 1', prop2='Property 2'], [DemoObject: prop1='Parent Object 1 Property 1', prop2='Child Object 2 Property 2']]']\n\nThe expected output would either be:\n\n[INFO] Configuration: [InheritanceBugDemoMojo: objects='[[DemoObject: prop1='Child Object 1 Property 1', prop2='Parent Object 1 Property 2'], [DemoObject: prop1='Parent Object 1 Property 1', prop2='Child Object 2 Property 2'], [DemoObject: prop1='Parent Object 3 Property 1', prop2='Parent Object 3 Property 2]]']\n\nOr:\n\n[INFO] Configuration: [InheritanceBugDemoMojo: objects='[[DemoObject: prop1='Child Object 1 Property 1', prop2='Property 2'], [DemoObject: prop1='Property 1', prop2='Child Object 2 Property 2']]']\n\nSee attached build log, demonstration plugin, and parent/child project for details.\n\nUsage:\n\n$ cd inherit_bug_demo\n$ mvn deploy\n$ cd ../child\n$ mvn inherit_bug_demo:bugdemo\n",
        "Incorrect merge behavior using profile driven plugin configuration Plugin configurations are not merged correctly when contained inside a profile.  The attached example demonstrates a failure where the parent contains the configuration, and the child contains the execution.  There is no configuration whatsoever in the child.  The circumstances required to trigger this are:\n- Configuration contains a list of at least 2 complex elements.\n- Configuration is inside a profile.  This does not happen outside the profile\n- The first element in the list contains parameters that the last element does not contain, e.g.:\n<foos>\n  <foo>\n    <name>first</name>\n  </foo>\n  <foo />\n  <foo />\n</foos>\n\nIn this example, there should be a list of three Foo elements.  The first should have name=\"first\" and the last two should have name=null.  In reality, the second element will have name=null, but the third will have name=\"first\".  This behavior holds for all parameters in the first element that do not exist in the last element.\n\nThe attached example includes a test plugin with an Element object that demonstrates this behavior.\n\nI have traced down the cause and have some high level ideas about the fix, but I have not coded a patch.\n\nI think there are two bugs that meet under these circumstances to cause the configuration corruption.  Certainly there are multiple opportunities to make this pom configuration work as expected.\n\nFirst, there is no configuration in the child.  Why should maven even attempt a merge?  I ran maven through the debugger to get a better understanding of the sequence of events.  Maven sources the parent pom and the child pom.  When the child pom is sourced, it contains the full configuration exactly as it exists in the parent.  Then an attempt is made to merge these identical configurations.  Maven has the chance to avoid this issue by recognizing that the configuration element does not exist at all in the child and simply inheriting that as is from the parent.\n\nThe other bug is not in Maven.  It is in Xpp3Dom (http://fisheye.codehaus.org/browse/plexus/plexus-utils/tags/plexus-utils-1.5.1/src/main/java/org/codehaus/plexus/util/xml/Xpp3Dom.java?r=4475#l346).  Notice that it iterates over the list of recessive children (from the parent pom) linearly and attempts to do a map-based lookup for the corresponding element in the dominant children (from the child pom).  This works fine when you have a composition of several complex types, but it fails when there is a sequence of the identical types.  From a bit more abstract perspective, if Xpp3Dom is attempting to merge two identical Xpp3Doms, I would expect the result to be the identity rather than data corruption.\n\nI have not done the research to understand why profile plugins go through this path inside Xpp3Dom but non-profile plugins apparently don't.  There may also be other situations which are affected.  I have not tried using a pluginManagement element for instance.\n\nLastly, there is something of a workaround.  You can tell Xpp3Dom not to merge by setting the self.combine attribute:\n<configuration self.combine=\"override\">\nThis tells Xpp3Dom to ignore the recessive Xpp3Dom (parent) and just use the dominant (child) which seems odd given that there is no child configuration.  However, it will work if you don't have any real merging needs."
    ],
    [
        "MNG-4821",
        "MNG-3038",
        "Wrong spring-context version resolved when depending on artifact with dependency management and jersey-spring dependency Given two artifacts, A and B:\n- A depends on B and on org.springframework:spring-context:3.0.1.RELEASE\n- B depends on com.sun.jersey.contribs:jersey-spring:1.2 and has a dependency management entry that sets the version for org.springframework:spring-context to 3.0.2.RELEASE\n- com.sun.jersey.contribs:jersey-spring:1.2 depends on org.springframework:spring-context:[2.5.2,3)\n\nWhen B is built, maven uses org.springframework:spring-context:jar:3.0.2.RELEASE, as expected.\nWhen A is built, maven 2 uses org.springframework:spring-context:jar:2.5.6, and maven 3 uses version 2.5.6.SEC02.\n\nI'm attaching a sample project that demonstrates the bug. There are two poms: dependent and dependee. These correspond to A and B above, respectively. The top-level pom just includes the other two for ease of building. In the real-life situation where I found the problem, the two artifacts are from separate projects. There is no unit test, since I don't even know how I'd write a test for this, but there is a bash script called test.sh that checks for the problem.",
        "Transitive DepMan not working (per MNG-1577) [use case attached] When working with the example use case described by Carlos on the MNG-1577 thread.\nhttp://www.nabble.com/Re%3A--vote--MNG-1577-as-the-default-behavior-p9506667s177.html\n\n{noformat}\nWhat about this use case for transitive dependencyManagement? has been tested?\n\nA -> B -> C -> D\n\nC depends on D 1.0\nB has D 2.0 in dependencyManagement, no D in dependencies\n\nA should get D 2.0 \n{noformat}\n\nIt was discovered that this does not work.\nSample Project / Use Case is attached. (655 bytes)"
    ],
    [
        "MNG-4844",
        "MNG-4794",
        "Maven 3 RC1 crashes with IBM JDK 6 Running the minimal project that is provided crashes maven with this error:\n\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n\tat org.apache.maven.lifecycle.internal.BuilderCommon.handleBuildError(BuilderCommon.java:128)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:95)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:315)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:152)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:445)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:168)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:132)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:600)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n\tat org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator.getInheritedScopes(JavaEffectiveScopeCalculator.java:149)\n\tat org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator.resolve(JavaEffectiveScopeCalculator.java:126)\n\tat org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator.transformGraph(JavaEffectiveScopeCalculator.java:80)\n\tat org.sonatype.aether.util.graph.transformer.ChainedDependencyGraphTransformer.transformGraph(ChainedDependencyGraphTransformer.java:76)\n\tat org.sonatype.aether.impl.internal.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:246)\n\tat org.sonatype.aether.impl.internal.DefaultRepositorySystem.collectDependencies(DefaultRepositorySystem.java:265)\n\tat org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:117)\n\tat org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:165)\n\tat org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:104)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:244)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:187)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:140)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n\nAll the details are in the readme.txt in the attached zip file.\n",
        "'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester This error doesn't show up on Windows with maven 3 beta-3, Java 1.6.0_21 !!!\nThis error also doesn't show up with maven 3 beta-2 on Linux and Windows, both Java 1.6.0_21.\n\nI switched from maven 3 beta-2 to beta-3 and got this error. \nI deleted the complete .m2/repository/ but nothing changed.\n\nOnly on Linux with maven 3 beta-3 I can reproduce this error:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install (default-install) on project nivadis: Execution default-install of goal org.apache.maven.plugins:maven-install-plugin:2.3.1:install failed: Unable to load the mojo 'install' in the plugin 'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester\n-----------------------------------------------------\nrealm =    plugin>org.apache.maven.plugins:maven-install-plugin:2.3.1\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nurls[0] = file:/home/vbs/.m2/repository/org/apache/maven/plugins/maven-install-plugin/2.3.1/maven-install-plugin-2.3.1.jar\nurls[1] = file:/home/vbs/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nNumber of foreign imports: 4\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlSerializer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParserException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.pull.XmlPullParser from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.util.xml.Xpp3Dom from realm ClassRealm[plexus.core, parent: null]]\n\nrealm =    maven.api\nstrategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\nNumber of foreign imports: 21\nimport: Entry[import org.sonatype.aether from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.personality from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.logging from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.lifecycle from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.context from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.container from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.configuration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.component from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.PlexusConstants from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.MutablePlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DuplicateChildContainerException from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultPlexusContainer from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.DefaultComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ContainerConfiguration from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.plexus.ComponentRegistry from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.codehaus.classworlds from realm ClassRealm[plexus.core, parent: null]]\nimport: Entry[import org.apache.maven from realm ClassRealm[plexus.core, parent: null]]\n\n-----------------------------------------------------\n-> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException\n"
    ],
    [
        "MNG-4844",
        "MNG-4798",
        "Maven 3 RC1 crashes with IBM JDK 6 Running the minimal project that is provided crashes maven with this error:\n\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n\tat org.apache.maven.lifecycle.internal.BuilderCommon.handleBuildError(BuilderCommon.java:128)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:95)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:315)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:152)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:445)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:168)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:132)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:600)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n\tat org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator.getInheritedScopes(JavaEffectiveScopeCalculator.java:149)\n\tat org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator.resolve(JavaEffectiveScopeCalculator.java:126)\n\tat org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator.transformGraph(JavaEffectiveScopeCalculator.java:80)\n\tat org.sonatype.aether.util.graph.transformer.ChainedDependencyGraphTransformer.transformGraph(ChainedDependencyGraphTransformer.java:76)\n\tat org.sonatype.aether.impl.internal.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:246)\n\tat org.sonatype.aether.impl.internal.DefaultRepositorySystem.collectDependencies(DefaultRepositorySystem.java:265)\n\tat org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:117)\n\tat org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:165)\n\tat org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:104)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:244)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:187)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:140)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n\nAll the details are in the readme.txt in the attached zip file.\n",
        "NullPointerException at NearestVersionConflictResolver.selectVersion() this error only occurs with Maven 3 beta-3 but not Maven 3 beta-2.\n\nMaby it is related to this error, but has a different stacktrace: MNG-4779\n\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n        at org.apache.maven.lifecycle.internal.BuilderCommon.handleBuildError(BuilderCommon.java:141)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:99)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:315)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:152)\n        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:445)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:168)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:132)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:600)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n        at org.sonatype.aether.util.graph.transformer.NearestVersionConflictResolver.selectVersion(NearestVersionConflictResolver.java:218)\n        at org.sonatype.aether.util.graph.transformer.NearestVersionConflictResolver.transformGraph(NearestVersionConflictResolver.java:81)\n        at org.sonatype.aether.util.graph.transformer.ChainedDependencyGraphTransformer.transformGraph(ChainedDependencyGraphTransformer.java:76)\n        at org.sonatype.aether.impl.internal.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:246)\n        at org.sonatype.aether.impl.internal.DefaultRepositorySystem.collectDependencies(DefaultRepositorySystem.java:265)\n        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:117)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:202)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:141)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveDependencies(LifecycleDependencyResolver.java:118)\n        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveDependencies(LifecycleDependencyResolver.java:82)\n        at org.apache.maven.lifecycle.internal.BuilderCommon.resolveBuildPlan(BuilderCommon.java:130)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:83)\n        ... 16 more"
    ],
    [
        "MNG-4878",
        "MNG-2872",
        "Inheritance of URLs behaves differently for aggregated and non-aggregated child projects AFAIK, inheritance and aggregation are orthogonal in Maven. Whether a child project is a module of its parent, however, affects how URLs are inherited. (This bug affects {{/project/url}}, {{/project/distributionManagement/site/url}}, {{/project/scm/connection}}, {{/project/scm/developerConnection}}, and {{/project/scm/url}}.)\n\nThis is exemplified by the attached projects, which serve as a testcase. The aggregated child project does respect the trailing slash of its parent's URLs and thus does not append its own {{artifactId}} to the URLs. The non-aggregated child, however, does _not_ respect the trailing slash; consequently, its {{artifactId}} is added erroneously: A {{/project/url}} of http://www.example.org/projects/${project.artifactId}/ is turned into http://www.example.org/projects/non-aggregated-child/non-aggregated-child/ in the *non-aggregated* child project, whereas it becomes http://www.example.org/projects/aggregated-child/ in the *aggregated* child project. (Note that both projects are children of the same parent project.)\n\n",
        "Don't append artifactId when parent pom already has artifactId in URL I want to define the url for all my projects from one central pom. the pom project itself has the same url structure as the child projects.\n\nThis is for all urls that can be inherited, e.g. distribution site, deployment url, etc.\n\nI would like to specify some complete url like\n\nprotocol:/my.server.com/some/path/to/the/${groupId}/${artifactId}\n\nFor example, with the actual implementation I get either the parent pom site deployed to the groupId directory, or I get the child projects deployed to the grouId/artifactId/artifactId directory.\n\nAt the moment I have add the urls on every project, although they always have the same pattern.\n\n"
    ],
    [
        "MNG-4878",
        "MNG-4508",
        "Inheritance of URLs behaves differently for aggregated and non-aggregated child projects AFAIK, inheritance and aggregation are orthogonal in Maven. Whether a child project is a module of its parent, however, affects how URLs are inherited. (This bug affects {{/project/url}}, {{/project/distributionManagement/site/url}}, {{/project/scm/connection}}, {{/project/scm/developerConnection}}, and {{/project/scm/url}}.)\n\nThis is exemplified by the attached projects, which serve as a testcase. The aggregated child project does respect the trailing slash of its parent's URLs and thus does not append its own {{artifactId}} to the URLs. The non-aggregated child, however, does _not_ respect the trailing slash; consequently, its {{artifactId}} is added erroneously: A {{/project/url}} of http://www.example.org/projects/${project.artifactId}/ is turned into http://www.example.org/projects/non-aggregated-child/non-aggregated-child/ in the *non-aggregated* child project, whereas it becomes http://www.example.org/projects/aggregated-child/ in the *aggregated* child project. (Note that both projects are children of the same parent project.)\n\n",
        "No way to avoid adding artifactId to site urls Currently, whenever a child pom inherits from a parent (and doesn't override the relevant settings), both project.url and project.distributionManagement.site.url have the name of the child artifact appended.\r\n\r\nIt would be nice to be able to have something like\r\n\r\n{code:xml}\r\n<url>scpexe://host/blah/${project.artifactId}/${project.version}</url>\r\n{code}\r\n\r\nand have this inherited to all child poms in the obvious way.\r\n\r\nMy usecase for this is that we have a single parent pom for all our projects, with useful settings such as distributionManagement, and I'd like to be able to deploy their sites to a single directory and have Apache generate me a directory listing for all the child projects. However, I curently have no way of releasing the parent project without obliterating the list of child projects."
    ],
    [
        "MNG-4879",
        "MNG-2221",
        "CLONE -Multiple Executions of Plugin at Difference Inhertiance levels causes plugin executions to run multiple times Can occur in a variety of ways, but the attached test case shows a parent pom defining an antrun-execution, and then a child specifying another execution with a different id.  Both executions run twice when running from the child.\n\nI believe this is the same as Kenney Westerhof's comment: http://jira.codehaus.org/browse/MNG-2054#action_62477",
        "Multiple Executions of Plugin at Difference Inhertiance levels causes plugin executions to run multiple times Can occur in a variety of ways, but the attached test case shows a parent pom defining an antrun-execution, and then a child specifying another execution with a different id.  Both executions run twice when running from the child.\n\nI believe this is the same as Kenney Westerhof's comment: http://jira.codehaus.org/browse/MNG-2054#action_62477"
    ],
    [
        "MNG-4879",
        "MNG-2237",
        "CLONE -Multiple Executions of Plugin at Difference Inhertiance levels causes plugin executions to run multiple times Can occur in a variety of ways, but the attached test case shows a parent pom defining an antrun-execution, and then a child specifying another execution with a different id.  Both executions run twice when running from the child.\n\nI believe this is the same as Kenney Westerhof's comment: http://jira.codehaus.org/browse/MNG-2054#action_62477",
        "Inherited plugin executed twice if child pom merges configuration According the docs the configuration of a plugin is merged, when the plugin is inherited. This actually hapens, but the plugin with the merged configuration is added twice in the effective-pom and therefore executed twice.\n\nSetup a parent pom with a plugin configuration to attach the javadocs:\n\n{noformat}\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <inherited>true</inherited>\n                <configuration>\n                    <linksource>true</linksource>\n                </configuration>\n            </plugin>\n{noformat}\n\nand a child pom that adds additional elements in the configuration:\n\n{noformat}\n           <plugin>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <configuration>\n                    <links>\n                        <link>http://java.sun.com/j2se/1.4.2/docs/api/</link>\n                        <link>http://jakarta.apache.org/commons/logging/commons-logging-1.0.4/docs/apidocs/</link>\n                        <link>http://jmock.codehaus.org/docs/javadoc/</link>\n                        <link>http://www.junit.org/junit/javadoc/3.8.1/</link>\n                    </links>\n                </configuration>\n            </plugin>\n{noformat}\n\nIn this case the javadoc is generated twice, the goal help:effective-pom reveals, that the plugin was merged, but added twice."
    ],
    [
        "MNG-4879",
        "MNG-2297",
        "CLONE -Multiple Executions of Plugin at Difference Inhertiance levels causes plugin executions to run multiple times Can occur in a variety of ways, but the attached test case shows a parent pom defining an antrun-execution, and then a child specifying another execution with a different id.  Both executions run twice when running from the child.\n\nI believe this is the same as Kenney Westerhof's comment: http://jira.codehaus.org/browse/MNG-2054#action_62477",
        "plugin definitions not merged correctly If both a parent, and a child plugin reference a plugin, the plugin configuration is not merged correctly; instead, the child build ends up with two copies of the plugin (with separate configuration and separate executions).\n\nThe attachment contains a testcase demonstrating the problem, and fixes to ModelUtils.java (against current trunk) to fix it.\n"
    ],
    [
        "MNG-4890",
        "MNG-4237",
        "-pl, -am and -amd options don't consider the version of the artefacts for building the reactor Here is the configuration:\n\nroot 1.0-SNAPSHOT - aggregate project, not a parent one\n - maven-bug1 1.1-SNAPSHOT - no parent\n - maven-bug2 1.0-SNAPSHOT - no parent - depends on maven-bug1 1.1-SNAPSHOT\n\nrun mvn clean -am -pl maven-bug2\nobserve that the project reactor builds maven-bug1 then maven-bug2 as expected based on the dependency graph\n\nnavigate to maven-bug1-to-install\nrun mvn install to install a maven-bug1 version 1.0 in the local repo\nnavigate back to the parent folder\n\nrun mvn clean -am -pl maven-bug2\nobserve that the project reactor builds maven-bug1 then maven-bug2 as expected based on the dependency graph\n\nupdate the maven-bug2 pom to depend on maven-bug1 1.0\n\nrun mvn clean -am -pl maven-bug2\nobserve that the project reactor still builds maven-bug1 then maven-bug2 although maven-bug2 doesn't depend on maven-bug1 within this aggregate configuration (different version).\n\nI think the version is never considered when the reactor builds the list of project to build and should.\n\nThis issue relates to MNG-4237\n\nThe problem with this behaviour is that artifacts get build within the reactor for nothing typically when releasing as some of the artifacts within the reactor get released for no reason.",
        "also-make-dependents builds parent projects incorrectly I am attempting to use --also-make-dependents to build a minimal set of changed components in response to source code changes.\n\nHere is a sample project tree:\n\n* root (1.0.0)\n** p1 (1.0.0)\n*** c1 (1.0.1-SNAPSHOT)\n** p2 (1.0.1-SNAPSHOT) (depends on c1)\n** p3 (1.0.0)\n*** c2 (1.0.0)\n\nA developer adds a new project c3 under p3, modifies p3 to include c3, and modifies c1 so that it depends on c3.  The version numbers of all modified projects are updated to 1.0.1-SNAPSHOT.  The resulting project tree would appear as follows (with the modified projects in bold):\n\n* root (1.0.0)\n** p1 (1.0.0)\n*** *c1* (1.0.1-SNAPSHOT) (depends on c3)\n** p2 (1.0.1-SNAPSHOT) (depends on c1)\n** *p3* (1.0.1-SNAPSHOT)\n*** c2 (1.0.0)\n*** *c3* (1.0.1-SNAPSHOT)\n\nAfter the developer checks in these changes, the continuous integration server detects the changes and runs {{mvn --projects p1/c1,p3,p3/c3 --also-make-dependents deploy}}.  The expected result of the reactor would be:\n\n* p3 is deployed\n* c3 is deployed\n* c1 is deployed\n* p2 is deployed\n\nHowever when the command is run c2 is also built.  c2 is not a dependent on any of the modified projects and should not be built.  I assume it is being built because its parent is being built, but this should not happen.\n\nIf c2 declared p3:1.0.1-SNAPSHOT as its parent it should be rebuilt because a change in the parent could affect the child.  However c2 is a child module of p3:1.0.0 so a new version of p3 should not affect it.\n\nAlso, if the root project is modified another problem emerges.  Attempting to add a period (to reference the current working directory) to the project list causes the build to fail:\n\n{noformat}\nmvn --projects . --also-make-dependents\n\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Couldn't find specified project in module list: C:\\root\\.\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Fri Jul 10 14:48:00 CDT 2009\n[INFO] Final Memory: 5M/9M\n[INFO] ------------------------------------------------------------------------\n{noformat}"
    ],
    [
        "MNG-4894",
        "MNG-1388",
        "Profile is ignored for dependencies I have a war module with a dependency on a jar module.\n\nIn the jar module there are a number of dependencies defined in profiles.\n\nWhen packaging the war module with one of these profiles, the dependencies for that profile are not included in the war archive.\n\nThe attached file contains an example for this situation.\n\nIn the parent module I executed the following statements:\n{code}\nmvn install -N\nmvn clean install -P p2\n{code}\n\nIn the resulting war file I miss all the transitive dependencies defined in the profile 'p2'.\n\nThe following jar files can be found when running the commands with Maven 3:\n{code}\nWEB-INF/lib/postgresql-8.4-701.jdbc4.jar\nWEB-INF/lib/commons-lang-2.4.jar\nWEB-INF/lib/jar-1.0.jar\n{code}\n\nWhen running the commands with Maven 2.2.1 I get:\n{code}\nWEB-INF/lib/xml-apis-1.0.b2.jar\nWEB-INF/lib/commons-collections-2.1.jar\nWEB-INF/lib/commons-digester-1.6.jar\nWEB-INF/lib/postgresql-8.4-701.jdbc4.jar\nWEB-INF/lib/commons-validator-1.2.0.jar\nWEB-INF/lib/commons-lang-2.4.jar\nWEB-INF/lib/commons-logging-1.0.4.jar\nWEB-INF/lib/jar-1.0.jar\nWEB-INF/lib/oro-2.0.8.jar\n{code}",
        "Transitive Dependencies in a profile are not used I have a jar project file that defines a dependency inside a certain profile.  If I then include that project inside of another war project, the dependencies defined in the jar project's profile isn't getting transferred over to the war.\n\nIe we have this:\nA depends on SQL or Oracle depending on profile\nB depends on A.\nIf sql profile is active, I would expect that when I build B, it pulls\nthe transitive dependancy on sql from A.  "
    ],
    [
        "MNG-4899",
        "MNG-2210",
        "strange behavior during the dependency resolution Running mvn compile I have this error:\n\nCouldn't find a version in [2.0.0-alpha-14, 2.0.0-alpha-15, 2.0.0-alpha-16] to match range [2.0.0-alpha-1,)\n\nIs correct? Look strange for me....\n\n",
        "Dependency version range picks version 1.7.2-rc1 when specified as [1.8.0.1,) Added the following dependencies to a new project pom.xml file:\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>[3.8.1,)</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>[1.2.13,)</version>\n    </dependency>\n    <dependency>\n      <groupId>hsqldb</groupId>\n      <artifactId>hsqldb</artifactId>\n      <version>[1.8.0.1,)</version>\n    </dependency>\n  </dependencies>\n\nThis results in:\n[INFO] artifact log4j:log4j: checking for updates from central\n[DEBUG]   log4j:log4j:jar:1.2.13:compile (setting version to: 1.2.13 from range: [1.2.13,))\n[DEBUG]   log4j:log4j:jar:1.2.13:compile (selected for compile)\n[INFO] artifact junit:junit: checking for updates from central\n[DEBUG]   junit:junit:jar:4.0:test (setting version to: 4.0 from range: [3.8.1,))\n[DEBUG]   junit:junit:jar:4.0:test (selected for test)\n[INFO] artifact hsqldb:hsqldb: checking for updates from central\n[DEBUG]   hsqldb:hsqldb:jar:1.7.2-rc1:compile (setting version to: 1.7.2-rc1 from range: [1.8.0.1,))\n[DEBUG]   hsqldb:hsqldb:jar:1.7.2-rc1:compile (selected for compile)\n\nSame results with hsqldb version specified as [1.8,) or [1.8.0,) or [1.8.0.0,)\n\nHere's more tests:\n<version>1.8.0.1</version>\n[DEBUG]   hsqldb:hsqldb:jar:1.8.0.1:compile (selected for compile)\n\n<version>[1.8.0.1]</version>\n[DEBUG]   hsqldb:hsqldb:jar:1.8.0.1:compile (setting version to: 1.8.0.1 from range: [1.8.0.1,1.8.0.1])\n[DEBUG]   hsqldb:hsqldb:jar:1.8.0.1:compile (selected for compile)\n\nNot sure why 1.7.2-rc1 is being selected!\n\nYou can see all the versions available on Central: http://www.ibiblio.org/maven2/hsqldb/hsqldb/"
    ],
    [
        "MNG-4899",
        "MNG-3010",
        "strange behavior during the dependency resolution Running mvn compile I have this error:\n\nCouldn't find a version in [2.0.0-alpha-14, 2.0.0-alpha-15, 2.0.0-alpha-16] to match range [2.0.0-alpha-1,)\n\nIs correct? Look strange for me....\n\n",
        "Problem parsing version ranges My pom includes the following dependency:\n \n{code:xml}<dependency>\n  <groupId>it.unimaticaspa.unique</groupId>\n  <artifactId>unilet-core</artifactId>\n  <version>[5.0.9.0,5.0.10.0)</version>\n  <type>jar</type>\n</dependency>{code}\n\nWhen i try to build the project i get the following stacktrace:\n\n{noformat}[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:552)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.artifact.InvalidDependencyVersionException: Unable to parse version '[5.0.9.0,5.0.10.0)' for dependency 'it.unimaticaspa.unique:unilet-core:jar': Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:331)\n        at org.apache.maven.project.MavenProject.createArtifacts(MavenProject.java:1558)\n        at org.apache.maven.plugin.DefaultPluginManager.resolveTransitiveDependencies(DefaultPluginManager.java:1236)\n        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:397)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)\n        ... 16 more\nCaused by: org.apache.maven.artifact.versioning.InvalidVersionSpecificationException: Range defies version ordering: [5.0.9.0,5.0.10.0)\n        at org.apache.maven.artifact.versioning.VersionRange.parseRestriction(VersionRange.java:210)\n        at org.apache.maven.artifact.versioning.VersionRange.createFromVersionSpec(VersionRange.java:125)\n        at org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:327)\n        ... 20 more{noformat}\n\nIt seems that versions are compared as strings, because the problem only comes out comparing versions with different numbers of digits (such as  5.0.9.0 and 5.0.10.0). While comparing 5.0.8.0 with 5.0.9.0 everything is fine. "
    ],
    [
        "MNG-4899",
        "MNG-3518",
        "strange behavior during the dependency resolution Running mvn compile I have this error:\n\nCouldn't find a version in [2.0.0-alpha-14, 2.0.0-alpha-15, 2.0.0-alpha-16] to match range [2.0.0-alpha-1,)\n\nIs correct? Look strange for me....\n\n",
        "Handle date qualifier in DefaultArtifactVersion Eclipse artifacts use a date pattern in version qualifier and build fail with the following error\n\n{noformat}\n[INFO] Failed to resolve artifact.\n\nCouldn't find a version in [1.0.0-v20070606] to match range [1.0.0,2.0)\n  org.eclipse.equinox:app:jar:null\n{noformat}\n\nThe following patch adds javadoc for compareTo() to be more clear.\nAlso, it handles date pattern in the version to allow \"1.0.0\" < \"1.0.0-v20070606\". Internally, it compares \"1.0.0-19068845215\" (ie new Date(Integer.MAX_VALUE, 12, 31 )) to \"1.0.0-20070606\""
    ],
    [
        "MNG-4905",
        "MNG-2275",
        "Active profiles defined in parent pom are not inherited in children pom I've a parent pom which contains 2 profiles based on the OS (eg \"windows\" and \"not windows\"). The activation tag i used to determine this and works fine in this pom.\n\nI've a child pom (eg a module of the parent pom) where I'd like to use the active profile to tune my build goal. But in this child pom I could not get the active profile. If I launch \"mvn -P myProfile compile\" it works fine everywhere (parent and child).\n\nI'd like to have the inheritance of the active profiles defined in a parent pom in all its children modules.\n\nEasy to reproduce but could give a test case if needed.",
        "profiles should be merged when inherited I have some default profiles setup in a super parent pom that all projects inherit from. In some projects I want to change the active profile, but not from the CLI because other projects running in the same multi-project build need to have the normal default. I attempted to work around this by setting the profile to be active on a property in the child pom. See below for parent and child. It appears that when I do this, the child profile replaces the parent. It should be merged so that the properties are pulled from the parent and uses the activation from the child.\n\nparent:\n<!-- Setup default profiles. -->\n<profiles>\n\t<profile>\n\t\t<id>dev</id>\n\t\t<properties>\n\t\t\t<profile-default.values>src/main/filters/dev-default.values</profile-default.values>\n\t\t</properties>\t\t\t\n\t</profile>\n\t<profile>\n\t\t<id>auto-test</id>\n\t\t<properties>\n\t\t\t<profile-default.values>src/main/filters/auto-test-default.values</profile-default.values>\n\t\t</properties>\t\t\t\n\t</profile>\n\t<profile>\n\t\t<id>man-test</id>\n\t\t<properties>\n\t\t\t<profile-default.values>src/main/filters/man-test-default.values</profile-default.values>\n\t\t</properties>\t\t\t\n\t</profile>\n\t<profile>\n\t\t<id>prod</id>\n\t\t<properties>\n\t\t\t<profile-default.values>src/main/filters/prod-default.values</profile-default.values>\n\t\t</properties>\t\t\t\n\t</profile>\n</profiles>\n \n \nchild pom..\n \n   <!--  This is the property to override for custom properties in this project-->\n  <properties>\n        <client-ct-package.values>${user.default.values}</client-ct-package.values>\n  </properties>\n  <build>\n    <filters>\n      <filter>${profile-default.values}</filter>\n      <filter>${user.default.values}</filter>\n      <filter>${client-ct-package.values}</filter>\n    </filters>\n    <resources>\n      <resource>\n        <directory>src/main/resources</directory>\n        <filtering>true</filtering>\n      </resource>\n    </resources>\n  </build>\n   <!-- temporary to activate the CT production values until all projects can have prod values -->\n    <profiles>\n     <profile>\n      <id>prod</id>\n      <activation>\n          <property>\n             <name>deploy-ct</name>\n          </property>\n      </activation>\n\n"
    ],
    [
        "MNG-4924",
        "MNG-4865",
        "Running Maven 2.2.1 in Linux gives nullpointerexception Our requirement is to be able to invoke application builds using Maven. The invokation would be done from Hudson (running as a webapp on Glassfish App Server). We have been able to get this config up and running in Windows XP using a sample project. However, when we try to do the same thing in Linux, we get the following stacktrace (both when I try to run MVN install from BASH as well as from Hudson Console). In fact, we get the stacktrace even when we try to verify the Maven version from command line (using \"mvn --version\")\n\nStarted by user anonymous\n[workspace] $ /home/vn39238/apache-maven-2.2.1/bin/mvn -f /home/vn39238/PATWITHMAVEN/PATEJB/pom.xml install\njava.lang.NullPointerException: key can't be null\n\tat java.lang.System.checkKey(System.java:771)\n\tat java.lang.System.getProperty(System.java:647)\n\tat org.codehaus.classworlds.Configurator.configure(Configurator.java:240)\n\tat org.codehaus.classworlds.Launcher.configure(Launcher.java:156)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:426)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nFinished: FAILURE\n\n\nThe M2_HOME (/home/vn39238/apache-maven-2.2.1) and JAVA_HOME(/usr/java/jdk1.6.0_14) have been set in the environment. In spite of that, this error occurs. \n\nI was looking for some more info on troubleshooting and came across this thread:\nhttp://jira.codehaus.org/browse/MNG-4865?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel \n\nHowever, in spite of doing this, the problem still remains. Attached is the m2.conf and the mvn file. \n",
        "mvn fails because of null property I downloaded maven and ran 'maven -version' under 'C:\\workplace\\apache-maven-2.2.1\\bin'\nGot the error:\njava.lang.NullPointerException: key can't be null\n        at java.lang.System.checkKey(System.java:771)\n        at java.lang.System.getProperty(System.java:647)\n        at org.codehaus.classworlds.Configurator.configure(Configurator.java:240)\n        at org.codehaus.classworlds.Launcher.configure(Launcher.java:156)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:426)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nI ran the same on another XP PC with the same source, everything worked fine"
    ],
    [
        "MNG-4928",
        "MNG-4099",
        "mvn --encrypt-master-password is insecure gregw@Brick: ~\n[506] mvn --encrypt-master-password something-very-very-secret\n{zfC2klZItekHCPGwE+R0JZ2+RjyDlqxP343ThV0R3B5taWEHbI5t+QGfXOZ0mq9j}\n\ngregw@Brick: ~\n[507] history 2\n  506  mvn --encrypt-master-password something-very-very-secret\n  507  history 2\n\ncommands that take passwords should not accept them from the command line, as they are then visible in history and even in some PS output. They should prompt for passwords with echo turned off.\n\n\n\n\n",
        "Password encryption CLI switches should prompt for password if missing The -emp and -ep CLI switches should prompt for a password if the user omits it.  This would help to avoid having to escape shell characters in strong passwords.\n\nNote that the docs mention that these switches prompt for a password when they do not:\nhttp://maven.apache.org/guides/mini/guide-encryption.html"
    ],
    [
        "MNG-4928",
        "MNG-4841",
        "mvn --encrypt-master-password is insecure gregw@Brick: ~\n[506] mvn --encrypt-master-password something-very-very-secret\n{zfC2klZItekHCPGwE+R0JZ2+RjyDlqxP343ThV0R3B5taWEHbI5t+QGfXOZ0mq9j}\n\ngregw@Brick: ~\n[507] history 2\n  506  mvn --encrypt-master-password something-very-very-secret\n  507  history 2\n\ncommands that take passwords should not accept them from the command line, as they are then visible in history and even in some PS output. They should prompt for passwords with echo turned off.\n\n\n\n\n",
        "\"--encrypt-password\" and \"--encrypt-master-password\" should be interactive Password encrypting options require the password to be passed in the command line, which is not a \"secure place\"... You can find it later searching command history on most shells. What about just prompting for the password if none given ?"
    ],
    [
        "MNG-4930",
        "MNG-4148",
        "List of active profiles defined in ~/.m2/settings.xml gets lost when parsing dependency POMs Scenario:\n\n* {{root}} project with two sub projects, {{test-api}} and {{test-impl}}\n* {{~/.m2/settings.xml}} defines a property in a profile, {{xxx}}.\n* {{root/pom.xml}} defines a property, {{yyy}}, and a profile that defines another property, {{zzz}}.\n* {{test-impl}} depends on {{test-api}}\n* {{test-api}} declares a dependency that uses {{xxx}} as the {{groupId}}, {{yyy}} as the {{artifactId}} and {{zzz}} as the {{type}}.\n* Compile the {{root}} project with Maven ({{mvn compile}}), making sure the profiles are active, one way or another.\n\nWhen {{test-api}} is compiled, all goes well. When {{test-impl}} is compiled, Maven warns of the following:\n\n{noformat}\n[WARNING] The POM for test:test-api:jar:1.0-SNAPSHOT is invalid, transitive dependencies (if any) will not be available,\nenable debug logging for more details\n{noformat}\n\nTurning on debuggig ({{mvn -X compile}}) prints:\n{noformat}\n[WARNING] The POM for test:test-api:jar:1.0-SNAPSHOT is invalid, transitive dependencies (if any) will not be available:\n1 problem was encountered while building the effective model for test:test-api:1.0-SNAPSHOT\n[ERROR] 'dependencies.dependency.groupId' for ${xxx}:junit:jar with value '${xxx}' does not match a valid id pattern. @ \n{noformat}\n\nApparently, property interpolation failed for {{xxx}} but not for {{yyy}} or {{zzz}}, and {{xxx}} fails only when it is referenced in a _dependency_ of the current project. When it is referenced in the current project, it gets properly interpolated.\n\nWhat actually happens is that the list of active profiles defined outside the reactor gets lost when resolving dependencies of the current project. They are available when the current project's POM is parsed but not when parsing the POM of the current project's dependencies.\n\nNow, although this is just a warning in my sample scenario, the consequences in real life are more serious: \"no transitive dependencies\" means, e.g., modules not compiling that should, or JAR artifacts missing from a WAR artifact, etc., unless the user manually duplicates all the transitive dependencies missed by Maven, in the project that did not compile, or missed a few JAR files from its WAR artifact.\n\nAttached is a sample multi-module project as described above, a {{settings.xml}} file required for the project to compile and a patch that shows how the problem _could_ be eliminated on the maven-3 trunk ({{http://svn.apache.org/repos/asf/maven/maven-3/trunk}}).\n\nThe attached sample will give no warning prior to Maven 3.0 but if {{test-impl}} were to actually require {{test-api}}'s dependencies to compile, the problem would surface also with Maven 2.2.1 and possibly earlier.\n\nI don't think the attached patch is an elegant solution but it has the quality of touching very few files and having little or no side effect other than fixing the problem outlined above. In short, please, make a better fix.",
        "Apply profiles from settings.xml to POMs built from the repository When we declare a profile in the settings.xml, it will never be applied to POMs loaded from the Maven repository. This means that overriding the central repository definition - for instance - cannot be done without using mirror definitions, since transitive dependencies (any dependency of a direct dependency) will skip the modified definition and use the original from the super-POM instead.\n\nI'm attaching a testing setup that was originally reported for MNG-3553, which exhibits this problem when dealing with scope == import. The instructions for using it are as follows:\n\n{noformat}\nI installed locally a nexus server (1.3.3 Open Source) and I'm using maven 2.1.0 (I reproduced the issue with 2.0.10).\nIn the releases repository of nexus you upload all artifacts given in the toUpload directory :\n\n    * parent 1.0.0 pom\n    * dependencies 1.0.0 pom\n    * module 1.0.0 pom and jar\n\nYou'll find in the root of the archive my settings. It defines to use nexus for the central repository.\nYou launch a build of the project and you'll have :\n\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - org.apache.maven.it.mng3553:project:jar:1.0.0-SNAPSHOT\n[INFO]    task-segment: [install]\n[INFO] ------------------------------------------------------------------------\n[INFO] [resources:resources]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory E:\\jtb\\workspaces\\tests\\test-mng3553\\project\\src\\main\\resources\nDownloading: http://localhost:8081/nexus/content/groups/public//org/apache/maven/it/mng3553/module/1.0.0/module-1.0.0.pom\n867b downloaded  (module-1.0.0.pom)\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/it/mng3553/dependencies/1.0.0/dependencies-1.0.0.pom\n[WARNING] Unable to get resource 'org.apache.maven.it.mng3553:dependencies:pom:1.0.0'\nfrom repository central (http://repo1.maven.org/maven2): Authorization failed: Access denied to:\n  http://repo1.maven.org/maven2/org/apache/maven/it/mng3553/dependencies/1.0.0/dependencies-1.0.0.pom\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Failed to resolve artifact.\nGroupId: org.apache.maven.it.mng3553\nArtifactId: dependencies\nVersion: 1.0.0\nReason: Unable to download the artifact from any repository\n  org.apache.maven.it.mng3553:dependencies:pom:1.0.0\nfrom the specified remote repositories:\n  central (http://repo1.maven.org/maven2)\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Thu Apr 30 15:19:47 CEST 2009\n[INFO] Final Memory: 6M/254M\n[INFO] ------------------------------------------------------------------------\n\n\nYou can see that the project downloads successfully the module-1.0.0 from nexus but\nit fails for depencencies which is an import. It tries to download it from the real central repository\nand not from the one I defined in my settings.\nThe behavior is inconsistent...\n{noformat}"
    ],
    [
        "MNG-4930",
        "MNG-4538",
        "List of active profiles defined in ~/.m2/settings.xml gets lost when parsing dependency POMs Scenario:\n\n* {{root}} project with two sub projects, {{test-api}} and {{test-impl}}\n* {{~/.m2/settings.xml}} defines a property in a profile, {{xxx}}.\n* {{root/pom.xml}} defines a property, {{yyy}}, and a profile that defines another property, {{zzz}}.\n* {{test-impl}} depends on {{test-api}}\n* {{test-api}} declares a dependency that uses {{xxx}} as the {{groupId}}, {{yyy}} as the {{artifactId}} and {{zzz}} as the {{type}}.\n* Compile the {{root}} project with Maven ({{mvn compile}}), making sure the profiles are active, one way or another.\n\nWhen {{test-api}} is compiled, all goes well. When {{test-impl}} is compiled, Maven warns of the following:\n\n{noformat}\n[WARNING] The POM for test:test-api:jar:1.0-SNAPSHOT is invalid, transitive dependencies (if any) will not be available,\nenable debug logging for more details\n{noformat}\n\nTurning on debuggig ({{mvn -X compile}}) prints:\n{noformat}\n[WARNING] The POM for test:test-api:jar:1.0-SNAPSHOT is invalid, transitive dependencies (if any) will not be available:\n1 problem was encountered while building the effective model for test:test-api:1.0-SNAPSHOT\n[ERROR] 'dependencies.dependency.groupId' for ${xxx}:junit:jar with value '${xxx}' does not match a valid id pattern. @ \n{noformat}\n\nApparently, property interpolation failed for {{xxx}} but not for {{yyy}} or {{zzz}}, and {{xxx}} fails only when it is referenced in a _dependency_ of the current project. When it is referenced in the current project, it gets properly interpolated.\n\nWhat actually happens is that the list of active profiles defined outside the reactor gets lost when resolving dependencies of the current project. They are available when the current project's POM is parsed but not when parsing the POM of the current project's dependencies.\n\nNow, although this is just a warning in my sample scenario, the consequences in real life are more serious: \"no transitive dependencies\" means, e.g., modules not compiling that should, or JAR artifacts missing from a WAR artifact, etc., unless the user manually duplicates all the transitive dependencies missed by Maven, in the project that did not compile, or missed a few JAR files from its WAR artifact.\n\nAttached is a sample multi-module project as described above, a {{settings.xml}} file required for the project to compile and a patch that shows how the problem _could_ be eliminated on the maven-3 trunk ({{http://svn.apache.org/repos/asf/maven/maven-3/trunk}}).\n\nThe attached sample will give no warning prior to Maven 3.0 but if {{test-impl}} were to actually require {{test-api}}'s dependencies to compile, the problem would surface also with Maven 2.2.1 and possibly earlier.\n\nI don't think the attached patch is an elegant solution but it has the quality of touching very few files and having little or no side effect other than fixing the problem outlined above. In short, please, make a better fix.",
        "dependencyManagament dependencies within profiles are not activated by settings.xml  This issue is *not* reproducable with Maven 2.0.9, 2.0.10 and 2.2.2-RC1-SNAPSHOT.          \n\nI'm referring to the sample projects contained in profileBug.zip:\npreparation:\n\n- You need to set in your settings.xml: \n\n  <activeProfiles>\n     <activeProfile>testing</activeProfile>\n  </activeProfiles>\n\n- Install main-parent\n\nreproducing:\n\n- Install project parent. This will fail because of ChildTwo. \n\nThe transivite dependency of junit is not beeing resolved correctly through project ChildOne even it's not necessary. I guess not finding commons-lang is just a \"sequence error\" of the \"invalid\" pom of ChildOne.\n\nIt seems like the profile isn't activated by the settings.xml and so the dependencies aren't known in context of project ChildTwo transitive dependencies.\nBut e.g. childOne or childThree can be installed without any problems so the profile should be loaded correctly, the only difference to ChildTwo is that they don't have any transitive dependencies to other projects with the same parent. \n\nIf you cange in project parent the profile \"testing\" to:\n\n<activation>\n   <activeByDefault>true</activeByDefault>\n</activation>\n\nor change the profile activation by property and install project parent with -Dtesting, childTwo will be installed correctly.\n\nThis issue only occurs with maven 3.0 or 2.2.1. It works fine with maven 2.0.10 or 2.2.2-RC1-SNAPSHOT\n\nWill this error be fixed in maven 3.0?"
    ],
    [
        "MNG-4939",
        "MNG-4872",
        "transitive dependency exclusion fails when classifier specified on a subproject and building the root project. My issue is  related to MNG-3555.\n\nI have a root pom which has multiple child projects and poms. \nFor simplicity let us consider project Subproject1,Subproject2.\n\nSubproject1 has a distribution.xml which will install a classifier based jar (Subproject1-1.0-distribution.jar)along with the actual Subproject1-1.0.jar\nThe Subproject1-1.0-distribution.jar contains only those classes which are used in Subproject2. And its size is something around 10KB and \nthe Subproject1-1.0.jar  contains all the transitive dependencies and the complete functionality and the size is few MB.\n\nNow I want to have the Subproject1-1.0-distribution.jar as a dependency in Subproject2 and I am excluding all the third party jars.\n\nAfter going through closing comments of MNG-3555, I could understand that \nI should exclude for the main dependency as well. \n\n1.How can we mention that particular exclusion is for main dependency and particular exclusion is for classifier based dependency?\n\n2. Do I need to create two dependencies one for Subproject1 and other with classifier?\n\nHere my Subproject2 is in need of only Subproject1-1.0-distribution.jar only.  Why should I create one more dependency and exclude the jars.\n\nPS: 1. Interesting point is if I am building Subproject2 alone then the excluded  jars are getting excluded\nBut when I build the root, then my Subproject2 will not be able to exclude the excluded jars.\n2. If my Subproject2 has a similar dependency on SomeOther-1.0-distribution.jar, which is not a sibling, then either I build Subproject or I build root, all the excluded jars are getting excluded.\n",
        "Dependency exclusions not always honored for dependencies with classifier Like the summary says, I've encountered and tracked down a bug that prevents dependency exclusions from being honored by plugins when the dependency with the exclusions has a classifier. This seems to only occur or surface in multi-module builds.\n\nFor example, I have a multi-module project structured as follows:\n{noformat}\nmyproj-parent\n  myproj-a\n  myproj-b\n{noformat}\n\nIf {{myproj-a}} produces a classified artifact (say, an obfuscated JAR via ProGuard) and {{myproj-b}} has it as a dependency with exclusions, those exclusions will not be honored by plugins run in {{myproj-b}} (say, the webstart plugin).\n\nI think I've tracked the problem down to the {{replaceWithActiveArtifact(...)}} method of {{org.apache.maven.project.MavenProject}}. Specifically, see [lines 1772 through 1784|http://maven.apache.org/ref/2.2.1/xref/org/apache/maven/project/MavenProject.html#1772]. The following {{if}} clause does not account for artifacts with classifiers:\n{noformat}\nif ( ref.getArtifact() != null\n     && ref.getArtifact().getDependencyConflictId().equals( pluginArtifact.getDependencyConflictId() ) )\n{noformat}\n\nBecause the classified {{pluginArtifact}} does not match the _main_ artifact of {{ref}}, the artifact is not resolved from the currently building project's dependencies. As the method continues, it is instead resolved with {{myproj-a}}'s \"standard\" metadata, which of course don't include the exclusions in {{myproj-b}}.\n\nI've marked this bug a blocker because I can't think of a way around it and it's badly polluting one of my project's builds. Due to it, a webstart build that only needs 30 artifacts has over 100. I have not yet tried to reproduce it in Maven 3.x because our company likely won't be moving to it for a couple of months."
    ],
    [
        "MNG-4961",
        "MNG-4872",
        "CLONE -Dependency exclusions not always honored for dependencies with classifier Like the summary says, I've encountered and tracked down a bug that prevents dependency exclusions from being honored by plugins when the dependency with the exclusions has a classifier. This seems to only occur or surface in multi-module builds.\n\nFor example, I have a multi-module project structured as follows:\n{noformat}\nmyproj-parent\n  myproj-a\n  myproj-b\n{noformat}\n\nIf {{myproj-a}} produces a classified artifact (say, an obfuscated JAR via ProGuard) and {{myproj-b}} has it as a dependency with exclusions, those exclusions will not be honored by plugins run in {{myproj-b}} (say, the webstart plugin).\n\nI think I've tracked the problem down to the {{replaceWithActiveArtifact(...)}} method of {{org.apache.maven.project.MavenProject}}. Specifically, see [lines 1772 through 1784|http://maven.apache.org/ref/2.2.1/xref/org/apache/maven/project/MavenProject.html#1772]. The following {{if}} clause does not account for artifacts with classifiers:\n{noformat}\nif ( ref.getArtifact() != null\n     && ref.getArtifact().getDependencyConflictId().equals( pluginArtifact.getDependencyConflictId() ) )\n{noformat}\n\nBecause the classified {{pluginArtifact}} does not match the _main_ artifact of {{ref}}, the artifact is not resolved from the currently building project's dependencies. As the method continues, it is instead resolved with {{myproj-a}}'s \"standard\" metadata, which of course don't include the exclusions in {{myproj-b}}.\n\nI've marked this bug a blocker because I can't think of a way around it and it's badly polluting one of my project's builds. Due to it, a webstart build that only needs 30 artifacts has over 100. I have not yet tried to reproduce it in Maven 3.x because our company likely won't be moving to it for a couple of months.",
        "Dependency exclusions not always honored for dependencies with classifier Like the summary says, I've encountered and tracked down a bug that prevents dependency exclusions from being honored by plugins when the dependency with the exclusions has a classifier. This seems to only occur or surface in multi-module builds.\n\nFor example, I have a multi-module project structured as follows:\n{noformat}\nmyproj-parent\n  myproj-a\n  myproj-b\n{noformat}\n\nIf {{myproj-a}} produces a classified artifact (say, an obfuscated JAR via ProGuard) and {{myproj-b}} has it as a dependency with exclusions, those exclusions will not be honored by plugins run in {{myproj-b}} (say, the webstart plugin).\n\nI think I've tracked the problem down to the {{replaceWithActiveArtifact(...)}} method of {{org.apache.maven.project.MavenProject}}. Specifically, see [lines 1772 through 1784|http://maven.apache.org/ref/2.2.1/xref/org/apache/maven/project/MavenProject.html#1772]. The following {{if}} clause does not account for artifacts with classifiers:\n{noformat}\nif ( ref.getArtifact() != null\n     && ref.getArtifact().getDependencyConflictId().equals( pluginArtifact.getDependencyConflictId() ) )\n{noformat}\n\nBecause the classified {{pluginArtifact}} does not match the _main_ artifact of {{ref}}, the artifact is not resolved from the currently building project's dependencies. As the method continues, it is instead resolved with {{myproj-a}}'s \"standard\" metadata, which of course don't include the exclusions in {{myproj-b}}.\n\nI've marked this bug a blocker because I can't think of a way around it and it's badly polluting one of my project's builds. Due to it, a webstart build that only needs 30 artifacts has over 100. I have not yet tried to reproduce it in Maven 3.x because our company likely won't be moving to it for a couple of months."
    ],
    [
        "MNG-4961",
        "MNG-4939",
        "CLONE -Dependency exclusions not always honored for dependencies with classifier Like the summary says, I've encountered and tracked down a bug that prevents dependency exclusions from being honored by plugins when the dependency with the exclusions has a classifier. This seems to only occur or surface in multi-module builds.\n\nFor example, I have a multi-module project structured as follows:\n{noformat}\nmyproj-parent\n  myproj-a\n  myproj-b\n{noformat}\n\nIf {{myproj-a}} produces a classified artifact (say, an obfuscated JAR via ProGuard) and {{myproj-b}} has it as a dependency with exclusions, those exclusions will not be honored by plugins run in {{myproj-b}} (say, the webstart plugin).\n\nI think I've tracked the problem down to the {{replaceWithActiveArtifact(...)}} method of {{org.apache.maven.project.MavenProject}}. Specifically, see [lines 1772 through 1784|http://maven.apache.org/ref/2.2.1/xref/org/apache/maven/project/MavenProject.html#1772]. The following {{if}} clause does not account for artifacts with classifiers:\n{noformat}\nif ( ref.getArtifact() != null\n     && ref.getArtifact().getDependencyConflictId().equals( pluginArtifact.getDependencyConflictId() ) )\n{noformat}\n\nBecause the classified {{pluginArtifact}} does not match the _main_ artifact of {{ref}}, the artifact is not resolved from the currently building project's dependencies. As the method continues, it is instead resolved with {{myproj-a}}'s \"standard\" metadata, which of course don't include the exclusions in {{myproj-b}}.\n\nI've marked this bug a blocker because I can't think of a way around it and it's badly polluting one of my project's builds. Due to it, a webstart build that only needs 30 artifacts has over 100. I have not yet tried to reproduce it in Maven 3.x because our company likely won't be moving to it for a couple of months.",
        "transitive dependency exclusion fails when classifier specified on a subproject and building the root project. My issue is  related to MNG-3555.\n\nI have a root pom which has multiple child projects and poms. \nFor simplicity let us consider project Subproject1,Subproject2.\n\nSubproject1 has a distribution.xml which will install a classifier based jar (Subproject1-1.0-distribution.jar)along with the actual Subproject1-1.0.jar\nThe Subproject1-1.0-distribution.jar contains only those classes which are used in Subproject2. And its size is something around 10KB and \nthe Subproject1-1.0.jar  contains all the transitive dependencies and the complete functionality and the size is few MB.\n\nNow I want to have the Subproject1-1.0-distribution.jar as a dependency in Subproject2 and I am excluding all the third party jars.\n\nAfter going through closing comments of MNG-3555, I could understand that \nI should exclude for the main dependency as well. \n\n1.How can we mention that particular exclusion is for main dependency and particular exclusion is for classifier based dependency?\n\n2. Do I need to create two dependencies one for Subproject1 and other with classifier?\n\nHere my Subproject2 is in need of only Subproject1-1.0-distribution.jar only.  Why should I create one more dependency and exclude the jars.\n\nPS: 1. Interesting point is if I am building Subproject2 alone then the excluded  jars are getting excluded\nBut when I build the root, then my Subproject2 will not be able to exclude the excluded jars.\n2. If my Subproject2 has a similar dependency on SomeOther-1.0-distribution.jar, which is not a sibling, then either I build Subproject or I build root, all the excluded jars are getting excluded.\n"
    ],
    [
        "MNG-4964",
        "MNG-4927",
        "build properties not resolved in profiles project.build.sourceDirectory is not resolved in the profile :\n\n<project>\n    ...\n    <profiles>\n        <profile>\n            <id>wscompile</id>\n            <activation>\n                <file>          \n                    <missing>${project.build.sourceDirectory}/com/company/directory</missing>\n                </file>         \n            </activation>\n            <build>...</build>\n        </profile>\n    </profiles>\n    ...\n</project>\n\n",
        "profile activation have trouble when based on project variable I tried to manage the generation of Java code from a wsdl via a Maven profile that is activated only if the build directory does not exist, and the activation profile behaved oddly.\n\nFor example, this activation code is always active, even if {{'target/generated-sources'}} exists.\n{code:xml}\n<activation>\n\t<activeByDefault>false</activeByDefault>\n\t<file>\n\t\t<missing>${project.build.directory}/generated-sources/</missing>\n\t</file>\n</activation>\n{code}\n\nI create a simple test case.\n# first step, check profiles which are activate\n{code:title=mvn help:active-profiles|borderStyle=solid}\n$ mvn help:active-profiles\n[INFO] Scanning for projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building profile 0.0.1\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-help-plugin:2.1.1:active-profiles (default-cli) @ profile ---\n[INFO] \nActive Profiles for Project 'tescase:profile:jar:0.0.1': \n\nThe following profiles are active:\n\n - test-profile-ok (source: pom)\n - test-profile-ko (source: pom)\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n{code}\n# second step, compile\n{code:title=mvn compile|borderStyle=solid}\n$ mvn compile\n[INFO] Scanning for projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building profile 0.0.1\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-antrun-plugin:1.3:run (wsdl2java-ko) @ profile ---\n[INFO] Executing tasks\n     [echo] profile test-profile-ko : unfortunately this profile is always active\n[INFO] Executed tasks\n[INFO] \n[INFO] --- maven-antrun-plugin:1.3:run (wsdl2java-ok) @ profile ---\n[INFO] Executing tasks\n     [echo] profile test-profile-ok : This profile is active if and only if, the directory 'target/generated-sources' does not exist\n[INFO] Executed tasks\n[INFO] \n[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ profile ---\n[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory /home/david/tmp/jira/maven/activationProfile/src/main/resources\n[INFO] \n[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ profile ---\n[INFO] No sources to compile\n[INFO] \n[INFO] --- maven-antrun-plugin:1.3:run (default) @ profile ---\n[INFO] Executing tasks\n     [echo] build sample\n     [echo] mkdir /home/david/tmp/jira/maven/activationProfile/target/generated-sources\n    [mkdir] Created dir: /home/david/tmp/jira/maven/activationProfile/target/generated-sources\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n{code}\n# third step : the first error, *{color:red}the profile which is activate by variable is always active{color}*\n{code:title=mvn help:active-profiles|borderStyle=solid}\n$ mvn help:active-profiles\n[INFO] Scanning for projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building profile 0.0.1\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-help-plugin:2.1.1:active-profiles (default-cli) @ profile ---\n[INFO] \nActive Profiles for Project 'tescase:profile:jar:0.0.1': \n\nThe following profiles are active:\n\n - test-profile-ko (source: pom)\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n{code}\n# fourth step : when i relaunch the compile *{color:red}the profile is still active{color}*\n{code:title=mvn compile|borderStyle=solid}\n$ mvn compile\n[INFO] Scanning for projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building profile 0.0.1\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-antrun-plugin:1.3:run (wsdl2java-ko) @ profile ---\n[INFO] Executing tasks\n     [echo] profile test-profile-ko : unfortunately this profile is always active\n[INFO] Executed tasks\n...\n{code}"
    ],
    [
        "MNG-4972",
        "MNG-4947",
        "NPE in DefaultConverterLookup.findConverterForType() $ mvn --version\nApache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)\nJava version: 1.6.0_22\nJava home: /usr/lib/jvm/java-6-sun-1.6.0.22/jre\nDefault locale: en_US, platform encoding: ANSI_X3.4-1968\nOS name: \"linux\" version: \"2.6.24-28-server\" arch: \"i386\" Family: \"unix\"\n\n\n\nSteps to reproduce:\n\n1) Check out Hibernate Core 3.3.2\n2) Download the attached settings-hbn.xml and change the <localRepository> to some empty dir\n2) cd src/core\n3) mvn -s settings-hbn.xml clean install  (no profile)\n4) When I run this for the first time (empty repo), I've got the exception below.\n\n...\nDownloading: http://uk.maven.org/maven2/commons-httpclient/commons-httpclient/2.0.2/commons-httpclient-2.0.2.jar\nDownloading: http://uk.maven.org/maven2/jdom/jdom/1.0/jdom-1.0.jar\nDownloading: http://uk.maven.org/maven2/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\nDownloading: http://uk.maven.org/maven2/de/zeigermann/xml/xml-im-exporter/1.1/xml-im-exporter-1.1.jar\nDownloading: http://uk.maven.org/maven2/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar\n\n\n\nDownloading: http://uk.maven.org/maven2/slide/slide-webdavlib/2.1/slide-webdavlib-2.1.jar\nDownloading: http://uk.maven.org/maven2/org/apache/maven/wagon/wagon-webdav/1.0-beta-2/wagon-webdav-1.0-beta-2.jar\n\n\n\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Hibernate Core Parent POM\n[INFO]    task-segment: [clean, install]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup.findConverterForType(DefaultConverterLookup.java:115)\n        at org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup.lookupConverterForType(DefaultConverterLookup.java:92)\n        at org.codehaus.plexus.component.configurator.converters.composite.CollectionConverter.fromConfiguration(CollectionConverter.java:175)\n        at org.codehaus.plexus.component.configurator.converters.ComponentValueSetter.configure(ComponentValueSetter.java:247)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:137)\n        at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:56)\n        at org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:54)\n        at org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:47)\n        at org.codehaus.plexus.personality.plexus.lifecycle.phase.AutoConfigurePhase.execute(AutoConfigurePhase.java:39)\n        at org.codehaus.plexus.lifecycle.AbstractLifecycleHandler.start(AbstractLifecycleHandler.java:101)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.startComponentLifecycle(AbstractComponentManager.java:105)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.createComponentInstance(AbstractComponentManager.java:95)\n        at org.codehaus.plexus.component.manager.ClassicSingletonComponentManager.getComponent(ClassicSingletonComponentManager.java:92)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:331)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:440)\n        at org.apache.maven.execution.MavenSession.lookup(MavenSession.java:138)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.findMappingsForLifecycle(DefaultLifecycleExecutor.java:1358)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindLifecycleForPackaging(DefaultLifecycleExecutor.java:1292)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:1275)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)\n        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n",
        "NPE in at org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup.findConverterForType() STR:\n1) svn co https://anonsvn.jboss.org/repos/hibernate/core/tags/hibernate-3.3.2.GA_CP03 \n2) cd hibernate-3.3.2.GA_CP03/src/core\n3) Download the attached settings-hbn.xml\n4) mvn -s ../../settings-hbn.xml site\n\n\nhibernate/src/core $ mvn -s ../../settings-hbn.xml site\n...\n164K downloaded  (plexus-utils-1.1.jar)\n16K downloaded  (wagon-webdav-1.0-beta-2.jar)\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Hibernate Core Parent POM\n[INFO]    task-segment: [site]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] null\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\njava.lang.NullPointerException\n        at org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup.findConverterForType(DefaultConverterLookup.java:115)\n        at org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup.lookupConverterForType(DefaultConverterLookup.java:92)\n        at org.codehaus.plexus.component.configurator.converters.composite.CollectionConverter.fromConfiguration(CollectionConverter.java:175)\n        at org.codehaus.plexus.component.configurator.converters.ComponentValueSetter.configure(ComponentValueSetter.java:247)\n        at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:137)\n        at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:56)\n        at org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:54)\n        at org.codehaus.plexus.component.configurator.AbstractComponentConfigurator.configureComponent(AbstractComponentConfigurator.java:47)\n        at org.codehaus.plexus.personality.plexus.lifecycle.phase.AutoConfigurePhase.execute(AutoConfigurePhase.java:39)\n        at org.codehaus.plexus.lifecycle.AbstractLifecycleHandler.start(AbstractLifecycleHandler.java:101)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.startComponentLifecycle(AbstractComponentManager.java:105)\n        at org.codehaus.plexus.component.manager.AbstractComponentManager.createComponentInstance(AbstractComponentManager.java:95)\n        at org.codehaus.plexus.component.manager.ClassicSingletonComponentManager.getComponent(ClassicSingletonComponentManager.java:92)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:331)\n        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:440)\n        at org.apache.maven.execution.MavenSession.lookup(MavenSession.java:138)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.findMappingsForLifecycle(DefaultLifecycleExecutor.java:1358)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.bindLifecycleForPackaging(DefaultLifecycleExecutor.java:1292)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.constructLifecycleMappings(DefaultLifecycleExecutor.java:1275)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:534)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)\n        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)\n        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 minute 4 seconds\n[INFO] Finished at: Mon Dec 20 17:32:55 CET 2010\n[INFO] Final Memory: 9M/303M\n[INFO] ------------------------------------------------------------------------\nondra@ondra-redhat: ~/work/hbn/runner/EAP-5.1/work-space/src/core $"
    ],
    [
        "MNG-4985",
        "MNG-1388",
        "Transitive dependencies with classifiers not resolved correctly Tested against maven 3.0.1, and the latest 3.0.2. I don't know whether this works for 2.2.1.\nThe project described below is attached to this issue.\n\nI have a multi-module project that has modules: A, B, and C. B depends on A, C depends on B and transitively on A.\nAdditionally, there is a web archive that depends on B and C directly and transitively on A:\n\nI have 2 profiles: dev and qa. They define a single property named 'classifier' - and this property is used in maven jar and war plugins:\n\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>2.3.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n    </configuration>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-war-plugin</artifactId>\n    <version>2.1.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n        <failOnMissingWebXml>false</failOnMissingWebXml>\n    </configuration>\n</plugin>\n\nThus, depending on the profile, different version of the application is build and installed / deployed (actually not in this demo, as I don't declare any repository to deploy to).\n\nSupposing none of the modules in any of the profiles has been built, go on and try to build the project with -Pqa turned on. Parent pom is correctly deployed, A is correctly deployed, and so is B. The problem is with module C which has a transitive dependency on A, and somehow it doesn't take the classifier into account:\n\n[ERROR] Failed to execute goal on project C: Could not resolve dependencies for project test:C:jar:0.0.1-SNAPSHOT: Could not find artifact test:A:jar:*dev*:0.0.1-SNAPSHOT -> [Help 1]\n\nWhen I first build everything using the dev profile (which is turned on by default), the build of the qa profile goes Ok. But, when I go to C and invoke 'mvn dependency:tree', I see:\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ C ---\n[INFO] test:C:jar:0.0.1-SNAPSHOT\n[INFO] \\- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO]    \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n\nAs can be seen, the transitive dependency used an invalid classifier.\n\nHowever, I can't use the workaround that I build dev and then qa, as in my current project we have a web module that packages these jars inside WEB-INF/lib - and the transitive dependencies are packaged with invalid qualifiers. Please check out the jars that are packages within WEB-INF/lib of the generated war file - it packages a qa jar only for the direct dependency. Here is the output of 'mvn dependency:tree -Pqa':\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ web ---\n[INFO] test:web:war:0.0.1-SNAPSHOT\n[INFO] +- test:C:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:B:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] +- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] \\- org.apache.geronimo.specs:geronimo-servlet_3.0_spec:jar:1.0:provided\n\nIt gets even worse - there is also a direct dependency on B, so when the -Pqa switch is used, both B-qa.jar and B-dev.jar end up in the war file - dev is the transitive dep, qa the direct one.\nFor us this means disaster - mixing of jars from other profiles means the jars use different JMS resources, different JDBC pools and so on. Supposing B is a JPA module, we end up with the same persistence unit twice, with the same name, but using different pools (one for devs, one for qa).\n\nSetting at critical as I don't know any workaround.\n\nIf I am doing something wrong, this means I don't understand profiles and classifiers correctly. In this case, please be generous and point me to the right resources.",
        "Transitive Dependencies in a profile are not used I have a jar project file that defines a dependency inside a certain profile.  If I then include that project inside of another war project, the dependencies defined in the jar project's profile isn't getting transferred over to the war.\n\nIe we have this:\nA depends on SQL or Oracle depending on profile\nB depends on A.\nIf sql profile is active, I would expect that when I build B, it pulls\nthe transitive dependancy on sql from A.  "
    ],
    [
        "MNG-4985",
        "MNG-4894",
        "Transitive dependencies with classifiers not resolved correctly Tested against maven 3.0.1, and the latest 3.0.2. I don't know whether this works for 2.2.1.\nThe project described below is attached to this issue.\n\nI have a multi-module project that has modules: A, B, and C. B depends on A, C depends on B and transitively on A.\nAdditionally, there is a web archive that depends on B and C directly and transitively on A:\n\nI have 2 profiles: dev and qa. They define a single property named 'classifier' - and this property is used in maven jar and war plugins:\n\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>2.3.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n    </configuration>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-war-plugin</artifactId>\n    <version>2.1.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n        <failOnMissingWebXml>false</failOnMissingWebXml>\n    </configuration>\n</plugin>\n\nThus, depending on the profile, different version of the application is build and installed / deployed (actually not in this demo, as I don't declare any repository to deploy to).\n\nSupposing none of the modules in any of the profiles has been built, go on and try to build the project with -Pqa turned on. Parent pom is correctly deployed, A is correctly deployed, and so is B. The problem is with module C which has a transitive dependency on A, and somehow it doesn't take the classifier into account:\n\n[ERROR] Failed to execute goal on project C: Could not resolve dependencies for project test:C:jar:0.0.1-SNAPSHOT: Could not find artifact test:A:jar:*dev*:0.0.1-SNAPSHOT -> [Help 1]\n\nWhen I first build everything using the dev profile (which is turned on by default), the build of the qa profile goes Ok. But, when I go to C and invoke 'mvn dependency:tree', I see:\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ C ---\n[INFO] test:C:jar:0.0.1-SNAPSHOT\n[INFO] \\- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO]    \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n\nAs can be seen, the transitive dependency used an invalid classifier.\n\nHowever, I can't use the workaround that I build dev and then qa, as in my current project we have a web module that packages these jars inside WEB-INF/lib - and the transitive dependencies are packaged with invalid qualifiers. Please check out the jars that are packages within WEB-INF/lib of the generated war file - it packages a qa jar only for the direct dependency. Here is the output of 'mvn dependency:tree -Pqa':\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ web ---\n[INFO] test:web:war:0.0.1-SNAPSHOT\n[INFO] +- test:C:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:B:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] +- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] \\- org.apache.geronimo.specs:geronimo-servlet_3.0_spec:jar:1.0:provided\n\nIt gets even worse - there is also a direct dependency on B, so when the -Pqa switch is used, both B-qa.jar and B-dev.jar end up in the war file - dev is the transitive dep, qa the direct one.\nFor us this means disaster - mixing of jars from other profiles means the jars use different JMS resources, different JDBC pools and so on. Supposing B is a JPA module, we end up with the same persistence unit twice, with the same name, but using different pools (one for devs, one for qa).\n\nSetting at critical as I don't know any workaround.\n\nIf I am doing something wrong, this means I don't understand profiles and classifiers correctly. In this case, please be generous and point me to the right resources.",
        "Profile is ignored for dependencies I have a war module with a dependency on a jar module.\n\nIn the jar module there are a number of dependencies defined in profiles.\n\nWhen packaging the war module with one of these profiles, the dependencies for that profile are not included in the war archive.\n\nThe attached file contains an example for this situation.\n\nIn the parent module I executed the following statements:\n{code}\nmvn install -N\nmvn clean install -P p2\n{code}\n\nIn the resulting war file I miss all the transitive dependencies defined in the profile 'p2'.\n\nThe following jar files can be found when running the commands with Maven 3:\n{code}\nWEB-INF/lib/postgresql-8.4-701.jdbc4.jar\nWEB-INF/lib/commons-lang-2.4.jar\nWEB-INF/lib/jar-1.0.jar\n{code}\n\nWhen running the commands with Maven 2.2.1 I get:\n{code}\nWEB-INF/lib/xml-apis-1.0.b2.jar\nWEB-INF/lib/commons-collections-2.1.jar\nWEB-INF/lib/commons-digester-1.6.jar\nWEB-INF/lib/postgresql-8.4-701.jdbc4.jar\nWEB-INF/lib/commons-validator-1.2.0.jar\nWEB-INF/lib/commons-lang-2.4.jar\nWEB-INF/lib/commons-logging-1.0.4.jar\nWEB-INF/lib/jar-1.0.jar\nWEB-INF/lib/oro-2.0.8.jar\n{code}"
    ],
    [
        "MNG-4989",
        "MNG-3782",
        "Properties defined in settings.xml not being passed to dependent project dependency classifiers Given the following projects and dependencies:\nProject A -> Project B -> Project C\n\nIf Project B defines:\n<dependency>\n  <groupId>ProjectC</groupId>\n  <artifact>ProjectC</artifact>\n  <version>1.0</version>\n  <classifier>${target.classifier}</classifier>\n</dependency>\n\nAnd the settings.xml contains:\n<profile>\n...\n  <properties>\n    <target.classifier>someclassifier</target.classifier>\n  </properties>\n...\n</profile>\n\nWhere the profile in question is the active profile.\n\nProject B will build fine.\nProject A will fail, with:\n  Failure to find ProjectC:ProjectC:${target.classifier}:1.0",
        "Variable substition not performed in transitive dependency using value from active profile When invoking the 'mvn compile' command and a profile is active, defined in settings.xml, a variable substitution is not performed in a transitive dependency. \n\nIn the example provided the project to be built, C, depends on B which in its turn depends on A. The versions of B and A to be used are defined in a profile, the POM-files defines a variable indicating the versions. The profile in question is defined in the settings.xml and is always active (check with command 'mvn help:active-profiles'). The results of project A and B are successfully built and installed in the local repository. \n\nInvoking a build for project C using a command line parameter indicating, 'mvn compile -Dparentversion=0.0.1-SNAPSHOT, the versions render a successful build. The transitive dependency is resolved correctly. \n\nThis problem is also visible in Eclipse, m2eclipse, as the project C in the example provided, does not build (error indication). The example provided includes Eclipse projects displaying this (version 0.9.7.20081001-2217 of the Eclipse plugin is used). \n\nThe settings.xml and a build log are provided as attachments to this issue. "
    ],
    [
        "MNG-4994",
        "MNG-2872",
        "[regression] Inheritance of project/site/scm URLs does not take child's relative location to parent into account For a multi-module layout like\n{noformat}\nparent/\n  pom.xml\nchild/\n  pom.xml\n{noformat}\nand a project URL like \"http://foo.org/parent\" inherited from the parent, the child is expected to end up with the URL \"http://foo.org/child\" instead of \"http://foo.org/parent/child\", i.e. the child's relative location to the parent should be considered during inheritance.",
        "Don't append artifactId when parent pom already has artifactId in URL I want to define the url for all my projects from one central pom. the pom project itself has the same url structure as the child projects.\n\nThis is for all urls that can be inherited, e.g. distribution site, deployment url, etc.\n\nI would like to specify some complete url like\n\nprotocol:/my.server.com/some/path/to/the/${groupId}/${artifactId}\n\nFor example, with the actual implementation I get either the parent pom site deployed to the groupId directory, or I get the child projects deployed to the grouId/artifactId/artifactId directory.\n\nAt the moment I have add the urls on every project, although they always have the same pattern.\n\n"
    ],
    [
        "MNG-4994",
        "MNG-4508",
        "[regression] Inheritance of project/site/scm URLs does not take child's relative location to parent into account For a multi-module layout like\n{noformat}\nparent/\n  pom.xml\nchild/\n  pom.xml\n{noformat}\nand a project URL like \"http://foo.org/parent\" inherited from the parent, the child is expected to end up with the URL \"http://foo.org/child\" instead of \"http://foo.org/parent/child\", i.e. the child's relative location to the parent should be considered during inheritance.",
        "No way to avoid adding artifactId to site urls Currently, whenever a child pom inherits from a parent (and doesn't override the relevant settings), both project.url and project.distributionManagement.site.url have the name of the child artifact appended.\r\n\r\nIt would be nice to be able to have something like\r\n\r\n{code:xml}\r\n<url>scpexe://host/blah/${project.artifactId}/${project.version}</url>\r\n{code}\r\n\r\nand have this inherited to all child poms in the obvious way.\r\n\r\nMy usecase for this is that we have a single parent pom for all our projects, with useful settings such as distributionManagement, and I'd like to be able to deploy their sites to a single directory and have Apache generate me a directory listing for all the child projects. However, I curently have no way of releasing the parent project without obliterating the list of child projects."
    ],
    [
        "MNG-4994",
        "MNG-4878",
        "[regression] Inheritance of project/site/scm URLs does not take child's relative location to parent into account For a multi-module layout like\n{noformat}\nparent/\n  pom.xml\nchild/\n  pom.xml\n{noformat}\nand a project URL like \"http://foo.org/parent\" inherited from the parent, the child is expected to end up with the URL \"http://foo.org/child\" instead of \"http://foo.org/parent/child\", i.e. the child's relative location to the parent should be considered during inheritance.",
        "Inheritance of URLs behaves differently for aggregated and non-aggregated child projects AFAIK, inheritance and aggregation are orthogonal in Maven. Whether a child project is a module of its parent, however, affects how URLs are inherited. (This bug affects {{/project/url}}, {{/project/distributionManagement/site/url}}, {{/project/scm/connection}}, {{/project/scm/developerConnection}}, and {{/project/scm/url}}.)\n\nThis is exemplified by the attached projects, which serve as a testcase. The aggregated child project does respect the trailing slash of its parent's URLs and thus does not append its own {{artifactId}} to the URLs. The non-aggregated child, however, does _not_ respect the trailing slash; consequently, its {{artifactId}} is added erroneously: A {{/project/url}} of http://www.example.org/projects/${project.artifactId}/ is turned into http://www.example.org/projects/non-aggregated-child/non-aggregated-child/ in the *non-aggregated* child project, whereas it becomes http://www.example.org/projects/aggregated-child/ in the *aggregated* child project. (Note that both projects are children of the same parent project.)\n\n"
    ],
    [
        "MNG-5004",
        "MNG-4326",
        "updatePolicy=\"never\" always does 1 initial check  I'm having an issue with marking my repository as <updatePolicy>never</updatePolicy>. It seems as though even with the never parameter, the first time an artifact is referenced, an initial check to the remote repo happens. After that, the metadata.xml is created locally and further checks for updates don't occur.\n\nSituation:\nartifactB depends on artifactA\n\n Procedure:\n1) install artifactA locally \n2) build artifactB locally, with repo updatepolicy never. The hope would be that the locally installed artifactA will be used, without ever contacting the remote repository.\n\nResult:\n Maven goes to the remote repository to get info on artifactA (\"checking for updates\") If there is a newer than local version, it is downloaded.  metadata.xml is created locally with name metada-<repoid>.xml\n\nupdatePolicy=never should never check for updates if there is a local copy.\n\n\nSample and log attached. Notice in the log this section:\n[DEBUG] Connecting to repository: 'crib-snap' with url: 'http://9.44.169.102:8888/nexus/content/repositories/crib-snap'.\n[DEBUG] Using Wagon implementation lightweight from default mapping for protocol http\n[DEBUG] repository metadata for: 'snapshot enf.test:artifactA:1.0.0-SNAPSHOT' could not be found on repository: crib-snap\n[DEBUG] Skipping disabled repository central\n[DEBUG] artifactA: using locally installed snapshot\n[DEBUG]   enf.test:artifactA:jar:1.0.0-SNAPSHOT:compile (selected for compile)\n[DEBUG] artifactA: using locally installed snapshot\n\nIt should never connect to the repository, since this artifact is local. \nA few other things:\n1) this happens for each defined repository that has never been visited.\n2) a metadata file is created in the repo for each repo after this occurs. \n\nVersion experience:\nWith maven 2.2.1 it behaves as I posted, always doing one initial check and pulling down the newer version if available.\n\nWith maven 3.0.1 it behaves correctly and does not go to the remote repository at all.\n",
        "Maven should not check snapshot repositories for dependencies in the reactor If I build a multi-module project with intermodule dependencies, Maven will still check the snapshot repository for module artifacts in order to update the metadata in the local repository.  Maven should not check the snapshot repository for any artifacts that are currently in the reactor.\n\nIn addition, if I install a snapshot artifact to the local repository, and then build another project that depends on the first project, Maven will check the snapshot repository.  Instead, Maven should only check the snapshot repository when there is no up to date (according to the update policy) local artifact installation.\n\nThis seems to be working normally in Maven 3.0-alpha-6, but still requires more testing."
    ],
    [
        "MNG-5034",
        "MNG-3244",
        "Wrong evaluation of {project.artifactId} variable in child POMs if included in <url> element  Suppose you have the following snippet in your parent POM:\n{code}\n...\n<artifactId>parent</artifactId>\n...\n<url>https://intranet.xy.sk/javaweb/${project.artifactId}</url>\n<distributionManagement>\n\t<site>\n\t\t<id>site-server</id>\n\t\t<name>Site Server</name>\n\t\t<url>https://intranet.xy.sk/javaweb/${project.artifactId}</url>\n\t</site>\n</distributionManagement>\n...\n{code}\n\nThen 'mvn help:effective-pom' command for this project will produce correct URL values:\n- <url>https://intranet.xy.sk/javaweb/parent</url>\n- <url>dav:https://intranet.xy.sk/javaweb/parent</url>\n\nBut, if you create a child project that declares above defined POM as a parent (and does not explicitly specify its own <url> or <distributionManagement> sections, i.e. it should inherit these sections from parent), the output from 'mvn help:effective-pom' command will contain wrong values:\n* e.g. for the child POM with artifactId = 'child', the output is:\n** <url>https://intranet.xy.sk/javaweb/child/child</url> \n** and <url>dav:https://intranet.xy.sk/javaweb/child/child</url> in 'distributionManagement' section.\n*** I think correct output should end only with one 'child' at the end of the url as follows: https://intranet.xy.sk/javaweb/child\n* and if you have a sub-module 'grandchild' of this child project, which also defines this 'child' artifact as its parent, the output is:\n** <url>https://intranet.xy.sk/javaweb/grandchild/child/grandchild</url>\n** <url>dav:https://intranet.xy.sk/javaweb/grandchild/child/grandchild</url>\n*** The correct output should be: https://intranet.xy.sk/javaweb/child/grandchild",
        "inherited site url not properly handling parameters Here is the test case to reproduce this problem.  Take the following two pom.xml files\n\n{code:xml}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<groupId>org.bar</groupId>\n\t<artifactId>foo</artifactId>\n\t<name>foo</name>\n\t<version>1.0-SNAPSHOT</version>\n\t<packaging>pom</packaging>\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<distributionManagement>\n\t\t<site>\n\t\t\t<id>foo-site</id>\n\t\t\t<url>file://C:/Documents and Settings/foo/.m2/site/${project.artifactId}</url>\n\t\t</site>\n\t</distributionManagement>\n</project>{code}\n\n{code:xml}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<groupId>org.bar</groupId>\n\t<artifactId>baz</artifactId>\n\t<name>baz</name>\n\t<version>1.0-SNAPSHOT</version>\n\t<packaging>pom</packaging>\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<artifactId>foo</artifactId>\n\t\t<groupId>org.bar</groupId>\n\t\t<version>1.0-SNAPSHOT</version>\n\t</parent>\n</project>{code}\n\nAnd run the site-deploy goal on each.  What you get under the site directory is this\n\n{noformat}- site\n/- foo\n---/site docs\n/- baz\n---/- baz (extra directory)\n--- ---/site docs{noformat}\n\nThis is the simplest test case.  In the case where I have a \"grandparent\" pom, the site directory uses the grandparent/parent as the path to the site, and doesn't use the actual artifactId of the artifact I'm creating the site for."
    ],
    [
        "MNG-5039",
        "MNG-4885",
        "Maven does not properly track class files to be included in jar/test breaking incremental build When files in the source tree (either src/main or src/test) are renamed or removed, the class files resulting from their prior compilation remain in the corresponding target/ directories.  It seems that surefire and package plugins simply grab everything from target/ and as a result, incremental builds are not correct.  For example,\n\n* If you remove a test source file and the test will continue to run. This is bad esp when the test is failing; packaging will fail even though it should not.\n* If you remove/rename a source file and the class file will continue to be in the jar.  This may cause tests to succeed even though they should not.  (And if you share the jar, this will affect downstream non-test dependencies.)\n\nI wrote up a test suite for the second case and put it up at https://github.com/sit/java-build-test. To run it ...\n\n   git clone git://github.com/sit/java-build-test.git\n   cd java-build-test\n   sh runme.sh\n\n(It does rely on git to automate the rename/delete actions though so a tar of the sources won't work.)\nIn addition to Maven, it tests Gradle (which works) and Buildr (which behaves the same as Maven).\n\nWhile incremental builds are not the recommendation for official deliverables, this does make Maven appear extremely unreliable to developers who never know after syncing whether they will have to do a clean build or if an incremental one is correct.",
        "Why incremental build is not supported natively by Maven? I have a multi-module project with two sub-modules. I compile and package it without mistakes. The build is complete. Then I make a change in one {{.java}} file in one of them. And now I'm trying to package the whole project again. Maven re-runs tests in both two modules, static code analysis in both modules, etc.\n\nWhy so? It's a very ineffective way of building, as far as I understand. Maybe maven can introduce a mechanism of \"dependency discovery\" between files. Like:\n\n{noformat}\nfoo.jar depends on:\n  abc.java\n  cde.java\nbar.jar depends on:\n  xxx.java\n{noformat}\n\nWhen there is a change in {{cde.java}} only - maven SHOULD NOT do anything with {{bar.jar}}. This is how Unix {{make}} utility is working... Thanks."
    ],
    [
        "MNG-5052",
        "MNG-2807",
        "ciManagement configuration ignore combine.children The configuration ciManagement/notifiers ignore the attribute combine.children=\"append\" when merging with a parent POM.\n\nWhen merging, no matter what, the child pom overwrite the parent notifiers, even if combine.children=\"append\" is supplied.\n\n\nParent POM fragment\n\n{code:xml}  <ciManagement>\n    <system>continuum</system>\n    <url>http://continuum.com</url>\n    <notifiers>\n      <notifier>\n        <type>mail</type>\n        <sendOnError>true</sendOnError>\n        <sendOnFailure>true</sendOnFailure>\n        <sendOnSuccess>true</sendOnSuccess>\n        <sendOnWarning>true</sendOnWarning>\n        <configuration>\n          <address>admin@example.com</address>\n        </configuration>\n      </notifier>\n    </notifiers>\n  </ciManagement>{code}\n\n\n========================================================\n\nChild POM fragment\n\n{code:xml}   <ciManagement>\n    <notifiers combine.children=\"append\">\n      <notifier>\n        <type>mail</type>\n        <sendOnError>false</sendOnError>\n        <sendOnFailure>true</sendOnFailure>\n        <sendOnSuccess>false</sendOnSuccess>\n        <sendOnWarning>false</sendOnWarning>\n        <configuration>\n          <address>list_dev@example.com</address>\n          <committers>true</committers>\n        </configuration>\n      </notifier>\n    </notifiers>\n  </ciManagement>{code}\n\n\n=========================================================\n\nResulted POM fragment ( using mvn projecthelp:effective-pom )\n\n{code:xml}  <ciManagement>\n    <notifiers>\n      <notifier>\n        <sendOnError>false</sendOnError>\n        <sendOnSuccess>false</sendOnSuccess>\n        <sendOnWarning>false</sendOnWarning>\n        <configuration>\n          <address>list_dev@example.com</address>\n          <committers>true</committers>\n        </configuration>\n      </notifier>\n    </notifiers>\n  </ciManagement>{code}\n\n\n\n=========================================================\nExpected POM fragment\n\n{code:xml}  <ciManagement>\n    <system>continuum</system>\n    <url>http://continuum.com</url>\n    <notifiers>\n      <notifier>\n        <configuration>\n          <address>admin@example.com</address>\n        </configuration>\n      </notifier>\n      <notifier>\n        <sendOnError>false</sendOnError>\n        <sendOnSuccess>false</sendOnSuccess>\n        <sendOnWarning>false</sendOnWarning>\n        <configuration>\n          <address>list_dev@example.com</address>\n          <committers>true</committers>\n        </configuration>\n      </notifier>\n    </notifiers>\n  </ciManagement>{code}\n\n=========================================================\n\nThe parent POM notifier is completely ignored, even though combine.children=\"append\" is supplied.\n\nTested with Maven 2.2.1 and 3.0.3 without success.\n\nThe attempted goal is to have admin to be notified for every event, but the developer of certain package (the child) to be notified only should the build fail.",
        "ciManagement from parent is not merging with children If I define the following in my parent pom:\n{code:xml}\n<ciManagement>\n  <system>continuum</system>\n  <url>http://blah</url>\n</ciManagement>\n{code}\nand then in the child pom I have the following:\n{code:xml}\n<ciManagement>\n  <notifiers>\n    <notifier>\n      <type>mail</type>\n      <configuration>\n        <address>blah</address>\n      </configuration>\n    </notifier>\n  </notifiers>\n</ciManagement>\n{code}\nThe ciManagement for the effective pom lacks the system and url properties from the parent pom. Seems like it should be merging them but isn't. This would helpful for reducing code duplication."
    ],
    [
        "MNG-5088",
        "MNG-2258",
        "The order of plugins within the same phase cannot be specified in Maven 3 This report is a duplicate of MNG-2258, HOWEVER it seems no one is paying attention to that issue as it is a Blocker Bug but it has been around for 5 years now and is still not assigned to anyone. I realise it's poor form to create a duplicate bug, and I apologise, but it seemed to me that adding a comment to an issue that's been ignored for 5 years would probably not have any effect.\n\nThe problem is simple: people need the ability to control the order in which plugins within the same phase are executed. At the moment this appears not to be possible, at least in Maven 3.0.3 - the latest and greatest, right?\n\nI am attaching a simple pom which, when executed with 'mvn install', executes the plugins in the opposite order to what is specified in the pom (on my machine, at least). No other source files are necessary for reproducing the problem.\n\nAlso attached is the -X output of running the build.\n\nIt's my understanding that someone submitted a patch or at least suggested a simple solution on the older issue, MNG-2258.\n\nI don't mind if this issue is closed as a duplicate, as long as someone is assigned to look at MNG-2258.\n\nThanks.",
        "Wrong execution order of plugins in same phase AFAIK plugins should be execute in the same order as they are listed in the POM, when bound to the same phase. This does not happen, the execution order is arbitrary."
    ],
    [
        "MNG-5146",
        "MNG-4687",
        "parent.relativePath Warning is very misleading When a parent pom.xml is located in a sibling directory as the children, and <relativePath> is not set in the <parent> element of the children, maven spits out a completely bogus, very misleading, warning message.\n\nFor example, suppose com.fubar  and com.parent are in sibling directories (along with a bunch of other modules), and com.fubar specifies com.parent as its parent, but does snot specify a parent.relativePath in it parent element. \n\nWhen you run a build, you get the following...\n\n[INFO] Scanning for projects...\n[WARNING]\n[WARNING] Some problems were encountered while building the effective model for com.fubar:jar:1234.5\n[WARNING] 'parent.relativePath' points at com.someRandomModule instead of com.parent, please verify your project structure @ line\n10, column 11\n[WARNING]\n[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.\n[WARNING]\n[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.\n[WARNING]\n\nThe warning incorrectly states that the child pom has specified com.someRandomModule (a  completely unrelated module) as its parent when that is completely not the case. The unlreated module, in this case, happens to be an existing module in a differrnt  sibling directory, but otherwise has no relation whatsoever to the parent or child.\n\nIt would be much better to  warn about the actual problem....\n\nThe actual problem is that maven first tries to resolve parent poms locally based on the value of relativePath in the parent element of the child.  IF it does not find it there, it will then resolve the parent from the repos.  The current default value of relativepath is ../pom.xml  (which in my case doesn;t work because my parent is in a sibling directory) \n\nThe warning should  be changed to something useful, such as....\n\n[WARNING]  Could not resolve parent pom locally using parent.relativePath value of ../pom.xml.  Parent pom will be resolved from  local or remote repository. To disable local parent pom resolution, specify <relativePath><relativePath> in you <parent> element.\n\n\n\n\n\n\n\n\n\n",
        "Maven should not warn about incorrect parent path when no relativePath is specified If a module pom uses a parent other than the one in the parent directory, maven logs a warning.  In some cases it is necessary that a module pom has an external parent pom, and there is no way to refer to this external pom in the relativePath.  If nothing is specified in the relativePath, Maven should not log the warning.\n\n{noformat}\n[WARNING] 'parent.relativePath' of POM org.maven.test:relative-path-parent:0.0.1-SNAPSHOT (/home/pgier/projects/MNG-relativePath/module-1/pom.xml) points at org.maven.test:relative-path-test instead of org.apache.maven:maven-parent, please verify your project structure @ \n{noformat}\n\nThe attached zip reproduces the warning."
    ],
    [
        "MNG-5224",
        "MNG-5036",
        "REGRESSION: Injected Settings in a Mojo are missing the profiles from settings.xml If you have a Mojo with \n\n{code}\n/**\n * @parameter expression=\"${settings}\"\n * @required\n * @readonly\n */\nprivate Settings settings;\n{code}\n\nIn Maven 2.2.1, the Settings included all the profiles, in Maven 3.0.3 the profiles are all missing.\n\nThis issue becomes critical, as most users using Maven Release Plugin will be storing their gpg.passphrase as a property in a profile in their settings.xml, and as of Maven Release Plugin 2.2.2 we serialize the injected Settings to a file with the result that most users will be unable to use Maven 3.0.3 with Maven Release Plugin 2.2.2",
        "Settings.getProfiles() returning an empty list This is related to MPH-82: in the \"help:all-profiles\" goal, [Settings.getProfiles()|http://maven.apache.org/plugins/maven-help-plugin/xref/org/apache/maven/plugins/help/AllProfilesMojo.html#317] returns an empty list since Maven 3.0. Strangely, it works fine when run with mvnDebug (without breakpoint)."
    ],
    [
        "MNG-5225",
        "MNG-5221",
        "The default version of the maven-site-plugin as defined in the site-lifecycle must be 3.x http://svn.apache.org/viewvc/maven/maven-3/trunk/maven-core/src/main/resources/META-INF/plexus/components.xml?view=markup#l116\n\nThe version still refers to 2.0.1, which it not compatible with Maven3",
        "Default version of m-site-p does not work (no reports) By default, v2.0.1 of maven-site-plugin is used. However, v3.0 of the m-site-p is required to fully work with Maven 3.0.x. Thus, the site part does not work out-of-the-box (no reports are generated) which is unfortunate as it makes it unnecessary complicated for new users (and simple tests where you don't want to do extensive configuration in the pom).\n\nI ask for the default version of maven-site-plugin to be bumped to v3.0."
    ],
    [
        "MNG-5273",
        "MNG-5255",
        "Transitive dependencies with scope provided ending up in the final artifact Marking jaxws-rt as a provided dependency:\n\n{noformat}<dependency>\n\t<groupId>com.sun.xml.ws</groupId>\n\t<artifactId>jaxws-rt</artifactId>\n\t<version>2.1.4</version>\n\t<scope>provided</scope>\n</dependency>{noformat}\n\nCorrectly resolves jaxb-impl as a provided dependency (dependency:tree output from 3.0.3 and 3.0.4):\n\n{noformat}[INFO] +- com.sun.xml.ws:jaxws-rt:jar:2.1.4:provided\n[INFO] | +- com.sun.xml.bind:jaxb-impl:jar:2.1.7:provided\n[INFO] | +- com.sun.xml.stream.buffer:streambuffer:jar:0.7:provided\n[INFO] | +- com.sun.xml.stream:sjsxp:jar:1.0.1:provided\n[INFO] | +- org.jvnet.staxex:stax-ex:jar:1.2:provided\n[INFO] | +- com.sun.org.apache.xml.internal:resolver:jar:20050927:provided\n[INFO] | \\- org.jvnet:mimepull:jar:1.2:provided {noformat}\n\nBut for some reason, in Maven 3 (tried 3.0.3 and 3.0.4), using a packaging type of \"war\", jaxb-impl-2.1.7 ends up in the final artifact.\n\nIt is correctly omitted from the final artifact in maven 2.x.",
        "Dependency with 'provided' scope has its transitive dependency included in final artifact Expected: A dependency declared with a scope of 'provided', along with any transitive dependencies, should not be included in the final artifact.\n\nActual: I have a dependency, jsp-api, declared with 'provided' scope. This dependency has a dependency of its own, servlet-api. The servlet-api.jar is being included in the web-inf/lib folder of the resultant war file.\n\nBackground: We recently upgraded from Maven 2.2.1 to Maven 3.0.4. The problem was not witnessed until after the upgrade.\n\nSteps to Reproduce: Run mvn install, then have a look at the web-inf/lib folder. Notice that the servlet-api.jar has been included.\n\nAdditional Info: It seems that I can only reproduce this behavior when declaring a specific dependency in my pom, spring-ldap. Here is the dependency tree for the given pared-down project (attached):\n\n--- maven-dependency-plugin:2.1:tree (default-cli) @ provided-scope-not-working ---\ncom.bug.example:provided-scope-not-working:war:0.0.1-SNAPSHOT\n+- javax.servlet:jsp-api:jar:2.0:provided\n|  \\- javax.servlet:servlet-api:jar:2.4:provided\n\\- org.springframework.ldap:spring-ldap:jar:1.2.1:compile\n   +- commons-logging:commons-logging:jar:1.0.4:compile\n   +- commons-lang:commons-lang:jar:2.1:compile\n   +- org.springframework:spring-beans:jar:2.0.6:compile\n   |  +- (commons-logging:commons-logging:jar:1.1:compile - omitted for conflict with 1.0.4)\n   |  \\- (org.springframework:spring-core:jar:2.0.6:compile - omitted for duplicate)\n   \\- org.springframework:spring-core:jar:2.0.6:compile\n      \\- (commons-logging:commons-logging:jar:1.1:compile - omitted for conflict with 1.0.4)"
    ],
    [
        "MNG-5290",
        "MNG-1323",
        "Plugin extensions (dependencies) not resolved in reactor build Could you please port the fix from [http://jira.codehaus.org/browse/MNG-1323] to 2.2.x?\n\n",
        "Plugin extensions (dependencies) not resolved in reactor build I've added a dependency on an Ant Task in project/build/plugins/plugin[artifactId='maven-antrun-plugin']/dependencies/ and run that anttask using the antrun plugin.\n\nWhen run from the project dir itself it runs fine.\nWhen running from the root of the project tree (reactor build, project one level below root),\nantrun bails out because the taskdef can't be found (not on classpath).\n\nIt looks like the dependency isn't resolved, or not added to the plugins' classrealm.\n"
    ],
    [
        "MNG-5290",
        "MNG-1836",
        "Plugin extensions (dependencies) not resolved in reactor build Could you please port the fix from [http://jira.codehaus.org/browse/MNG-1323] to 2.2.x?\n\n",
        "inherited plugin dependencies I have project composed of a reactor/parent pom.xml and a few module.\n\nIn the parent pom.xml, I have somthing like this :\n\n<plugins>\n....\n          <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n     \t\t\t\t<!-- The assembly plugin is not flexible enought for what we have to do -->\n       \t\t\t\t<phase>package</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<property name=\"version.number\" value=\"${project.version}\"/>\n         \t\t\t\t\t<ant antfile=\"src/build/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals><goal>run</goal></goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<inherited>false</inherited>\n\t\t</plugin>\n...\n</plugins>\n\nIn one of the module, I have \n\n  \t<plugins> \n...\n \t    <plugin>\n  \t\t\t<artifactId>maven-antrun-plugin</artifactId>\n  \t\t\t<executions>\n     \t\t\t<execution>\n       \t\t\t\t<phase>generate-test-sources</phase>\n       \t\t\t\t<configuration>\n         \t\t\t\t<tasks>\n         \t\t\t\t\t<ant antfile=\"src/test/ant/build.xml\" inheritRefs=\"true\"/>\n\t        \t\t\t</tasks>\n\t        \t\t\t<testSourceRoot>target/generated-sources/nextmock</testSourceRoot>\n       \t\t\t\t</configuration>\n       \t\t\t\t<goals>\n         \t\t\t\t<goal>run</goal>\n       \t\t\t\t</goals>\n     \t\t\t</execution>\n   \t\t\t</executions>\n   \t\t\t<dependencies>\n   \t\t\t\t     <dependency>\n\t\t\t\t\t\t<!-- Required to use javac --> \n\t\t\t\t\t\t<groupId>sun.jdk</groupId>\n\t\t\t\t\t\t<artifactId>tools</artifactId>\n\t\t\t\t\t\t<version>1.5</version>\n\t\t\t\t\t\t<scope>system</scope>\n\t\t\t\t\t\t<systemPath>${java.home}/../lib/tools.jar</systemPath>\n\t\t\t\t\t</dependency>\n   \t\t\t</dependencies>\n\t\t</plugin>\n...\n</plugins>\n\nIt seems that the dependencies is in the sub-module is not loaded, probably because the plugin is loaded in the parent pom (or in the reactor pom which is the same in many cases) and not updated afterward.\n\nThe simple work around is to place the dependencies into the reactor plugin declaration. (A strange thing is that the dependecy doesn't need to be present in the module declaration anymore in that case)\n\nI tried also to place it only int the pluginManagment section but it doesn't work.  The dependency is not loaded.\n"
    ],
    [
        "MNG-5290",
        "MNG-1949",
        "Plugin extensions (dependencies) not resolved in reactor build Could you please port the fix from [http://jira.codehaus.org/browse/MNG-1323] to 2.2.x?\n\n",
        "project-level plugin dependencies not handled correctly in multimodule builds plugin containers are only initialized once per build, which means they may contain incorrect project-introduced dependencies for project Y in a multimodule build (polluted by project X predecessor). We should look at ways of dumping plugin containers with project-specific configurations, or else providing a container overlay to handle project-specific dependencies, etc.\n\nNOTE: This is tied into the notions of build extensions, which will have similar consequences on the core container."
    ],
    [
        "MNG-5290",
        "MNG-2174",
        "Plugin extensions (dependencies) not resolved in reactor build Could you please port the fix from [http://jira.codehaus.org/browse/MNG-1323] to 2.2.x?\n\n",
        "<pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins (potentially scoped to only affecting child POM plugins that live within a <profile>) <pluginManagement><plugins><plugin><dependencies> do not propogate to child POM plugins.\n\nKenny believe this works OKAY if the childs are using the parent <pluginManagement> preconfigured plugins in their main <build> section however it does NOT work if the childs are trying to use those preconfigured plugins via their own <profiles>. Configuration propogates through okay but dependencies are missing and have to be respecified in the child POMs.\n\n\n"
    ],
    [
        "MNG-5290",
        "MNG-2946",
        "Plugin extensions (dependencies) not resolved in reactor build Could you please port the fix from [http://jira.codehaus.org/browse/MNG-1323] to 2.2.x?\n\n",
        "Module-by-Profile seems to break plugin dependencies Using Module-by-Profile i ran into a problem with dependencies. My pom looks like this:\n\n    <profiles>\n        <profile>\n            <id>default</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>integration</id>\n            <modules>\n                <module>module1</module>\n                <module>module2</module>\n                <module>module3</module>\n                <module>integration</module>\n            </modules>\n        </profile>\n    </profiles>\n\nThe integration module runs the integration tests. \n\nThe integration module contain an antrun plugin. \n\nRunning the build on the integration module only works fine. \n\nRunning it from the parent project using the integration profile breaks the build. The problem is that the plugin dependencies are not accessible to the ant build files (and therefore, i suppose, to the plugin). \n"
    ],
    [
        "MNG-5290",
        "MNG-3950",
        "Plugin extensions (dependencies) not resolved in reactor build Could you please port the fix from [http://jira.codehaus.org/browse/MNG-1323] to 2.2.x?\n\n",
        "With multiple modules using the same plugin later invocations of the plugin are not initialized In Module A I have an invocation of the antrun plugin. In module B I have another invocation of antrun but this plugin has an additional dependency on ant-contrib. If I run mvn in the root of the project I get a taskdef not found error from ant because the additional dependency is not on the classpath for the invocation in module B.\n\nEmbedded error: The following error occurred while executing this line:\n/data/workspaces/workspace/MoleTracker/uberjar/build.xml:20: Could not create task or type of type: foreach.\n\nIf I run mvn -f moduleB/pom.xml it runs fine.\n\nworkaround is to configure all plugin configurations the same but this seems a tad ham fisted.\n\nI assume this is a general fault for all plugins."
    ],
    [
        "MNG-5290",
        "MNG-4178",
        "Plugin extensions (dependencies) not resolved in reactor build Could you please port the fix from [http://jira.codehaus.org/browse/MNG-1323] to 2.2.x?\n\n",
        "Plugin dependency not always included to classpath Plugins not always see their dependencies.\n\nFor example. I got project with parent project -\n- if I run mvn install on child project mvn package runs correctly.\n- if i run mvn install on parent project then child project is build with error, plugin doesn't see their dependency and fails with class not found\n\nExample of child project \nShort example\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>oss</groupId>\n\t\t<artifactId>oss</artifactId>\n\t\t<version>1.0.0-SNAPSHOT</version>\n\t\t<relativePath>../pom.xml</relativePath>\n\t</parent>\n\n\t<groupId>oss</groupId>\n\t<artifactId>oss-ws</artifactId>\n\t<packaging>war</packaging>\n(...)\n                     <dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n                          <scope>provided</scope>             <!-- if dependecy is compile evething runs ok-->\n\t  </dependency>\n\t</dependencies>\n        <build>\n\t  <plugins>\n            <plugin>\n\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t<artifactId>jaxws-maven-plugin</artifactId>\n\t\t<executions>\n\t\t<execution>\n\t\t  <id>wsdl_generate_service_classes</id>\n\t\t<phase>process-classes</phase>\n\t  \t<goals>\n\t          <goal>wsgen</goal>\n                </goals>\n\t\t<configuration>\t\n \t\t<genWsdl>true</genWsdl>\n                <sei>oss.ossServiceImpl</sei>\n              </configuration>\n\t    </execution>\n\t  </executions>\n\t<dependencies>\n\t  <dependency>\n\t    <groupId>${groupId}</groupId>\n\t    <artifactId>oss-rpc</artifactId>\n\t    <version>${version}</version>\n\t  </dependency>\n\t</dependencies>\n      </plugin>\n(...)\n\nParent project \n\n(..)\n<modules>\n\t\t<module>oss</module>\n\t</modules>\n"
    ],
    [
        "MNG-5472",
        "MNG-5207",
        "M3 also-make-dependents completely broken Command-line option -amd (--also-make-dependents) is completely broken in M3. Here a list of processed projects with M3:\n\n{noformat}\n$ mvn-3.0.5 -amd -pl internal/commons/ldap validate\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO] \n[INFO] Scalaris Commons LDAP Project\n[INFO] eIP UsersMgmt Provider LDAP\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n<snip>\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] Scalaris Commons LDAP Project ..................... SUCCESS [0.152s]\n[INFO] eIP UsersMgmt Provider LDAP ....................... SUCCESS [0.014s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.505s\n[INFO] Finished at: Tue Apr 30 09:03:02 CEST 2013\n[INFO] Final Memory: 223M/638M\n[INFO] ------------------------------------------------------------------------\n{noformat}\n\nThe same with M221:\n\n{noformat}\n$ mvn-2.2.1 -amd -pl internal/commons/ldap validate\n[INFO] Scanning for projects...\n[INFO] Reactor build order: \n[INFO]   Scalaris Commons LDAP Project\n[INFO]   eIP UsersMgmt Provider LDAP\n[INFO]   eIP SecService EJB\n[INFO]   eIP SecService Client Commons\n[INFO]   eIP Datastore Connector for Scalaris DMS\n[INFO]   eIP Datastore Connector integration tests\n[INFO]   eIP EventMonitor OraDMS Provider\n[INFO]   eIP OracleText PreIdx Commons\n[INFO]   eIP OracleText PreIdx EJB\n[INFO]   eIP OracleText PreIdx Client Commons\n[INFO]   eIP OracleText PreIdx WebClient\n[INFO]   eIP OracleText PreIdx EAR\n[INFO]   eIP SecService WebClient\n[INFO]   eIP SecService WebService\n[INFO]   eIP SecService WebServiceX\n[INFO]   eIP SecService EAR\n[INFO]   eIP SecService WebService Client\n[INFO]   eIP SecService WebServiceX Client\n[INFO]   eIP UsersMgmt EAR\n[INFO]   essencio Exporter Job Processor Service EJB\n[INFO]   essencio Exporter Client Commons\n[INFO]   essencio Exporter Server\n[INFO]   essencio Exporter OraDMS Provider\n[INFO]   essencio File Upload WebService\n[INFO]   essencio File Upload WebService Client Application\n[INFO]   inCursa WebWorkplace\n[INFO]   inCursa Base FileUpload Client Configuration\n[INFO]   inCursa Base FileUpload WebService\n[INFO]   inCursa Base eIP EventMonitor EAR\n[INFO]   inCursa Base eIP Server\n[INFO]   inCursa Base Workplace\n[INFO]   inCursa Base Application Server Configuration\n[INFO]   inCursa Solutions Base Distribution\n[INFO]   inCursa Base Project Definition\n[INFO]   inCursa Base Exporter Server Application Configuration\n[INFO]   inCursa Base Exporter EAR\n[INFO]   inCursa Base Project\n[INFO]   Document Future doculife inCursa Workplace Client\n[INFO]   Document Future doculife inCursa Workplace\n[INFO]   Document Future doculife Project Distribution\n[INFO] ------------------------------------------------------------------------\n<snip>\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] ------------------------------------------------------------------------\n[INFO] Scalaris Commons LDAP Project ......................... SUCCESS [0.048s]\n[INFO] eIP UsersMgmt Provider LDAP ........................... SUCCESS [0.000s]\n[INFO] eIP SecService EJB .................................... SUCCESS [0.001s]\n[INFO] eIP SecService Client Commons ......................... SUCCESS [0.000s]\n[INFO] eIP Datastore Connector for Scalaris DMS .............. SUCCESS [0.001s]\n[INFO] eIP Datastore Connector integration tests ............. SUCCESS [0.000s]\n[INFO] eIP EventMonitor OraDMS Provider ...................... SUCCESS [0.001s]\n[INFO] eIP OracleText PreIdx Commons ......................... SUCCESS [0.000s]\n[INFO] eIP OracleText PreIdx EJB ............................. SUCCESS [0.001s]\n[INFO] eIP OracleText PreIdx Client Commons .................. SUCCESS [0.000s]\n[INFO] eIP OracleText PreIdx WebClient ....................... SUCCESS [0.039s]\n[INFO] eIP OracleText PreIdx EAR ............................. SUCCESS [0.001s]\n[INFO] eIP SecService WebClient .............................. SUCCESS [0.001s]\n[INFO] eIP SecService WebService ............................. SUCCESS [0.000s]\n[INFO] eIP SecService WebServiceX ............................ SUCCESS [0.001s]\n[INFO] eIP SecService EAR .................................... SUCCESS [0.000s]\n[INFO] eIP SecService WebService Client ...................... SUCCESS [0.001s]\n[INFO] eIP SecService WebServiceX Client ..................... SUCCESS [0.000s]\n[INFO] eIP UsersMgmt EAR ..................................... SUCCESS [0.001s]\n[INFO] essencio Exporter Job Processor Service EJB ........... SUCCESS [0.000s]\n[INFO] essencio Exporter Client Commons ...................... SUCCESS [0.000s]\n[INFO] essencio Exporter Server .............................. SUCCESS [0.022s]\n[INFO] essencio Exporter OraDMS Provider ..................... SUCCESS [0.000s]\n[INFO] essencio File Upload WebService ....................... SUCCESS [0.000s]\n[INFO] essencio File Upload WebService Client Application .... SUCCESS [0.000s]\n[INFO] inCursa WebWorkplace .................................. SUCCESS [0.020s]\n[INFO] inCursa Base FileUpload Client Configuration .......... SUCCESS [0.001s]\n[INFO] inCursa Base FileUpload WebService .................... SUCCESS [0.000s]\n[INFO] inCursa Base eIP EventMonitor EAR ..................... SUCCESS [0.001s]\n[INFO] inCursa Base eIP Server ............................... SUCCESS [0.000s]\n[INFO] inCursa Base Workplace ................................ SUCCESS [0.000s]\n[INFO] inCursa Base Application Server Configuration ......... SUCCESS [0.000s]\n[INFO] inCursa Solutions Base Distribution ................... SUCCESS [0.000s]\n[INFO] inCursa Base Project Definition ....................... SUCCESS [0.000s]\n[INFO] inCursa Base Exporter Server Application Configuration  SUCCESS [0.000s]\n[INFO] inCursa Base Exporter EAR ............................. SUCCESS [0.000s]\n[INFO] inCursa Base Project .................................. SUCCESS [0.000s]\n[INFO] Document Future doculife inCursa Workplace Client ..... SUCCESS [0.001s]\n[INFO] Document Future doculife inCursa Workplace ............ SUCCESS [0.000s]\n[INFO] Document Future doculife Project Distribution ......... SUCCESS [0.000s]\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 11 seconds\n[INFO] Finished at: Tue Apr 30 09:02:35 CEST 2013\n[INFO] Final Memory: 291M/657M\n[INFO] ------------------------------------------------------------------------\n{noformat}\n\nActually I believe this is a result of MNG-5207 that demonstrates tham M3 is no longer able to calculate a proper build order at all.",
        "[Regression] Maven 3 fails to calculate proper build order with dependencies with classifiers Maven 3.0.3 and 3.0.4 RC1 fails to build the projects of the reactor in proper order, if a transitive dependency (that is part of the reactor build) is overruled in the dependencyManagement section with the current SNAPSHOT version. Build order is perfectly calculated with Maven 2.2.1."
    ],
    [
        "MNG-5501",
        "MNG-4840",
        "Prerequisites don't work against Maven-3.1.0 adding \n{code}<prerequisites><maven>3.1.0</maven></prerequisites>{code}\n\ndoes not stop the project from being built with mvn-3.0.4 or mvn-3.0.5\n\nIs Prerequisites suppose to work or not?\nBecause there is no sign of it being deprecated throughout the documentation.\n\n(I don't want to use the enforcer plugin).",
        "Prerequisites is not working on m3 I set my plugin to prerequisite on maven 4 (ok, it doesn't exists yet), but the build just passed =/\n\nSample attached"
    ],
    [
        "MNG-5520",
        "MNG-5519",
        "RuntimePolicy is incorrect for org.apache.maven.plugins.annotations.Parameter looks like we need to hire you to check our code..(provided you work for free)\n\n\npackage org.apache.maven.plugins.annotations;\n\n\nimport java.lang.annotation.RetentionPolicy;\n\n\n@Documented\n@Retention( RetentionPolicy.CLASS )\n@Target( { ElementType.FIELD } )\n@Inherited\npublic @interface Parameter\n\n\nRetentionPolicy parameters:\n\nCLASS \nAnnotations are to be recorded in the class file by the compiler but need NOT be retained by the VM at run time.\n \nRUNTIME \nAnnotations are to be recorded in the class file by the compiler and  RETAINED by the VM at run time, so they may be read reflectively.\n \nSOURCE \nAnnotations are to be discarded by the compiler. \n",
        "org.apache.maven.plugins.annotations.Parameter has incorrect RetentionPolicy package org.apache.maven.plugins.annotations;\n\nimport java.lang.annotation.RetentionPolicy;\n\n@Documented\n@Retention( RetentionPolicy.CLASS )\n@Target( { ElementType.FIELD } )\n@Inherited\npublic @interface Parameter\n\nRetentionPolicy parameters:\n\nCLASS \nAnnotations are to be recorded in the class file by the compiler but need NOT be retained by the VM at run time.\n \nRUNTIME \nAnnotations are to be recorded in the class file by the compiler and  RETAINED by the VM at run time, so they may be read reflectively.\n \nSOURCE \nAnnotations are to be discarded by the compiler. \n"
    ],
    [
        "MNG-5537",
        "MNG-3832",
        "Remove invalid warnings  I use this dependency definition in my pom.xml:\n{code:xml}\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-annotations</artifactId>\n    <version>3.5.6-Final</version>\n    <scope>test</scope>\n    <exclusions>\n        <exclusion>\n            <groupId>*</groupId>\n            <artifactId>*</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n{code}\nAnd although this works as expected, I get those warnings:\n{noformat}\n[WARNING] Some problems were encountered while building the effective model for de.is24.mavenplugins:deadcode4j-maven-plugin:maven-plugin:1.5-SNAPSHOT\n[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.hibernate:hibernate-annotations:jar with value '*' does not match a valid id pattern. @ line 333, column 30\n[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.hibernate:hibernate-annotations:jar with value '*' does not match a valid id pattern. @ line 334, column 33\n{noformat}\nThe warnings are incorrect, thus should be removed.",
        "Allow wildcards in dependency exclusions I would like to be able to exclude all transitive dependencies from a certain dependencies.  This is especially useful when depending on an artifact with a classifier that may not have the same dependencies as the main artifact.  Currently the only way to do this is by excluding each dependency individually which requires significant effort and is prone to becoming out of date.  The following syntax is one possibility.\n\nExclude all transitive dependencies\n{code}\n<exclusion>\n  <groupId>*</groupId>\n</exclusion>\n{code}\n\nExclude transitive dependencies with the groupId \"org.company\"\n{code}\n<exclusion>\n  <groupId>org.company</groupId>\n  <artifactId>*</artifactId>\n</exclusion>\n{code}\n"
    ],
    [
        "MNG-5539",
        "MNG-5478",
        "Profile plugin execution order is not preserved when merging into default PluginContainer The order of execution of plugins within a profile unexpectedly depends upon the order of plugin definitions outside of the profile if the profile references those same plugins, even if they do not specify executions in the same phase. In the following example pom snippet, when run with 'mvn validate', 'plugin-B-in-profile' will execute first, then 'plugin-A-in-profile', when the opposite execution - the order in which they were defined - was desired.\n\n{code:xml}\n<build>\n    <plugins>\n        <!-- if you swap the order of these two plugins or remove one, the order of the profile plugin execution will change -->\n        <plugin>\n            <artifactId>maven-jar-plugin</artifactId>\n        </plugin>\n        <plugin>\n            <artifactId>maven-antrun-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n<profiles>\n    <profile>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n        <build>\n            <plugins>\n                <plugin>\n                    <artifactId>maven-antrun-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>plugin-A-in-profile</id>\n                            <phase>validate</phase>\n                            <goals>\n                                <goal>run</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <artifactId>maven-clean-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>plugin-B-in-profile</id>\n                            <phase>validate</phase>\n                            <goals>\n                                <goal>clean</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <!-- Removing this plugin declaration will cause above plugins to run in a different order -->\n                <plugin>\n                    <artifactId>maven-jar-plugin</artifactId>\n                </plugin>\n            </plugins>\n        </build>\n    </profile>\n</profiles>\n{code}\n\nSee {{org.apache.maven.model.profile.DefaultProfileInjector$ProfileModelMerger.mergePluginContainer_Plugins()}}. It's unclear to me if this algorithm is intentional to aggregate all plugin definitions in the same way that you cannot declare the same plugin more than once in a given PluginContainer, or if profiles should always have their execution order respected, regardless of plugin definitions outside of the profile.\n\nThis may be a similar or the same issue as MNG-5478, but it's unclear due to lack of information.",
        "Order of plugin execution does not match order of definition in profile I would like to create an assembly that contains an obfuscated all-in-one version of the main JAR artifacts of a multi-module project. For this purpose, I created a profile that binds the following plugins and goals, respectively, to phase {{package}}:\n\n# {{maven-shade-plugin:shade}} - creates a single JAR file that contains all classes of all modules (basically, an uberjar that, however, does not contain 3rd-party libraries)\n# {{proguard-maven-plugin:proguard}} - creates an obfuscated version of the above JAR file\n# {{maven-assembly-plugin:single}} - creates a single distributable archive that contains the above obfuscated JAR file alongside of 3rd-party JAR files and some CLI scripts\n\nHaving the above configuration, it should be sufficient to call {{maven package}} in order to create the desired assembly.\n\nHowever, the plugins are not executed in the above order but the ProGuard plugin gets executed first which consequently complains about the missing input file (the latter should be created by the Shade plugin).\n\nAs a workaround, I created a profile that only binds the first two plugins to phase {{package}}. Furthermore, I first call {{mvn package}} to create the obfuscated \"uberjar\"; only then, I call {{mvn assembly:single}} to create the desired assembly file."
    ],
    [
        "MNG-5590",
        "MNG-5516",
        "${basedir} and ${project.basedir} do not behave the same on file-based profile activation According to http://maven.apache.org/ref/3.1.1/maven-model-builder/, the $\\{basedir} property is deprecated and replaced by $\\{project.basedir}. However the two are not the same. Consider the attached pom. \n\nWhen using $\\{basedir}/pom.xml in profile activation, running \"help:active-profiles\" will list \n\n - profile-test (source: pom)\n\nWhen using $\\{project.basedir}/pom.xml, it will not list the profile as activated.\n\nIt seems that the $\\{project.<xxx>} properties get set after profile activation and evaluation (which makes sense because the profiles might affect these values), but profile activation requires them to be set before that has happened. \n\n",
        "${project.basedir} in profile activation exists clause strange behavior directory structure:\n{noformat}\n pom.xml\n dir\n{noformat}\nrelevant pom part:\n{code:xml}\n<profiles>\n\t\t<profile>\n\t\t    <id>P1</id>\n\t\t    <activation>\n        \t\t<file>\n        \t\t    <exists>${project.basedir}/dir/</exists>\n\t\t        </file>\n\t\t    </activation>\n\t\t</profile>\n\t\t<profile>\n    \t\t<id>P2</id>\n\t\t    <activation>\n\t\t        <file>\n        \t\t    <exists>${basedir}/dir/</exists>\n\t\t        </file>\n\t\t    </activation>\n\t\t</profile>\n\t </profiles>\n{code}\n{noformat}\nmvn help:profiles-all\n\n  Profile Id: P2 (Active: true , Source: pom)\n  Profile Id: P1 (Active: false , Source: pom)\n{noformat}\nSince dir exists this leads to conclusion that $\\{project.basedir} in P1 does not resolve properly.\n{noformat}\nmvn help:effective-pom relevant part:\n{noformat}\n{code:xml}\n  <profiles>\n    <profile>\n      <id>P1</id>\n      <activation>\n        <file>\n          <exists>/home/isipka/NetBeansProjects/test-maven/simple/dir/</exists>\n        </file>\n      </activation>\n    </profile>\n    <profile>\n      <id>P2</id>\n      <activation>\n        <file>\n          <exists>/home/isipka/NetBeansProjects/test-maven/simple/dir/</exists>\n        </file>\n      </activation>\n    </profile>\n  </profiles>\n{code}\n\nboth $\\{project.basedir} in P1 and $\\{basedir} in P2 have resolved properly.\n\nAFAIK this is a bug. If not, or you need additional info please contact me. I have tested this on 3.0.5 the behavior is the same. I have found out about it here http://stackoverflow.com/q/18868772/679982"
    ],
    [
        "MNG-5617",
        "MNG-5302",
        "unreadable log in multi thread compilation when I try to compile multi-module project (-T 8), the log of each project is not printed sequentially, all logs of the compilation is being printed as soon as it is thrown by the compiler. \n\nThis makes logs unreadble. \n\n Am I the only one in this case ? \n\nI have seen that a solution was implemented but not used  in Maven source code (ThreadOutputMuxer.java). \n\nIs there a solution for this issue ?\nI should not be the only one. ",
        "Include thread number in output messages When doing a parallel build the log messages are mixed up making it hard to determine what module a message comes from. If the thread number is included in the log message it would make it easier to see what is going on, especially when the debug flag is used."
    ],
    [
        "MNG-5619",
        "MNG-4565",
        "CLONE - Multiple profile activation conditions broken Having multiple profile activation conditions behaves in an unexpected manner. It doesn't cause a build failure, but the actual algorithm for activating a profile is very different from expected. My expectation was that if you include multiple conditions, they are ANDed together. However what appears to happen is that the conditions overwrite each other.\n\nIf an <os> condition is added, it overrides any <property> or <file> conditions regardless of their results.\nIf a <file> condition is added, it overrides any <property> condition regardless of results\n\nThe following table gives a sample of conditions matched, and whether the profile was activated as a result:\n\nProperty  File  OS   Result   Expected\n     T           T      -         T                T\n     T           F      -         F                F\n     F           T      -         T                F\n     F           F      -         F                F\n     T           -      T         T                T\n     T           -      F         F                F\n     F           -      T         T                F\n     F           -      F         F                F\n     F           F     T         T                F \n     T           T      F        F                F\n",
        "Requiring multiple profile activation conditions to be true does not work According to the documentation at http://www.sonatype.com/books/mvnref-book/reference/profiles-sect-activation.html a profile is activated when all activation conditions are met (which makes sense of course). But when I try to use this it does not work. It seems maven does an OR instead of an AND (which is not rearly as useful and is the opposite of what the documentation says at the previous link).\n\nFor example, if I have one profile that is activated like this:\n\n{code:xml}         <activation>\n            <activeByDefault>false</activeByDefault>\n            <os>\n               <name>linux</name>\n            </os>\n         </activation>{code}\n\nand another profile that is activated like this:\n\n{code:xml}        <activation>\n            <activeByDefault>false</activeByDefault>\n            <os>\n               <name>linux</name>\n            </os>\n            <property>\n                <name>release</name>\n                <value>true</value>\n            </property>\n         </activation>{code}\n\nThen I would expect the second profile to only be activated if the OS is linux and the release property is defined.\n\nWhen I run 'mvn help:active-profiles' however, maven shows that both profiles are active even though the release property is not defined.\n"
    ],
    [
        "MNG-5628",
        "MNG-5613",
        "NullPointerException with Maven 3.2.1 when circular dependency exists in POMs I had introduced a circular dependency in my  multi-project POM configuration without realizing it. With 3.2.1 I got an NPE. See attached file. Switching to 3.1.1 gave me the appropriate error about the circular dependency.",
        "NPE error when building a reactor with duplicated artifacts Using v3.2.1 when building a malformed project containing a duplicated groupId:artifactId I got this rather unhelpful error:\n\n{code}\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:167)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:157)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\nCaused by: java.lang.NullPointerException\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:270)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)\n\t... 11 more\n{code}\n\nThe more helpful error should have been:\n{code}\norg.apache.maven.project.DuplicateProjectException: Project 'com.foo.bar:foo-bar:2.15.0' is duplicated in the reactor\n\tat org.apache.maven.project.ProjectSorter.<init>(ProjectSorter.java:93)\n\tat org.apache.maven.DefaultProjectDependencyGraph.<init>(DefaultProjectDependencyGraph.java:53)\n\tat org.apache.maven.DefaultMaven.createProjectDependencyGraph(DefaultMaven.java:819)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:268)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:157)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\n{code}"
    ],
    [
        "MNG-5651",
        "MNG-5613",
        "Null pointer exception when trying to execute a mvn build I am trying to build a complex multi-module maven project. \n\nBelow is the error stacktraces...\n\n\nApache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T12:37:52-05:00)\nMaven home: C:\\apache-maven-3.2.1\\bin\\..\nJava version: 1.6.0_43, vendor: Sun Microsystems Inc.\nJava home: C:\\Java\\jdk1.6.0_43\\jre\nDefault locale: en_US, platform encoding: Cp1252\nOS name: \"windows 7\", version: \"6.1\", arch: \"amd64\", family: \"windows\"\n[INFO ] - Error stacktraces are turned on.\n[DEBUG] - Reading global settings from C:\\apache-maven-3.2.1\\bin\\..\\conf\\settings.xml\n[DEBUG] - Reading user settings from C:\\Users\\xxxx\\.m2\\settings.xml\n[DEBUG] - Using local repository at C:\\maven-repo\n[DEBUG] - Using manager EnhancedLocalRepositoryManager with priority 10.0 for C:\\maven-repo\n[INFO ] - Scanning for projects...\n[ERROR] - Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:167) ~[maven-core-3.2.1.jar:3.2.1]\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:584) [maven-embedder-3.2.1.jar:3.2.1]\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213) [maven-embedder-3.2.1.jar:3.2.1]\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:157) [maven-embedder-3.2.1.jar:3.2.1]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_43]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_43]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_43]\n\tat java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_43]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289) [plexus-classworlds-2.5.1.jar:na]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229) [plexus-classworlds-2.5.1.jar:na]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415) [plexus-classworlds-2.5.1.jar:na]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) [plexus-classworlds-2.5.1.jar:na]\nCaused by: java.lang.NullPointerException: null\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:270) ~[maven-core-3.2.1.jar:3.2.1]\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155) ~[maven-core-3.2.1.jar:3.2.1]\n\t... 11 common frames omitted\n17:17:22.476 [ERROR] [main] - \n17:17:22.476 [ERROR] [main] - \n17:17:22.476 [ERROR] [main] - For more information about the errors and possible solutions, please read the following articles:\n17:17:22.476 [ERROR] [main] - [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/InternalErrorException\n",
        "NPE error when building a reactor with duplicated artifacts Using v3.2.1 when building a malformed project containing a duplicated groupId:artifactId I got this rather unhelpful error:\n\n{code}\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:167)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:157)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\nCaused by: java.lang.NullPointerException\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:270)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)\n\t... 11 more\n{code}\n\nThe more helpful error should have been:\n{code}\norg.apache.maven.project.DuplicateProjectException: Project 'com.foo.bar:foo-bar:2.15.0' is duplicated in the reactor\n\tat org.apache.maven.project.ProjectSorter.<init>(ProjectSorter.java:93)\n\tat org.apache.maven.DefaultProjectDependencyGraph.<init>(DefaultProjectDependencyGraph.java:53)\n\tat org.apache.maven.DefaultMaven.createProjectDependencyGraph(DefaultMaven.java:819)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:268)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:157)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\n{code}"
    ],
    [
        "MNG-5651",
        "MNG-5628",
        "Null pointer exception when trying to execute a mvn build I am trying to build a complex multi-module maven project. \n\nBelow is the error stacktraces...\n\n\nApache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T12:37:52-05:00)\nMaven home: C:\\apache-maven-3.2.1\\bin\\..\nJava version: 1.6.0_43, vendor: Sun Microsystems Inc.\nJava home: C:\\Java\\jdk1.6.0_43\\jre\nDefault locale: en_US, platform encoding: Cp1252\nOS name: \"windows 7\", version: \"6.1\", arch: \"amd64\", family: \"windows\"\n[INFO ] - Error stacktraces are turned on.\n[DEBUG] - Reading global settings from C:\\apache-maven-3.2.1\\bin\\..\\conf\\settings.xml\n[DEBUG] - Reading user settings from C:\\Users\\xxxx\\.m2\\settings.xml\n[DEBUG] - Using local repository at C:\\maven-repo\n[DEBUG] - Using manager EnhancedLocalRepositoryManager with priority 10.0 for C:\\maven-repo\n[INFO ] - Scanning for projects...\n[ERROR] - Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:167) ~[maven-core-3.2.1.jar:3.2.1]\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:584) [maven-embedder-3.2.1.jar:3.2.1]\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213) [maven-embedder-3.2.1.jar:3.2.1]\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:157) [maven-embedder-3.2.1.jar:3.2.1]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_43]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_43]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_43]\n\tat java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_43]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289) [plexus-classworlds-2.5.1.jar:na]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229) [plexus-classworlds-2.5.1.jar:na]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415) [plexus-classworlds-2.5.1.jar:na]\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) [plexus-classworlds-2.5.1.jar:na]\nCaused by: java.lang.NullPointerException: null\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:270) ~[maven-core-3.2.1.jar:3.2.1]\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155) ~[maven-core-3.2.1.jar:3.2.1]\n\t... 11 common frames omitted\n17:17:22.476 [ERROR] [main] - \n17:17:22.476 [ERROR] [main] - \n17:17:22.476 [ERROR] [main] - For more information about the errors and possible solutions, please read the following articles:\n17:17:22.476 [ERROR] [main] - [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/InternalErrorException\n",
        "NullPointerException with Maven 3.2.1 when circular dependency exists in POMs I had introduced a circular dependency in my  multi-project POM configuration without realizing it. With 3.2.1 I got an NPE. See attached file. Switching to 3.1.1 gave me the appropriate error about the circular dependency."
    ],
    [
        "MNG-5670",
        "MNG-5493",
        "ConcurrentModificationException during DefaultMaven.newRepositorySession DefaultMaven.newRepositorySession will fail with ConcurrentModificationException if System.properties is modified concurrently by another thread. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=439227 for original bug report against m2e.",
        "Concurrency exception in Maven core while using parallel build My project uses parallel build for my \"deployment\" job in Hudson. From time to time, the build failed because of the following {{ConcurrencyModificationException}}. This apparently is not a plugin-in bug. Instead, it is a deeper issue in the core. I checked the source code, I think the \"Properties\" should be replaced by a concurrentHashMap. Accordingt to the java doc of \"Properties\", it cannot support concurrency.\n{noformat}\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-assembly-plugin:2.4:single (make-assembly) on project ssm-viewer-spread: Execution make-assembly of goal org.apache.maven.plugins:maven-assembly-plugin:2.4:single failed.\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n\tat org.apache.maven.lifecycle.internal.LifecycleThreadedBuilder$1.call(LifecycleThreadedBuilder.java:167)\n\tat org.apache.maven.lifecycle.internal.LifecycleThreadedBuilder$1.call(LifecycleThreadedBuilder.java:163)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:722)\nCaused by: org.apache.maven.plugin.PluginExecutionException: Execution make-assembly of goal org.apache.maven.plugins:maven-assembly-plugin:2.4:single failed.\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:110)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n\t... 13 more\nCaused by: java.util.ConcurrentModificationException\n\tat java.util.Hashtable$Enumerator.next(Hashtable.java:1200)\n\tat java.util.Hashtable.putAll(Hashtable.java:614)\n\tat org.apache.maven.project.DefaultProjectBuildingRequest.setSystemProperties(DefaultProjectBuildingRequest.java:166)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.toRequest(DefaultMavenProjectBuilder.java:79)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:229)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:251)\n\tat org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:258)\n\tat org.apache.maven.plugin.assembly.archive.task.AddDependencySetsTask.addDependencySet(AddDependencySetsTask.java:162)\n\tat org.apache.maven.plugin.assembly.archive.task.AddDependencySetsTask.execute(AddDependencySetsTask.java:124)\n\tat org.apache.maven.plugin.assembly.archive.phase.DependencySetAssemblyPhase.execute(DependencySetAssemblyPhase.java:76)\n\tat org.apache.maven.plugin.assembly.archive.DefaultAssemblyArchiver.createArchive(DefaultAssemblyArchiver.java:183)\n\tat org.apache.maven.plugin.assembly.mojos.AbstractAssemblyMojo.execute(AbstractAssemblyMojo.java:436)\n\tat org.apache.maven\n{noformat}"
    ],
    [
        "MNG-5691",
        "MNG-1388",
        "Reopen MNG-1388 Please reopen MNG-1388. Plenty of valid reasons for doing so were given after the issue was closed. There is no known workaround and this is a major hurdle for projects that mix Java and native code.",
        "Transitive Dependencies in a profile are not used I have a jar project file that defines a dependency inside a certain profile.  If I then include that project inside of another war project, the dependencies defined in the jar project's profile isn't getting transferred over to the war.\n\nIe we have this:\nA depends on SQL or Oracle depending on profile\nB depends on A.\nIf sql profile is active, I would expect that when I build B, it pulls\nthe transitive dependancy on sql from A.  "
    ],
    [
        "MNG-5691",
        "MNG-4894",
        "Reopen MNG-1388 Please reopen MNG-1388. Plenty of valid reasons for doing so were given after the issue was closed. There is no known workaround and this is a major hurdle for projects that mix Java and native code.",
        "Profile is ignored for dependencies I have a war module with a dependency on a jar module.\n\nIn the jar module there are a number of dependencies defined in profiles.\n\nWhen packaging the war module with one of these profiles, the dependencies for that profile are not included in the war archive.\n\nThe attached file contains an example for this situation.\n\nIn the parent module I executed the following statements:\n{code}\nmvn install -N\nmvn clean install -P p2\n{code}\n\nIn the resulting war file I miss all the transitive dependencies defined in the profile 'p2'.\n\nThe following jar files can be found when running the commands with Maven 3:\n{code}\nWEB-INF/lib/postgresql-8.4-701.jdbc4.jar\nWEB-INF/lib/commons-lang-2.4.jar\nWEB-INF/lib/jar-1.0.jar\n{code}\n\nWhen running the commands with Maven 2.2.1 I get:\n{code}\nWEB-INF/lib/xml-apis-1.0.b2.jar\nWEB-INF/lib/commons-collections-2.1.jar\nWEB-INF/lib/commons-digester-1.6.jar\nWEB-INF/lib/postgresql-8.4-701.jdbc4.jar\nWEB-INF/lib/commons-validator-1.2.0.jar\nWEB-INF/lib/commons-lang-2.4.jar\nWEB-INF/lib/commons-logging-1.0.4.jar\nWEB-INF/lib/jar-1.0.jar\nWEB-INF/lib/oro-2.0.8.jar\n{code}"
    ],
    [
        "MNG-5691",
        "MNG-4985",
        "Reopen MNG-1388 Please reopen MNG-1388. Plenty of valid reasons for doing so were given after the issue was closed. There is no known workaround and this is a major hurdle for projects that mix Java and native code.",
        "Transitive dependencies with classifiers not resolved correctly Tested against maven 3.0.1, and the latest 3.0.2. I don't know whether this works for 2.2.1.\nThe project described below is attached to this issue.\n\nI have a multi-module project that has modules: A, B, and C. B depends on A, C depends on B and transitively on A.\nAdditionally, there is a web archive that depends on B and C directly and transitively on A:\n\nI have 2 profiles: dev and qa. They define a single property named 'classifier' - and this property is used in maven jar and war plugins:\n\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>2.3.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n    </configuration>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-war-plugin</artifactId>\n    <version>2.1.1</version>\n    <configuration>\n        <classifier>${classifier}</classifier>\n        <failOnMissingWebXml>false</failOnMissingWebXml>\n    </configuration>\n</plugin>\n\nThus, depending on the profile, different version of the application is build and installed / deployed (actually not in this demo, as I don't declare any repository to deploy to).\n\nSupposing none of the modules in any of the profiles has been built, go on and try to build the project with -Pqa turned on. Parent pom is correctly deployed, A is correctly deployed, and so is B. The problem is with module C which has a transitive dependency on A, and somehow it doesn't take the classifier into account:\n\n[ERROR] Failed to execute goal on project C: Could not resolve dependencies for project test:C:jar:0.0.1-SNAPSHOT: Could not find artifact test:A:jar:*dev*:0.0.1-SNAPSHOT -> [Help 1]\n\nWhen I first build everything using the dev profile (which is turned on by default), the build of the qa profile goes Ok. But, when I go to C and invoke 'mvn dependency:tree', I see:\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ C ---\n[INFO] test:C:jar:0.0.1-SNAPSHOT\n[INFO] \\- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO]    \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n\nAs can be seen, the transitive dependency used an invalid classifier.\n\nHowever, I can't use the workaround that I build dev and then qa, as in my current project we have a web module that packages these jars inside WEB-INF/lib - and the transitive dependencies are packaged with invalid qualifiers. Please check out the jars that are packages within WEB-INF/lib of the generated war file - it packages a qa jar only for the direct dependency. Here is the output of 'mvn dependency:tree -Pqa':\n\n[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ web ---\n[INFO] test:web:war:0.0.1-SNAPSHOT\n[INFO] +- test:C:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:B:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] +- test:B:jar:qa:0.0.1-SNAPSHOT:compile\n[INFO] |  \\- test:A:jar:*dev*:0.0.1-SNAPSHOT:compile\n[INFO] \\- org.apache.geronimo.specs:geronimo-servlet_3.0_spec:jar:1.0:provided\n\nIt gets even worse - there is also a direct dependency on B, so when the -Pqa switch is used, both B-qa.jar and B-dev.jar end up in the war file - dev is the transitive dep, qa the direct one.\nFor us this means disaster - mixing of jars from other profiles means the jars use different JMS resources, different JDBC pools and so on. Supposing B is a JPA module, we end up with the same persistence unit twice, with the same name, but using different pools (one for devs, one for qa).\n\nSetting at critical as I don't know any workaround.\n\nIf I am doing something wrong, this means I don't understand profiles and classifiers correctly. In this case, please be generous and point me to the right resources."
    ],
    [
        "MNG-5710",
        "MNG-5686",
        "mvn launcher does not set JAVA_HOME on OS X correctly There's a bug in the mvn launcher in JVM auto-detection. And here's the fix:\n\n{noformat}\ndiff --git a/apache-maven/src/bin/mvn b/apache-maven/src/bin/mvn\nindex c1442ec..31a5eb3 100755\n--- a/apache-maven/src/bin/mvn\n+++ b/apache-maven/src/bin/mvn\n@@ -83,7 +83,7 @@ case \"`uname`\" in\n             #\n             # Apple JDKs\n             #\n-             export JAVA_HOME=/usr/libexec/java_home\n+             export JAVA_HOME=`/usr/libexec/java_home`\n           fi\n           ;;\nesac\n{noformat}",
        "mvn cannot execute /usr/libexec/java_home/bin/java on OS X. From 3.2.3, mvn cannot start and outputs the following error.\n{code}\n$ ./apache-maven-3.2.3/bin/mvn -version\nError: JAVA_HOME is not defined correctly.\n  We cannot execute /usr/libexec/java_home/bin/java\n{code}\n\n3.2.2 doesn't have this problem.\n{code}\n$ ./apache-maven-3.2.2/bin/mvn -version\nApache Maven 3.2.2 (45f7c06d68e745d05611f7fd14efb6594181933e; 2014-06-17T22:51:42+09:00)\nMaven home: /Users/xxx/tmp/apache-maven-3.2.2\nJava version: 1.8.0_11, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.9.4\", arch: \"x86_64\", family: \"mac\"\n{code}\n\nWhen I modified {{bin/mvn}} like the following, this problem was gone.\n{code}\n--- bin/mvn.orig\t2014-09-10 03:33:52.000000000 +0900\n+++ bin/mvn\t2014-09-10 03:34:18.000000000 +0900\n@@ -83,7 +83,7 @@\n              #\n              # Apple JDKs\n              #\n-             export JAVA_HOME=/usr/libexec/java_home\n+             export JAVA_HOME=\"`/usr/libexec/java_home`\"\n            fi\n            ;;\n esac\n{code}\n\nMaybe MNG-5658 is related to this problem. {{/usr/libexec/java_home}} is a command([java_home(1)|https://developer.apple.com/library/mac/documentation/Darwin/Reference/Manpages/man1/java_home.1.html]), and {{$(command)}} is a style of [Command Substitution|http://www.tldp.org/LDP/abs/html/commandsub.html] (Another(old) style is {{`command`}}).\nSo removing \"$()\" breaks the JAVA_HOME detection on OS X.\n"
    ],
    [
        "MNG-5798",
        "MNG-5796",
        "mvn doesn't works on windows virtual drive Hi\r\nOn windows 7, If you create a virtual drive S: by running for exemple \r\nthe command line \"subst S: C:\\temp\", \r\nand if you do a mvn -version on S:, you will have the following message :\r\n\r\n\r\nUsage: java [-options] class [args...]\r\n           (to execute a class)\r\n   or  java [-options] -jar jarfile [args...]\r\n           (to execute a jar file)\r\nETC...........\r\n\r\nAny other mvn command will fail.\r\nThe command will works on S: sub folders.\r\n\r\nIt works on maven 3.2.5\r\n\r\n\r\nThanks\r\nEric\r\n",
        "mvn fails when the current directory is a root drive on Windows Executing mvn.cmd when the current directory is a drive root like C: outputs the help for the java command."
    ],
    [
        "MNG-5802",
        "MNG-5796",
        "JDK7 compatibility Add the bin directory to system PATH,maven only works in c:/users/***,other disk not work.\r\nBut,I replace maven to 3.2.5,it works ok.",
        "mvn fails when the current directory is a root drive on Windows Executing mvn.cmd when the current directory is a drive root like C: outputs the help for the java command."
    ],
    [
        "MNG-5802",
        "MNG-5798",
        "JDK7 compatibility Add the bin directory to system PATH,maven only works in c:/users/***,other disk not work.\r\nBut,I replace maven to 3.2.5,it works ok.",
        "mvn doesn't works on windows virtual drive Hi\r\nOn windows 7, If you create a virtual drive S: by running for exemple \r\nthe command line \"subst S: C:\\temp\", \r\nand if you do a mvn -version on S:, you will have the following message :\r\n\r\n\r\nUsage: java [-options] class [args...]\r\n           (to execute a class)\r\n   or  java [-options] -jar jarfile [args...]\r\n           (to execute a jar file)\r\nETC...........\r\n\r\nAny other mvn command will fail.\r\nThe command will works on S: sub folders.\r\n\r\nIt works on maven 3.2.5\r\n\r\n\r\nThanks\r\nEric\r\n"
    ],
    [
        "MNG-5804",
        "MNG-5796",
        "mvn.bat does not work in root directory on Windows On Windows the new `mvn.cmd` script does not work if the current working directory is the root dir of a drive. In that case it will initialize  `%MAVEN_PROJECTBASEDIR%` with a trailing `\\` and that will break the java command line as it escapes the following quote of `\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\"`.\r\n\r\nIt works on 3.2.1 and fails with 3.3.1:\r\n\r\n{code}\r\nc:\\> cd /d C:\\\r\nc:\\>c:\\devenv\\apache-maven-3.2.1\\bin\\mvn --version\r\nApache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T18:37:52+01:00)\r\nMaven home: c:\\devenv\\apache-maven-3.2.1\\bin\\..\r\n...\r\nc:\\>c:\\devenv\\apache-maven-3.3.1\\bin\\mvn --version\r\nUsage: java [-options] class [args...]\r\n...\r\n{code}\r\n",
        "mvn fails when the current directory is a root drive on Windows Executing mvn.cmd when the current directory is a drive root like C: outputs the help for the java command."
    ],
    [
        "MNG-5804",
        "MNG-5798",
        "mvn.bat does not work in root directory on Windows On Windows the new `mvn.cmd` script does not work if the current working directory is the root dir of a drive. In that case it will initialize  `%MAVEN_PROJECTBASEDIR%` with a trailing `\\` and that will break the java command line as it escapes the following quote of `\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\"`.\r\n\r\nIt works on 3.2.1 and fails with 3.3.1:\r\n\r\n{code}\r\nc:\\> cd /d C:\\\r\nc:\\>c:\\devenv\\apache-maven-3.2.1\\bin\\mvn --version\r\nApache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T18:37:52+01:00)\r\nMaven home: c:\\devenv\\apache-maven-3.2.1\\bin\\..\r\n...\r\nc:\\>c:\\devenv\\apache-maven-3.3.1\\bin\\mvn --version\r\nUsage: java [-options] class [args...]\r\n...\r\n{code}\r\n",
        "mvn doesn't works on windows virtual drive Hi\r\nOn windows 7, If you create a virtual drive S: by running for exemple \r\nthe command line \"subst S: C:\\temp\", \r\nand if you do a mvn -version on S:, you will have the following message :\r\n\r\n\r\nUsage: java [-options] class [args...]\r\n           (to execute a class)\r\n   or  java [-options] -jar jarfile [args...]\r\n           (to execute a jar file)\r\nETC...........\r\n\r\nAny other mvn command will fail.\r\nThe command will works on S: sub folders.\r\n\r\nIt works on maven 3.2.5\r\n\r\n\r\nThanks\r\nEric\r\n"
    ],
    [
        "MNG-5804",
        "MNG-5802",
        "mvn.bat does not work in root directory on Windows On Windows the new `mvn.cmd` script does not work if the current working directory is the root dir of a drive. In that case it will initialize  `%MAVEN_PROJECTBASEDIR%` with a trailing `\\` and that will break the java command line as it escapes the following quote of `\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\"`.\r\n\r\nIt works on 3.2.1 and fails with 3.3.1:\r\n\r\n{code}\r\nc:\\> cd /d C:\\\r\nc:\\>c:\\devenv\\apache-maven-3.2.1\\bin\\mvn --version\r\nApache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T18:37:52+01:00)\r\nMaven home: c:\\devenv\\apache-maven-3.2.1\\bin\\..\r\n...\r\nc:\\>c:\\devenv\\apache-maven-3.3.1\\bin\\mvn --version\r\nUsage: java [-options] class [args...]\r\n...\r\n{code}\r\n",
        "JDK7 compatibility Add the bin directory to system PATH,maven only works in c:/users/***,other disk not work.\r\nBut,I replace maven to 3.2.5,it works ok."
    ],
    [
        "MNG-5842",
        "MNG-5787",
        "java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter with jetty plugin When Maven is used with a different SLF4J implementation than slf4j-simple (in my case logback to have colored logs), running jetty-maven-plugin fails.\r\n\r\n{code}\r\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T13:57:37+02:00)\r\nMaven home: /usr/local/Cellar/maven/3.3.3/libexec\r\nJava version: 1.8.0_40, vendor: Oracle Corporation\r\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre\r\nDefault locale: fr_FR, platform encoding: UTF-8\r\nOS name: \"mac os x\", version: \"10.10.3\", arch: \"x86_64\", family: \"mac\"\r\n{code}\r\n\r\n{code}\r\n[WARNING] FAILED org.mortbay.jetty.plugin.JettyServer@66c4005: java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\njava.lang.ClassNotFoundException: org.slf4j.helpers.MessageFormatter\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239) ~[plexus-classworlds-2.5.2.jar:na]\r\n\t... 21 common frames omitted\r\nWrapped by: java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.log(JettyAwareLogger.java:619) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.info(JettyAwareLogger.java:314) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.Slf4jLog.info(Slf4jLog.java:74) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.server.Server.doStart(Server.java:271) ~[jetty-server-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) ~[jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) [maven-core-3.3.1.jar:3.3.1]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl.buildProject(SmartBuilderImpl.java:275) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl$ProjectBuildTask.run(SmartBuilderImpl.java:101) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_40]\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40]\r\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_40]\r\njava.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.log(JettyAwareLogger.java:619) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.info(JettyAwareLogger.java:314) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.Slf4jLog.info(Slf4jLog.java:74) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.server.Server.doStart(Server.java:271) ~[jetty-server-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) ~[jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) [maven-core-3.3.1.jar:3.3.1]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl.buildProject(SmartBuilderImpl.java:275) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl$ProjectBuildTask.run(SmartBuilderImpl.java:101) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_40]\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40]\r\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_40]\r\nCaused by: java.lang.ClassNotFoundException: org.slf4j.helpers.MessageFormatter\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239) ~[plexus-classworlds-2.5.2.jar:na]\r\n\t... 21 common frames omitted\r\n[INFO] Jetty server exiting.\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD FAILURE\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 1.001 s (Wall Clock)\r\n[INFO] Finished at: 2015-06-15T13:05:18+02:00\r\n[INFO] Final Memory: 17M/206M\r\n[INFO] ------------------------------------------------------------------------\r\n[ERROR] Failed to execute goal org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903:run (default-cli) on project example-webapp: Execution default-cli of goal org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903:run failed: A required class was missing while executing org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903:run: org/slf4j/helpers/MessageFormatter\r\n[ERROR] -----------------------------------------------------\r\n[ERROR] realm =    plugin>org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903\r\n[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\r\n[ERROR] urls[0] = file:/Users/jcgay/.m2/repository/org/mortbay/jetty/jetty-maven-plugin/7.6.16.v20140903/jetty-maven-plugin-7.6.16.v20140903.jar\r\n[ERROR] urls[1] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-util/7.6.16.v20140903/jetty-util-7.6.16.v20140903.jar\r\n[ERROR] urls[2] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-webapp/7.6.16.v20140903/jetty-webapp-7.6.16.v20140903.jar\r\n[ERROR] urls[3] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-xml/7.6.16.v20140903/jetty-xml-7.6.16.v20140903.jar\r\n[ERROR] urls[4] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-servlet/7.6.16.v20140903/jetty-servlet-7.6.16.v20140903.jar\r\n[ERROR] urls[5] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-security/7.6.16.v20140903/jetty-security-7.6.16.v20140903.jar\r\n[ERROR] urls[6] = file:/Users/jcgay/.m2/repository/org/sonatype/sisu/sisu-inject-bean/2.1.1/sisu-inject-bean-2.1.1.jar\r\n[ERROR] urls[7] = file:/Users/jcgay/.m2/repository/org/sonatype/sisu/sisu-guice/2.9.4/sisu-guice-2.9.4-no_aop.jar\r\n[ERROR] urls[8] = file:/Users/jcgay/.m2/repository/org/codehaus/plexus/plexus-utils/2.0.6/plexus-utils-2.0.6.jar\r\n[ERROR] urls[9] = file:/Users/jcgay/.m2/repository/org/sonatype/aether/aether-util/1.11/aether-util-1.11.jar\r\n[ERROR] urls[10] = file:/Users/jcgay/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.14/plexus-interpolation-1.14.jar\r\n[ERROR] urls[11] = file:/Users/jcgay/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar\r\n[ERROR] urls[12] = file:/Users/jcgay/.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar\r\n[ERROR] urls[13] = file:/Users/jcgay/.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar\r\n[ERROR] urls[14] = file:/Users/jcgay/.m2/repository/org/apache/maven/plugin-tools/maven-plugin-tools-api/2.9/maven-plugin-tools-api-2.9.jar\r\n[ERROR] urls[15] = file:/Users/jcgay/.m2/repository/org/apache/maven/reporting/maven-reporting-api/2.0.6/maven-reporting-api-2.0.6.jar\r\n[ERROR] urls[16] = file:/Users/jcgay/.m2/repository/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.jar\r\n[ERROR] urls[17] = file:/Users/jcgay/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar\r\n[ERROR] urls[18] = file:/Users/jcgay/.m2/repository/net/sf/jtidy/jtidy/r938/jtidy-r938.jar\r\n[ERROR] urls[19] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-plus/7.6.16.v20140903/jetty-plus-7.6.16.v20140903.jar\r\n[ERROR] urls[20] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.transaction/1.1.1.v201105210645/javax.transaction-1.1.1.v201105210645.jar\r\n[ERROR] urls[21] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-jndi/7.6.16.v20140903/jetty-jndi-7.6.16.v20140903.jar\r\n[ERROR] urls[22] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-server/7.6.16.v20140903/jetty-server-7.6.16.v20140903.jar\r\n[ERROR] urls[23] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.servlet/2.5.0.v201103041518/javax.servlet-2.5.0.v201103041518.jar\r\n[ERROR] urls[24] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-continuation/7.6.16.v20140903/jetty-continuation-7.6.16.v20140903.jar\r\n[ERROR] urls[25] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.mail.glassfish/1.4.1.v201005082020/javax.mail.glassfish-1.4.1.v201005082020.jar\r\n[ERROR] urls[26] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.activation/1.1.0.v201105071233/javax.activation-1.1.0.v201105071233.jar\r\n[ERROR] urls[27] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-jmx/7.6.16.v20140903/jetty-jmx-7.6.16.v20140903.jar\r\n[ERROR] urls[28] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-annotations/7.6.16.v20140903/jetty-annotations-7.6.16.v20140903.jar\r\n[ERROR] urls[29] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.annotation/1.1.0.v201108011116/javax.annotation-1.1.0.v201108011116.jar\r\n[ERROR] urls[30] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.objectweb.asm/3.1.0.v200803061910/org.objectweb.asm-3.1.0.v200803061910.jar\r\n[ERROR] urls[31] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-websocket/7.6.16.v20140903/jetty-websocket-7.6.16.v20140903.jar\r\n[ERROR] urls[32] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-io/7.6.16.v20140903/jetty-io-7.6.16.v20140903.jar\r\n[ERROR] urls[33] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-http/7.6.16.v20140903/jetty-http-7.6.16.v20140903.jar\r\n[ERROR] urls[34] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-jsp/7.6.16.v20140903/jetty-jsp-7.6.16.v20140903.jar\r\n[ERROR] urls[35] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.servlet.jsp/2.1.0.v201105211820/javax.servlet.jsp-2.1.0.v201105211820.jar\r\n[ERROR] urls[36] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.apache.jasper.glassfish/2.1.0.v201110031002/org.apache.jasper.glassfish-2.1.0.v201110031002.jar\r\n[ERROR] urls[37] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.servlet.jsp.jstl/1.2.0.v201105211821/javax.servlet.jsp.jstl-1.2.0.v201105211821.jar\r\n[ERROR] urls[38] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.apache.taglibs.standard.glassfish/1.2.0.v201112081803/org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar\r\n[ERROR] urls[39] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.el/2.1.0.v201105211819/javax.el-2.1.0.v201105211819.jar\r\n[ERROR] urls[40] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/com.sun.el/1.0.0.v201105211818/com.sun.el-1.0.0.v201105211818.jar\r\n[ERROR] urls[41] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.eclipse.jdt.core/3.7.1/org.eclipse.jdt.core-3.7.1.jar\r\n[ERROR] Number of foreign imports: 1\r\n[ERROR] import: Entry[import  from realm ClassRealm[project>fr.jcgay.server-notifier:example-webapp:0.2-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]]\r\n[ERROR]\r\n[ERROR] -----------------------------------------------------: org.slf4j.helpers.MessageFormatter\r\n{code}\r\n\r\nI reproduced the error with Maven 3.3.1, 3.3.3 and latest jetty plugin versions:\r\n\r\n{code:xml}\r\n            <plugin>\r\n                <groupId>org.mortbay.jetty</groupId>\r\n                <artifactId>jetty-maven-plugin</artifactId>\r\n                <version>7.6.16.v20140903</version>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n                <groupId>org.mortbay.jetty</groupId>\r\n                <artifactId>jetty-maven-plugin</artifactId>\r\n                <version>8.1.16.v20140903</version>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n                <groupId>org.eclipse.jetty</groupId>\r\n                <artifactId>jetty-maven-plugin</artifactId>\r\n                <version>9.3.0.RC1</version>\r\n            </plugin>\r\n{code}\r\n\r\nIt works perfectly fine with Maven 3.2.5.\r\n\r\nI assume that the problem is not limited to the jetty plugin but to any plugin using slf4j-api classes from packages different than org.slf4j.* and org.slf4j.spi (exposed in extension.xml).\r\nI have tried running jetty with a patched maven-core.jar (adding <exportedPackage>org.slf4j.helpers.*</exportedPackage> into META-INF/maven/extension.xml) and it runs fine.",
        "Moving from Maven 3.0.5 to 3.3.3 breaks plugins with some dependencies on the class path There is a regression when setting up the class path for a plugin in Maven 3.3.1. The following commands run fine when using Maven 3.2.5 or older:\n\n{code}\n$ mvn --version\nApache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T18:29:23+01:00)\nMaven home: /usr/local/Cellar/maven/3.2.5/libexec\nJava version: 1.8.0_40, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre\nDefault locale: de_DE, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.10.2\", arch: \"x86_64\", family: \"mac\"\n$ mvn archetype:generate \\\n    -DarchetypeGroupId=net.java.truelicense \\\n    -DarchetypeArtifactId=truelicense-maven-archetype \\\n    -DarchetypeVersion=2.3.4 \\\n    -DgroupId=com.company.product \\\n    -DartifactId=product \\\n    -Dversion=0.1-SNAPSHOT \\\n    -Dpackage=com.company.product \\\n    -Dsubject=\"Product 1\"\n[...]\n$ cd project\n$ mvn clean install\n[...]\n{code}\n\nNote that I have shortened the output using bracketed ellipsis {{\\[...\\]}}.\n\nHowever, when running the same commands using Maven 3.3.1, I get the following output:\n\n{code}\n$ mvn --version\nApache Maven 3.3.1 (cab6659f9874fa96462afef40fcf6bc033d58c1c; 2015-03-13T21:10:27+01:00)\nMaven home: /Users/christian/Downloads/apache-maven-3.3.1\nJava version: 1.8.0_40, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre\nDefault locale: de_DE, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.10.2\", arch: \"x86_64\", family: \"mac\"\n$ mvn archetype:generate \\\n    -DarchetypeGroupId=net.java.truelicense \\\n    -DarchetypeArtifactId=truelicense-maven-archetype \\\n    -DarchetypeVersion=2.3.4 \\\n    -DgroupId=com.company.product \\\n    -DartifactId=product \\\n    -Dversion=0.1-SNAPSHOT \\\n    -Dpackage=com.company.product \\\n    -Dsubject=\"Product 1\"\n[...]\n$ cd project\n$ mvn clean install\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO] \n[INFO] product\n[INFO] keygen\n[INFO] keymgr\n[INFO] keysrv\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building product 0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.6:clean (default-clean) @ product ---\n[INFO] \n[INFO] --- maven-enforcer-plugin:1.3.1:enforce (enforce-maven) @ product ---\n[INFO] \n[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ product ---\n[INFO] Installing /Users/christian/sandbox/truelicense/product/pom.xml to /Users/christian/.m2/repository/com/company/product/product/0.1-SNAPSHOT/product-0.1-SNAPSHOT.pom\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building keygen 0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.6:clean (default-clean) @ keygen ---\n[INFO] Deleting /Users/christian/sandbox/truelicense/product/keygen/target\n[INFO] \n[INFO] --- maven-enforcer-plugin:1.3.1:enforce (enforce-maven) @ keygen ---\n[INFO] \n[INFO] --- maven-resources-plugin:2.7:resources (default-resources) @ keygen ---\n[INFO] Using 'US-ASCII' encoding to copy filtered resources.\n[INFO] Copying 1 resource\n[INFO] Copying 1 resource\n[INFO] \n[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ keygen ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 2 source files to /Users/christian/sandbox/truelicense/product/keygen/target/classes\n[INFO] \n[INFO] --- truelicense-maven-plugin:2.3.4:obfuscate (default) @ keygen ---\n[INFO] Obfuscating annotated constant string values in /Users/christian/sandbox/truelicense/product/keygen/target/classes.\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] product ............................................ SUCCESS [  0.411 s]\n[INFO] keygen ............................................. FAILURE [  1.022 s]\n[INFO] keymgr ............................................. SKIPPED\n[INFO] keysrv ............................................. SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1.646 s\n[INFO] Finished at: 2015-03-18T19:31:46+01:00\n[INFO] Final Memory: 15M/245M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal net.java.truelicense:truelicense-maven-plugin:2.3.4:obfuscate (default) on project keygen: Execution default of goal net.java.truelicense:truelicense-maven-plugin:2.3.4:obfuscate failed: A required class was missing while executing net.java.truelicense:truelicense-maven-plugin:2.3.4:obfuscate: org/slf4j/helpers/MarkerIgnoringBase\n[ERROR] -----------------------------------------------------\n[ERROR] realm =    plugin>net.java.truelicense:truelicense-maven-plugin:2.3.4\n[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\n[ERROR] urls[0] = file:/Users/christian/.m2/repository/net/java/truelicense/truelicense-maven-plugin/2.3.4/truelicense-maven-plugin-2.3.4.jar\n[ERROR] urls[1] = file:/Users/christian/.m2/repository/net/java/truelicense/truelicense-obfuscate/2.3.4/truelicense-obfuscate-2.3.4.jar\n[ERROR] urls[2] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-driver-zip/7.7.6/truezip-driver-zip-7.7.6.jar\n[ERROR] urls[3] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-swing/7.7.6/truezip-swing-7.7.6.jar\n[ERROR] urls[4] = file:/Users/christian/.m2/repository/org/apache/commons/commons-compress/1.9/commons-compress-1.9.jar\n[ERROR] urls[5] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-kernel/7.7.6/truezip-kernel-7.7.6.jar\n[ERROR] urls[6] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-file/7.7.6/truezip-file-7.7.6.jar\n[ERROR] urls[7] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-driver-file/7.7.6/truezip-driver-file-7.7.6.jar\n[ERROR] urls[8] = file:/Users/christian/.m2/repository/org/ow2/asm/asm-tree/5.0.3/asm-tree-5.0.3.jar\n[ERROR] urls[9] = file:/Users/christian/.m2/repository/org/ow2/asm/asm/5.0.3/asm-5.0.3.jar\n[ERROR] urls[10] = file:/Users/christian/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\n[ERROR] Number of foreign imports: 1\n[ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]]\n[ERROR] \n[ERROR] -----------------------------------------------------: org.slf4j.helpers.MarkerIgnoringBase\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <goals> -rf :keygen\n{code}\n\n{{org.slf4j.helpers.MarkerIgnoringBase}} is a class in the SLF4J API. Version 1.7.7 is a compile dependency of the TrueLicense Maven Plugin, as can be seen at https://repo1.maven.org/maven2/net/java/truelicense/truelicense-maven-plugin/2.3.4/truelicense-maven-plugin-2.3.4.pom , however it is apparently missing on the class path when building the project with Maven 3.3.1.\n\nUsing a 1.7 JDK makes no difference, too.\n"
    ],
    [
        "MNG-5845",
        "MNG-5787",
        "when in maven mojo, ClassNotFoundException slf4j-api `MessageFormatter` class *my code is*\r\n\r\n{code}\r\n@Mojo(name = \"hello\",requiresProject = false)\r\npublic class HelloWorldMojo extends AbstractMojo{\r\n\r\n    @Override\r\n    public void execute() throws MojoExecutionException,MojoFailureException{\r\n        String[] argStrings = { \"Hello world\" };\r\n        FormattingTuple formattingTuple = MessageFormatter.arrayFormat(\"{}\", argStrings);\r\n        getLog().info(formattingTuple.getMessage());\r\n    }\r\n}\r\n{code}\r\n\r\n\r\n*when i run my plugins , show me result:*\r\n\r\n{code}\r\nCaused by: java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\n\tat com.feilong.core.log.Slf4jUtil.formatMessage(Slf4jUtil.java:77)\r\n\tat com.feilong.project.train.mojo.BaseFlowMojo.getFolderPath(BaseFlowMojo.java:72)\r\n\tat com.feilong.project.train.mojo.InvitationMojo.handleExecute(InvitationMojo.java:89)\r\n\tat com.feilong.project.train.mojo.BaseFlowMojo.execute(BaseFlowMojo.java:111)\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)\r\n\t... 21 more\r\nCaused by: java.lang.ClassNotFoundException: org.slf4j.helpers.MessageFormatter\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)\r\n\t... 26 more\r\n{code}\r\n\r\n*And from the log (run with -X), i see that :*\r\n\r\n{code}\r\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)\r\nMaven home: D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\r\nJava version: 1.8.0_11, vendor: Oracle Corporation\r\nJava home: D:\\Program Files\\Java\\jdk1.8.0_11\\jre\r\nDefault locale: zh_CN, platform encoding: GBK\r\nOS name: \"windows 7\", version: \"6.1\", arch: \"x86\", family: \"dos\"\r\n[DEBUG] Created new class realm maven.api\r\n[DEBUG] Importing foreign packages into class realm maven.api\r\n[DEBUG]   Imported: javax.enterprise.inject.* < plexus.core\r\n[DEBUG]   Imported: javax.enterprise.util.* < plexus.core\r\n[DEBUG]   Imported: javax.inject.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.artifact < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.classrealm < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.cli < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.configuration < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.exception < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution.scope < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.model < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.monitor < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.plugin < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.profiles < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.project < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.reporting < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.rtinfo < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.settings < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.toolchain < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.usability < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authentication < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authorization < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.events < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.observers < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.proxy < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.resource < plexus.core\r\n[DEBUG]   Imported: org.codehaus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.* < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.component < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.configuration < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.container < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.context < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.logging < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.personality < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.Xpp3Dom < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParser < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParserException < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlSerializer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.* < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.artifact < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.collection < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.deployment < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.graph < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.installation < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.internal.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.metadata < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.repository < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.resolution < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.spi < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.transfer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.version < plexus.core\r\n[DEBUG]   Imported: org.slf4j.* < plexus.core\r\n[DEBUG]   Imported: org.slf4j.spi.* < plexus.core\r\n[DEBUG] Populating class realm maven.api\r\n[INFO] Error stacktraces are turned on.\r\n[DEBUG] Reading global settings from D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\\conf\\settings.xml\r\n[DEBUG] Reading user settings from C:\\Users\\feilong\\.m2\\settings.xml\r\n[DEBUG] Reading global toolchains from D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\\conf\\toolchains.xml\r\n[DEBUG] Reading user toolchains from C:\\Users\\feilong\\.m2\\toolchains.xml\r\n[DEBUG] Using local repository at D:\\FeiLong Soft\\Essential\\Development\\repository\r\n[DEBUG] Using manager EnhancedLocalRepositoryManager with priority 10.0 for D:\\FeiLong Soft\\Essential\\Development\\repository\r\n[INFO] Scanning for projects...\r\n[DEBUG] Extension realms for project org.apache.maven:standalone-pom:pom:1: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Skipped remote request for com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] Skipped remote request for com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] Skipped remote request for com.feilong.platform:parent:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] === REACTOR BUILD PLAN ================================================\r\n[DEBUG] Project: org.apache.maven:standalone-pom:pom:1\r\n[DEBUG] Tasks:   [com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT:invitation]\r\n[DEBUG] Style:   Aggregating\r\n[DEBUG] =======================================================================\r\n[INFO]                                                                         \r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Building Maven Stub Project (No POM) 1\r\n[INFO] ------------------------------------------------------------------------\r\n[DEBUG] Lifecycle default -> [validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]\r\n[DEBUG] Lifecycle clean -> [pre-clean, clean, post-clean]\r\n[DEBUG] Lifecycle site -> [pre-site, site, post-site, site-deploy]\r\n[DEBUG] === PROJECT BUILD PLAN ================================================\r\n[DEBUG] Project:       org.apache.maven:standalone-pom:1\r\n[DEBUG] Dependencies (collect): []\r\n[DEBUG] Dependencies (resolve): [compile+runtime]\r\n[DEBUG] Repositories (dependencies): [central (http://search.maven.org/remotecontent?filepath=, default, releases+snapshots)]\r\n[DEBUG] Repositories (plugins)     : [maven-plugin (http://search.maven.org/remotecontent?filepath=, default, releases+snapshots), central (https://repo.maven.apache.org/maven2, default, releases)]\r\n[DEBUG] -----------------------------------------------------------------------\r\n[DEBUG] Goal:          com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT:invitation (default-cli)\r\n[DEBUG] Style:         Regular\r\n[DEBUG] Configuration: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration/>\r\n[DEBUG] =======================================================================\r\n[DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=0, ConflictMarker.markTime=0, ConflictMarker.nodeCount=1, ConflictIdSorter.graphTime=1, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=0, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=2, ConflictResolver.conflictItemCount=0, DefaultDependencyCollector.collectTime=0, DefaultDependencyCollector.transformTime=5}\r\n[DEBUG] org.apache.maven:standalone-pom:pom:1\r\n[INFO] \r\n[INFO] --- feilong-training-plugin:1.2.1-SNAPSHOT:invitation (default-cli) @ standalone-pom ---\r\n[DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=2, ConflictMarker.markTime=0, ConflictMarker.nodeCount=176, ConflictIdSorter.graphTime=1, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=84, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=9, ConflictResolver.conflictItemCount=163, DefaultDependencyCollector.collectTime=418, DefaultDependencyCollector.transformTime=12}\r\n[DEBUG] com.feilong.maven.plugins:feilong-training-plugin:jar:1.2.1-SNAPSHOT:\r\n[DEBUG]    org.apache.maven:maven-core:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-model:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-settings:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-settings-builder:jar:3.3.3:compile\r\n[DEBUG]          org.apache.maven:maven-builder-support:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-artifact:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-model-builder:jar:3.3.3:compile\r\n[DEBUG]          com.google.guava:guava:jar:18.0:compile\r\n[DEBUG]       org.apache.maven:maven-aether-provider:jar:3.3.3:compile\r\n[DEBUG]          org.eclipse.aether:aether-spi:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-impl:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-api:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-util:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.sisu:org.eclipse.sisu.plexus:jar:0.3.0:compile\r\n[DEBUG]          javax.enterprise:cdi-api:jar:1.0:compile\r\n[DEBUG]             javax.annotation:jsr250-api:jar:1.0:compile\r\n[DEBUG]          org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0:compile\r\n[DEBUG]       org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.5:compile\r\n[DEBUG]          javax.inject:javax.inject:jar:1:compile\r\n[DEBUG]          aopalliance:aopalliance:jar:1.0:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-interpolation:jar:1.21:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-classworlds:jar:2.5.2:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile\r\n[DEBUG]       org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile\r\n[DEBUG]          org.sonatype.plexus:plexus-cipher:jar:1.4:compile\r\n[DEBUG]    org.apache.maven:maven-plugin-api:jar:3.3.3:compile\r\n[DEBUG]    org.codehaus.plexus:plexus-container-default:jar:1.6:compile\r\n[DEBUG]       org.apache.xbean:xbean-reflect:jar:3.7:compile\r\n[DEBUG]       com.google.collections:google-collections:jar:1.0:compile\r\n[DEBUG]    org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-6:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-component-api:jar:1.0-alpha-16:compile\r\n[DEBUG]          junit:junit:jar:4.12:test\r\n[DEBUG]             org.hamcrest:hamcrest-core:jar:1.3:test\r\n[DEBUG]    org.codehaus.plexus:plexus-utils:jar:3.0.22:compile\r\n[DEBUG]    com.feilong.project:feilong-train:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.office:feilong-office-excel:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          com.feilong.platform:feilong-servlet:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]             javax.servlet:jstl:jar:1.2:compile\r\n[DEBUG]          org.apache.poi:poi:jar:3.11:compile\r\n[DEBUG]             commons-codec:commons-codec:jar:1.9:compile\r\n[DEBUG]          org.apache.poi:poi-ooxml:jar:3.11:compile\r\n[DEBUG]          org.apache.poi:poi-ooxml-schemas:jar:3.11:compile\r\n[DEBUG]             org.apache.xmlbeans:xmlbeans:jar:2.6.0:compile\r\n[DEBUG]                stax:stax-api:jar:1.0.1:compile\r\n[DEBUG]          loxia2:loxia2-support:jar:2.5.2:compile\r\n[DEBUG]             org.aspectj:aspectjweaver:jar:1.6.8:compile\r\n[DEBUG]             ognl:ognl:jar:2.7.3:compile\r\n[DEBUG]                jboss:javassist:jar:3.7.ga:compile\r\n[DEBUG]          commons-digester:commons-digester:jar:2.1:compile\r\n[DEBUG]       com.feilong.chart:feilong-chart-core:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.chart:feilong-chart-amcharts:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-ant:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          org.apache.ant:ant:jar:1.9.4:compile\r\n[DEBUG]             org.apache.ant:ant-launcher:jar:1.9.4:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-mail:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          com.sun.mail:javax.mail:jar:1.5.2:compile\r\n[DEBUG]             javax.activation:activation:jar:1.1:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-velocity:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          org.apache.velocity:velocity:jar:1.7:compile\r\n[DEBUG]          org.apache.velocity:velocity-tools:jar:2.0:compile\r\n[DEBUG]             commons-chain:commons-chain:jar:1.1:compile\r\n[DEBUG]             commons-validator:commons-validator:jar:1.3.1:compile\r\n[DEBUG]             dom4j:dom4j:jar:1.6.1:compile\r\n[DEBUG]                xml-apis:xml-apis:jar:1.4.01:compile\r\n[DEBUG]             oro:oro:jar:2.0.8:compile\r\n[DEBUG]       com.feilong.platform:feilong-core:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          commons-lang:commons-lang:jar:2.6:compile\r\n[DEBUG]          org.apache.commons:commons-lang3:jar:3.4:compile\r\n[DEBUG]          commons-beanutils:commons-beanutils:jar:1.9.2:compile\r\n[DEBUG]          commons-logging:commons-logging:jar:1.2:compile\r\n[DEBUG]          commons-collections:commons-collections:jar:3.2.1:compile\r\n[DEBUG]          commons-io:commons-io:jar:2.4:compile\r\n[DEBUG]          net.sf.json-lib:json-lib:jar:jdk15:2.4:compile\r\n[DEBUG]             net.sf.ezmorph:ezmorph:jar:1.0.6:compile\r\n[DEBUG]    com.feilong.data:feilong-data-redis:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       redis.clients:jedis:jar:2.6.2:compile\r\n[DEBUG]          org.apache.commons:commons-pool2:jar:2.0:compile\r\n[DEBUG]    com.feilong.platform.tools:feilong-tools-jsoup:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       org.jsoup:jsoup:jar:1.7.3:compile\r\n[DEBUG]    ch.qos.logback:logback-core:jar:1.1.3:compile\r\n[DEBUG]    ch.qos.logback:logback-classic:jar:1.1.3:compile\r\n{color:red} \r\n[DEBUG]    org.slf4j:slf4j-api:jar:1.7.12:compile\r\n{color}\r\n[DEBUG] Created new class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG] Importing foreign packages into class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG]   Imported:  < maven.api\r\n[DEBUG] Populating class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.maven.plugins:feilong-training-plugin:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.maven:maven-builder-support:jar:3.3.3\r\n[DEBUG]   Included: com.google.guava:guava:jar:18.0\r\n[DEBUG]   Included: org.eclipse.aether:aether-util:jar:1.0.2.v20150114\r\n[DEBUG]   Included: javax.enterprise:cdi-api:jar:1.0\r\n[DEBUG]   Included: javax.annotation:jsr250-api:jar:1.0\r\n[DEBUG]   Included: org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0\r\n[DEBUG]   Included: org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.5\r\n[DEBUG]   Included: aopalliance:aopalliance:jar:1.0\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-interpolation:jar:1.21\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-component-annotations:jar:1.5.5\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-cipher:jar:1.4\r\n[DEBUG]   Included: org.apache.xbean:xbean-reflect:jar:3.7\r\n[DEBUG]   Included: com.google.collections:google-collections:jar:1.0\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-6\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:3.0.22\r\n[DEBUG]   Included: com.feilong.project:feilong-train:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.office:feilong-office-excel:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.platform:feilong-servlet:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: javax.servlet:jstl:jar:1.2\r\n[DEBUG]   Included: org.apache.poi:poi:jar:3.11\r\n[DEBUG]   Included: commons-codec:commons-codec:jar:1.9\r\n[DEBUG]   Included: org.apache.poi:poi-ooxml:jar:3.11\r\n[DEBUG]   Included: org.apache.poi:poi-ooxml-schemas:jar:3.11\r\n[DEBUG]   Included: org.apache.xmlbeans:xmlbeans:jar:2.6.0\r\n[DEBUG]   Included: stax:stax-api:jar:1.0.1\r\n[DEBUG]   Included: loxia2:loxia2-support:jar:2.5.2\r\n[DEBUG]   Included: org.aspectj:aspectjweaver:jar:1.6.8\r\n[DEBUG]   Included: ognl:ognl:jar:2.7.3\r\n[DEBUG]   Included: jboss:javassist:jar:3.7.ga\r\n[DEBUG]   Included: commons-digester:commons-digester:jar:2.1\r\n[DEBUG]   Included: com.feilong.chart:feilong-chart-core:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.chart:feilong-chart-amcharts:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-ant:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.ant:ant:jar:1.9.4\r\n[DEBUG]   Included: org.apache.ant:ant-launcher:jar:1.9.4\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-mail:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.sun.mail:javax.mail:jar:1.5.2\r\n[DEBUG]   Included: javax.activation:activation:jar:1.1\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-velocity:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.velocity:velocity:jar:1.7\r\n[DEBUG]   Included: org.apache.velocity:velocity-tools:jar:2.0\r\n[DEBUG]   Included: commons-chain:commons-chain:jar:1.1\r\n[DEBUG]   Included: commons-validator:commons-validator:jar:1.3.1\r\n[DEBUG]   Included: dom4j:dom4j:jar:1.6.1\r\n[DEBUG]   Included: xml-apis:xml-apis:jar:1.4.01\r\n[DEBUG]   Included: oro:oro:jar:2.0.8\r\n[DEBUG]   Included: com.feilong.platform:feilong-core:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: commons-lang:commons-lang:jar:2.6\r\n[DEBUG]   Included: org.apache.commons:commons-lang3:jar:3.4\r\n[DEBUG]   Included: commons-beanutils:commons-beanutils:jar:1.9.2\r\n[DEBUG]   Included: commons-logging:commons-logging:jar:1.2\r\n[DEBUG]   Included: commons-collections:commons-collections:jar:3.2.1\r\n[DEBUG]   Included: commons-io:commons-io:jar:2.4\r\n[DEBUG]   Included: net.sf.json-lib:json-lib:jar:jdk15:2.4\r\n[DEBUG]   Included: net.sf.ezmorph:ezmorph:jar:1.0.6\r\n[DEBUG]   Included: com.feilong.data:feilong-data-redis:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: redis.clients:jedis:jar:2.6.2\r\n[DEBUG]   Included: org.apache.commons:commons-pool2:jar:2.0\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-jsoup:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.jsoup:jsoup:jar:1.7.3\r\n[DEBUG]   Included: ch.qos.logback:logback-core:jar:1.1.3\r\n[DEBUG]   Included: ch.qos.logback:logback-classic:jar:1.1.3 \r\n{code}\r\n\r\n\r\n*and i also see that,  in  maven  \"META-INF/maven/extension.xml\" file ,\r\n here is slf4j  exportedArtifact config:*\r\n{code}\r\n    <exportedArtifact>org.slf4j:slf4j-api</exportedArtifact>\r\n{code}\r\n\r\n\r\n*and in org.apache.maven.classrealm.DefaultClassRealmManager.isProvidedArtifact(Artifact)   line 167 , has code validator*\r\n\r\n{code}\r\nif ( artifacts != null )\r\n        {\r\n            for ( Artifact artifact : artifacts )\r\n            {\r\n                if ( !isProvidedArtifact( artifact ) )\r\n                {\r\n                    artifactIds.add( getId( artifact ) );\r\n                    if ( artifact.getFile() != null )\r\n                    {\r\n                        constituents.add( new ArtifactClassRealmConstituent( artifact ) );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n{code}\r\n......\r\n\r\n\r\n*why in my plugins, can not use MessageFormatter?*",
        "Moving from Maven 3.0.5 to 3.3.3 breaks plugins with some dependencies on the class path There is a regression when setting up the class path for a plugin in Maven 3.3.1. The following commands run fine when using Maven 3.2.5 or older:\n\n{code}\n$ mvn --version\nApache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T18:29:23+01:00)\nMaven home: /usr/local/Cellar/maven/3.2.5/libexec\nJava version: 1.8.0_40, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre\nDefault locale: de_DE, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.10.2\", arch: \"x86_64\", family: \"mac\"\n$ mvn archetype:generate \\\n    -DarchetypeGroupId=net.java.truelicense \\\n    -DarchetypeArtifactId=truelicense-maven-archetype \\\n    -DarchetypeVersion=2.3.4 \\\n    -DgroupId=com.company.product \\\n    -DartifactId=product \\\n    -Dversion=0.1-SNAPSHOT \\\n    -Dpackage=com.company.product \\\n    -Dsubject=\"Product 1\"\n[...]\n$ cd project\n$ mvn clean install\n[...]\n{code}\n\nNote that I have shortened the output using bracketed ellipsis {{\\[...\\]}}.\n\nHowever, when running the same commands using Maven 3.3.1, I get the following output:\n\n{code}\n$ mvn --version\nApache Maven 3.3.1 (cab6659f9874fa96462afef40fcf6bc033d58c1c; 2015-03-13T21:10:27+01:00)\nMaven home: /Users/christian/Downloads/apache-maven-3.3.1\nJava version: 1.8.0_40, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre\nDefault locale: de_DE, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.10.2\", arch: \"x86_64\", family: \"mac\"\n$ mvn archetype:generate \\\n    -DarchetypeGroupId=net.java.truelicense \\\n    -DarchetypeArtifactId=truelicense-maven-archetype \\\n    -DarchetypeVersion=2.3.4 \\\n    -DgroupId=com.company.product \\\n    -DartifactId=product \\\n    -Dversion=0.1-SNAPSHOT \\\n    -Dpackage=com.company.product \\\n    -Dsubject=\"Product 1\"\n[...]\n$ cd project\n$ mvn clean install\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO] \n[INFO] product\n[INFO] keygen\n[INFO] keymgr\n[INFO] keysrv\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building product 0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.6:clean (default-clean) @ product ---\n[INFO] \n[INFO] --- maven-enforcer-plugin:1.3.1:enforce (enforce-maven) @ product ---\n[INFO] \n[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ product ---\n[INFO] Installing /Users/christian/sandbox/truelicense/product/pom.xml to /Users/christian/.m2/repository/com/company/product/product/0.1-SNAPSHOT/product-0.1-SNAPSHOT.pom\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building keygen 0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.6:clean (default-clean) @ keygen ---\n[INFO] Deleting /Users/christian/sandbox/truelicense/product/keygen/target\n[INFO] \n[INFO] --- maven-enforcer-plugin:1.3.1:enforce (enforce-maven) @ keygen ---\n[INFO] \n[INFO] --- maven-resources-plugin:2.7:resources (default-resources) @ keygen ---\n[INFO] Using 'US-ASCII' encoding to copy filtered resources.\n[INFO] Copying 1 resource\n[INFO] Copying 1 resource\n[INFO] \n[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ keygen ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 2 source files to /Users/christian/sandbox/truelicense/product/keygen/target/classes\n[INFO] \n[INFO] --- truelicense-maven-plugin:2.3.4:obfuscate (default) @ keygen ---\n[INFO] Obfuscating annotated constant string values in /Users/christian/sandbox/truelicense/product/keygen/target/classes.\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] product ............................................ SUCCESS [  0.411 s]\n[INFO] keygen ............................................. FAILURE [  1.022 s]\n[INFO] keymgr ............................................. SKIPPED\n[INFO] keysrv ............................................. SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1.646 s\n[INFO] Finished at: 2015-03-18T19:31:46+01:00\n[INFO] Final Memory: 15M/245M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal net.java.truelicense:truelicense-maven-plugin:2.3.4:obfuscate (default) on project keygen: Execution default of goal net.java.truelicense:truelicense-maven-plugin:2.3.4:obfuscate failed: A required class was missing while executing net.java.truelicense:truelicense-maven-plugin:2.3.4:obfuscate: org/slf4j/helpers/MarkerIgnoringBase\n[ERROR] -----------------------------------------------------\n[ERROR] realm =    plugin>net.java.truelicense:truelicense-maven-plugin:2.3.4\n[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\n[ERROR] urls[0] = file:/Users/christian/.m2/repository/net/java/truelicense/truelicense-maven-plugin/2.3.4/truelicense-maven-plugin-2.3.4.jar\n[ERROR] urls[1] = file:/Users/christian/.m2/repository/net/java/truelicense/truelicense-obfuscate/2.3.4/truelicense-obfuscate-2.3.4.jar\n[ERROR] urls[2] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-driver-zip/7.7.6/truezip-driver-zip-7.7.6.jar\n[ERROR] urls[3] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-swing/7.7.6/truezip-swing-7.7.6.jar\n[ERROR] urls[4] = file:/Users/christian/.m2/repository/org/apache/commons/commons-compress/1.9/commons-compress-1.9.jar\n[ERROR] urls[5] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-kernel/7.7.6/truezip-kernel-7.7.6.jar\n[ERROR] urls[6] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-file/7.7.6/truezip-file-7.7.6.jar\n[ERROR] urls[7] = file:/Users/christian/.m2/repository/de/schlichtherle/truezip/truezip-driver-file/7.7.6/truezip-driver-file-7.7.6.jar\n[ERROR] urls[8] = file:/Users/christian/.m2/repository/org/ow2/asm/asm-tree/5.0.3/asm-tree-5.0.3.jar\n[ERROR] urls[9] = file:/Users/christian/.m2/repository/org/ow2/asm/asm/5.0.3/asm-5.0.3.jar\n[ERROR] urls[10] = file:/Users/christian/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\n[ERROR] Number of foreign imports: 1\n[ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]]\n[ERROR] \n[ERROR] -----------------------------------------------------: org.slf4j.helpers.MarkerIgnoringBase\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <goals> -rf :keygen\n{code}\n\n{{org.slf4j.helpers.MarkerIgnoringBase}} is a class in the SLF4J API. Version 1.7.7 is a compile dependency of the TrueLicense Maven Plugin, as can be seen at https://repo1.maven.org/maven2/net/java/truelicense/truelicense-maven-plugin/2.3.4/truelicense-maven-plugin-2.3.4.pom , however it is apparently missing on the class path when building the project with Maven 3.3.1.\n\nUsing a 1.7 JDK makes no difference, too.\n"
    ],
    [
        "MNG-5845",
        "MNG-5842",
        "when in maven mojo, ClassNotFoundException slf4j-api `MessageFormatter` class *my code is*\r\n\r\n{code}\r\n@Mojo(name = \"hello\",requiresProject = false)\r\npublic class HelloWorldMojo extends AbstractMojo{\r\n\r\n    @Override\r\n    public void execute() throws MojoExecutionException,MojoFailureException{\r\n        String[] argStrings = { \"Hello world\" };\r\n        FormattingTuple formattingTuple = MessageFormatter.arrayFormat(\"{}\", argStrings);\r\n        getLog().info(formattingTuple.getMessage());\r\n    }\r\n}\r\n{code}\r\n\r\n\r\n*when i run my plugins , show me result:*\r\n\r\n{code}\r\nCaused by: java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\n\tat com.feilong.core.log.Slf4jUtil.formatMessage(Slf4jUtil.java:77)\r\n\tat com.feilong.project.train.mojo.BaseFlowMojo.getFolderPath(BaseFlowMojo.java:72)\r\n\tat com.feilong.project.train.mojo.InvitationMojo.handleExecute(InvitationMojo.java:89)\r\n\tat com.feilong.project.train.mojo.BaseFlowMojo.execute(BaseFlowMojo.java:111)\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)\r\n\t... 21 more\r\nCaused by: java.lang.ClassNotFoundException: org.slf4j.helpers.MessageFormatter\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)\r\n\t... 26 more\r\n{code}\r\n\r\n*And from the log (run with -X), i see that :*\r\n\r\n{code}\r\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)\r\nMaven home: D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\r\nJava version: 1.8.0_11, vendor: Oracle Corporation\r\nJava home: D:\\Program Files\\Java\\jdk1.8.0_11\\jre\r\nDefault locale: zh_CN, platform encoding: GBK\r\nOS name: \"windows 7\", version: \"6.1\", arch: \"x86\", family: \"dos\"\r\n[DEBUG] Created new class realm maven.api\r\n[DEBUG] Importing foreign packages into class realm maven.api\r\n[DEBUG]   Imported: javax.enterprise.inject.* < plexus.core\r\n[DEBUG]   Imported: javax.enterprise.util.* < plexus.core\r\n[DEBUG]   Imported: javax.inject.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.artifact < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.classrealm < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.cli < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.configuration < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.exception < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.execution.scope < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.model < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.monitor < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.plugin < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.profiles < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.project < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.reporting < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.rtinfo < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.settings < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.toolchain < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.usability < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.* < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authentication < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.authorization < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.events < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.observers < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.proxy < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.repository < plexus.core\r\n[DEBUG]   Imported: org.apache.maven.wagon.resource < plexus.core\r\n[DEBUG]   Imported: org.codehaus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.* < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.classworlds < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.component < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.configuration < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.container < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.context < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.lifecycle < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.logging < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.personality < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.Xpp3Dom < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParser < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlPullParserException < plexus.core\r\n[DEBUG]   Imported: org.codehaus.plexus.util.xml.pull.XmlSerializer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.* < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.artifact < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.collection < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.deployment < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.graph < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.installation < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.internal.impl < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.metadata < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.repository < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.resolution < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.spi < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.transfer < plexus.core\r\n[DEBUG]   Imported: org.eclipse.aether.version < plexus.core\r\n[DEBUG]   Imported: org.slf4j.* < plexus.core\r\n[DEBUG]   Imported: org.slf4j.spi.* < plexus.core\r\n[DEBUG] Populating class realm maven.api\r\n[INFO] Error stacktraces are turned on.\r\n[DEBUG] Reading global settings from D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\\conf\\settings.xml\r\n[DEBUG] Reading user settings from C:\\Users\\feilong\\.m2\\settings.xml\r\n[DEBUG] Reading global toolchains from D:\\FeiLong Soft\\Essential\\Development\\apache-maven-3.3.3\\bin\\..\\conf\\toolchains.xml\r\n[DEBUG] Reading user toolchains from C:\\Users\\feilong\\.m2\\toolchains.xml\r\n[DEBUG] Using local repository at D:\\FeiLong Soft\\Essential\\Development\\repository\r\n[DEBUG] Using manager EnhancedLocalRepositoryManager with priority 10.0 for D:\\FeiLong Soft\\Essential\\Development\\repository\r\n[INFO] Scanning for projects...\r\n[DEBUG] Extension realms for project org.apache.maven:standalone-pom:pom:1: (none)\r\n[DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]\r\n[DEBUG] Skipped remote request for com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] Skipped remote request for com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] Skipped remote request for com.feilong.platform:parent:1.2.1-SNAPSHOT/maven-metadata.xml, locally installed metadata up-to-date.\r\n[DEBUG] === REACTOR BUILD PLAN ================================================\r\n[DEBUG] Project: org.apache.maven:standalone-pom:pom:1\r\n[DEBUG] Tasks:   [com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT:invitation]\r\n[DEBUG] Style:   Aggregating\r\n[DEBUG] =======================================================================\r\n[INFO]                                                                         \r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Building Maven Stub Project (No POM) 1\r\n[INFO] ------------------------------------------------------------------------\r\n[DEBUG] Lifecycle default -> [validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]\r\n[DEBUG] Lifecycle clean -> [pre-clean, clean, post-clean]\r\n[DEBUG] Lifecycle site -> [pre-site, site, post-site, site-deploy]\r\n[DEBUG] === PROJECT BUILD PLAN ================================================\r\n[DEBUG] Project:       org.apache.maven:standalone-pom:1\r\n[DEBUG] Dependencies (collect): []\r\n[DEBUG] Dependencies (resolve): [compile+runtime]\r\n[DEBUG] Repositories (dependencies): [central (http://search.maven.org/remotecontent?filepath=, default, releases+snapshots)]\r\n[DEBUG] Repositories (plugins)     : [maven-plugin (http://search.maven.org/remotecontent?filepath=, default, releases+snapshots), central (https://repo.maven.apache.org/maven2, default, releases)]\r\n[DEBUG] -----------------------------------------------------------------------\r\n[DEBUG] Goal:          com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT:invitation (default-cli)\r\n[DEBUG] Style:         Regular\r\n[DEBUG] Configuration: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration/>\r\n[DEBUG] =======================================================================\r\n[DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=0, ConflictMarker.markTime=0, ConflictMarker.nodeCount=1, ConflictIdSorter.graphTime=1, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=0, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=2, ConflictResolver.conflictItemCount=0, DefaultDependencyCollector.collectTime=0, DefaultDependencyCollector.transformTime=5}\r\n[DEBUG] org.apache.maven:standalone-pom:pom:1\r\n[INFO] \r\n[INFO] --- feilong-training-plugin:1.2.1-SNAPSHOT:invitation (default-cli) @ standalone-pom ---\r\n[DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=2, ConflictMarker.markTime=0, ConflictMarker.nodeCount=176, ConflictIdSorter.graphTime=1, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=84, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=9, ConflictResolver.conflictItemCount=163, DefaultDependencyCollector.collectTime=418, DefaultDependencyCollector.transformTime=12}\r\n[DEBUG] com.feilong.maven.plugins:feilong-training-plugin:jar:1.2.1-SNAPSHOT:\r\n[DEBUG]    org.apache.maven:maven-core:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-model:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-settings:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-settings-builder:jar:3.3.3:compile\r\n[DEBUG]          org.apache.maven:maven-builder-support:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-repository-metadata:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-artifact:jar:3.3.3:compile\r\n[DEBUG]       org.apache.maven:maven-model-builder:jar:3.3.3:compile\r\n[DEBUG]          com.google.guava:guava:jar:18.0:compile\r\n[DEBUG]       org.apache.maven:maven-aether-provider:jar:3.3.3:compile\r\n[DEBUG]          org.eclipse.aether:aether-spi:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-impl:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-api:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.aether:aether-util:jar:1.0.2.v20150114:compile\r\n[DEBUG]       org.eclipse.sisu:org.eclipse.sisu.plexus:jar:0.3.0:compile\r\n[DEBUG]          javax.enterprise:cdi-api:jar:1.0:compile\r\n[DEBUG]             javax.annotation:jsr250-api:jar:1.0:compile\r\n[DEBUG]          org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0:compile\r\n[DEBUG]       org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.5:compile\r\n[DEBUG]          javax.inject:javax.inject:jar:1:compile\r\n[DEBUG]          aopalliance:aopalliance:jar:1.0:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-interpolation:jar:1.21:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-classworlds:jar:2.5.2:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile\r\n[DEBUG]       org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile\r\n[DEBUG]          org.sonatype.plexus:plexus-cipher:jar:1.4:compile\r\n[DEBUG]    org.apache.maven:maven-plugin-api:jar:3.3.3:compile\r\n[DEBUG]    org.codehaus.plexus:plexus-container-default:jar:1.6:compile\r\n[DEBUG]       org.apache.xbean:xbean-reflect:jar:3.7:compile\r\n[DEBUG]       com.google.collections:google-collections:jar:1.0:compile\r\n[DEBUG]    org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-6:compile\r\n[DEBUG]       org.codehaus.plexus:plexus-component-api:jar:1.0-alpha-16:compile\r\n[DEBUG]          junit:junit:jar:4.12:test\r\n[DEBUG]             org.hamcrest:hamcrest-core:jar:1.3:test\r\n[DEBUG]    org.codehaus.plexus:plexus-utils:jar:3.0.22:compile\r\n[DEBUG]    com.feilong.project:feilong-train:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.office:feilong-office-excel:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          com.feilong.platform:feilong-servlet:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]             javax.servlet:jstl:jar:1.2:compile\r\n[DEBUG]          org.apache.poi:poi:jar:3.11:compile\r\n[DEBUG]             commons-codec:commons-codec:jar:1.9:compile\r\n[DEBUG]          org.apache.poi:poi-ooxml:jar:3.11:compile\r\n[DEBUG]          org.apache.poi:poi-ooxml-schemas:jar:3.11:compile\r\n[DEBUG]             org.apache.xmlbeans:xmlbeans:jar:2.6.0:compile\r\n[DEBUG]                stax:stax-api:jar:1.0.1:compile\r\n[DEBUG]          loxia2:loxia2-support:jar:2.5.2:compile\r\n[DEBUG]             org.aspectj:aspectjweaver:jar:1.6.8:compile\r\n[DEBUG]             ognl:ognl:jar:2.7.3:compile\r\n[DEBUG]                jboss:javassist:jar:3.7.ga:compile\r\n[DEBUG]          commons-digester:commons-digester:jar:2.1:compile\r\n[DEBUG]       com.feilong.chart:feilong-chart-core:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.chart:feilong-chart-amcharts:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-ant:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          org.apache.ant:ant:jar:1.9.4:compile\r\n[DEBUG]             org.apache.ant:ant-launcher:jar:1.9.4:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-mail:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          com.sun.mail:javax.mail:jar:1.5.2:compile\r\n[DEBUG]             javax.activation:activation:jar:1.1:compile\r\n[DEBUG]       com.feilong.platform.tools:feilong-tools-velocity:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          org.apache.velocity:velocity:jar:1.7:compile\r\n[DEBUG]          org.apache.velocity:velocity-tools:jar:2.0:compile\r\n[DEBUG]             commons-chain:commons-chain:jar:1.1:compile\r\n[DEBUG]             commons-validator:commons-validator:jar:1.3.1:compile\r\n[DEBUG]             dom4j:dom4j:jar:1.6.1:compile\r\n[DEBUG]                xml-apis:xml-apis:jar:1.4.01:compile\r\n[DEBUG]             oro:oro:jar:2.0.8:compile\r\n[DEBUG]       com.feilong.platform:feilong-core:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]          commons-lang:commons-lang:jar:2.6:compile\r\n[DEBUG]          org.apache.commons:commons-lang3:jar:3.4:compile\r\n[DEBUG]          commons-beanutils:commons-beanutils:jar:1.9.2:compile\r\n[DEBUG]          commons-logging:commons-logging:jar:1.2:compile\r\n[DEBUG]          commons-collections:commons-collections:jar:3.2.1:compile\r\n[DEBUG]          commons-io:commons-io:jar:2.4:compile\r\n[DEBUG]          net.sf.json-lib:json-lib:jar:jdk15:2.4:compile\r\n[DEBUG]             net.sf.ezmorph:ezmorph:jar:1.0.6:compile\r\n[DEBUG]    com.feilong.data:feilong-data-redis:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       redis.clients:jedis:jar:2.6.2:compile\r\n[DEBUG]          org.apache.commons:commons-pool2:jar:2.0:compile\r\n[DEBUG]    com.feilong.platform.tools:feilong-tools-jsoup:jar:1.2.1-SNAPSHOT:compile\r\n[DEBUG]       org.jsoup:jsoup:jar:1.7.3:compile\r\n[DEBUG]    ch.qos.logback:logback-core:jar:1.1.3:compile\r\n[DEBUG]    ch.qos.logback:logback-classic:jar:1.1.3:compile\r\n{color:red} \r\n[DEBUG]    org.slf4j:slf4j-api:jar:1.7.12:compile\r\n{color}\r\n[DEBUG] Created new class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG] Importing foreign packages into class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG]   Imported:  < maven.api\r\n[DEBUG] Populating class realm plugin>com.feilong.maven.plugins:feilong-training-plugin:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.maven.plugins:feilong-training-plugin:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.maven:maven-builder-support:jar:3.3.3\r\n[DEBUG]   Included: com.google.guava:guava:jar:18.0\r\n[DEBUG]   Included: org.eclipse.aether:aether-util:jar:1.0.2.v20150114\r\n[DEBUG]   Included: javax.enterprise:cdi-api:jar:1.0\r\n[DEBUG]   Included: javax.annotation:jsr250-api:jar:1.0\r\n[DEBUG]   Included: org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0\r\n[DEBUG]   Included: org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.5\r\n[DEBUG]   Included: aopalliance:aopalliance:jar:1.0\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-interpolation:jar:1.21\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-component-annotations:jar:1.5.5\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3\r\n[DEBUG]   Included: org.sonatype.plexus:plexus-cipher:jar:1.4\r\n[DEBUG]   Included: org.apache.xbean:xbean-reflect:jar:3.7\r\n[DEBUG]   Included: com.google.collections:google-collections:jar:1.0\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-6\r\n[DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:3.0.22\r\n[DEBUG]   Included: com.feilong.project:feilong-train:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.office:feilong-office-excel:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.platform:feilong-servlet:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: javax.servlet:jstl:jar:1.2\r\n[DEBUG]   Included: org.apache.poi:poi:jar:3.11\r\n[DEBUG]   Included: commons-codec:commons-codec:jar:1.9\r\n[DEBUG]   Included: org.apache.poi:poi-ooxml:jar:3.11\r\n[DEBUG]   Included: org.apache.poi:poi-ooxml-schemas:jar:3.11\r\n[DEBUG]   Included: org.apache.xmlbeans:xmlbeans:jar:2.6.0\r\n[DEBUG]   Included: stax:stax-api:jar:1.0.1\r\n[DEBUG]   Included: loxia2:loxia2-support:jar:2.5.2\r\n[DEBUG]   Included: org.aspectj:aspectjweaver:jar:1.6.8\r\n[DEBUG]   Included: ognl:ognl:jar:2.7.3\r\n[DEBUG]   Included: jboss:javassist:jar:3.7.ga\r\n[DEBUG]   Included: commons-digester:commons-digester:jar:2.1\r\n[DEBUG]   Included: com.feilong.chart:feilong-chart-core:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.chart:feilong-chart-amcharts:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-ant:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.ant:ant:jar:1.9.4\r\n[DEBUG]   Included: org.apache.ant:ant-launcher:jar:1.9.4\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-mail:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: com.sun.mail:javax.mail:jar:1.5.2\r\n[DEBUG]   Included: javax.activation:activation:jar:1.1\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-velocity:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.apache.velocity:velocity:jar:1.7\r\n[DEBUG]   Included: org.apache.velocity:velocity-tools:jar:2.0\r\n[DEBUG]   Included: commons-chain:commons-chain:jar:1.1\r\n[DEBUG]   Included: commons-validator:commons-validator:jar:1.3.1\r\n[DEBUG]   Included: dom4j:dom4j:jar:1.6.1\r\n[DEBUG]   Included: xml-apis:xml-apis:jar:1.4.01\r\n[DEBUG]   Included: oro:oro:jar:2.0.8\r\n[DEBUG]   Included: com.feilong.platform:feilong-core:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: commons-lang:commons-lang:jar:2.6\r\n[DEBUG]   Included: org.apache.commons:commons-lang3:jar:3.4\r\n[DEBUG]   Included: commons-beanutils:commons-beanutils:jar:1.9.2\r\n[DEBUG]   Included: commons-logging:commons-logging:jar:1.2\r\n[DEBUG]   Included: commons-collections:commons-collections:jar:3.2.1\r\n[DEBUG]   Included: commons-io:commons-io:jar:2.4\r\n[DEBUG]   Included: net.sf.json-lib:json-lib:jar:jdk15:2.4\r\n[DEBUG]   Included: net.sf.ezmorph:ezmorph:jar:1.0.6\r\n[DEBUG]   Included: com.feilong.data:feilong-data-redis:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: redis.clients:jedis:jar:2.6.2\r\n[DEBUG]   Included: org.apache.commons:commons-pool2:jar:2.0\r\n[DEBUG]   Included: com.feilong.platform.tools:feilong-tools-jsoup:jar:1.2.1-SNAPSHOT\r\n[DEBUG]   Included: org.jsoup:jsoup:jar:1.7.3\r\n[DEBUG]   Included: ch.qos.logback:logback-core:jar:1.1.3\r\n[DEBUG]   Included: ch.qos.logback:logback-classic:jar:1.1.3 \r\n{code}\r\n\r\n\r\n*and i also see that,  in  maven  \"META-INF/maven/extension.xml\" file ,\r\n here is slf4j  exportedArtifact config:*\r\n{code}\r\n    <exportedArtifact>org.slf4j:slf4j-api</exportedArtifact>\r\n{code}\r\n\r\n\r\n*and in org.apache.maven.classrealm.DefaultClassRealmManager.isProvidedArtifact(Artifact)   line 167 , has code validator*\r\n\r\n{code}\r\nif ( artifacts != null )\r\n        {\r\n            for ( Artifact artifact : artifacts )\r\n            {\r\n                if ( !isProvidedArtifact( artifact ) )\r\n                {\r\n                    artifactIds.add( getId( artifact ) );\r\n                    if ( artifact.getFile() != null )\r\n                    {\r\n                        constituents.add( new ArtifactClassRealmConstituent( artifact ) );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n{code}\r\n......\r\n\r\n\r\n*why in my plugins, can not use MessageFormatter?*",
        "java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter with jetty plugin When Maven is used with a different SLF4J implementation than slf4j-simple (in my case logback to have colored logs), running jetty-maven-plugin fails.\r\n\r\n{code}\r\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T13:57:37+02:00)\r\nMaven home: /usr/local/Cellar/maven/3.3.3/libexec\r\nJava version: 1.8.0_40, vendor: Oracle Corporation\r\nJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre\r\nDefault locale: fr_FR, platform encoding: UTF-8\r\nOS name: \"mac os x\", version: \"10.10.3\", arch: \"x86_64\", family: \"mac\"\r\n{code}\r\n\r\n{code}\r\n[WARNING] FAILED org.mortbay.jetty.plugin.JettyServer@66c4005: java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\njava.lang.ClassNotFoundException: org.slf4j.helpers.MessageFormatter\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239) ~[plexus-classworlds-2.5.2.jar:na]\r\n\t... 21 common frames omitted\r\nWrapped by: java.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.log(JettyAwareLogger.java:619) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.info(JettyAwareLogger.java:314) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.Slf4jLog.info(Slf4jLog.java:74) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.server.Server.doStart(Server.java:271) ~[jetty-server-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) ~[jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) [maven-core-3.3.1.jar:3.3.1]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl.buildProject(SmartBuilderImpl.java:275) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl$ProjectBuildTask.run(SmartBuilderImpl.java:101) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_40]\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40]\r\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_40]\r\njava.lang.NoClassDefFoundError: org/slf4j/helpers/MessageFormatter\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.log(JettyAwareLogger.java:619) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.info(JettyAwareLogger.java:314) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.log.Slf4jLog.info(Slf4jLog.java:74) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.server.Server.doStart(Server.java:271) ~[jetty-server-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) ~[jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) ~[jetty-util-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) [jetty-maven-plugin-7.6.16.v20140903.jar:7.6.16.v20140903]\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) [maven-core-3.3.1.jar:3.3.1]\r\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) [maven-core-3.3.1.jar:3.3.1]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl.buildProject(SmartBuilderImpl.java:275) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat io.takari.maven.builder.smart.SmartBuilderImpl$ProjectBuildTask.run(SmartBuilderImpl.java:101) [takari-smart-builder-0.4.0.jar:0.4.0]\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_40]\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40]\r\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_40]\r\nCaused by: java.lang.ClassNotFoundException: org.slf4j.helpers.MessageFormatter\r\n\tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247) ~[plexus-classworlds-2.5.2.jar:na]\r\n\tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239) ~[plexus-classworlds-2.5.2.jar:na]\r\n\t... 21 common frames omitted\r\n[INFO] Jetty server exiting.\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD FAILURE\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 1.001 s (Wall Clock)\r\n[INFO] Finished at: 2015-06-15T13:05:18+02:00\r\n[INFO] Final Memory: 17M/206M\r\n[INFO] ------------------------------------------------------------------------\r\n[ERROR] Failed to execute goal org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903:run (default-cli) on project example-webapp: Execution default-cli of goal org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903:run failed: A required class was missing while executing org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903:run: org/slf4j/helpers/MessageFormatter\r\n[ERROR] -----------------------------------------------------\r\n[ERROR] realm =    plugin>org.mortbay.jetty:jetty-maven-plugin:7.6.16.v20140903\r\n[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\r\n[ERROR] urls[0] = file:/Users/jcgay/.m2/repository/org/mortbay/jetty/jetty-maven-plugin/7.6.16.v20140903/jetty-maven-plugin-7.6.16.v20140903.jar\r\n[ERROR] urls[1] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-util/7.6.16.v20140903/jetty-util-7.6.16.v20140903.jar\r\n[ERROR] urls[2] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-webapp/7.6.16.v20140903/jetty-webapp-7.6.16.v20140903.jar\r\n[ERROR] urls[3] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-xml/7.6.16.v20140903/jetty-xml-7.6.16.v20140903.jar\r\n[ERROR] urls[4] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-servlet/7.6.16.v20140903/jetty-servlet-7.6.16.v20140903.jar\r\n[ERROR] urls[5] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-security/7.6.16.v20140903/jetty-security-7.6.16.v20140903.jar\r\n[ERROR] urls[6] = file:/Users/jcgay/.m2/repository/org/sonatype/sisu/sisu-inject-bean/2.1.1/sisu-inject-bean-2.1.1.jar\r\n[ERROR] urls[7] = file:/Users/jcgay/.m2/repository/org/sonatype/sisu/sisu-guice/2.9.4/sisu-guice-2.9.4-no_aop.jar\r\n[ERROR] urls[8] = file:/Users/jcgay/.m2/repository/org/codehaus/plexus/plexus-utils/2.0.6/plexus-utils-2.0.6.jar\r\n[ERROR] urls[9] = file:/Users/jcgay/.m2/repository/org/sonatype/aether/aether-util/1.11/aether-util-1.11.jar\r\n[ERROR] urls[10] = file:/Users/jcgay/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.14/plexus-interpolation-1.14.jar\r\n[ERROR] urls[11] = file:/Users/jcgay/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar\r\n[ERROR] urls[12] = file:/Users/jcgay/.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar\r\n[ERROR] urls[13] = file:/Users/jcgay/.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar\r\n[ERROR] urls[14] = file:/Users/jcgay/.m2/repository/org/apache/maven/plugin-tools/maven-plugin-tools-api/2.9/maven-plugin-tools-api-2.9.jar\r\n[ERROR] urls[15] = file:/Users/jcgay/.m2/repository/org/apache/maven/reporting/maven-reporting-api/2.0.6/maven-reporting-api-2.0.6.jar\r\n[ERROR] urls[16] = file:/Users/jcgay/.m2/repository/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.jar\r\n[ERROR] urls[17] = file:/Users/jcgay/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar\r\n[ERROR] urls[18] = file:/Users/jcgay/.m2/repository/net/sf/jtidy/jtidy/r938/jtidy-r938.jar\r\n[ERROR] urls[19] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-plus/7.6.16.v20140903/jetty-plus-7.6.16.v20140903.jar\r\n[ERROR] urls[20] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.transaction/1.1.1.v201105210645/javax.transaction-1.1.1.v201105210645.jar\r\n[ERROR] urls[21] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-jndi/7.6.16.v20140903/jetty-jndi-7.6.16.v20140903.jar\r\n[ERROR] urls[22] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-server/7.6.16.v20140903/jetty-server-7.6.16.v20140903.jar\r\n[ERROR] urls[23] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.servlet/2.5.0.v201103041518/javax.servlet-2.5.0.v201103041518.jar\r\n[ERROR] urls[24] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-continuation/7.6.16.v20140903/jetty-continuation-7.6.16.v20140903.jar\r\n[ERROR] urls[25] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.mail.glassfish/1.4.1.v201005082020/javax.mail.glassfish-1.4.1.v201005082020.jar\r\n[ERROR] urls[26] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.activation/1.1.0.v201105071233/javax.activation-1.1.0.v201105071233.jar\r\n[ERROR] urls[27] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-jmx/7.6.16.v20140903/jetty-jmx-7.6.16.v20140903.jar\r\n[ERROR] urls[28] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-annotations/7.6.16.v20140903/jetty-annotations-7.6.16.v20140903.jar\r\n[ERROR] urls[29] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.annotation/1.1.0.v201108011116/javax.annotation-1.1.0.v201108011116.jar\r\n[ERROR] urls[30] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.objectweb.asm/3.1.0.v200803061910/org.objectweb.asm-3.1.0.v200803061910.jar\r\n[ERROR] urls[31] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-websocket/7.6.16.v20140903/jetty-websocket-7.6.16.v20140903.jar\r\n[ERROR] urls[32] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-io/7.6.16.v20140903/jetty-io-7.6.16.v20140903.jar\r\n[ERROR] urls[33] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-http/7.6.16.v20140903/jetty-http-7.6.16.v20140903.jar\r\n[ERROR] urls[34] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/jetty-jsp/7.6.16.v20140903/jetty-jsp-7.6.16.v20140903.jar\r\n[ERROR] urls[35] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.servlet.jsp/2.1.0.v201105211820/javax.servlet.jsp-2.1.0.v201105211820.jar\r\n[ERROR] urls[36] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.apache.jasper.glassfish/2.1.0.v201110031002/org.apache.jasper.glassfish-2.1.0.v201110031002.jar\r\n[ERROR] urls[37] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.servlet.jsp.jstl/1.2.0.v201105211821/javax.servlet.jsp.jstl-1.2.0.v201105211821.jar\r\n[ERROR] urls[38] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.apache.taglibs.standard.glassfish/1.2.0.v201112081803/org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar\r\n[ERROR] urls[39] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/javax.el/2.1.0.v201105211819/javax.el-2.1.0.v201105211819.jar\r\n[ERROR] urls[40] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/com.sun.el/1.0.0.v201105211818/com.sun.el-1.0.0.v201105211818.jar\r\n[ERROR] urls[41] = file:/Users/jcgay/.m2/repository/org/eclipse/jetty/orbit/org.eclipse.jdt.core/3.7.1/org.eclipse.jdt.core-3.7.1.jar\r\n[ERROR] Number of foreign imports: 1\r\n[ERROR] import: Entry[import  from realm ClassRealm[project>fr.jcgay.server-notifier:example-webapp:0.2-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]]\r\n[ERROR]\r\n[ERROR] -----------------------------------------------------: org.slf4j.helpers.MessageFormatter\r\n{code}\r\n\r\nI reproduced the error with Maven 3.3.1, 3.3.3 and latest jetty plugin versions:\r\n\r\n{code:xml}\r\n            <plugin>\r\n                <groupId>org.mortbay.jetty</groupId>\r\n                <artifactId>jetty-maven-plugin</artifactId>\r\n                <version>7.6.16.v20140903</version>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n                <groupId>org.mortbay.jetty</groupId>\r\n                <artifactId>jetty-maven-plugin</artifactId>\r\n                <version>8.1.16.v20140903</version>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n                <groupId>org.eclipse.jetty</groupId>\r\n                <artifactId>jetty-maven-plugin</artifactId>\r\n                <version>9.3.0.RC1</version>\r\n            </plugin>\r\n{code}\r\n\r\nIt works perfectly fine with Maven 3.2.5.\r\n\r\nI assume that the problem is not limited to the jetty plugin but to any plugin using slf4j-api classes from packages different than org.slf4j.* and org.slf4j.spi (exposed in extension.xml).\r\nI have tried running jetty with a patched maven-core.jar (adding <exportedPackage>org.slf4j.helpers.*</exportedPackage> into META-INF/maven/extension.xml) and it runs fine."
    ],
    [
        "MNG-5849",
        "MNG-5796",
        "maven can not be found when current directory is drive/root at least on windows 7 64bit when your current directory is drive/root on windows , mvn -version does not work. but if you are at any directory inside of drive/root, it works.",
        "mvn fails when the current directory is a root drive on Windows Executing mvn.cmd when the current directory is a drive root like C: outputs the help for the java command."
    ],
    [
        "MNG-5849",
        "MNG-5798",
        "maven can not be found when current directory is drive/root at least on windows 7 64bit when your current directory is drive/root on windows , mvn -version does not work. but if you are at any directory inside of drive/root, it works.",
        "mvn doesn't works on windows virtual drive Hi\r\nOn windows 7, If you create a virtual drive S: by running for exemple \r\nthe command line \"subst S: C:\\temp\", \r\nand if you do a mvn -version on S:, you will have the following message :\r\n\r\n\r\nUsage: java [-options] class [args...]\r\n           (to execute a class)\r\n   or  java [-options] -jar jarfile [args...]\r\n           (to execute a jar file)\r\nETC...........\r\n\r\nAny other mvn command will fail.\r\nThe command will works on S: sub folders.\r\n\r\nIt works on maven 3.2.5\r\n\r\n\r\nThanks\r\nEric\r\n"
    ],
    [
        "MNG-5849",
        "MNG-5802",
        "maven can not be found when current directory is drive/root at least on windows 7 64bit when your current directory is drive/root on windows , mvn -version does not work. but if you are at any directory inside of drive/root, it works.",
        "JDK7 compatibility Add the bin directory to system PATH,maven only works in c:/users/***,other disk not work.\r\nBut,I replace maven to 3.2.5,it works ok."
    ],
    [
        "MNG-5849",
        "MNG-5804",
        "maven can not be found when current directory is drive/root at least on windows 7 64bit when your current directory is drive/root on windows , mvn -version does not work. but if you are at any directory inside of drive/root, it works.",
        "mvn.bat does not work in root directory on Windows On Windows the new `mvn.cmd` script does not work if the current working directory is the root dir of a drive. In that case it will initialize  `%MAVEN_PROJECTBASEDIR%` with a trailing `\\` and that will break the java command line as it escapes the following quote of `\"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\"`.\r\n\r\nIt works on 3.2.1 and fails with 3.3.1:\r\n\r\n{code}\r\nc:\\> cd /d C:\\\r\nc:\\>c:\\devenv\\apache-maven-3.2.1\\bin\\mvn --version\r\nApache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T18:37:52+01:00)\r\nMaven home: c:\\devenv\\apache-maven-3.2.1\\bin\\..\r\n...\r\nc:\\>c:\\devenv\\apache-maven-3.3.1\\bin\\mvn --version\r\nUsage: java [-options] class [args...]\r\n...\r\n{code}\r\n"
    ],
    [
        "MNG-5873",
        "MNG-5812",
        ".mvn/extensions.xml ignored under Cygwin Suppose I download example maven projects that use .mvn/extensions.xml and do mvn install:\r\n\r\n{code}\r\ngit clone https://github.com/takari/polyglot-maven-examples\r\ncd polyglot-maven-examples/yaml\r\nmvn install\r\n{code}\r\n\r\nunder Cygwin the extensions.xml is not accounted for:\r\n\r\n{code:title=Cygwin error}\r\n[INFO] Scanning for projects...\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD FAILURE\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 0.187 s\r\n[INFO] Finished at: 2015-08-19T10:07:05+03:00\r\n[INFO] Final Memory: 4M/75M\r\n[INFO] ------------------------------------------------------------------------\r\n[ERROR] The goal you specified requires a project to execute but there is no POM in this directory (D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml). Please verify you invoked Maven from the correct directory. -> [Help 1]\r\n[ERROR]\r\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r\n[ERROR]\r\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\r\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MissingProjectException\r\n{code}\r\n\r\nUnder Windows CMD mvn install works fine.\r\n\r\n{code:title=Windows CMD success}\r\n[INFO] Scanning for projects...\r\nD:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml\\.polyglot.pom.yml\r\n[INFO]\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Building YAML Maven Love 0.0.1-SNAPSHOT\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO]\r\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ yaml-project ---\r\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platfo\r\nrm dependent!\r\n[INFO] skip non existing resourceDirectory D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyg\r\nlot-maven-examples\\yaml\\src\\main\\resources\r\n[INFO]\r\n[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ yaml-project ---\r\n[INFO] Nothing to compile - all classes are up to date\r\n[INFO]\r\n[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ yaml-project ---\r\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platfo\r\nrm dependent!\r\n[INFO] skip non existing resourceDirectory D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyg\r\nlot-maven-examples\\yaml\\src\\test\\resources\r\n[INFO]\r\n[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ yaml-project ---\r\n[INFO] No sources to compile\r\n[INFO]\r\n[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ yaml-project ---\r\n[INFO] No tests to run.\r\n[INFO]\r\n[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ yaml-project ---\r\n[INFO] Building jar: D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yam\r\nl\\target\\yaml-project-0.0.1-SNAPSHOT.jar\r\n[INFO]\r\n[INFO] --- maven-install-plugin:2.4:install (default-install) @ yaml-project ---\r\n[INFO] Installing D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml\\t\r\narget\\yaml-project-0.0.1-SNAPSHOT.jar to C:\\Users\\Domas\\.m2\\repository\\io\\takari\\polyglot\\yaml-proje\r\nct\\0.0.1-SNAPSHOT\\yaml-project-0.0.1-SNAPSHOT.jar\r\n[INFO] Installing D:\\ivairus\\cygwin\\home\\Domas\\projektai\\another-test\\polyglot-maven-examples\\yaml\\.\r\npolyglot.pom.yml to C:\\Users\\Domas\\.m2\\repository\\io\\takari\\polyglot\\yaml-project\\0.0.1-SNAPSHOT\\yam\r\nl-project-0.0.1-SNAPSHOT.pom\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD SUCCESS\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 10.038 s\r\n[INFO] Finished at: 2015-08-19T10:10:15+03:00\r\n[INFO] Final Memory: 13M/178M\r\n[INFO] ------------------------------------------------------------------------\r\n{code}",
        "Project base dir not fully working in Cygwin When using {{mvn}} (not {{mvn.cmd}}) in a Cygwin shell, the MAVEN_PROJECTBASEDIR variable which contains a Unix path, does not get mapped to a windows. \r\n\r\nThis can be easily fixed by adding a small instruction to the script:\r\n\r\n{code:none}\r\nMAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\r\n{code}"
    ],
    [
        "MNG-5939",
        "MNG-5868",
        "Problem doing release when sources are generate as well If I specified that sources should be generated with jar-no-fork goal https://maven.apache.org/plugins/maven-source-plugin/jar-no-fork-mojo.html .\r\n\r\nWhen doing a release with maven-release-plugin it will build the source again when useReleaseProfile is true (use the release profile that adds sources and javadocs to the released artifact http://maven.apache.org/maven-release/maven-release-plugin/perform-mojo.html#useReleaseProfile).\r\n\r\nThe outcome is that it will run with both jar and jar-no-fork and generate and deploy 2 -sources.jar artifacts, with same version. That makes the release build fails.\r\n \r\nThe same behavior could be reproduced when running both jar and jar-no-fork goal between maven 3.2.1. and maven 3.3.9.\r\n\r\n----\r\nPlease find the logs for maven 3.2.1 and 3.3.9 in the foo.bar.zip\r\nWith maven 3.3.9 it uploads it 2 times :\r\nUploaded: http://127.0.0.1:8081/nexus/content/repositories/releases/foo/bar/0.0.1/bar-0.0.1-sources.jar (722 B at 15.3 KB/sec)\r\nUploading: http://127.0.0.1:8081/nexus/content/repositories/releases/foo/bar/0.0.1/bar-0.0.1-sources.jar\r\n722/722 B",
        "Adding serval times the same artifact via MavenProjectHelper (attachArtifact) does not produce a failure  During the check of an issue MSHADE-195 i stumbled over several things...\r\n\r\nIf you take a look here and the log output excerpt:\r\n\r\n{noformat}\r\nINFO] Minimized 2341 -> 1293\r\n[INFO] Minimized 3282 -> 2234\r\n[INFO] Replacing original artifact with shaded artifact.\r\n[INFO] Replacing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT.jar with /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-shaded.jar\r\n[INFO] Replacing original source artifact with shaded source artifact.\r\n[INFO] Replacing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-sources.jar with /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-shaded-sources.jar\r\n[INFO] Dependency-reduced POM written at: /Users/kama/ws-git/apache/mshade/mshade-195/dependency-reduced-pom.xml\r\n[INFO]\r\n[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ MSHADE-195-example ---\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT.jar to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT.jar\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/dependency-reduced-pom.xml to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT.pom\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-sources.jar to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT-sources.jar\r\n[INFO] Installing /Users/kama/ws-git/apache/mshade/mshade-195/target/MSHADE-195-example-1-SNAPSHOT-sources.jar to /Users/kama/.m2/repository/com/example/MSHADE-195-example/1-SNAPSHOT/MSHADE-195-example-1-SNAPSHOT-sources.jar\r\n[INFO] \r\n{noformat}\r\n\r\nInstall plugin tries to install two identical artifacts which will work for maven-install-plugin but would fail a deploy to repository manager (for releases) etc.\r\n\r\nSo after diving into the problem i found the following code in maven-core (MavenProject.java):\r\n\r\n{code:java}\r\n    /**\r\n     * Add or replace an artifact. This method is now deprecated. Use the @{MavenProjectHelper} to attach artifacts to a\r\n     * project. In spite of the 'throws' declaration on this API, this method has never thrown an exception since Maven\r\n     * 3.0.x. Historically, it logged and ignored a second addition of the same g/a/v/c/t. Now it replaces the file for\r\n     * the artifact, so that plugins (e.g. shade) can change the pathname of the file for a particular set of\r\n     * coordinates.\r\n     *\r\n     * @param artifact the artifact to add or replace.\r\n     * @throws DuplicateArtifactAttachmentException\r\n     */\r\n    public void addAttachedArtifact( Artifact artifact )\r\n        throws DuplicateArtifactAttachmentException\r\n    {\r\n        getAttachedArtifacts().add( artifact );\r\n    }\r\n\r\n    public List<Artifact> getAttachedArtifacts()\r\n    {\r\n        if ( attachedArtifacts == null )\r\n        {\r\n            attachedArtifacts = new ArrayList<>();\r\n        }\r\n        return attachedArtifacts;\r\n    }\r\n{code}\r\nSo taking a look into MavenProjectHelper.java and the implementation (DefaultMavenProjectHelper.java).\r\n\r\n{code:java}\r\n    /**\r\n     * Add an attached artifact or replace the file for an existing artifact.\r\n     *\r\n     * @see MavenProject#addAttachedArtifact(org.apache.maven.artifact.Artifact)\r\n     * @param project project reference.\r\n     * @param artifact artifact to add or replace.\r\n     */\r\n    public void attachArtifact( MavenProject project, Artifact artifact )\r\n    {\r\n        project.addAttachedArtifact( artifact );\r\n    }\r\n{code}\r\n\r\nwhich means that there is not check if an artifacts is already attached.\r\n\r\n"
    ]
]