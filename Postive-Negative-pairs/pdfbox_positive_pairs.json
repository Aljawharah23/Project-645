[
    [
        "PDFBOX-77",
        "PDFBOX-61",
        "PDF-Extraction splits words by spaces [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1251041\r\nOriginally submitted by mkrebs on 2005-08-03 06:14.\r\n\r\nI'm currently working on an indexing-service using \r\njakarta lucene. Momentarily in a first step i have to \r\nindex about 80 PDF-Documents (later approximatly \r\n1000 documents). Ca. 60 documents (of the 80) are \r\nextracted by PDFBox without any problems. But for \r\naround 20 documents, PDFBox generates too many \r\nspaces, which means, that words like \"hostname\" are \r\nextracted to \"ho stna me\". This happens by nearly all \r\nwords contained in these 20 documents.\r\nBecause i have to extract page-information i am using \r\nPDFTextStripper with the methods setPageSeparator\r\n(..), setStartPage(..), setEndPage(..) and writeText():\r\n\r\nStringWriter s = new StringWriter();\r\nPDDocument pddoc = null;\r\ntry {\r\n pddoc = PDDocument.load(f);\r\n int pageCount = pddoc.getPageCount();\r\n PDFTextStripper stripper = new \r\nPDFTextStripper();\r\n stripper.setPageSeparator\r\n(IndexFiles.DOCUMENT_PAGE_SEPARATOR);\r\n stripper.setStartPage(1);\r\n stripper.setEndPage(pageCount);\r\n stripper.writeText(pddoc, s);\r\n} finally {\r\n if (pddoc != null)\r\n  pddoc.close();\r\n}\r\nStringBuffer contents = s.getBuffer();\r\n\r\nIn respect for my indexing-service it is impossible to \r\nindex these documents correctly.\r\n\r\nI have tried to BugFix PDFBox \r\n(PDFTextStripper.flushText()) and established, that the \r\nwidth returned by TextPosition.getWidth() is incorrect. \r\nWhen i multiply this width with TextPosition.getXScale\r\n(), these documents are extracted correctly. But other \r\nbefore correctly extracted documents loose nearly all \r\nspaces, which means, that a complete sentence dont \r\ncontain any spaces between words.\r\n\r\nI have tried: PDFBox-0.7.2-dev-20050730.jar, but the \r\nproblem still remains.\r\n\r\nExample Text-Output:\r\n\r\n3.5 SSL V erbindunge n\r\n      \u2022 JSSE (Java Sec ure So ck et E xt en sion)\r\n      \u2022 im po rt ja vax .n et .ss l. *\r\n      \u2022 W ese nt lich e \u00a8And erung im Cl ient Pr ogr \r\namm : (F act o ry\r\n      P att e rn )\r\n      Erse tze\r\n      Soc ket s = new Soc ket (ho stna me, port numb er)\r\n      du rc h\r\n      SSL Soc ketF acto ry s f = (SS LSoc ketF acto ry)\r\nS SLS ocke tFac tory .get Def ault ();\r\n      SSL Soc ket s = (SSL Sock et) sf.c reat eSoc ket( \r\nhos tnam e, p ortn umbe r);\r\n      \u2022 Daf \u00a8u r mus s SSL k o n fig u riert sein (si ehe \r\nunten).\r\n      V o rl \u00a8aufige V.......\r\n\r\n\r\n[attachment on SourceForge]\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1251041&file_id=144276\r\n03_2_SSL.pdf (application/pdf), 189828 bytes\r\nuniversity-lecture",
        "Spaces in extracted file [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1208824\r\nOriginally submitted by nobody on 2005-05-25 16:40.\r\n\r\nIn trying to integrate with lucene, I was having \r\nproblems.  The Lucene people suggested that I check \r\nthe output of extract utility against one of my test pdf's.  \r\nWhen I did, I saw spaces placed inside many of the \r\nwords.  I was on version 0.7.0.  So I downloaded 0.7.1 \r\nand see the same results.\r\n\r\nOne of the test files where I see this issue is attached.\r\n\r\n[attachment on SourceForge]\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1208824&file_id=135995\r\nTom_3.pdf (application/pdf), 10145 bytes\r\nTest pdf file."
    ],
    [
        "PDFBOX-205",
        "PDFBOX-185",
        "Miscellaneous errors on valid files [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1570311\nOriginally submitted by renaudw on 2006-10-03 15:04.\n\nAs far as I can tell these files are valid. Some \ngenerate a warning in Acrobat Reader, some don't.\n\nI'm reporting them in case you want to have a look at \nthe errors they generate. All files are accessible \nonline by replacing /web/gfdocs with \nhttp://bat.library.ucsf.edu/data.\n\n\n/web/gfdocs/p/b/x/pbx00a99/pbx00a99.pdf skipped due \nto: java.io.IOException: Error: Expected an integer \ntype, actual='BC3c#c3??\\?' (stacktrace follows)\njava.io.IOException: Error: Expected an integer type, \nactual='BC3c#c3??\\?'\n        at org.pdfbox.pdfparser.BaseParser.readInt\n(BaseParser.java:1335)\n        at org.pdfbox.pdfparser.PDFParser.parseObject\n(PDFParser.java:415)\n        at org.pdfbox.pdfparser.PDFParser.parse\n(PDFParser.java:176)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.pa\nrseDocument(TextOverImageDocumentDetector.java:210)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:102)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)\n\n\n/web/gfdocs/p/e/b/peb40a99/peb40a99.pdf skipped due \nto: java.io.StreamCorruptedException: Error: data is \nnull (stacktrace follows)\njava.io.StreamCorruptedException: Error: data is null\n        at org.pdfbox.filter.LZWFilter.decode\n(LZWFilter.java:101)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:319)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:249)\n        at org.pdfbox.cos.COSStream.getUnfilteredStream\n(COSStream.java:173)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS\ntream(COSStreamArray.java:200)\n        at org.pdfbox.pdfparser.PDFStreamParser.<init>\n(PDFStreamParser.java:91)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getStreamToken\ns(COSStreamArray.java:141)\n        at \norg.pdfbox.util.PDFStreamEngine.processSubStream\n(PDFStreamEngine.java:189)\n        at \norg.pdfbox.util.PDFStreamEngine.processStream\n(PDFStreamEngine.java:160)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.co\nllectTextRenderingModes\n(TextOverImageDocumentDetector.java:153)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:125)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:103)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)\n\n\n/web/gfdocs/q/l/n/qln20a99/qln20a99.pdf skipped due \nto: java.io.StreamCorruptedException: Error: data is \nnull (stacktrace follows)\njava.io.StreamCorruptedException: Error: data is null\n        at org.pdfbox.filter.LZWFilter.decode\n(LZWFilter.java:101)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:319)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:249)\n        at org.pdfbox.cos.COSStream.getUnfilteredStream\n(COSStream.java:173)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS\ntream(COSStreamArray.java:200)\n        at org.pdfbox.pdfparser.PDFStreamParser.<init>\n(PDFStreamParser.java:91)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getStreamToken\ns(COSStreamArray.java:141)\n        at \norg.pdfbox.util.PDFStreamEngine.processSubStream\n(PDFStreamEngine.java:189)\n        at \norg.pdfbox.util.PDFStreamEngine.processStream\n(PDFStreamEngine.java:160)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.co\nllectTextRenderingModes\n(TextOverImageDocumentDetector.java:153)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:125)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:103)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)\n\n\n/web/gfdocs/q/p/e/qpe20a99/qpe20a99.pdf skipped due \nto: java.io.StreamCorruptedException: Error: data is \nnull (stacktrace follows)\njava.io.StreamCorruptedException: Error: data is null\n        at org.pdfbox.filter.LZWFilter.decode\n(LZWFilter.java:101)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:319)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:249)\n        at org.pdfbox.cos.COSStream.getUnfilteredStream\n(COSStream.java:173)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS\ntream(COSStreamArray.java:200)\n        at org.pdfbox.pdfparser.PDFStreamParser.<init>\n(PDFStreamParser.java:91)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getStreamToken\ns(COSStreamArray.java:141)\n        at \norg.pdfbox.util.PDFStreamEngine.processSubStream\n(PDFStreamEngine.java:189)\n        at \norg.pdfbox.util.PDFStreamEngine.processStream\n(PDFStreamEngine.java:160)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.co\nllectTextRenderingModes\n(TextOverImageDocumentDetector.java:153)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:125)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:103)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)",
        "StreamCorruptedException in LZWFilter [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1525971\nOriginally submitted by nobody on 2006-07-20 08:43.\n\nHello,\nI get a StreamCorruptedException in LZWFilter.decode\nwhen I'm reading the Adobe-TIFF6.0 description (121\npages) file. It's a pitty but it's never more available\nonline. I tried to attach it, but it has ~400kb. If\nanyone need's it I can mail it. I am successfull\nloading it by the ICEpdf-package and Acrobat. Please\nHelp! ijyama@web.de"
    ],
    [
        "PDFBOX-222",
        "PDFBOX-137",
        "Printing Landscape [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1608652\nOriginally submitted by jlynch16 on 2006-12-04 09:26.\n\nRight now, when you try to print a PDDocument that has rotated pags (ie. /ROTATE 90) it does not currently take the rotation into consideration when figuring out the PageFormat for a given page. I fixed this and submitted a patch for it. \n\nI wasn't sure if you needed a bug written up in order to process and close the fix via the patch submitted.\n\n-Jim Lynch\n1360 Studios",
        "Does not detect paper format [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1435244\nOriginally submitted by nobody on 2006-02-20 06:55.\n\nPdfbox does not detect the paper format of the PDF. It\nalways says \"Orientation 1\" even after changing it from\njava:\ndocument.getPageFormat(0).setOrientation(PageFormat.LANDSCAPE);\n\nand alternates between \"Height 595.0, Width 842.0\" and\n\"Height 842.0, Width 595.0\" (which both is A1 if\ninterpreted as mm)\n\nI tried several PDF-Creators (itext, Openoffice), but\nthe Pdfbox always wants to print LETTER in PORTRAIT\norientation. (the pages are A4)\n\nSettings the orientation in the printer dialog does not\nhelp. \n\nI believe it get's its info from: \n/Rotate 90/MediaBox[0 0 595 842]\n\nregards, \n\nJPT, j.p.t.@gmx.net\n(pdfbox 0.7.2, itext 1.3.6)"
    ],
    [
        "PDFBOX-227",
        "PDFBOX-211",
        "ArrayIndexOutOfBoundsException:4 [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1610268\nOriginally submitted by fotb on 2006-12-06 09:04.\n\nDoes anyone know if there has been any resolution to the\nArrayIndexOutOfBoundsException:4  problem.\nI have extracted text from 300 pdfs using  0.7.3.  All extractions were\nsuccessful except 3.  I recieved this error message when trying to extract\ntext from these 3 pds (java.lang.ArrayIndexOutOfBoundsException:4).  I am\nable to open the pdfs fine and they have no special security applied to\nthem.  Any ideas as to why PDFBOX 0.7.3 is hiccuping while trying to\nprocess these files?  I am not able to send the pdf over the internet because it is government property.\n\n\n[comment on SourceForge]\nOriginally sent by fotb.\nLogged In: YES \nuser_id=1662347\nOriginator: YES\n\nI loaded PDFBox-0.7.2 and the problem went away.  The 3 pdfs that were raising errors with PDFBox-0.7.3 are now being successfully processed with text being extracted from them.  Something in PDFBox-0.7.3 is causing the problem.  If anyone else is having the ArrayIndexOutOfBoundsException is, I would suggest loading PDFBox-0.7.2 and see if you still get the error.  Thanks  Ben for your time.  Be well.",
        "Regression: ArrayIndexOutOfBoundsException in PDFBox 0.7.3 [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1585354\nOriginally submitted by cfmfluit on 2006-10-26 13:38.\n\nWhile extracting the text from a PDF using\nPDFTextStripper I get the following exception:\n\nException in thread \"Thread-6\"\njava.lang.ArrayIndexOutOfBoundsException: 4\n at\norg.fontbox.cmap.CMapParser.parseNextToken(CMapParser.java:294)\n at org.fontbox.cmap.CMapParser.parse(CMapParser.java:103)\n at\norg.pdfbox.pdmodel.font.PDFont.parseCmap(PDFont.java:535)\n at org.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:387)\n at\norg.pdfbox.util.PDFStreamEngine.showString(PDFStreamEngine.java:325)\n at\norg.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:80)\n at\norg.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:452)\n at\norg.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:215)\n at\norg.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:174)\n at\norg.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:336)\n at\norg.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:259)\n at\norg.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:216)\n at\norg.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:149)\n at\norg.semanticdesktop.aperture.extractor.pdf.PdfExtractor.processDocument(PdfExtractor.java:91)\n at\norg.semanticdesktop.aperture.extractor.pdf.PdfExtractor.extract(PdfExtractor.java:52)\n at\norg.semanticdesktop.aperture.extractor.util.ThreadedExtractorWrapper$ExtractionThread.run(ThreadedExtractorWrapper.java:158)\n\nI'm using PDFBox 0.7.3. With version 0.7.2 text\nextraction on this file worked fine.\n\nThe PDF file is not online anymore and I don't know\nwhether the author would appreciate it if I put it\nonline somewhere, but I can send it to you if you like\n(mail me at chris AT aduna-software.com).\n\n[comment on SourceForge]\nOriginally sent by junprevo.\nLogged In: YES \nuser_id=1663139\nOriginator: NO\n\nHi, ben \nI did some work on this bug. don't know how to send my code to you. I will just paste my fix here. \n\ninside CMapParser.java\n\nin the method\nprivate Object parseNextToken(PushbackInputStream is)\n        throws IOException\n{\n ..........\n\n case 60: // '<'\n        {\n            int theNextByte = is.read();\n            if(theNextByte == 60)\n            {\n                Map <Object, Object> result = new HashMap <Object, Object> ();\n                for(Object key = parseNextToken(is); (key instanceof LiteralName) && key != \">>\"; key = parseNextToken(is))\n                {\n                    Object value = parseNextToken(is);\n                    result.put(((LiteralName)key).name, value);\n                }\n\n                retval = result;\n                break;\n            }\n            // increase array size from 4 to 6 \n            byte [] buffer = new byte[6];\n            int multiplyer = 16;\n            int bufferIndex = -1;\n            for(;theNextByte != -1 && theNextByte != 62; theNextByte = is.read())\n            {\n                int intValue = 0;\n                if(theNextByte >= 48 && theNextByte <= 57)\n                    intValue = theNextByte - 48;\n                else\n                if(theNextByte >= 65 && theNextByte <= 70)\n                    intValue = (10 + theNextByte) - 65;\n                else\n                if(theNextByte >= 97 && theNextByte <= 102)\n                    intValue = (10 + theNextByte) - 97;\n                else\n                    throw new IOException(\"Error: expected hex character and not \" + (char)theNextByte + \":\" + theNextByte);\n                intValue *= multiplyer;\n                if(multiplyer == 16)\n                {\n                    bufferIndex++;\n                    multiplyer = 1;\n                } else\n                {\n                    multiplyer = 16;\n                }\n                \n                if(bufferIndex==buffer.length)\n                {  \n                   byte [] tempbuffer=buffer;\n                   buffer = new byte [buffer.length+2];\n                   for(int ts=0; ts<tempbuffer.length;ts++)\n                   {\n                     buffer[ts]=tempbuffer[ts];  \n                   }\n                }\n                buffer[bufferIndex] += intValue;\n                \n                \n            }\n\n            byte finalResult[] = new byte[bufferIndex + 1];\n            System.arraycopy(buffer, 0, finalResult, 0, bufferIndex + 1);\n            retval = finalResult;\n            break;\n        }\n............ \n\n}\n\n[comment on SourceForge]\nOriginally sent by fotb.\nLogged In: YES \nuser_id=1662347\nOriginator: NO\n\nI have also this problem.\n\nDoes anyone know if there has been any resolution to the ArrayIndexOutOfBoundsException:4  problem.\nI have extracted text from 300 pdfs using  0.7.3.  All extractions were successful except 3.  I recieved this error message when trying to extract text from these 3 pds (java.lang.ArrayIndexOutOfBoundsException:4).  I am able to open the pdfs fine and they have no special security applied to them.  Any ideas as to why PDFBOX 0.7.3 is hiccuping while trying to process these files?:\n\n\n     \n\n\n[comment on SourceForge]\nOriginally sent by fotb.\nLogged In: YES \nuser_id=1662347\nOriginator: NO\n\nI have also this problem.\n\nDoes anyone know if there has been any resolution to the ArrayIndexOutOfBoundsException:4  problem.\nI have extracted text from 300 pdfs using  0.7.3.  All extractions were successful except 3.  I recieved this error message when trying to extract text from these 3 pds (java.lang.ArrayIndexOutOfBoundsException:4).  I am able to open the pdfs fine and they have no special security applied to them.  Any ideas as to why PDFBOX 0.7.3 is hiccuping while trying to process these files?:\n\n\n     \n\n\n[comment on SourceForge]\nOriginally sent by martin_weindel.\nLogged In: YES \nuser_id=1646209\nOriginator: NO\n\nSame problem with following PDF: http://www.vmware.com/pdf/server_datasheet.pdf"
    ],
    [
        "PDFBOX-292",
        "PDFBOX-291",
        "Text Extraction strips 1 char when extracting a twin pair [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1761581\nOriginally submitted by nalundgaard on 2007-07-26 14:11.\n\nSee attached file. We found a bug in PDFBox where it appears to randomly delete 1 character of a twin pair of characters. \n\nFor example, we've noticed that what shows up as 1001 in a PDF file (in Acrobat) may become 101 in the text output of TextStripper.exe. This appears to happen to a large number of twin pairs, as evidenced by the attached file. \n\nNote that the file was created using Microsoft Word 11.3.5 on Mac OS X using the \"print to PDF\" feature of Mac OS X 10.4.10. \n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1761581&file_id=238687\ndoublesTest.zip (application/zip), 40221 bytes\nThis zip file contains a test PDF file and the text output from running ExtractText.exe on it, in version 0.7.2 and 0.7.3\n\n[comment on SourceForge]\nOriginally sent by ibuzz.\nLogged In: YES \nuser_id=964306\nOriginator: NO\n\nI had the same issue with a PDF document created with Microsoft Word 2004 for Mac OS X. No problem with Word X.",
        "Text Extraction strips 1 char when extracting a twin pair [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1761570\nOriginally submitted by nalundgaard on 2007-07-26 13:51.\n\nSee attached file. We found a bug in PDFBox where it appears to randomly delete 1 character of a twin pair of characters. \n\nFor example, we've noticed that what shows up as 1001 in a PDF file (in Acrobat) may become 101 in the text output of TextStripper.exe. This appears to happen to a large number of twin pairs, as evidenced by the attached file. \n\nNote that the file was created using Microsoft Word 11.3.5 on Mac OS X using the \"print to PDF\" feature of Mac OS X 10.4.10. \n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1761570&file_id=238686\ndoublesTest.zip (application/zip), 40221 bytes\nThis zip file contains a test PDF file and the text output from running ExtractText.exe on it, in version 0.7.2 and 0.7.3"
    ],
    [
        "PDFBOX-312",
        "PDFBOX-311",
        "Expected to read '%%EOF' instead started reading 'e' [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1801070\nOriginally submitted by poorani on 2007-09-24 04:44.\n\nHi,\n\nI am trying to search a particular word in PDF document. Am getting the following exception when i use the statement : \nPDDocument.load(fileName)\n\nError :\njava.io.IOException: Error: Expected to read '%%EOF' instead started reading 'e'\n at org.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1022)\n at org.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:364)\n at org.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:176)\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:707)\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:691)\n\nCan anybody help me in this.\n\nThanks in advance.\ncheers,\nPoorni",
        "Expected to read '%%EOF' instead started reading 'e' [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1800993\r\nOriginally submitted by poorani on 2007-09-24 02:24.\r\n\r\nHi,\r\n\r\nI am trying to search a particular word in PDF document. Am getting the following exception when i use the statement : \r\nPDDocument.load(fileName)\r\n\r\nError :\r\njava.io.IOException: Error: Expected to read '%%EOF' instead started reading 'e'\r\n at org.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1022)\r\n at org.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:364)\r\n at org.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:176)\r\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:707)\r\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:691)\r\n\r\nCan anybody help me in this.\r\n\r\nThanks in advance.\r\ncheers,\r\nPoorni"
    ],
    [
        "PDFBOX-325",
        "PDFBOX-163",
        "expected='/' actual='e'-101 [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1835664\nOriginally submitted by nobody on 2007-11-21 02:23.\n\nI'm getting following error during text extraction:\n\nexpected='/' actual='e'-101 org.pdfbox.io.PushBackInputStream@172dc32\n\n[comment on SourceForge]\nOriginally sent by nobody.\nLogged In: NO \n\nIs enybode working on this bug?",
        "IOException: expected='/' actual='e'-101 [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1485485\nOriginally submitted by sajitjacob on 2006-05-10 04:06.\n\nGet the following exception when loading a PDF \ncreated by ImageMagick\n\nException in thread \"main\" java.io.IOException: \nexpected='/' actual='e'-101 \norg.pdfbox.io.PushBackInputStream@9\n        at \norg.pdfbox.pdfparser.BaseParser.parseCOSName \n(BaseParser.java:774)\n        at \norg.pdfbox.pdfparser.BaseParser.parseCOSDictionary \n(BaseParser.java:217)\n        at \norg.pdfbox.pdfparser.BaseParser.parseDirObject \n(BaseParser.java:910)\n        at org.pdfbox.pdfparser.PDFParser.parseObject \n(PDFParser.java:432)\n        at org.pdfbox.pdfparser.PDFParser.parse \n(PDFParser.java:176)\n        at org.pdfbox.pdmodel.PDDocument.load \n(PDDocument.java:579)\n        at org.pdfbox.pdmodel.PDDocument.load \n(PDDocument.java:549)\n        at org.pdfbox.ExtractImages.extractImages \n(ExtractImages.java:124)\n        at org.pdfbox.ExtractImages.main \n(ExtractImages.java:74)\n\n\n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1485485&file_id=177454\npages-000.pdf (application/pdf), 17898 bytes\nImageMagick created pdf\n\n[comment on SourceForge]\nOriginally sent by francois248.\nLogged In: YES \nuser_id=1606233\n\nHi,\n\nI am facing the same problem when upgrating a tools that\nproduce PDF file.\n\nI can send a test case too if needed.\n\nIs there a workaround to avoid it?\n\nFran\u00c3\u00a7ois"
    ],
    [
        "PDFBOX-347",
        "PDFBOX-61",
        "Spaces removed after text extraction [Issue from SourceForge]\nhttp://sourceforge.net/tracker/index.php?func=detail&aid=1912364&group_id=78314&atid=552832\n\nThe spaces between words from the attached PDF file are removed upon text\nextraction.\n\nI traced the code and found that the cause seems to be a \"division by 0\"\nbug in PDCIDFont.java\n\nIn PDCIDFont.getAverageFontWidth(), widths is returned as null from\n\nCOSArray widths = (COSArray)font.getDictionaryObject( COSName.getPDFName(\n\"W\" ) );\n\n,causing characterCount to be 0.\n\nThe result is that the following line\nfloat average = totalWidths / characterCount;\n\nreturns a NaN, which gets propagated up the method calls to result in the\nspaces being removed.\n\nI suggest the following fix, instead of:\nfloat average = totalWidths / characterCount;\n\nHave:\nfloat average = defaultWidth;\n\nif (characterCount > 0) {\naverage = totalWidths / characterCount;\n}\n\n[Comment on SourceForge]\nDate: 2008-03-12 03:01\nSender: choongyong\nLogged In: YES \nuser_id=2033885\nOriginator: NO\n\nRealised that I was considered not login when I raised the request. \nSending this comment so that the developer can contact me.\n\n[Comment on SourceForge]\nDate: 2008-03-17 21:50\nSender: nobody\nLogged In: NO \n\nI have noticed that there is no spaces between 2 words, if they are\nseparated by a new line (or the 2nd word is on the next line because it\nreaches the right margin).\n\nCould you correct please ?",
        "Spaces in extracted file [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1208824\r\nOriginally submitted by nobody on 2005-05-25 16:40.\r\n\r\nIn trying to integrate with lucene, I was having \r\nproblems.  The Lucene people suggested that I check \r\nthe output of extract utility against one of my test pdf's.  \r\nWhen I did, I saw spaces placed inside many of the \r\nwords.  I was on version 0.7.0.  So I downloaded 0.7.1 \r\nand see the same results.\r\n\r\nOne of the test files where I see this issue is attached.\r\n\r\n[attachment on SourceForge]\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1208824&file_id=135995\r\nTom_3.pdf (application/pdf), 10145 bytes\r\nTest pdf file."
    ],
    [
        "PDFBOX-347",
        "PDFBOX-77",
        "Spaces removed after text extraction [Issue from SourceForge]\nhttp://sourceforge.net/tracker/index.php?func=detail&aid=1912364&group_id=78314&atid=552832\n\nThe spaces between words from the attached PDF file are removed upon text\nextraction.\n\nI traced the code and found that the cause seems to be a \"division by 0\"\nbug in PDCIDFont.java\n\nIn PDCIDFont.getAverageFontWidth(), widths is returned as null from\n\nCOSArray widths = (COSArray)font.getDictionaryObject( COSName.getPDFName(\n\"W\" ) );\n\n,causing characterCount to be 0.\n\nThe result is that the following line\nfloat average = totalWidths / characterCount;\n\nreturns a NaN, which gets propagated up the method calls to result in the\nspaces being removed.\n\nI suggest the following fix, instead of:\nfloat average = totalWidths / characterCount;\n\nHave:\nfloat average = defaultWidth;\n\nif (characterCount > 0) {\naverage = totalWidths / characterCount;\n}\n\n[Comment on SourceForge]\nDate: 2008-03-12 03:01\nSender: choongyong\nLogged In: YES \nuser_id=2033885\nOriginator: NO\n\nRealised that I was considered not login when I raised the request. \nSending this comment so that the developer can contact me.\n\n[Comment on SourceForge]\nDate: 2008-03-17 21:50\nSender: nobody\nLogged In: NO \n\nI have noticed that there is no spaces between 2 words, if they are\nseparated by a new line (or the 2nd word is on the next line because it\nreaches the right margin).\n\nCould you correct please ?",
        "PDF-Extraction splits words by spaces [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1251041\r\nOriginally submitted by mkrebs on 2005-08-03 06:14.\r\n\r\nI'm currently working on an indexing-service using \r\njakarta lucene. Momentarily in a first step i have to \r\nindex about 80 PDF-Documents (later approximatly \r\n1000 documents). Ca. 60 documents (of the 80) are \r\nextracted by PDFBox without any problems. But for \r\naround 20 documents, PDFBox generates too many \r\nspaces, which means, that words like \"hostname\" are \r\nextracted to \"ho stna me\". This happens by nearly all \r\nwords contained in these 20 documents.\r\nBecause i have to extract page-information i am using \r\nPDFTextStripper with the methods setPageSeparator\r\n(..), setStartPage(..), setEndPage(..) and writeText():\r\n\r\nStringWriter s = new StringWriter();\r\nPDDocument pddoc = null;\r\ntry {\r\n pddoc = PDDocument.load(f);\r\n int pageCount = pddoc.getPageCount();\r\n PDFTextStripper stripper = new \r\nPDFTextStripper();\r\n stripper.setPageSeparator\r\n(IndexFiles.DOCUMENT_PAGE_SEPARATOR);\r\n stripper.setStartPage(1);\r\n stripper.setEndPage(pageCount);\r\n stripper.writeText(pddoc, s);\r\n} finally {\r\n if (pddoc != null)\r\n  pddoc.close();\r\n}\r\nStringBuffer contents = s.getBuffer();\r\n\r\nIn respect for my indexing-service it is impossible to \r\nindex these documents correctly.\r\n\r\nI have tried to BugFix PDFBox \r\n(PDFTextStripper.flushText()) and established, that the \r\nwidth returned by TextPosition.getWidth() is incorrect. \r\nWhen i multiply this width with TextPosition.getXScale\r\n(), these documents are extracted correctly. But other \r\nbefore correctly extracted documents loose nearly all \r\nspaces, which means, that a complete sentence dont \r\ncontain any spaces between words.\r\n\r\nI have tried: PDFBox-0.7.2-dev-20050730.jar, but the \r\nproblem still remains.\r\n\r\nExample Text-Output:\r\n\r\n3.5 SSL V erbindunge n\r\n      \u2022 JSSE (Java Sec ure So ck et E xt en sion)\r\n      \u2022 im po rt ja vax .n et .ss l. *\r\n      \u2022 W ese nt lich e \u00a8And erung im Cl ient Pr ogr \r\namm : (F act o ry\r\n      P att e rn )\r\n      Erse tze\r\n      Soc ket s = new Soc ket (ho stna me, port numb er)\r\n      du rc h\r\n      SSL Soc ketF acto ry s f = (SS LSoc ketF acto ry)\r\nS SLS ocke tFac tory .get Def ault ();\r\n      SSL Soc ket s = (SSL Sock et) sf.c reat eSoc ket( \r\nhos tnam e, p ortn umbe r);\r\n      \u2022 Daf \u00a8u r mus s SSL k o n fig u riert sein (si ehe \r\nunten).\r\n      V o rl \u00a8aufige V.......\r\n\r\n\r\n[attachment on SourceForge]\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1251041&file_id=144276\r\n03_2_SSL.pdf (application/pdf), 189828 bytes\r\nuniversity-lecture"
    ],
    [
        "PDFBOX-349",
        "PDFBOX-61",
        "Spaces between words ignored in scanned pdf files [Issue from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?func=detail&aid=1922502&group_id=78314&atid=552832\r\n\r\nI am using PDF-Box-0.7.3.dll with C# and have tested extraction on two\r\nsearchable pdfs that I have scanned in from paper. Spaces between words are\r\nignored for both files. I have also tested another pdf file (which I\r\ndownloaded from the internet) and it was parsed correctly. Unfortunately,\r\nthe file is 1.2MB and the upload was blocked. Please send me an email\r\n(gkobzeff@hotmail.com) and I will reply back with the file.\r\n\r\nThanks for looking into this.\r\n\r\nGreg\r\n\r\n[Comment on SourceForge]\r\nDate: 2008-03-23 21:24\r\nSender: gkobzeff\r\nLogged In: YES \r\nuser_id=2042611\r\nOriginator: YES\r\n\r\nI have scanned the file into a smaller file size. I have attached the\r\nfile.\r\n\r\nThanks\r\nFile Added: Advanced Pain Mgmt BW.pdf\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&file_id=271548&aid=1922502",
        "Spaces in extracted file [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1208824\r\nOriginally submitted by nobody on 2005-05-25 16:40.\r\n\r\nIn trying to integrate with lucene, I was having \r\nproblems.  The Lucene people suggested that I check \r\nthe output of extract utility against one of my test pdf's.  \r\nWhen I did, I saw spaces placed inside many of the \r\nwords.  I was on version 0.7.0.  So I downloaded 0.7.1 \r\nand see the same results.\r\n\r\nOne of the test files where I see this issue is attached.\r\n\r\n[attachment on SourceForge]\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1208824&file_id=135995\r\nTom_3.pdf (application/pdf), 10145 bytes\r\nTest pdf file."
    ],
    [
        "PDFBOX-349",
        "PDFBOX-77",
        "Spaces between words ignored in scanned pdf files [Issue from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?func=detail&aid=1922502&group_id=78314&atid=552832\r\n\r\nI am using PDF-Box-0.7.3.dll with C# and have tested extraction on two\r\nsearchable pdfs that I have scanned in from paper. Spaces between words are\r\nignored for both files. I have also tested another pdf file (which I\r\ndownloaded from the internet) and it was parsed correctly. Unfortunately,\r\nthe file is 1.2MB and the upload was blocked. Please send me an email\r\n(gkobzeff@hotmail.com) and I will reply back with the file.\r\n\r\nThanks for looking into this.\r\n\r\nGreg\r\n\r\n[Comment on SourceForge]\r\nDate: 2008-03-23 21:24\r\nSender: gkobzeff\r\nLogged In: YES \r\nuser_id=2042611\r\nOriginator: YES\r\n\r\nI have scanned the file into a smaller file size. I have attached the\r\nfile.\r\n\r\nThanks\r\nFile Added: Advanced Pain Mgmt BW.pdf\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&file_id=271548&aid=1922502",
        "PDF-Extraction splits words by spaces [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1251041\r\nOriginally submitted by mkrebs on 2005-08-03 06:14.\r\n\r\nI'm currently working on an indexing-service using \r\njakarta lucene. Momentarily in a first step i have to \r\nindex about 80 PDF-Documents (later approximatly \r\n1000 documents). Ca. 60 documents (of the 80) are \r\nextracted by PDFBox without any problems. But for \r\naround 20 documents, PDFBox generates too many \r\nspaces, which means, that words like \"hostname\" are \r\nextracted to \"ho stna me\". This happens by nearly all \r\nwords contained in these 20 documents.\r\nBecause i have to extract page-information i am using \r\nPDFTextStripper with the methods setPageSeparator\r\n(..), setStartPage(..), setEndPage(..) and writeText():\r\n\r\nStringWriter s = new StringWriter();\r\nPDDocument pddoc = null;\r\ntry {\r\n pddoc = PDDocument.load(f);\r\n int pageCount = pddoc.getPageCount();\r\n PDFTextStripper stripper = new \r\nPDFTextStripper();\r\n stripper.setPageSeparator\r\n(IndexFiles.DOCUMENT_PAGE_SEPARATOR);\r\n stripper.setStartPage(1);\r\n stripper.setEndPage(pageCount);\r\n stripper.writeText(pddoc, s);\r\n} finally {\r\n if (pddoc != null)\r\n  pddoc.close();\r\n}\r\nStringBuffer contents = s.getBuffer();\r\n\r\nIn respect for my indexing-service it is impossible to \r\nindex these documents correctly.\r\n\r\nI have tried to BugFix PDFBox \r\n(PDFTextStripper.flushText()) and established, that the \r\nwidth returned by TextPosition.getWidth() is incorrect. \r\nWhen i multiply this width with TextPosition.getXScale\r\n(), these documents are extracted correctly. But other \r\nbefore correctly extracted documents loose nearly all \r\nspaces, which means, that a complete sentence dont \r\ncontain any spaces between words.\r\n\r\nI have tried: PDFBox-0.7.2-dev-20050730.jar, but the \r\nproblem still remains.\r\n\r\nExample Text-Output:\r\n\r\n3.5 SSL V erbindunge n\r\n      \u2022 JSSE (Java Sec ure So ck et E xt en sion)\r\n      \u2022 im po rt ja vax .n et .ss l. *\r\n      \u2022 W ese nt lich e \u00a8And erung im Cl ient Pr ogr \r\namm : (F act o ry\r\n      P att e rn )\r\n      Erse tze\r\n      Soc ket s = new Soc ket (ho stna me, port numb er)\r\n      du rc h\r\n      SSL Soc ketF acto ry s f = (SS LSoc ketF acto ry)\r\nS SLS ocke tFac tory .get Def ault ();\r\n      SSL Soc ket s = (SSL Sock et) sf.c reat eSoc ket( \r\nhos tnam e, p ortn umbe r);\r\n      \u2022 Daf \u00a8u r mus s SSL k o n fig u riert sein (si ehe \r\nunten).\r\n      V o rl \u00a8aufige V.......\r\n\r\n\r\n[attachment on SourceForge]\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1251041&file_id=144276\r\n03_2_SSL.pdf (application/pdf), 189828 bytes\r\nuniversity-lecture"
    ],
    [
        "PDFBOX-349",
        "PDFBOX-347",
        "Spaces between words ignored in scanned pdf files [Issue from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?func=detail&aid=1922502&group_id=78314&atid=552832\r\n\r\nI am using PDF-Box-0.7.3.dll with C# and have tested extraction on two\r\nsearchable pdfs that I have scanned in from paper. Spaces between words are\r\nignored for both files. I have also tested another pdf file (which I\r\ndownloaded from the internet) and it was parsed correctly. Unfortunately,\r\nthe file is 1.2MB and the upload was blocked. Please send me an email\r\n(gkobzeff@hotmail.com) and I will reply back with the file.\r\n\r\nThanks for looking into this.\r\n\r\nGreg\r\n\r\n[Comment on SourceForge]\r\nDate: 2008-03-23 21:24\r\nSender: gkobzeff\r\nLogged In: YES \r\nuser_id=2042611\r\nOriginator: YES\r\n\r\nI have scanned the file into a smaller file size. I have attached the\r\nfile.\r\n\r\nThanks\r\nFile Added: Advanced Pain Mgmt BW.pdf\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&file_id=271548&aid=1922502",
        "Spaces removed after text extraction [Issue from SourceForge]\nhttp://sourceforge.net/tracker/index.php?func=detail&aid=1912364&group_id=78314&atid=552832\n\nThe spaces between words from the attached PDF file are removed upon text\nextraction.\n\nI traced the code and found that the cause seems to be a \"division by 0\"\nbug in PDCIDFont.java\n\nIn PDCIDFont.getAverageFontWidth(), widths is returned as null from\n\nCOSArray widths = (COSArray)font.getDictionaryObject( COSName.getPDFName(\n\"W\" ) );\n\n,causing characterCount to be 0.\n\nThe result is that the following line\nfloat average = totalWidths / characterCount;\n\nreturns a NaN, which gets propagated up the method calls to result in the\nspaces being removed.\n\nI suggest the following fix, instead of:\nfloat average = totalWidths / characterCount;\n\nHave:\nfloat average = defaultWidth;\n\nif (characterCount > 0) {\naverage = totalWidths / characterCount;\n}\n\n[Comment on SourceForge]\nDate: 2008-03-12 03:01\nSender: choongyong\nLogged In: YES \nuser_id=2033885\nOriginator: NO\n\nRealised that I was considered not login when I raised the request. \nSending this comment so that the developer can contact me.\n\n[Comment on SourceForge]\nDate: 2008-03-17 21:50\nSender: nobody\nLogged In: NO \n\nI have noticed that there is no spaces between 2 words, if they are\nseparated by a new line (or the 2nd word is on the next line because it\nreaches the right margin).\n\nCould you correct please ?"
    ],
    [
        "PDFBOX-438",
        "PDFBOX-424",
        "FlateFilter: endless loop because of missing length check (for encrypted pdfs) if mayRead is set to zero than following statement is executed endlessly:\r\nwhile ((amountRead = decompressor.read(buffer, 0, Math.min(mayRead,BUFFER_SIZE))) != -1)\r\n                    {\r\n                        result.write(buffer, 0, amountRead);\r\n                    }\r\n\r\nwe just have to check that  mayRead > 0 zero.",
        "Stream decoding hangs up Sometimes it can happens that decoding of streams can hang up.\nThe reason can be find in org.apache.pdfbox.filter.FlateFilter decode method.\n\nHere you ask for available datas in the compressedData stream:\n\n    decompressor = new InflaterInputStream(compressedData);\n    int mayRead = compressedData.available();\n    byte[] buffer = new byte[Math.min(mayRead, BUFFER_SIZE)];\n\nSometimes compressedData.available() returns 0.\n\nLater you iterate over stream datas.\n\n    while((amountRead = decompressor.read(buffer, 0, Math.min(mayRead, BUFFER_SIZE))) != -1 )\n    {\n        result.write(buffer, 0, amountRead);\n    }\n\nBecause mayRead is 0 with every loop you try to read 0 bytes from stream ==> amountRead will be 0 for every loop ==> Loop nether finishes.\n\n\nYou can test this following PDF-Document: http://www.usu.de/d/Case_Studies/BSM/Profiles_in_Excellence_FIDUCIA_AG.pdf\n\n"
    ],
    [
        "PDFBOX-506",
        "PDFBOX-311",
        "PDFBox can't parse PDF documents from jstor.org The academic repository JStor makes papers available via PDF format.  The PDFs give this origin information:\r\n  Content creator:  JstorPdfGenerator v1.0\r\n  PDF producer:  iText 2.0.6 (by lowagie.com)\r\n\r\nThese PDFs open fine in Acrobat, Preview, FoxIt, etc., but they throw an exception in PDFBox:\r\n\r\nException in thread \"main\" java.io.IOException: Error: Expected to read '%%EOF' instead started reading '1'\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1005)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:456)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:172)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:739)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:706)\r\n\tat org.apache.pdfbox.PDFDebugger.parseDocument(PDFDebugger.java:393)\r\n\tat org.apache.pdfbox.PDFDebugger.readPDFFile(PDFDebugger.java:369)\r\n\tat org.apache.pdfbox.PDFDebugger.main(PDFDebugger.java:355)\r\n\r\n\r\nI traced through the code, and it appears that PDFBox rejects these because they contain a 'startxref' that is not followed by a %%EOF two lines later:\r\n\r\n...\r\nstartxref\r\n613364\r\n1 0 obj\r\n...\r\n\r\n\r\nHere's a small patch that will accept files that are missing the EOF after the startxref:\r\n\r\n\r\nIndex: src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java\r\n===================================================================\r\n--- src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java\t(revision 802578)\r\n+++ src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java\t(working copy)\r\n@@ -453,11 +453,9 @@\r\n             {  \r\n                 parseStartXref();\r\n                 //verify that EOF exists \r\n-                String eof = readExpectedString( \"%%EOF\" );\r\n-                if( eof.indexOf( \"%%EOF\" )== -1 && !pdfSource.isEOF() )\r\n-                {\r\n-                    throw new IOException( \"expected='%%EOF' actual='\" + eof + \"' next=\" + readString() +\r\n-                            \" next=\" +readString() );\r\n+                int c = pdfSource.peek();\r\n+                if (c == '%') {\r\n+                    readExpectedString(\"%%EOF\");\r\n                 }\r\n                 isEndOfFile = true; \r\n             }\r\n",
        "Expected to read '%%EOF' instead started reading 'e' [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1800993\r\nOriginally submitted by poorani on 2007-09-24 02:24.\r\n\r\nHi,\r\n\r\nI am trying to search a particular word in PDF document. Am getting the following exception when i use the statement : \r\nPDDocument.load(fileName)\r\n\r\nError :\r\njava.io.IOException: Error: Expected to read '%%EOF' instead started reading 'e'\r\n at org.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1022)\r\n at org.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:364)\r\n at org.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:176)\r\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:707)\r\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:691)\r\n\r\nCan anybody help me in this.\r\n\r\nThanks in advance.\r\ncheers,\r\nPoorni"
    ],
    [
        "PDFBOX-506",
        "PDFBOX-312",
        "PDFBox can't parse PDF documents from jstor.org The academic repository JStor makes papers available via PDF format.  The PDFs give this origin information:\r\n  Content creator:  JstorPdfGenerator v1.0\r\n  PDF producer:  iText 2.0.6 (by lowagie.com)\r\n\r\nThese PDFs open fine in Acrobat, Preview, FoxIt, etc., but they throw an exception in PDFBox:\r\n\r\nException in thread \"main\" java.io.IOException: Error: Expected to read '%%EOF' instead started reading '1'\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1005)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:456)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:172)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:739)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:706)\r\n\tat org.apache.pdfbox.PDFDebugger.parseDocument(PDFDebugger.java:393)\r\n\tat org.apache.pdfbox.PDFDebugger.readPDFFile(PDFDebugger.java:369)\r\n\tat org.apache.pdfbox.PDFDebugger.main(PDFDebugger.java:355)\r\n\r\n\r\nI traced through the code, and it appears that PDFBox rejects these because they contain a 'startxref' that is not followed by a %%EOF two lines later:\r\n\r\n...\r\nstartxref\r\n613364\r\n1 0 obj\r\n...\r\n\r\n\r\nHere's a small patch that will accept files that are missing the EOF after the startxref:\r\n\r\n\r\nIndex: src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java\r\n===================================================================\r\n--- src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java\t(revision 802578)\r\n+++ src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java\t(working copy)\r\n@@ -453,11 +453,9 @@\r\n             {  \r\n                 parseStartXref();\r\n                 //verify that EOF exists \r\n-                String eof = readExpectedString( \"%%EOF\" );\r\n-                if( eof.indexOf( \"%%EOF\" )== -1 && !pdfSource.isEOF() )\r\n-                {\r\n-                    throw new IOException( \"expected='%%EOF' actual='\" + eof + \"' next=\" + readString() +\r\n-                            \" next=\" +readString() );\r\n+                int c = pdfSource.peek();\r\n+                if (c == '%') {\r\n+                    readExpectedString(\"%%EOF\");\r\n                 }\r\n                 isEndOfFile = true; \r\n             }\r\n",
        "Expected to read '%%EOF' instead started reading 'e' [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1801070\nOriginally submitted by poorani on 2007-09-24 04:44.\n\nHi,\n\nI am trying to search a particular word in PDF document. Am getting the following exception when i use the statement : \nPDDocument.load(fileName)\n\nError :\njava.io.IOException: Error: Expected to read '%%EOF' instead started reading 'e'\n at org.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1022)\n at org.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:364)\n at org.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:176)\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:707)\n at org.pdfbox.pdmodel.PDDocument.load(PDDocument.java:691)\n\nCan anybody help me in this.\n\nThanks in advance.\ncheers,\nPoorni"
    ],
    [
        "PDFBOX-509",
        "PDFBOX-420",
        "Japanese Characters are garbled. The extracted from the attached Japanese pdf  is completely garbled.\r\n\r\n\r\n",
        "Japanese Characters are garbled. The extracted Japanese characters are completely garbled.\nThis issue is very critical for Japanese users.\n\n"
    ],
    [
        "PDFBOX-575",
        "PDFBOX-519",
        "NullPointerException when rendering Separation color space java.lang.NullPointerException\r\n\tat org.apache.pdfbox.util.operator.SetNonStrokingSeparation.process(SetNonStrokingSeparation.java:64)\r\n\tat org.apache.pdfbox.util.operator.SetNonStrokingColor.process(SetNonStrokingColor.java:87)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:522)\r\n\tat org.qsardb.conversion.pdf.DocumentProcessor.processOperator(DocumentProcessor.java:188)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:229)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:188)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:99)",
        "NullPointerException in SetNonStrokingSeparation.java Caused by a failure to check for a null return from PDSeparation.getColorValues()\r\n\r\njava.lang.NullPointerException\r\n \tat org.apache.pdfbox.util.operator.SetNonStrokingSeparation.process(SetNonStrokingSeparation.java:56)\r\n \tat org.apache.pdfbox.util.operator.SetStrokingColor.process(SetStrokingColor.java:78)\r\n \tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:510)\r\n \tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:223)\r\n \tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:182)\r\n \tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:92)\r\n \tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:686)"
    ],
    [
        "PDFBOX-686",
        "PDFBOX-667",
        "Invalid text rendering while printing a PDF The space between the last character and the previous character at the end of a line of text is expanded or shrinked of 2px depending on the printer selected.\r\n\r\nSteps to reproduce:\r\n- create a pdf with 1 page\r\n- add a phrase that wrap on 2 lines at least\r\n- print the pdf page throught org.apache.pdfbox.PrintPDF",
        "Last characters in a line overlap when a PDF is printed When printing a PDF every last character in a line overlaps it's leading character.\r\nThis problem appears in v1.0.0\r\n\r\nPrinting the same PDF with v 0.7.3 works fine. "
    ],
    [
        "PDFBOX-709",
        "PDFBOX-681",
        "ClassCastException: org.apache.pdfbox.pdmodel.font.PDFontDescriptorAFM cannot be cast to org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary \r\n\r\n\r\nSEVERE: org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.pdf.PDFParser@c8bbbf4\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:123)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)\r\n\tat ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)\r\n\tat ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)\r\n\tat ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)\r\n\tat ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:637)\r\n\tat ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\r\n\tat ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\r\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)\r\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\r\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)\r\n\tat java.lang.Thread.run(Thread.java:619)\r\nCaused by: java.lang.RuntimeException: At PDF2XHTML.process \r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:84)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)\r\n\t... 22 more\r\nCaused by: java.lang.ClassCastException: org.apache.pdfbox.pdmodel.font.PDFontDescriptorAFM cannot be cast to org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.ensureFontDescriptor(PDTrueTypeFont.java:166)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:116)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:140)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)\r\n\tat org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)\r\n\t... 23 more",
        "ClassCastException in PDTrueTypeFont.ensureFontDescriptor() We're seeing an issue that seems to have been introduced in pdfbox 1.1.0:\r\n\r\njava.lang.ClassCastException: org.apache.pdfbox.pdmodel.font.PDFontDescriptorAFM cannot be cast to org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.ensureFontDescriptor(PDTrueTypeFont.java:167)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:117)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:140)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)\r\n\tat org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)\r\n\t...\r\n\r\nSo far, all affected pdf files are confidential. I'll add a test file later if I find one that can be made public. Hope the stack trace is sufficient though."
    ],
    [
        "PDFBOX-724",
        "PDFBOX-563",
        "ClassCastException when merging PDFs using PDFMergerUtility On line 496 of PDFMergerUtility, \"target\" is cast as a COSObject without checking the type.  In some circumstances target will be a COSDictionary which will cause the following ClassCastException.\r\n\r\njava.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary\r\n        at org.apache.pdfbox.util.PDFMergerUtility.cloneMerge(PDFMergerUtility.java:496)\r\n        at org.apache.pdfbox.util.PDFMergerUtility.cloneMerge(PDFMergerUtility.java:533)\r\n        at org.apache.pdfbox.util.PDFMergerUtility.cloneMerge(PDFMergerUtility.java:491)\r\n        at org.apache.pdfbox.util.PDFMergerUtility.appendDocument(PDFMergerUtility.java:283)\r\n        at org.apache.pdfbox.util.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:193)\r\n        at com.xldynamics.common.PdfBoxTest.main(PdfBoxTest.java:40)\r\n\r\nI will provide a patch once I've fixed this and tested it thoroughly.  The example PDFs I have contain sensitive information, so unfortunately I can not provide them.",
        "Class Cast thrown when merging PDF's When merging PDF's with the code:\r\n\r\n\t\t\tPDFMergerUtility pm = new PDFMergerUtility();\r\n\t\t\tFile destPdf = File.createTempFile(\"TestFax_\", \".pdf\");\r\n\t\t\tpm.setDestinationFileName(destPdf.getAbsolutePath());\r\n\r\n\t\t\tfor (File pdfFile:pdfFiles) {\r\n\t\t\t\tpm.addSource(pdfFile);\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tpm.mergeDocuments();\r\n\t\t\t\treturn PDDocument.load(destPdf);\r\n\t\t\t} catch (COSVisitorException e) {\r\n\t\t\t\tLoggerFactory.getLogger(getClass()).error(\"Merging PDF's\", e);\r\n\t\t\t}\r\n\r\n\r\nI get the exception:\r\n\r\n10:44:09.511 [Thread-6] ERROR midwifemate.client.ui.PrintDialog$7 - null\r\njava.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSObject\r\n\tat org.apache.pdfbox.util.PDFMergerUtility.cloneMerge(PDFMergerUtility.java:438) [classes/:na]\r\n\tat org.apache.pdfbox.util.PDFMergerUtility.cloneMerge(PDFMergerUtility.java:475) [classes/:na]\r\n\tat org.apache.pdfbox.util.PDFMergerUtility.cloneMerge(PDFMergerUtility.java:433) [classes/:na]\r\n\tat org.apache.pdfbox.util.PDFMergerUtility.appendDocument(PDFMergerUtility.java:227) [classes/:na]\r\n\tat org.apache.pdfbox.util.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:134) [classes/:na]\r\n\tat com.selene.mm.model.fax.Fax.getPdfForFaxing(Fax.java:254) [classes/:na]\r\n\tat com.selene.mm.model.fax.Fax.getPdfForPrinting(Fax.java:162) [classes/:na]\r\n\tat midwifemate.client.ui.PrintDialog$7.run(PrintDialog.java:415) [classes/:na]\r\n\tat midwifemate.ui.util.JProgressPane$1$1.run(JProgressPane.java:51) [classes/:na]\r\n\tat java.lang.Thread.run(Thread.java:619) [na:1.6.0_10-rc2]\r\n\r\n\r\n\r\nPDF's attached."
    ],
    [
        "PDFBOX-852",
        "PDFBOX-782",
        "PDFBox build dependencies require updating Ant build script for PDFBox 1.2.1 src download (found here: http://www.apache.org/dyn/closer.cgi/pdfbox/1.2.1/pdfbox-1.2.1.jar) uses maven dependencies of fontbox 1.1.0 and jempbox 1.1.0.  Needs to be updated to fontbox 1.2.1 and jempbox 1.2.1. ",
        "Update/reactivate ant build Some users want to use ant to build pdfbox. Because of the restructuring the old build file doesn't work anymore."
    ],
    [
        "PDFBOX-858",
        "PDFBOX-814",
        "Metadata extraction broken on some PDF files On certain PDF files (examples attached), the metadata extraction seems to be broken. Preview (on Mac OS X) and Acrobat Reader is able to read the metadata, but PDFbox gives complete jibberish: \r\n\r\nAuthor=\u00e8'\u00ff\u00c6??k\u00d47??\u00d5\u00aaG?\r\n\r\nI've tried both the version included in Tika 0.7 (1.0.0 I believe) and r1021264 from SVN. ",
        "unreadable document information some fields in PDDocumentInformation are unreadable.\r\nex. parsing this pdf from http://delhigovt.nic.in/election/delhi/U05/A061EN/A0610042.pdf,  I got the following\r\nTITLE: 9\u00b8\u00d01\u00dc\r\nAUTHOR: )\u00a9\u00cb&\u0084\u00c4\u00e3J\u00e17e\u00e0\r\nCREATOR:8\u009e\u00d0!\u009d\u00c3\u00a2\u00e4/f\u00b2\u009aInm\u00ef\u00a5kX\u00bf\r\nKEYWORDS:null\r\nproducer: )\u00ae\u00cd*\u008c\u00c3- |\u00e90~\u00fb$\u0093H'7\u00af\u00b5pC\u00ad\u00a5\u00deQK\u00c4\u009a\u00dc\u00de\r\nSUBJECT:null\r\ntrapped: null"
    ],
    [
        "PDFBOX-872",
        "PDFBOX-697",
        "ERROR org.apache.pdfbox.filter.FlateFilter  - Stop reading corrupt stream This report: http://www2.goldmansachs.com/our-firm/press/press-releases/current/pdfs/2010-q2-earnings.pdf\r\n\r\nWith this code:\r\npublic static String getTransformed(InputStream inputStream) {\r\n        PDDocument pdDocument = null;\r\n        String document = null;\r\n        try {\r\n            PDFParser parser = new PDFParser(inputStream);\r\n            parser.parse();\r\n\r\n            pdDocument = parser.getPDDocument();\r\n\r\n            PDFText2HTML pdf2html = new PDFText2HTML(\"UTF-8\");\r\n            document = pdf2html.getText(pdDocument);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();      \r\n        } finally {\r\n            if (pdDocument != null) {\r\n                try {\r\n                    pdDocument.getDocument().close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                      }\r\n            }\r\n        }\r\n\r\n        return document;\r\n    }\r\n\r\n\r\nreturns:\r\n17:01:15,609 [main] ERROR org.apache.pdfbox.filter.FlateFilter  - Stop reading corrupt stream\r\nnull\r\njava.io.IOException: Error: Expected an integer type, actual=''\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1310)\r\n\tat org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:81)\r\n\tat org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:449)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1112)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.decrypt(PDDocument.java:591)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:246)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:184)\r\n\r\nin Foxit PDF this file was opened normally",
        "Error: Expected an integer type, actual='' - Hello,\r\n\r\nThe following exception is being thrown when attempting to parse a pdf document password protected using Adobe Acrobat 9 Pro:\r\n\r\nApr 7, 2010 2:53:22 PM org.apache.pdfbox.filter.FlateFilter decode\r\nSEVERE: Stop reading corrupt stream\r\n07-Apr-2010 14:53:22.829: WARNING: java.io.IOException: Error: Expected an integer type, actual=''\r\nat org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1275)\r\nat org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:81)\r\nat org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:449)\r\nat org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1100)\r\nat org.apache.pdfbox.pdmodel.PDDocument.decrypt(PDDocument.java:579)\r\n\r\nI have the following libraries:\r\n\r\nfontbox-1.1.0.jar\r\npdfbox-1.1.0.jar\r\n\r\nSample password protected file is attached.\r\n\r\nWould appreciate if someone can help. \r\nThank you\r\n\r\niglop\r\n\r\n\r\n"
    ],
    [
        "PDFBOX-924",
        "PDFBOX-490",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. ",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-931",
        "PDFBOX-768",
        "PDPage convertToImage generates white image with no contents When converting a PDPage of this pdf into an image, the resulting file is always a white image with no contents.\r\n\r\nThe following message appeared in the log output (It doesn't seem to be  a duplicate of PDFBOX-794.) : \r\n\r\n ERROR                  filter.FlateFilter - Stop reading corrupt stream\r\n\r\nHere's the code used to convert the image :\r\n\r\n@Test\r\npublic void testConvertImage() {\r\n\ttry {\r\n\t\tPDDocument pdDocument = PDDocument.load(\"pdf_causing_white_pages.pdf\");\r\n\t\tList<PDPage> documentPageList = pdDocument.getDocumentCatalog().getAllPages();\r\n\t\tTestCase.assertNotNull(documentPageList);\r\n\t\tint pageNumber = 1;\r\n\t\tfor (PDPage tmpPage :documentPageList){\r\n\t\t\tBufferedImage tempImage = tmpPage.convertToImage();\r\n\t\t\tImageIO.write(tempImage,\"jpeg\", new File(\"result_\"+pageNumber+\".jpeg\"));\r\n\t\t\tpageNumber ++;\r\n\t\t}\t\t\t\r\n\t} catch (FileNotFoundException e) {\r\n\t\tTestCase.fail(e.getMessage());\r\n\t} catch (IOException e) {\r\n\t\tTestCase.fail(e.getMessage());\r\n\t}\r\n}\r\n\r\n",
        "Convert to image makes blank image The attached file when run through convertToImage is white (doesn't render anything when it should)."
    ],
    [
        "PDFBOX-931",
        "PDFBOX-794",
        "PDPage convertToImage generates white image with no contents When converting a PDPage of this pdf into an image, the resulting file is always a white image with no contents.\r\n\r\nThe following message appeared in the log output (It doesn't seem to be  a duplicate of PDFBOX-794.) : \r\n\r\n ERROR                  filter.FlateFilter - Stop reading corrupt stream\r\n\r\nHere's the code used to convert the image :\r\n\r\n@Test\r\npublic void testConvertImage() {\r\n\ttry {\r\n\t\tPDDocument pdDocument = PDDocument.load(\"pdf_causing_white_pages.pdf\");\r\n\t\tList<PDPage> documentPageList = pdDocument.getDocumentCatalog().getAllPages();\r\n\t\tTestCase.assertNotNull(documentPageList);\r\n\t\tint pageNumber = 1;\r\n\t\tfor (PDPage tmpPage :documentPageList){\r\n\t\t\tBufferedImage tempImage = tmpPage.convertToImage();\r\n\t\t\tImageIO.write(tempImage,\"jpeg\", new File(\"result_\"+pageNumber+\".jpeg\"));\r\n\t\t\tpageNumber ++;\r\n\t\t}\t\t\t\r\n\t} catch (FileNotFoundException e) {\r\n\t\tTestCase.fail(e.getMessage());\r\n\t} catch (IOException e) {\r\n\t\tTestCase.fail(e.getMessage());\r\n\t}\r\n}\r\n\r\n",
        "PDPage convertToImage generates white image with no contents When converting a PDPage to an image where the mediaBox, cropBox, and trimBox width/height are slightly larger than that of the PDDocument pageFormat height/width, the resulting image appears blank.  A warning message appears in the log 'getRGBImage returned NULL'.  The PDF is rendered fine."
    ],
    [
        "PDFBOX-933",
        "PDFBOX-811",
        "\"Limits\" entry should not added to the root node dictionary of name trees Embedding file using PDComplexFileSpecification (as shown in org.apache.pdfbox.examples.pdmodel.EmbeddedFiles example) adds \"Limits\" entry to the name tree root node dictionary associated with EmbeddedFiles entry in PDF documents name dictionary. Here is a fragment taken from the PDF document created by EmbeddedFiles example:\r\n\r\n...\r\n3 0 obj\r\n<<\r\n/EmbeddedFiles 5 0 R\r\n>>\r\n5 0 obj\r\n<<\r\n/Limits [(My first attachment) (My first attachment)]\r\n/Names [(My first attachment) 8 0 R]\r\n>>\r\n...\r\n\r\nSuch PDF document opened in Adobe Acrobat does not show embedded files in attachments panel, unless \"Limits\" entry is removed or commented.\r\n\r\nAccording to PDF3200:2008 specification (see clause \"7.9.6 Name Trees\") \"Limits\" entry in name tree node dictionary can only appear in intermediate or leaf node, but not root node.\r\n\"The tree shall always have exactly one root node, which shall contain a single entry: either Kids or Names but not both. If the root node has a Names entry, it shall be the only node in the tree. If it has a Kids entry, each of the remaining nodes shall be either an intermediate node, that shall contain a Limits entry and a Kids entry, or a leaf node, that shall contain a Limits entry and a Names entry.\"\r\n",
        "EmbeddedFiles example does not work Running the EmbeddedFiles example does not work properly. Obviously it has stopped working with Version 1.1.0 already at least. I've tried the same example with pdfbox 0.7.3 and there it is working without any problems. Although it seems (according to the document's size) that the file is embedded, there is no entry visible in the PDF's attachment/document section ..."
    ],
    [
        "PDFBOX-945",
        "PDFBOX-121",
        "PDFBOX may not depend on plattform encoding The pdf specification states, that PDFs use an ASCII compatible, 8 bit characterset.\r\n\r\nPDFBOX uses on various places the plattform encoding to convert bytes from/to strings.\r\nOn JREs with an non ASCII compatible plattform encoding (there are such systems out there), this will break pdfbox.",
        "EOL changes on different OSes [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1415803\nOriginally submitted by yourgod on 2006-01-26 15:03.\n\nContentStreamWriter.EOL is currently defined as\nSystem.getProperty(\"line.separator\").getBytes()\n\nI am using PDDocument.save(OutputStream) to send the\npdf through a CheckedOutputStream for getting a\nchecksum for the pdf. I found that because of this use\nof System.getProperty(\"line.separator\") that my\nchecksums were different when this ran on different\noperating systems. My workaround was to force\nSystem.getProperty(\"line.separator\") to a known value\nbefore calling PDDocument.save(OutputStream) and then\nresetting it after, but this is not an optimal solution. \n\nI propose that this value be made a fixed one (which\none you pick apparently doesn't matter) as it's more\n\"java like\" for things to be the same on different\noperating systems.\n\n\n[comment on SourceForge]\nOriginally sent by yourgod.\nLogged In: YES \nuser_id=257129\n\nSeems COSStandardOutputStream.EOL also needs a change made\nas it is initialized the same way."
    ],
    [
        "PDFBOX-977",
        "PDFBOX-145",
        "java.io.IOException: Error converting date  when trying to get the creation date. Hi,\r\n\r\nwhen I try to get the creation date of these documents\r\n   http://www.ebi.ac.uk/pdbe/docs/dbdoc/MSDSD_license4.pdf\r\n   http://www.ebi.ac.uk/panda/Publications/evgeni-paper11.pdf\r\n   http://www.ebi.ac.uk/luscombe/docs/aa_base.pdf\r\n   http://www.ebi.ac.uk/2can/pdf/nar_interpro.pdf\r\n   http://www.ebi.ac.uk/asd/altextron/gcag.pdf\r\n\r\nI get an IOException:\r\nCaused by: java.io.IOException: Error converting date:B<It\u00c2\u00a94\u00c3\u0091@/Vo<U+0097><U+0090><U+008C>o\u00c2\u00b2\r\n        at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:297) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]\r\n        at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:175) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]\r\n        at org.apache.pdfbox.cos.COSDictionary.getDate(COSDictionary.java:797) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]\r\n        at org.apache.pdfbox.pdmodel.PDDocumentInformation.getCreationDate(PDDocumentInformation.java:210) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]\r\n        at main.parsers.PDFParser.addCreationDate(PDFParser.java:82) ~[na:na]\r\n        at main.parsers.PDFParser.parseAndIndex(PDFParser.java:105) ~[na:na]\r\n        ... 9 common frames omitted\r\n",
        "PDDocumentInformation.getCreationDate() throws IOException [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1456836\nOriginally submitted by nobody on 2006-03-23 02:26.\n\nFor some PDF documents, I get this exception when \ncalling PDDocumentInformation.getCreationDate() :\n\n----------------------\njava.io.IOException: Error converting date:#T\u00c2\u00a90]4\u00c2\u00a8\u00c3\u00b8\u00c2\u00b9}\n3?W%b\u00c3\u009d!\nat org.pdfbox.util.DateConverter.toCalendar\n(DateConverter.java:237)\nat org.pdfbox.util.DateConverter.toCalendar\n(DateConverter.java:134)\nat org.pdfbox.cos.COSDictionary.getDate\n(COSDictionary.java:704)\nat \norg.pdfbox.pdmodel.PDDocumentInformation.getCreationDat\ne(PDDocumentInformation.java:232)\n-----------------------\n\nbut when I view those PDF docs with Acrobat Reader, it \nhas a valid, clean creation date (\"Erstellt am: \n07.12.2004 15:27:13\").  It also shoes \"1.4 (Acrobat \n5.x) as the PDF version - so a quiet old and common \nversion.\n\nUsing PDFBox 0.7.2 with JDK 1.5.0_06.\n\n[comment on SourceForge]\nOriginally sent by nobody.\nLogged In: NO \n\nI found the reason: this occurs on any PDF that is secured \nwith a password. I work around the problem by first \nchecking the document via\n\nmyPDDocument.isEncrypted();\n\nif it is encrypted. If the result is true, I don't read the \ncreation/modification date. Perhaps a more intuitive \nexception should be thrown, something like\n\nDocumentEncryptedException\n\n..."
    ],
    [
        "PDFBOX-978",
        "PDFBOX-818",
        "unreading of trailing content after 'endobj' is missing new line byte (fix included) I have several journal PDFs where the last xref section starts like\r\n\r\nendobj xref\r\n0 92\r\n0000000000 65535 f\r\n0000000044 00000 n\r\n\r\nin this cases the PDF parser reads the endobj line completely and unreads \" xref\".\r\nHowever the newline (in this case ^D) is lost. This is already documented in the\r\nmethod readline() within PDFParser:\r\n\"Note: if you later unread the results of this function, you'll\r\nneed to add a newline character to the end of the string.\"\r\n\r\nCurrently I get an error like: \"expected='obj' actual='655'\" because the 'xref' is read as 'xref0'.\r\n\r\nThe fix:\r\nin PDFParser insert before line 579 (the unreading of trailing characters after 'endobj') the lines:\r\n\r\n// add a space first in place of the newline consumed by readline()\r\npdfSource.unread( SPACE_BYTE );\r\n\r\nthus we get:\r\n                if (endObjectKey.startsWith( \"endobj\" ) ) \r\n                {\r\n                    /*\r\n                     * Some PDF files don't contain a new line after endobj so we \r\n                     * need to make sure that the next object number is getting read separately\r\n                     * and not part of the endobj keyword. Ex. Some files would have \"endobj28\"\r\n                     * instead of \"endobj\"\r\n                     */\r\n                    // add a space first in place of the newline consumed by readline()\r\n                    pdfSource.unread( SPACE_BYTE );\r\n                    pdfSource.unread( endObjectKey.substring( 6 ).getBytes(\"ISO-8859-1\") );\r\n                } \r\n",
        "PDFParser fails if object/xref starts at same line as endobj of a stream object If an object or xref starts at same line after the 'endobj' token and the closed object contains a stream, parsing of next object fails.\r\nExample:\r\nendstream\r\nendobj xref\r\n0 26\r\nIn PDFParser if an object contains a stream the 'endobj' token is read via readLine(). Thus the line break is consumed as well. Now the 'endobj' with following command is handled but only 'xref' is pushed back and not the line break which results in 'xref0' when trying to read next pbject. Thus in this case a simple solution is to push back a space byte before the 'xref'.\r\nI will add a patch for it.\r\nPart of the problem can be seen in PDF from http://onlinelibrary.wiley.com/doi/10.1111/j.1399-6576.2009.02134.x/pdf at last 'endobj'. However the last object does not contain a stream and I was not able to produce such a PDF (the PDFs I have containing described problematic construct are unfortunately confidential)."
    ],
    [
        "PDFBOX-984",
        "PDFBOX-490",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong ",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-984",
        "PDFBOX-924",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong ",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-986",
        "PDFBOX-976",
        "PDFont.getFontWidth(): ClassCastException: Integer cannot be cast to Float Just tested upgrading from PDFBox 1.4.0 to 1.5.0. But I get this exception when adding custom text to PDF documents:\r\n\r\n    java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Float\r\n    \tat org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:786)\r\n    \tat org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:191)\r\n    \tat org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:283)",
        "ClassCastException in PDFont.getFontWidth(int) Using PDFont.getFontWidth() on a TrueType font fails with ClassCastException in PDFBox 1.5.0:\r\n\r\nException in thread \"main\" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Float\r\n\tat org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:786)\r\n\tat org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:191)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:283)\r\n\tat ...\r\n\r\nThis is due to PDTrueTypeFont.loadDescriptorDictionary(...) loading a non-generic List of Integer instances (lines 342-355) and then calling setWidths() with that list in line 356. But the list has been declared as List<Float>. PDFont.getFontWidth(int) then fails in line 786 with that the exception."
    ],
    [
        "PDFBOX-1019",
        "PDFBOX-490",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted.",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-1019",
        "PDFBOX-924",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted.",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-1019",
        "PDFBOX-984",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted.",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-1022",
        "PDFBOX-767",
        "PDPage convertToImage creates inverted black and white image for indexed colorspace. The attached PDF file demonstrates that line 178 of PDPixelMap.java does not try to determine what is the black value and what is the white value. The colorspace of the attached PDF file is PDIndexed.\r\n\r\nInverting this value makes the file render correctly, but there needs to be some kind of way to determine what is black/white for a PDIndexed colorspace.\r\n\r\n                if (colorspace instanceof PDDeviceGray)\r\n                {\r\n                    COSArray decode = getDecode();\r\n                    // we have to invert the b/w-values, \r\n                    // if the Decode array exists and consists of (1,0)\r\n                    if (decode != null && decode.getInt(0) == 1)\r\n                    {\r\n                        map = new byte[] {(byte)0xff};\r\n                    }\r\n                    else\r\n                    {\r\n                        map = new byte[] {(byte)0x00, (byte)0xff};\r\n                    }\r\n                }\r\n                else if (colorspace instanceof PDICCBased)\r\n                {\r\n                    if ( ((PDICCBased)colorspace).getNumberOfComponents() == 1) \r\n                    {\r\n                        map = new byte[] {(byte)0xff};\r\n                    }\r\n                    else\r\n                    {\r\n                        map = new byte[] {(byte)0x00, (byte)0xff};\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    map = new byte[] {(byte)0x00, (byte)0xff}; // <--- HAPPENS HERE - NO TEST FOR BLACK/WHITE LIKE OTHER CASES ABOVE.\r\n                }",
        "CLONE -convertToImage seems to invert colors The pdfbox support team asked me to post this message on this forum so attachments could be seen\r\n\r\nI have a pdf document that has a white background with black text. It\r\nappears after I make the call to convertToImage the colors are reversed. A\r\nblack background with white text\r\n\r\npdDocument = PDDocument.load(new ByteArrayInputStream(aContent));\r\nList<PDPage> documentPageList = pdDocument.getDocumentCatalog().getAllPages();\r\nfor(int i=0; i<documentPageList.size(); ++i) {\r\nPDPage aPage = documentPageList.get(i);\r\nfor (int x=1; x < 14; x++) {\r\nBufferedImage tempImage = convertToImage(x, (2 * 72),aPage);\r\nImageIO.write(tempImage,\"jpeg\", new File(\"c:\\\\tmp\r\npage-\" + x + \".jpeg\"));\r\n}\r\n} \r\n"
    ],
    [
        "PDFBOX-1042",
        "PDFBOX-1016",
        "Wrong XRefStream order while parsing incremental updated PDF with XRefStreams A PDF can contain two types of XRef-Entries.\r\nMost files use XRefTables for object references.\r\n\r\nWeb-Optimized (linearized) pdf document uses XRefStreams. This is a compresed XRefTable as ObjectStream. The PDFParser parse this objects the same way as other objects and put them into an object pool (HashMap). If the document was incremental updated, more XRefStreams would be in the pdf document and all will be put into the object pool.\r\n\r\nThe XRefStreamParser begin to parse the XRefStreams and try to gain all XRefStream-Object from that pool. The objects returned from the pool aren't in the same order as read. This cause that in some cases the older Object overwrite the newer one. And this cause that the pdfbox can't find the right objects and use the older one instead.\r\n\r\nIf a user try to parse such a document, he will got an indeterminate state. older and newer objects are mixed.\r\n\r\nIn my case, a document catalog was overwrote by an old one and i can't see the changes that was made with the incremental update.\r\n\r\nA patch and a sample pdf will come soon.",
        "Specification conform xref/trailer parsing + Fix PDFBOX currently reads xref table/trailer and XRef objects without using startxref or 'Prev' information which results in applying not active data resulting in using wrong objects or resulting in parsing exceptions because old trailer settings do not apply anymore. This happens especially with updated PDF documents where changes are simply appended  and old objects/xref entries remain but are not referenced. My last patch (PDFBOX-1014) tried to solve this for a specific case but it was based on assumptions which do not hold in every case.\r\n\r\nThe specification compliant way is to read the last startxref which points to the last xref object which itself may reference further xref objects using 'Prev' attribute.\r\n\r\nI have written a fix which works the standard way and can fall back to the old behavior in case startxref is wrong or missing. The fix tries to be as unobtrusive as possible. A new class (o.a.p.pdfparser.XrefTrailerResolver) is filled with all xref table/trailer and XRef object data. After document is parsed (and last startxref is read) this class creates xref table and trailer using startxref and 'Prev' information. Beside this new class there are small changes to PDFParser and COSDocument.\r\n\r\nThis bugfix/improvement should bring PDFBOX a good step closer to be PDF specification conform - especially as long as the new specification conform parser project is not finished.\r\n\r\nThis bugfix supersedes the fix from PDFBOX-1014."
    ],
    [
        "PDFBOX-1068",
        "PDFBOX-490",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-1068",
        "PDFBOX-924",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-1068",
        "PDFBOX-984",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-1068",
        "PDFBOX-1019",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-1071",
        "PDFBOX-212",
        "Can not generate chinese character PDF file I practice the PDF generate code for chinese character and load the chinese font ttf, but can not get the chinese PDF with correct display.'\r\nThe code is as below: The font coding is UTF-8\r\n\r\n            doc = new PDDocument();\r\n            PDPage page = new PDPage();\r\n            doc.addPage( page );\r\n            PDFont font = PDTrueTypeFont.loadTTF(doc, \"d:\\\\temp\\\\ttf\\\\fireflysung.ttf\");\r\n            PDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n            contentStream.beginText();\r\n            contentStream.moveTextPositionByAmount(100, 700);\r\n             contentStream.setFont(font,12);\r\n            \r\n            contentStream.drawString(\"\u4e2d\u6587\u6e2c\u8a66\");\r\n            contentStream.endText();\r\n            contentStream.close();\r\n            doc.save(\"d:\\\\temp\\\\helloworld.pdf\");",
        "PDF Document cut German Umlauts [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1587745\nOriginally submitted by kajiro on 2006-10-31 01:05.\n\nI use the class TextToPDF for create a PDF Document\nfrom a text file. That operates correctly with a simply\ntext. But when i use german umlauts in the text like\n\u00c3\u00a4,\u00c3\u00b6,\u00c3\u00bc or \u00c3\u009f the PDF Document cut this letters. \n\nAttached is a sample document contaning four words with\nincorrectly umlauts! \n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1587745&file_id=200742\nbsp.pdf (application/pdf), 958 bytes\nUmlauts are incorrect\n\n[comment on SourceForge]\nOriginally sent by benlitchfield.\nLogged In: YES \nuser_id=601708\nOriginator: NO\n\nTo the anonymous poster, did you mean for both PDF links to be the same?\n\nBen\n\n[comment on SourceForge]\nOriginally sent by nobody.\nLogged In: NO \n\nFor PDF file, which contains accented Latin1\ncharacters:\n    http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get a u with umlauts converted into \"currency1u\"\n(look at the first name on the first page).\n\nFor the following file containing Japanese characters:\n     http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get error:\n     java.io.IOException: Unknown encoding for 'H'\nI also can't seem to cut and past the form."
    ],
    [
        "PDFBOX-1071",
        "PDFBOX-553",
        "Can not generate chinese character PDF file I practice the PDF generate code for chinese character and load the chinese font ttf, but can not get the chinese PDF with correct display.'\r\nThe code is as below: The font coding is UTF-8\r\n\r\n            doc = new PDDocument();\r\n            PDPage page = new PDPage();\r\n            doc.addPage( page );\r\n            PDFont font = PDTrueTypeFont.loadTTF(doc, \"d:\\\\temp\\\\ttf\\\\fireflysung.ttf\");\r\n            PDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n            contentStream.beginText();\r\n            contentStream.moveTextPositionByAmount(100, 700);\r\n             contentStream.setFont(font,12);\r\n            \r\n            contentStream.drawString(\"\u4e2d\u6587\u6e2c\u8a66\");\r\n            contentStream.endText();\r\n            contentStream.close();\r\n            doc.save(\"d:\\\\temp\\\\helloworld.pdf\");",
        "writing pdf file in Japanese, garbled use PdfBox to write pdf file in Japanese,generated file is garbled."
    ],
    [
        "PDFBOX-1071",
        "PDFBOX-922",
        "Can not generate chinese character PDF file I practice the PDF generate code for chinese character and load the chinese font ttf, but can not get the chinese PDF with correct display.'\r\nThe code is as below: The font coding is UTF-8\r\n\r\n            doc = new PDDocument();\r\n            PDPage page = new PDPage();\r\n            doc.addPage( page );\r\n            PDFont font = PDTrueTypeFont.loadTTF(doc, \"d:\\\\temp\\\\ttf\\\\fireflysung.ttf\");\r\n            PDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n            contentStream.beginText();\r\n            contentStream.moveTextPositionByAmount(100, 700);\r\n             contentStream.setFont(font,12);\r\n            \r\n            contentStream.drawString(\"\u4e2d\u6587\u6e2c\u8a66\");\r\n            contentStream.endText();\r\n            contentStream.close();\r\n            doc.save(\"d:\\\\temp\\\\helloworld.pdf\");",
        "True type PDFont subclass only supports WinAnsiEncoding (hardcoded!) PDFBox cannot embed Identity-H or Identity-V type TTF fonts in the PDF it creates, making it impossible to create PDFs in any language apart from English and ones supported in WinAnsiEncoding. This behaviour is caused because method PDTrueTypeFont.loadTTF has hardcoded WinAnsiEncoding inside, and there is no Identity-H or Identity-V Encoding classes provided (to set afterwards via PDFont.setFont() )\r\n\r\nThis excludes the following languages plus many others:\r\n\r\n- Greek\r\n- Bulgarian\r\n- Swedish\r\n- Baltic languages\r\n- Malteze \r\n\r\nThe PDF created contains garbled characters and/or squares.\r\n\r\nSimple test case:\r\n\r\n{code}\r\n                PDDocument doc = null;\r\n\t\ttry {\r\n\t\t\tdoc = new PDDocument();\r\n\t\t\tPDPage page = new PDPage();\r\n\t\t\tdoc.addPage(page);\r\n\t\t\t// extract fonts for fields\r\n\t\t\tbyte[] arialNorm = extractFont(\"arial.ttf\");\r\n\t\t\t//byte[] arialBold = extractFont(\"arialbd.ttf\"); \r\n\t\t\t//PDFont font = PDType1Font.HELVETICA;\r\n\t\t\tPDFont font = PDTrueTypeFont.loadTTF(doc, new ByteArrayInputStream(arialNorm));\r\n\t\t\t\r\n\t\t\tPDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n\t\t\tcontentStream.beginText();\r\n\t\t\tcontentStream.setFont(font, 12);\r\n\t\t\tcontentStream.moveTextPositionByAmount(100, 700);\r\n\t\t\tcontentStream.drawString(\"Hello world from PDFBox \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"); // text here may appear garbled; insert any text in Greek or Bulgarian or Malteze\r\n\t\t\tcontentStream.endText();\r\n\t\t\tcontentStream.close();\r\n\t\t\tdoc.save(\"pdfbox.pdf\");\r\n\t\t\tSystem.out.println(\" created!\");\r\n\t\t} catch (Exception ioe) {\r\n\t\t\tioe.printStackTrace();\r\n\t\t} finally {\r\n\t\t\tif (doc != null) {\r\n\t\t\t\ttry { doc.close(); } catch (Exception e) {}\r\n\t\t\t}\r\n\t\t}\r\n{code}\r\n"
    ],
    [
        "PDFBOX-1077",
        "PDFBOX-744",
        "PDPage convertToImage not returning rotated image PDPage.convertToImage is not returning a rotated image when Rotate: 90 or Rotate: 270 is specified in the page dictionary.",
        "Landscape PDF Rasterized as Portrait The Rotate entry on Page objects is not taken into account when converting a PDF into an image."
    ],
    [
        "PDFBOX-1082",
        "PDFBOX-744",
        "A landscape PDF is rasterized as portrait Fairly simple put give PDFBox a landscape PDF and create an image raster. It is created as portrait.",
        "Landscape PDF Rasterized as Portrait The Rotate entry on Page objects is not taken into account when converting a PDF into an image."
    ],
    [
        "PDFBOX-1082",
        "PDFBOX-1077",
        "A landscape PDF is rasterized as portrait Fairly simple put give PDFBox a landscape PDF and create an image raster. It is created as portrait.",
        "PDPage convertToImage not returning rotated image PDPage.convertToImage is not returning a rotated image when Rotate: 90 or Rotate: 270 is specified in the page dictionary."
    ],
    [
        "PDFBOX-1106",
        "PDFBOX-1098",
        "PDFMergerUtility corrupts file attachments When combining files that contain (PDF) file attachments, the attachments carry over, but are corrupted in the merged file.\r\n\r\nCode used:\r\n\t\tPDFMergerUtility merger = new PDFMergerUtility();\r\n\t\tmerger.addSource(\"c:/gilad/testing/in/1.pdf\");\r\n\t\tmerger.addSource(\"c:/gilad/testing/in/2.pdf\");\r\n\t\tmerger.setDestinationFileName(\"c:/gilad/testing/in/merged.pdf\");\r\n\t\ttry {\r\n\t\t\tmerger.mergeDocuments();\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}",
        "Wrong implemented stream reader The BaseParser#readUntilEndStream(OutputStream) method is parsing streams the wrong way. [1]\r\n\r\nThis method will start reading a stream till the keyword \"endstream\" is reached and don't care about the length value inside the dictionary. This implementation brokes nearly every pdf document with a pdf embedded inside a stream [2].\r\n\r\nEncoder that is used for compressing streams can be block-based (like FlateDecode which is mostly used). If a block of data that should be compressed don't spare space after compressing, the encode do not compress this block and mark it as uncompressed. So a stream can containing compressed and uncompressed parts. So if someone try to embed pdf documents with streams inside a stream, the encoder will left most parts of the document uncompressed. Such parts can contain plan text like \"endstream\" or other critical keywords that can cause the parser to stop. \r\n\r\nSo we need to read the whole stream length that was wrote inside the dictionary and don't look at \"endstream\" keywords until the end is reached.\r\n\r\nThe current stream parser cause a ZIPException with the Message \"Unexpected end of ZLIB input stream\".\r\n\r\nA sample pdf and a patch is coming soon.\r\n\r\n[1] PDF 32000-1:2008 -> 7.3.8.2 Stream Extent\r\n[2] PDF 32000-1:2008 -> 7.11.4 Embedded File Streams"
    ],
    [
        "PDFBOX-1147",
        "PDFBOX-185",
        "Printing a PDF with an image inside show black. I have a PDF with a image inside.\r\nWhen i print the PDF the image show corrupted similar a black area.\r\nIn the java console:\r\n\r\n25-oct-2011 13:12:39 org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage\r\nGRAVE: java.io.StreamCorruptedException: Error: data is null\r\njava.io.StreamCorruptedException: Error: data is null\r\n\tat org.apache.pdfbox.filter.LZWFilter.decode(LZWFilter.java:82)\r\n\tat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:301)\r\n\tat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:229)\r\n",
        "StreamCorruptedException in LZWFilter [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1525971\nOriginally submitted by nobody on 2006-07-20 08:43.\n\nHello,\nI get a StreamCorruptedException in LZWFilter.decode\nwhen I'm reading the Adobe-TIFF6.0 description (121\npages) file. It's a pitty but it's never more available\nonline. I tried to attach it, but it has ~400kb. If\nanyone need's it I can mail it. I am successfull\nloading it by the ICEpdf-package and Acrobat. Please\nHelp! ijyama@web.de"
    ],
    [
        "PDFBOX-1147",
        "PDFBOX-205",
        "Printing a PDF with an image inside show black. I have a PDF with a image inside.\r\nWhen i print the PDF the image show corrupted similar a black area.\r\nIn the java console:\r\n\r\n25-oct-2011 13:12:39 org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage\r\nGRAVE: java.io.StreamCorruptedException: Error: data is null\r\njava.io.StreamCorruptedException: Error: data is null\r\n\tat org.apache.pdfbox.filter.LZWFilter.decode(LZWFilter.java:82)\r\n\tat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:301)\r\n\tat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:229)\r\n",
        "Miscellaneous errors on valid files [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1570311\nOriginally submitted by renaudw on 2006-10-03 15:04.\n\nAs far as I can tell these files are valid. Some \ngenerate a warning in Acrobat Reader, some don't.\n\nI'm reporting them in case you want to have a look at \nthe errors they generate. All files are accessible \nonline by replacing /web/gfdocs with \nhttp://bat.library.ucsf.edu/data.\n\n\n/web/gfdocs/p/b/x/pbx00a99/pbx00a99.pdf skipped due \nto: java.io.IOException: Error: Expected an integer \ntype, actual='BC3c#c3??\\?' (stacktrace follows)\njava.io.IOException: Error: Expected an integer type, \nactual='BC3c#c3??\\?'\n        at org.pdfbox.pdfparser.BaseParser.readInt\n(BaseParser.java:1335)\n        at org.pdfbox.pdfparser.PDFParser.parseObject\n(PDFParser.java:415)\n        at org.pdfbox.pdfparser.PDFParser.parse\n(PDFParser.java:176)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.pa\nrseDocument(TextOverImageDocumentDetector.java:210)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:102)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)\n\n\n/web/gfdocs/p/e/b/peb40a99/peb40a99.pdf skipped due \nto: java.io.StreamCorruptedException: Error: data is \nnull (stacktrace follows)\njava.io.StreamCorruptedException: Error: data is null\n        at org.pdfbox.filter.LZWFilter.decode\n(LZWFilter.java:101)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:319)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:249)\n        at org.pdfbox.cos.COSStream.getUnfilteredStream\n(COSStream.java:173)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS\ntream(COSStreamArray.java:200)\n        at org.pdfbox.pdfparser.PDFStreamParser.<init>\n(PDFStreamParser.java:91)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getStreamToken\ns(COSStreamArray.java:141)\n        at \norg.pdfbox.util.PDFStreamEngine.processSubStream\n(PDFStreamEngine.java:189)\n        at \norg.pdfbox.util.PDFStreamEngine.processStream\n(PDFStreamEngine.java:160)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.co\nllectTextRenderingModes\n(TextOverImageDocumentDetector.java:153)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:125)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:103)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)\n\n\n/web/gfdocs/q/l/n/qln20a99/qln20a99.pdf skipped due \nto: java.io.StreamCorruptedException: Error: data is \nnull (stacktrace follows)\njava.io.StreamCorruptedException: Error: data is null\n        at org.pdfbox.filter.LZWFilter.decode\n(LZWFilter.java:101)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:319)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:249)\n        at org.pdfbox.cos.COSStream.getUnfilteredStream\n(COSStream.java:173)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS\ntream(COSStreamArray.java:200)\n        at org.pdfbox.pdfparser.PDFStreamParser.<init>\n(PDFStreamParser.java:91)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getStreamToken\ns(COSStreamArray.java:141)\n        at \norg.pdfbox.util.PDFStreamEngine.processSubStream\n(PDFStreamEngine.java:189)\n        at \norg.pdfbox.util.PDFStreamEngine.processStream\n(PDFStreamEngine.java:160)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.co\nllectTextRenderingModes\n(TextOverImageDocumentDetector.java:153)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:125)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:103)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)\n\n\n/web/gfdocs/q/p/e/qpe20a99/qpe20a99.pdf skipped due \nto: java.io.StreamCorruptedException: Error: data is \nnull (stacktrace follows)\njava.io.StreamCorruptedException: Error: data is null\n        at org.pdfbox.filter.LZWFilter.decode\n(LZWFilter.java:101)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:319)\n        at org.pdfbox.cos.COSStream.doDecode\n(COSStream.java:249)\n        at org.pdfbox.cos.COSStream.getUnfilteredStream\n(COSStream.java:173)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS\ntream(COSStreamArray.java:200)\n        at org.pdfbox.pdfparser.PDFStreamParser.<init>\n(PDFStreamParser.java:91)\n        at \norg.pdfbox.pdmodel.common.COSStreamArray.getStreamToken\ns(COSStreamArray.java:141)\n        at \norg.pdfbox.util.PDFStreamEngine.processSubStream\n(PDFStreamEngine.java:189)\n        at \norg.pdfbox.util.PDFStreamEngine.processStream\n(PDFStreamEngine.java:160)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.co\nllectTextRenderingModes\n(TextOverImageDocumentDetector.java:153)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:125)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.de\ntect(TextOverImageDocumentDetector.java:103)\n        at \nedu.ucsf.library.utils.TextOverImageDocumentDetector.ma\nin(TextOverImageDocumentDetector.java:77)"
    ],
    [
        "PDFBOX-1189",
        "PDFBOX-1145",
        "Nullpointer Exception while extracting images When I tried to extract images using ExtractImages.java, I got following Nullpointer exception\r\n\r\nDec 14, 2011 6:30:11 PM org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage\r\nSEVERE: java.lang.NullPointerException\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.getColorSpace(PDXObjectImage.java:286)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:140)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:285)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:139)\r\n\tat org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:165)\r\n\tat org.apache.pdfbox.ExtractImages.main(ExtractImages.java:62)",
        "\"write2file\" gives Null Pointer Exception Oct 24, 2011 11:00:15 AM org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage\r\nSEVERE: java.lang.NullPointerException\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.getColorSpace(PDXObjectImage.java:286)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:140)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:285)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:139)\r\n\tat org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:165)\r\n\tat org.apache.pdfbox.ExtractImages.main(ExtractImages.java:62)"
    ],
    [
        "PDFBOX-1192",
        "PDFBOX-62",
        "getWidth() == 0 if external fonts are used getWidth() == 0 if a font isn't embedded to the pdf",
        "Incorrect (zero) character widths returned in some docs [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1216674\nOriginally submitted by tamirhassan on 2005-06-07 13:42.\n\nFor certain PDF documents (such as the one attached) \nthe character/string widths (as obtained e.g. by the \nPDFont.getStringWidth method) are not returned \ncorrectly, i.e. they appear to be correct for punctuation \ncharacters but are zero for alphanumeric characters.  \n\nIt seems as if these alphanumeric characters are NOT \nwithin PDFont.firstChar and PDFont.lastChar in the \nType 1 font.  The method therefore attempts to obtain \nthe font widths from the AFM (font metric) file, but fails \n(silently) with a 'resource is null' logline message.\n\n(Note that this problem doesn't seem to occur with Type \n1 fonts in other documents.)\n\nA more detailed discussion regarding this issue can be \nfound in this link:\n\nhttp://sourceforge.net/forum/forum.php?\nthread_id=1260349&forum_id=267205\n\nThanks in advance for any help that can be obtained,\n\nTam"
    ],
    [
        "PDFBOX-1203",
        "PDFBOX-1197",
        "PrintImageLocations doesn't print images inside PDXObjectForm objects Some pdf store images inside forms to reuse them throughout the document. PrintImageLocations misses such images.\r\n\r\nA workaround that works for some documents:\r\n\r\nif (xobject instanceof PDXObjectForm) {\r\n\t\t\t\tMap images = ((PDXObjectForm) xobject).getResources()\r\n\t\t\t\t\t\t.getImages();\r\n\t\t\t\tif (images != null) {\r\n\t\t\t\t\tIterator imageIter = images.keySet().iterator();\r\n\t\t\t\t\twhile (imageIter.hasNext()) {\r\n\t\t\t\t\t\tString key = (String) imageIter.next();\r\n\t\t\t\t\t\tPDXObjectImage image = (PDXObjectImage) images.get(key);\r\n\t\t\t\t\t\tString name = key;\r\n\t\t\t\t\t\t//System.out.println(\"Writing image:\" + name);\r\n\t\t\t\t\t\t//image.write2file(name);\r\n\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tPDPage page = getCurrentPage();\r\n\t\t\t\t\t\t\tMatrix ctm = getGraphicsState()\r\n\t\t\t\t\t\t\t\t\t.getCurrentTransformationMatrix();\r\n\t\t\t\t\t\t\tdouble rotationInRadians = (page.findRotation() * Math.PI) / 180;\r\n\r\n\t\t\t\t\t\t\tAffineTransform rotation = new AffineTransform();\r\n\t\t\t\t\t\t\trotation.setToRotation(rotationInRadians);\r\n\t\t\t\t\t\t\tAffineTransform rotationInverse = rotation.createInverse();\r\n\t\t\t\t\t\t\tMatrix rotationInverseMatrix = new Matrix();\r\n\t\t\t\t\t\t\trotationInverseMatrix\r\n\t\t\t\t\t\t\t\t\t.setFromAffineTransform(rotationInverse);\r\n\t\t\t\t\t\t\tMatrix rotationMatrix = new Matrix();\r\n\t\t\t\t\t\t\trotationMatrix.setFromAffineTransform(rotation);\r\n\r\n\t\t\t\t\t\t\tMatrix unrotatedCTM = ctm.multiply(rotationInverseMatrix);\r\n\t\t\t\t\t\t\tfloat xScale = unrotatedCTM.getXScale();\r\n\t\t\t\t\t\t\tfloat yScale = unrotatedCTM.getYScale();\r\n\r\n\t\t\t\t\t\t\timagesInformation.add(new ImageInformation(name, unrotatedCTM.getXPosition(), unrotatedCTM.getYPosition(), xScale / 100f * image.getWidth(), yScale / 100f * image.getHeight()));\r\n\r\n\t\t\t\t\t\t} catch (NoninvertibleTransformException e) {\r\n\t\t\t\t\t\t\tthrow new WrappedIOException(e);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (xobject instanceof PDXObjectImage) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tPDXObjectImage image = (PDXObjectImage) xobject;\r\n\t\t\t\t\tPDPage page = getCurrentPage();\r\n\t\t\t\t\tMatrix ctm = getGraphicsState()\r\n\t\t\t\t\t\t\t.getCurrentTransformationMatrix();\r\n\t\t\t\t\tdouble rotationInRadians = (page.findRotation() * Math.PI) / 180;\r\n\r\n\t\t\t\t\tAffineTransform rotation = new AffineTransform();\r\n\t\t\t\t\trotation.setToRotation(rotationInRadians);\r\n\t\t\t\t\tAffineTransform rotationInverse = rotation.createInverse();\r\n\t\t\t\t\tMatrix rotationInverseMatrix = new Matrix();\r\n\t\t\t\t\trotationInverseMatrix\r\n\t\t\t\t\t\t\t.setFromAffineTransform(rotationInverse);\r\n\t\t\t\t\tMatrix rotationMatrix = new Matrix();\r\n\t\t\t\t\trotationMatrix.setFromAffineTransform(rotation);\r\n\r\n\t\t\t\t\tMatrix unrotatedCTM = ctm.multiply(rotationInverseMatrix);\r\n\t\t\t\t\tfloat xScale = unrotatedCTM.getXScale();\r\n\t\t\t\t\tfloat yScale = unrotatedCTM.getYScale();\r\n\r\n\t\t\t\t\timagesInformation.add(new ImageInformation(objectName.getName(), unrotatedCTM.getXPosition(), unrotatedCTM.getYPosition(), xScale / 100f * image.getWidth(), yScale / 100f * image.getHeight()));\r\n\r\n\t\t\t\t} catch (NoninvertibleTransformException e) {\r\n\t\t\t\t\tthrow new WrappedIOException(e);\r\n\t\t\t\t}",
        "PrintImageLocations does not print information of all images Hi,\r\nPrintImageLocations does not print information of all images.\r\nHowever I am able to extract all images using \"ExtractImages.java\"\r\nFollowing is my initial analysis:\r\nIn processResources method of ExtractImages.java, source code is present as given below\r\nif( xobjects != null )\r\n{\r\n            Iterator<String> xobjectIter = xobjects.keySet().iterator();\r\n            while( xobjectIter.hasNext() )\r\n            {\r\n                  ----\r\n                  ----\r\n                  if (xobject instanceof PDXObjectImage)\r\n                  {\r\n                        ----\r\n                        ----\r\n                  }\r\n                  else if (xobject instanceof PDXObjectForm)\r\n                  {\r\n                    PDXObjectForm xObjectForm = (PDXObjectForm)xobject;\r\n                    PDResources formResources = xObjectForm.getResources();\r\n                    processResources(formResources, prefix, addKey);\r\n                  }\r\n            }\r\n}\r\nMy PDF contains some images which are of type PDXObjectForm.\r\nI am not able to get information of all those images (of type PDXObjectForm) using PrintImageLocations.java\r\nIn processOperator  method of PrintImageLocations.java, there is no \"else\"  statement for images of type PDXObjectForm. Is this problem?\r\nKindly help and suggest how to fix this.\r\n"
    ],
    [
        "PDFBOX-1225",
        "PDFBOX-1196",
        "java.io.IOException: For input string: \"2152829241\" I had a pdf of 6 pages, size of 2,40 GB.\r\nI can open the PDF with AcrobatReader 9, but I cannot open with FoxitReader. (pdf corrupted)\r\n\r\nThe code I am using to count pages is the following:\r\n \t    //create a temporary file needed by the PDFBox when dealing with PDFs really really large\r\n\t    temp = new File(\"e:/temp.tmp\");\r\n\t    //using random access file needed for PDF really large\r\n\t     rand = new RandomAccessFile(temp,\"rw\");\r\n\t    doc = PDDocument.load(file,rand);\r\n\t    nr = doc.getNumberOfPages();\r\n\t\r\nI receive the following exception:\r\njava.io.IOException: For input string: \"2152829241\"\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parseXrefTable(PDFParser.java:730)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:452)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1022)\r\n\tat PDFBoxExample.getHugeNrOfFiles(PDFBoxExample.java:36)\r\n\tat PDFBoxExample.main(PDFBoxExample.java:257)\r\n\r\nAfter searching in your code , I found the cause of the exception is NumberFormatException , due to 2152829241 =>\r\nInteger.parseInt(2152829241) crashes , because 2152829241  > Integer.MAX_VALUE\r\n\r\nI have made several changes to the source code  :\r\nXRefTrailerResolver\r\nCOSDocument\r\nPDFParser\r\nCOSWriter\r\nBaseParser\r\nXRefTrailerResolver\r\n\r\nchanging from int to long  => code worked\r\nIs it possible for you to change the code accordingly or I can send you the classes.\r\n\r\n",
        "Object offsets should be of type long + PATCH Currently object offsets are stored as integer (32 bit). However the PDF specification does not limit a PDF document to 2GB. The only restriction is the XREF table which supports 10 digit values for object offsets. Thus we could have offsets >2GB (<10GB). The attached patch changes all locations (as far as I could find them) dealing with object offsets to long type.\r\nSince this is a rather small change which should not have greater performance/space impact I recommend to include it. Otherwise we would have to include checks that the parsed file is smaller then Integer.MAX_VALUE."
    ],
    [
        "PDFBOX-1247",
        "PDFBOX-1067",
        "Support for JBig2 encoding In 1.7.0 trying to build an image (jpg) from a PDF that is a JBIG2 encoded image results in a blank image being created.\r\nIn 1.6.0 an image with a skewed black box is created.\r\n\r\nIn my logs I see:\r\n2012-03-06 14:54:20,333 [http-bio-8080-exec-10] [INFO] unsupported/disabled operation: BDC\r\n2012-03-06 14:54:20,348 [http-bio-8080-exec-3] [ERROR] Can't find an ImageIO plugin to decode the JBIG2 encoded datastream.\r\n2012-03-06 14:54:20,348 [http-bio-8080-exec-3] [ERROR] Something went wrong ... the pixelmap doesn't contain any data.\r\n2012-03-06 14:54:20,348 [http-bio-8080-exec-3] [WARN] getRGBImage returned NULL",
        "PDF Scan from Xerox WorkCentre 5030 renders as all black     The file \"ItDoesntWorkScan.pdf\" renders to an empty\r\n    black page. This file is a copy of \"ItDoesntWorkPrinted.pdf\"\r\n    that has been printed on paper, and then scanned with\r\n    a Xerox WorkCentre 5030 scanner, which then emails a pdf file\r\n    back to the user.\r\n    Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10\r\n    Unfortunately, the WorkCentre 5030 doesn't appear to have\r\n    many user-settable options for scanning to PDF, so we weren't\r\n    really able to try scanning with settings other than the defaults.\r\n\r\nWill attach pdf and code to demonstrate.\r\n"
    ],
    [
        "PDFBOX-1296",
        "PDFBOX-490",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-1296",
        "PDFBOX-924",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-1296",
        "PDFBOX-984",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-1296",
        "PDFBOX-1019",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-1296",
        "PDFBOX-1068",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-1342",
        "PDFBOX-1120",
        "Tags not fully preserved when merging PDFs. When merging PDFs, 508 accessibility tags are only preserved on the first page of combined PDF.\r\n\r\nBoth PDFMergerUtility.mergeDocuments() and PDFMergerUtility..appendDocument() exhibit this behavior.\r\n\r\nExample file attached to BugZilla \"issue\".\r\n",
        "PDFMergerUtility does not maintain tagged document structure When appending tagged documents with the PDFMergerUtility.appendDocument method, tags from the source document are not copied to the destination document."
    ],
    [
        "PDFBOX-1357",
        "PDFBOX-371",
        "Missing character encoding in MacRoman & WinAnsi During my Preflight refactoring, I encountered some characters mapping that are missing from the WinAnsiEncoding and the MacRomanEncoding.\r\n\r\n\"nonbreaking space\" is missing from the WInAnsi and the MacRoman Encoding that must be mapped with the \"space\" character.\r\n\"soft hyphen\" is missing from the WinAnsi encoding that must be mapped with the \"hyphen\" character. \r\n\r\nUnfortunately, they are no clearly defined name for these two characters, so only the getName() method have been updated to return \"space\" and \"hyphen\" when code for the \"nonbreaking space\" or \"soft hyphen\" is received.\r\n",
        "Soft Hyphen character not mapped to hyphen in WinAnsiEncoding (and suggested fix) When running text extraction on a PDF file that contains the soft hyphen character in the WinAnsiEncoding (that is, 0255), the text extractor incorrectly maps this as a space, when it should be a hyphen. As the PDF Reference 1.7 says in note 5 of table D.1:\n\n'The hyphen character is also encoded as 255 in WinAnsiEncoding. The meaning of this duplicate code is \"soft hyphen,\" but it is typographically the same as hyphen.'\n\nThe reason that a soft hyphen is typographically the same as hyphen is that a soft hyphen indicates that a hyphen MAY be placed here if necessary (i.e. breaking a word across lines). Since the soft hyphen should only be put, by the PDF producer, at the end of a line to break a word, it stands to reason that the option to place a hyphen must be taken.\n\nI think I've traced the reason for the substitution to Encoding.getName, where because there is no mapping in the codeToName mapping for this code in WinAnsiEncoding, by default it returns \"space\".\n\nThe fix is not as simple as adding an addCharacterEncoding( 0255, COSName.getPDFName(\"hyphen\")) to WinAnsiEncoding, because that will set both the codeToName mapping AND the nameToCode mapping, which will overwrite the 055 nameToCode mapping.\n\nAdding this line:\n\ncodeToName.add( new Integer(0255), COSName.getPDFName(\"hyphen\"));\n\nto the end of the WinAnsiEncoding constructor seems to fix the issue."
    ],
    [
        "PDFBOX-1370",
        "PDFBOX-1314",
        "Only the last visual signature is valid when multiple signatures have been added on different pages * Every visual signature that is added invalidates the previous ones (Adobe Reader displays the message that the document has changed)\r\n* If the signatures are added to different pages only the ones that have been added to the page of the last one are visible in PDFReader (Adobe displays the message in the signature view that the form field has been deleted)",
        "PDFParser should set \"direct\" property in COSBase if this object is direct PDFParser during PDF parsing does not update COSBase#direct property - it always return false when read. Especially this issue manifests for dictionary objects when PDF is saved (either regularly or incrementally) - all dictionary objects in saved PDF, if they do not have COSBase#direct property set or are not specifically treated by COSWriter (like XObject or Resources) are written as indirect objects. Though PDF specification allows dictionary objects to be indirect, but not for /Extensions dictionary in document catalog: \"The extensions dictionary, all developer extensions dictionary entries in the extensions dictionary, as well as their entries, all shall be direct objects (i.e., this information shall be nested directly within the catalog dictionary with no indirect objects used).\" (see ISO 32000-1: 7.12 Extensions Dictionary)."
    ],
    [
        "PDFBOX-1426",
        "PDFBOX-1414",
        "JVM crashes when trying to process the attached pdf's #\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x6d703bf9, pid=5384, tid=4788\r\n#\r\n# JRE version: 6.0_18-b07\r\n# Java VM: Java HotSpot(TM) Server VM (16.0-b13 mixed mode windows-x86 )\r\n# Problematic frame:\r\n# C  [fontmanager.dll+0x13bf9]\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n#   http://java.sun.com/webapps/bugreport/crash.jsp\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n\r\n---------------  T H R E A D  ---------------\r\n\r\nCurrent thread (0x6a057400):  JavaThread \"ajp-127.0.0.1-8009-11\" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)]\r\n\r\nsiginfo: ExceptionCode=0xc0000005, reading address 0x00000010\r\n\r\nRegisters:\r\nEAX=0x00000000, EBX=0x00000000, ECX=0x0000000a, EDX=0x69b1c6c8\r\nESP=0x6cf5e89c, EBP=0x6cf5e8b4, ESI=0x6aadfdd0, EDI=0x6aadfdd0\r\nEIP=0x6d703bf9, EFLAGS=0x00010246\r\n\r\nTop of Stack: (sp=0x6cf5e89c)\r\n0x6cf5e89c:   00000000 6aadfdd0 636d6170 6aadfdd0\r\n0x6cf5e8ac:   6d703d33 685e4130 6cf5e924 6d6f3ced\r\n0x6cf5e8bc:   6aadfdd0 00000062 00000000 6cf5e920\r\n0x6cf5e8cc:   6aadfdd0 685e4130 00000001 00000000\r\n0x6cf5e8dc:   00000007 00000000 00000000 00000000\r\n0x6cf5e8ec:   00000000 6a8a3840 00000000 00000000\r\n0x6cf5e8fc:   6a8a3c98 00000000 00000000 00000000\r\n0x6cf5e90c:   6a8a3838 00000000 00000000 00000000 \r\n\r\nInstructions: (pc=0x6d703bf9)\r\n0x6d703be9:   75 51 57 68 70 61 6d 63 56 e8 6f fd ff ff 6a 00\r\n0x6d703bf9:   ff 70 10 ff 70 0c ff b6 88 00 00 00 ff b6 90 00 \r\n\r\n\r\nStack: [0x6cf10000,0x6cf60000],  sp=0x6cf5e89c,  free space=13a6cf5e3d8k\r\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\r\nC  [fontmanager.dll+0x13bf9]\r\nC  [fontmanager.dll+0x3ced]\r\nC  [fontmanager.dll+0x3da3]\r\n\r\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\r\nj  sun.font.FileFont.getGlyphImage(JI)J+0\r\nJ  sun.font.FileFontStrike.getGlyphMetrics(IZ)Ljava/awt/geom/Point2D$Float;\r\nJ  sun.font.FileFontStrike.getGlyphMetrics(I)Ljava/awt/geom/Point2D$Float;\r\nJ  sun.font.StandardGlyphVector.initPositions()V\r\nJ  sun.font.GlyphList.setFromGlyphVector(Lsun/java2d/loops/FontInfo;Ljava/awt/font/GlyphVector;FF)V\r\nJ  sun.java2d.pipe.GlyphListPipe.drawGlyphVector(Lsun/java2d/SunGraphics2D;Ljava/awt/font/GlyphVector;FF)V\r\nj  sun.java2d.pipe.ValidatePipe.drawGlyphVector(Lsun/java2d/SunGraphics2D;Ljava/awt/font/GlyphVector;FF)V+17\r\nJ  sun.java2d.SunGraphics2D.drawGlyphVector(Ljava/awt/font/GlyphVector;FF)V\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.writeFont(Ljava/awt/Graphics2D;Ljava/awt/geom/AffineTransform;FFLjava/awt/font/GlyphVector;)V+63\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(Ljava/lang/String;[ILjava/awt/Graphics;FLjava/awt/geom/AffineTransform;FF)V+253\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(Lorg/apache/pdfbox/util/TextPosition;)V+436\r\nJ  org.apache.pdfbox.util.PDFStreamEngine.processEncodedText([B)V\r\nJ  org.apache.pdfbox.util.operator.ShowTextGlyph.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V\r\nJ  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/cos/COSStream;)V\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+20\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+43\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(Ljava/awt/Graphics;Lorg/apache/pdfbox/pdmodel/PDPage;Ljava/awt/Dimension;)V+80\r\nj  org.apache.pdfbox.pdmodel.PDPage.convertToImage(II)Ljava/awt/image/BufferedImage;+200\r\nj  org.apache.pdfbox.pdmodel.PDPage.convertToImage()Ljava/awt/image/BufferedImage;+6\r\nj  com.otgs.ecom.utils.PdfProcessing.getPageAsImage(I)Ljava/awt/image/BufferedImage;+29\r\nj  com.otgs.ecom.utils.ThumbnailGenerator.getPreviewForPDF([B)[B+21\r\nj  com.omc.ecom.customer.db.iphone.IAttachment.setThumbnail([B)V+59\r\nj  com.omc.ecom.customer.db.iphone.IAttachment.setImage([BZ)V+14\r\nj  com.omc.ecom.customer.db.iphone.IAttachment.setCompressImage([B)V+3\r\nj  com.omc.ecom.service.impl.UploadAttachService.importUploadAttachments(Lcom/otgs/ecom/base/dbaccess/UserInfo;IILcom/oreilly/servlet/MultipartRequest;Ljava/lang/String;)V+727\r\nj  com.otgs.ecom.web.ExpenseReports.Expenses.Attachments.UploadAttachController.uploadImport(Ljavax/servlet/http/HttpServletRequest;Lcom/otgs/ecom/base/dbaccess/UserInfo;II)V+75\r\nj  com.otgs.ecom.web.ExpenseReports.Expenses.Attachments.UploadAttachController.handleRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)Lorg/springframework/web/servlet/ModelAndView;+319\r\nj  org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/lang/Object;)Lorg/springframework/web/servlet/ModelAndView;+6\r\nj  org.springframework.web.servlet.DispatcherServlet.doDispatch(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+279\r\nj  org.springframework.web.servlet.DispatcherServlet.doService(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+231\r\nj  org.springframework.web.servlet.FrameworkServlet.processRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+111\r\nj  org.springframework.web.servlet.FrameworkServlet.doPost(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+3\r\nj  javax.servlet.http.HttpServlet.service(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+139\r\nj  javax.servlet.http.HttpServlet.service(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+30\r\nj  org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+374\r\nj  org.apache.catalina.core.ApplicationFilterChain.doFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+101\r\nj  org.apache.catalina.core.StandardWrapperValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+778\r\nJ  org.apache.catalina.core.StandardContextValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V\r\nj  org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+356\r\nj  org.jboss.web.tomcat.security.JaccContextValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+42\r\nj  org.apache.catalina.core.StandardHostValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+64\r\nj  org.apache.catalina.valves.ErrorReportValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+6\r\nj  org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+35\r\nj  org.apache.catalina.core.StandardEngineValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+42\r\nj  org.apache.catalina.connector.CoyoteAdapter.service(Lorg/apache/coyote/Request;Lorg/apache/coyote/Response;)V+157\r\nJ  org.apache.coyote.ajp.AjpAprProcessor.process(J)Z\r\nj  org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler.process(J)Lorg/apache/tomcat/util/net/AprEndpoint$Handler$SocketState;+39\r\nj  org.apache.tomcat.util.net.AprEndpoint$Worker.run()V+147\r\nj  java.lang.Thread.run()V+11\r\nv  ~StubRoutines::call_stub\r\n\r\n---------------  P R O C E S S  ---------------\r\n\r\nJava Threads: ( => current thread )\r\n  0x68df6400 JavaThread \"RMI RenewClean-[127.0.0.1:1098]\" daemon [_thread_blocked, id=5140, stack(0x6e4f0000,0x6e540000)]\r\n  0x6857a400 JavaThread \"JBoss System Threads(1)-76\" daemon [_thread_blocked, id=2284, stack(0x6b6d0000,0x6b720000)]\r\n  0x6873dc00 JavaThread \"RMI TCP Connection(679)-127.0.0.1\" daemon [_thread_in_native, id=2268, stack(0x6ea40000,0x6ea90000)]\r\n  0x78095800 JavaThread \"RMI TCP Connection(685)-127.0.0.1\" daemon [_thread_in_native, id=4820, stack(0x6e9f0000,0x6ea40000)]\r\n  0x78095400 JavaThread \"RMI TCP Connection(677)-127.0.0.1\" daemon [_thread_in_native, id=2680, stack(0x6e9a0000,0x6e9f0000)]\r\n  0x69d4b400 JavaThread \"RMI TCP Connection(689)-127.0.0.1\" daemon [_thread_in_native, id=5688, stack(0x6e950000,0x6e9a0000)]\r\n  0x69502400 JavaThread \"RMI TCP Connection(682)-127.0.0.1\" daemon [_thread_in_native, id=332, stack(0x6e900000,0x6e950000)]\r\n  0x696e3400 JavaThread \"RMI TCP Connection(683)-127.0.0.1\" daemon [_thread_in_native, id=4372, stack(0x6e8b0000,0x6e900000)]\r\n  0x78043400 JavaThread \"RMI TCP Connection(687)-127.0.0.1\" daemon [_thread_in_native, id=4076, stack(0x6e860000,0x6e8b0000)]\r\n  0x696e3800 JavaThread \"RMI TCP Connection(691)-127.0.0.1\" daemon [_thread_in_native, id=5180, stack(0x6e630000,0x6e680000)]\r\n  0x6af8f400 JavaThread \"RMI TCP Connection(695)-127.0.0.1\" daemon [_thread_in_native, id=3800, stack(0x6e770000,0x6e7c0000)]\r\n  0x687af400 JavaThread \"RMI TCP Connection(693)-127.0.0.1\" daemon [_thread_in_native, id=4972, stack(0x6e720000,0x6e770000)]\r\n  0x78035800 JavaThread \"RMI TCP Connection(694)-127.0.0.1\" daemon [_thread_in_native, id=892, stack(0x6e680000,0x6e6d0000)]\r\n  0x6a628400 JavaThread \"JBoss System Threads(1)-75\" daemon [_thread_blocked, id=2596, stack(0x6e5e0000,0x6e630000)]\r\n  0x69a94800 JavaThread \"JBoss System Threads(1)-73\" daemon [_thread_blocked, id=4920, stack(0x6e540000,0x6e590000)]\r\n  0x69f2b800 JavaThread \"JBoss System Threads(1)-72\" daemon [_thread_blocked, id=4600, stack(0x6e220000,0x6e270000)]\r\n  0x69027400 JavaThread \"JBoss System Threads(1)-71\" daemon [_thread_blocked, id=1684, stack(0x6e0e0000,0x6e130000)]\r\n  0x780de400 JavaThread \"RMI TCP Connection(697)-127.0.0.1\" daemon [_thread_in_native, id=2360, stack(0x6e4a0000,0x6e4f0000)]\r\n  0x6824cc00 JavaThread \"RMI TCP Connection(idle)\" daemon [_thread_blocked, id=5736, stack(0x6e450000,0x6e4a0000)]\r\n  0x69770400 JavaThread \"RMI TCP Connection(idle)\" daemon [_thread_blocked, id=2404, stack(0x6e270000,0x6e2c0000)]\r\n  0x6a9aa800 JavaThread \"JBoss System Threads(1)-70\" daemon [_thread_blocked, id=3288, stack(0x6e180000,0x6e1d0000)]\r\n  0x685f1800 JavaThread \"JBoss System Threads(1)-69\" daemon [_thread_blocked, id=5460, stack(0x6e1d0000,0x6e220000)]\r\n  0x68246800 JavaThread \"JBoss System Threads(1)-68\" daemon [_thread_blocked, id=4708, stack(0x6e130000,0x6e180000)]\r\n  0x68ba2800 JavaThread \"RMI TCP Connection(696)-127.0.0.1\" daemon [_thread_in_native, id=3420, stack(0x6e6d0000,0x6e720000)]\r\n  0x69762000 JavaThread \"ajp-127.0.0.1-8009-23\" daemon [_thread_blocked, id=3120, stack(0x6dff0000,0x6e040000)]\r\n  0x66d20400 JavaThread \"ajp-127.0.0.1-8009-22\" daemon [_thread_blocked, id=5444, stack(0x6dfa0000,0x6dff0000)]\r\n  0x6898a800 JavaThread \"EsamApiServer-3114\" [_thread_in_native, id=1676, stack(0x6e400000,0x6e450000)]\r\n  0x68875c00 JavaThread \"EsamApiServer-2805\" [_thread_in_native, id=4384, stack(0x6e3b0000,0x6e400000)]\r\n  0x680c6800 JavaThread \"EsamApiServer-2781\" [_thread_in_native, id=2788, stack(0x6e360000,0x6e3b0000)]\r\n  0x68526400 JavaThread \"EsamApiServer-2780\" [_thread_in_native, id=5592, stack(0x6e310000,0x6e360000)]\r\n  0x68351400 JavaThread \"EsamApiServer-2779\" [_thread_in_native, id=5888, stack(0x6e2c0000,0x6e310000)]\r\n  0x6a247400 JavaThread \"MultiThreadedHttpConnectionManager cleanup\" daemon [_thread_blocked, id=2484, stack(0x6da00000,0x6da50000)]\r\n  0x68921800 JavaThread \"ajp-127.0.0.1-8009-21\" daemon [_thread_blocked, id=4896, stack(0x6e090000,0x6e0e0000)]\r\n  0x6a9a2400 JavaThread \"ajp-127.0.0.1-8009-20\" daemon [_thread_blocked, id=4792, stack(0x6e040000,0x6e090000)]\r\n  0x68969c00 JavaThread \"Timer-6\" [_thread_blocked, id=4588, stack(0x6daf0000,0x6db40000)]\r\n  0x68ca6400 JavaThread \"ajp-127.0.0.1-8009-19\" daemon [_thread_blocked, id=6048, stack(0x6daa0000,0x6daf0000)]\r\n  0x692b1400 JavaThread \"ajp-127.0.0.1-8009-18\" daemon [_thread_in_native, id=136, stack(0x6da50000,0x6daa0000)]\r\n  0x7948b400 JavaThread \"EsamApiServer-1832\" [_thread_in_native, id=4172, stack(0x6d9b0000,0x6da00000)]\r\n  0x67196400 JavaThread \"EsamApiServer-1065\" [_thread_in_native, id=5644, stack(0x6d7c0000,0x6d810000)]\r\n  0x6982b400 JavaThread \"EsamApiServer-1064\" [_thread_in_native, id=312, stack(0x6d750000,0x6d7a0000)]\r\n  0x68e54400 JavaThread \"EsamApiServer-4998\" [_thread_in_native, id=4760, stack(0x6d5a0000,0x6d5f0000)]\r\n  0x686fd400 JavaThread \"EsamApiServer-4988\" [_thread_in_native, id=2272, stack(0x6b680000,0x6b6d0000)]\r\n  0x6986c400 JavaThread \"Thread-45\" [_thread_in_native, id=3988, stack(0x6d670000,0x6d6c0000)]\r\n  0x68edd400 JavaThread \"Connection listener 2\" daemon [_thread_in_native, id=3652, stack(0x6d620000,0x6d670000)]\r\n  0x6909b800 JavaThread \"AWT-Windows\" daemon [_thread_in_native, id=1812, stack(0x6d550000,0x6d5a0000)]\r\n  0x69380400 JavaThread \"Java2D Disposer\" daemon [_thread_blocked, id=4676, stack(0x6d350000,0x6d3a0000)]\r\n  0x69e4d400 JavaThread \"EsamApiServer-4933\" [_thread_in_native, id=5236, stack(0x6d1a0000,0x6d1f0000)]\r\n  0x69ba0800 JavaThread \"EsamApiServer-4931\" [_thread_in_native, id=3156, stack(0x6d0f0000,0x6d140000)]\r\n  0x69c7c400 JavaThread \"RMI Scheduler(0)\" daemon [_thread_blocked, id=3680, stack(0x6d0a0000,0x6d0f0000)]\r\n  0x6a67f400 JavaThread \"OOB-8,127.0.0.1:4869\" [_thread_blocked, id=4468, stack(0x6b950000,0x6b9a0000)]\r\n  0x6908a400 JavaThread \"EsamApiServer-4904\" [_thread_in_native, id=4040, stack(0x6b900000,0x6b950000)]\r\n  0x69fadc00 JavaThread \"OOB-7,127.0.0.1:4869\" [_thread_blocked, id=4936, stack(0x6b8b0000,0x6b900000)]\r\n  0x671a0400 JavaThread \"OOB-6,127.0.0.1:4869\" [_thread_blocked, id=4568, stack(0x6b860000,0x6b8b0000)]\r\n  0x69436800 JavaThread \"OOB-5,127.0.0.1:4869\" [_thread_blocked, id=4152, stack(0x6b810000,0x6b860000)]\r\n  0x6a18e800 JavaThread \"ajp-127.0.0.1-8009-17\" daemon [_thread_blocked, id=5096, stack(0x6d150000,0x6d1a0000)]\r\n  0x68db8400 JavaThread \"ajp-127.0.0.1-8009-16\" daemon [_thread_blocked, id=4100, stack(0x6bbb0000,0x6bc00000)]\r\n  0x699a9400 JavaThread \"ajp-127.0.0.1-8009-15\" daemon [_thread_blocked, id=5632, stack(0x6bb60000,0x6bbb0000)]\r\n  0x69ac1400 JavaThread \"ajp-127.0.0.1-8009-14\" daemon [_thread_blocked, id=4212, stack(0x6d000000,0x6d050000)]\r\n  0x6931e400 JavaThread \"ajp-127.0.0.1-8009-13\" daemon [_thread_blocked, id=1916, stack(0x6cfb0000,0x6d000000)]\r\n  0x68c5f400 JavaThread \"ajp-127.0.0.1-8009-12\" daemon [_thread_blocked, id=5220, stack(0x6cf60000,0x6cfb0000)]\r\n=>0x6a057400 JavaThread \"ajp-127.0.0.1-8009-11\" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)]\r\n  0x68cf9400 JavaThread \"ajp-127.0.0.1-8009-10\" daemon [_thread_blocked, id=4776, stack(0x6cec0000,0x6cf10000)]\r\n  0x66f2a400 JavaThread \"ajp-127.0.0.1-8009-9\" daemon [_thread_blocked, id=5972, stack(0x6ce70000,0x6cec0000)]\r\n  0x68430400 JavaThread \"ajp-127.0.0.1-8009-8\" daemon [_thread_in_native, id=3332, stack(0x6ce20000,0x6ce70000)]\r\n  0x689cb400 JavaThread \"ajp-127.0.0.1-8009-7\" daemon [_thread_blocked, id=1904, stack(0x6cdd0000,0x6ce20000)]\r\n  0x686ed800 JavaThread \"ajp-127.0.0.1-8009-6\" daemon [_thread_blocked, id=348, stack(0x6cd80000,0x6cdd0000)]\r\n  0x6957b400 JavaThread \"ajp-127.0.0.1-8009-5\" daemon [_thread_blocked, id=3424, stack(0x6cd30000,0x6cd80000)]\r\n  0x65b20800 JavaThread \"ajp-127.0.0.1-8009-4\" daemon [_thread_blocked, id=5988, stack(0x6cce0000,0x6cd30000)]\r\n  0x69c4bc00 JavaThread \"ajp-127.0.0.1-8009-3\" daemon [_thread_blocked, id=5904, stack(0x6cc90000,0x6cce0000)]\r\n  0x69c4b400 JavaThread \"ajp-127.0.0.1-8009-2\" daemon [_thread_blocked, id=4428, stack(0x6bc30000,0x6bc80000)]\r\n  0x6a706400 JavaThread \"ajp-127.0.0.1-8009-1\" daemon [_thread_blocked, id=5124, stack(0x65ee0000,0x65f30000)]\r\n  0x6604d400 JavaThread \"ajp-127.0.0.1-8009-Acceptor-0\" daemon [_thread_in_native, id=784, stack(0x6cc40000,0x6cc90000)]\r\n  0x6609e400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-7\" daemon [_thread_blocked, id=4596, stack(0x6cbf0000,0x6cc40000)]\r\n  0x68699400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-6\" daemon [_thread_blocked, id=5488, stack(0x6cba0000,0x6cbf0000)]\r\n  0x66e5f000 JavaThread \"ajp-127.0.0.1-8009-CometPoller-5\" daemon [_thread_blocked, id=3932, stack(0x6cb50000,0x6cba0000)]\r\n  0x69790800 JavaThread \"ajp-127.0.0.1-8009-CometPoller-4\" daemon [_thread_blocked, id=4540, stack(0x6cb00000,0x6cb50000)]\r\n  0x68ff2c00 JavaThread \"ajp-127.0.0.1-8009-CometPoller-3\" daemon [_thread_blocked, id=6116, stack(0x6cab0000,0x6cb00000)]\r\n  0x69d74400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-2\" daemon [_thread_blocked, id=1412, stack(0x6ca60000,0x6cab0000)]\r\n  0x6a766400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-1\" daemon [_thread_blocked, id=5876, stack(0x6ca10000,0x6ca60000)]\r\n  0x69421400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-0\" daemon [_thread_blocked, id=1304, stack(0x6c9c0000,0x6ca10000)]\r\n  0x68836800 JavaThread \"ajp-127.0.0.1-8009-Poller-7\" daemon [_thread_in_native, id=3208, stack(0x6c970000,0x6c9c0000)]\r\n  0x68a40400 JavaThread \"ajp-127.0.0.1-8009-Poller-6\" daemon [_thread_in_native, id=2800, stack(0x6c920000,0x6c970000)]\r\n  0x68aa1400 JavaThread \"ajp-127.0.0.1-8009-Poller-5\" daemon [_thread_in_native, id=1776, stack(0x6c8d0000,0x6c920000)]\r\n  0x682f7800 JavaThread \"ajp-127.0.0.1-8009-Poller-4\" daemon [_thread_in_native, id=488, stack(0x6c480000,0x6c4d0000)]\r\n  0x66e64c00 JavaThread \"ajp-127.0.0.1-8009-Poller-3\" daemon [_thread_in_native, id=1800, stack(0x6c430000,0x6c480000)]\r\n  0x6a211400 JavaThread \"ajp-127.0.0.1-8009-Poller-2\" daemon [_thread_in_native, id=5668, stack(0x6c3e0000,0x6c430000)]\r\n  0x68bda400 JavaThread \"ajp-127.0.0.1-8009-Poller-1\" daemon [_thread_in_native, id=780, stack(0x6c390000,0x6c3e0000)]\r\n  0x6a20c400 JavaThread \"ajp-127.0.0.1-8009-Poller-0\" daemon [_thread_in_native, id=4976, stack(0x6c340000,0x6c390000)]\r\n  0x66037400 JavaThread \"http-127.0.0.1-8080-Acceptor-0\" daemon [_thread_in_native, id=964, stack(0x6c2f0000,0x6c340000)]\r\n  0x6921d400 JavaThread \"http-127.0.0.1-8080-Sendfile-0\" daemon [_thread_blocked, id=5556, stack(0x6c2a0000,0x6c2f0000)]\r\n  0x686ca800 JavaThread \"http-127.0.0.1-8080-CometPoller-7\" daemon [_thread_blocked, id=4440, stack(0x6c250000,0x6c2a0000)]\r\n  0x68c96400 JavaThread \"http-127.0.0.1-8080-CometPoller-6\" daemon [_thread_blocked, id=2024, stack(0x6c200000,0x6c250000)]\r\n  0x69f98800 JavaThread \"http-127.0.0.1-8080-CometPoller-5\" daemon [_thread_blocked, id=5788, stack(0x6c1b0000,0x6c200000)]\r\n  0x66ff9400 JavaThread \"http-127.0.0.1-8080-CometPoller-4\" daemon [_thread_blocked, id=4116, stack(0x6c160000,0x6c1b0000)]\r\n  0x68910400 JavaThread \"http-127.0.0.1-8080-CometPoller-3\" daemon [_thread_blocked, id=3884, stack(0x6c110000,0x6c160000)]\r\n  0x6a4f9400 JavaThread \"http-127.0.0.1-8080-CometPoller-2\" daemon [_thread_blocked, id=1052, stack(0x6c0c0000,0x6c110000)]\r\n  0x670abc00 JavaThread \"http-127.0.0.1-8080-CometPoller-1\" daemon [_thread_blocked, id=2892, stack(0x6c070000,0x6c0c0000)]\r\n  0x688b7000 JavaThread \"http-127.0.0.1-8080-CometPoller-0\" daemon [_thread_blocked, id=5928, stack(0x6c020000,0x6c070000)]\r\n  0x6a308400 JavaThread \"http-127.0.0.1-8080-Poller-7\" daemon [_thread_blocked, id=5892, stack(0x6bfd0000,0x6c020000)]\r\n  0x6a479400 JavaThread \"http-127.0.0.1-8080-Poller-6\" daemon [_thread_blocked, id=4064, stack(0x6bf80000,0x6bfd0000)]\r\n  0x687dd800 JavaThread \"http-127.0.0.1-8080-Poller-5\" daemon [_thread_blocked, id=1816, stack(0x6bd30000,0x6bd80000)]\r\n  0x68f9a400 JavaThread \"http-127.0.0.1-8080-Poller-4\" daemon [_thread_blocked, id=5380, stack(0x6bce0000,0x6bd30000)]\r\n  0x6a46f400 JavaThread \"http-127.0.0.1-8080-Poller-3\" daemon [_thread_blocked, id=4696, stack(0x6bc90000,0x6bce0000)]\r\n  0x69308800 JavaThread \"http-127.0.0.1-8080-Poller-2\" daemon [_thread_blocked, id=3072, stack(0x6bb10000,0x6bb60000)]\r\n  0x6a67fc00 JavaThread \"http-127.0.0.1-8080-Poller-1\" daemon [_thread_blocked, id=3836, stack(0x6bac0000,0x6bb10000)]\r\n  0x6a46fc00 JavaThread \"http-127.0.0.1-8080-Poller-0\" daemon [_thread_blocked, id=5228, stack(0x6ba70000,0x6bac0000)]\r\n  0x6a316800 JavaThread \"Thread-5\" [_thread_blocked, id=5192, stack(0x6ba20000,0x6ba70000)]\r\n  0x6a50a000 JavaThread \"JBossLifeThread\" [_thread_blocked, id=3444, stack(0x6b9d0000,0x6ba20000)]\r\n  0x66fe1400 JavaThread \"EsamApiServer\" [_thread_in_native, id=4572, stack(0x6b7c0000,0x6b810000)]\r\n  0x68b4c400 JavaThread \"Thread-25\" [_thread_blocked, id=5796, stack(0x6b770000,0x6b7c0000)]\r\n  0x685c0800 JavaThread \"Thread-24\" [_thread_blocked, id=4260, stack(0x6b720000,0x6b770000)]\r\n  0x693b5800 JavaThread \"Thread-21\" [_thread_blocked, id=2768, stack(0x6b630000,0x6b680000)]\r\n  0x694ba400 JavaThread \"Timer-5\" [_thread_blocked, id=4220, stack(0x6b5e0000,0x6b630000)]\r\n  0x6a0bb800 JavaThread \"Thread-19\" [_thread_blocked, id=5752, stack(0x6b590000,0x6b5e0000)]\r\n  0x697cbc00 JavaThread \"Thread-18\" [_thread_blocked, id=132, stack(0x6b540000,0x6b590000)]\r\n  0x68976400 JavaThread \"OOB-4,127.0.0.1:4869\" [_thread_blocked, id=3432, stack(0x6b4f0000,0x6b540000)]\r\n  0x68aafc00 JavaThread \"OOB-3,127.0.0.1:4869\" [_thread_blocked, id=5916, stack(0x6b4a0000,0x6b4f0000)]\r\n  0x66e81400 JavaThread \"ConnectionValidator\" daemon [_thread_blocked, id=3044, stack(0x6b450000,0x6b4a0000)]\r\n  0x69007c00 JavaThread \"IdleRemover\" daemon [_thread_blocked, id=1760, stack(0x6b400000,0x6b450000)]\r\n  0x69f33400 JavaThread \"Thread-17\" [_thread_blocked, id=2040, stack(0x6b3b0000,0x6b400000)]\r\n  0x68d85400 JavaThread \"PipelineJobScheduler\" [_thread_blocked, id=2560, stack(0x6b360000,0x6b3b0000)]\r\n  0x69fc1c00 JavaThread \"Timer-4,127.0.0.1:4869\" daemon [_thread_blocked, id=1944, stack(0x6b310000,0x6b360000)]\r\n  0x69d20c00 JavaThread \"Timer-3,127.0.0.1:4869\" daemon [_thread_blocked, id=3416, stack(0x6b2c0000,0x6b310000)]\r\n  0x68f63c00 JavaThread \"OOB-2,127.0.0.1:4869\" [_thread_blocked, id=5076, stack(0x6b270000,0x6b2c0000)]\r\n  0x68d6dc00 JavaThread \"OOB-1,127.0.0.1:4869\" [_thread_blocked, id=1732, stack(0x6b220000,0x6b270000)]\r\n  0x69efb400 JavaThread \"Timer-2,127.0.0.1:4869\" daemon [_thread_blocked, id=5072, stack(0x6b1d0000,0x6b220000)]\r\n  0x68f8bc00 JavaThread \"UDP mcast,127.0.0.1:4869\" [_thread_in_native, id=812, stack(0x6b180000,0x6b1d0000)]\r\n  0x69f35c00 JavaThread \"UDP ucast,127.0.0.1:4869\" [_thread_in_native, id=4092, stack(0x6b130000,0x6b180000)]\r\n  0x68845800 JavaThread \"FD_SOCK server socket acceptor,null\" daemon [_thread_in_native, id=3008, stack(0x6b0e0000,0x6b130000)]\r\n  0x69fcfc00 JavaThread \"Timer-1,127.0.0.1:4869\" daemon [_thread_blocked, id=4852, stack(0x6b090000,0x6b0e0000)]\r\n  0x68126400 JavaThread \"Timer-4\" [_thread_blocked, id=5760, stack(0x67eb0000,0x67f00000)]\r\n  0x696eb400 JavaThread \"Timer-3\" [_thread_blocked, id=2996, stack(0x67e60000,0x67eb0000)]\r\n  0x692b5400 JavaThread \"Timer-2\" [_thread_blocked, id=5680, stack(0x67e10000,0x67e60000)]\r\n  0x69684400 JavaThread \"reaper:handler\" daemon [_thread_blocked, id=384, stack(0x67dc0000,0x67e10000)]\r\n  0x68b14400 JavaThread \"reaper:user\" daemon [_thread_blocked, id=4636, stack(0x67d70000,0x67dc0000)]\r\n  0x691d1800 JavaThread \"reaper:template\" daemon [_thread_blocked, id=4264, stack(0x67d20000,0x67d70000)]\r\n  0x68f8b400 JavaThread \"reaper:config\" daemon [_thread_blocked, id=2852, stack(0x67cd0000,0x67d20000)]\r\n  0x68ead400 JavaThread \"org.webmacro.util.ThreadScheduler\" daemon [_thread_blocked, id=2148, stack(0x67c80000,0x67cd0000)]\r\n  0x68a62400 JavaThread \"UILServerILService Accept Thread\" [_thread_in_native, id=4968, stack(0x67c30000,0x67c80000)]\r\n  0x65cfb400 JavaThread \"TimeoutFactory-0\" daemon [_thread_blocked, id=4396, stack(0x67be0000,0x67c30000)]\r\n  0x68b15800 JavaThread \"JCA PoolFiller\" [_thread_blocked, id=2972, stack(0x67b90000,0x67be0000)]\r\n  0x68761400 JavaThread \"Timer-1\" daemon [_thread_blocked, id=1552, stack(0x67b40000,0x67b90000)]\r\n  0x66d8a400 JavaThread \"HSQLDB Timer @1826ac5\" daemon [_thread_blocked, id=2744, stack(0x679f0000,0x67a40000)]\r\n  0x6706e400 JavaThread \"DefaultQuartzScheduler_QuartzSchedulerThread\" [_thread_blocked, id=3308, stack(0x679a0000,0x679f0000)]\r\n  0x689b3400 JavaThread \"DefaultQuartzScheduler_Worker-9\" [_thread_blocked, id=3868, stack(0x67950000,0x679a0000)]\r\n  0x685a3400 JavaThread \"DefaultQuartzScheduler_Worker-8\" [_thread_blocked, id=680, stack(0x67900000,0x67950000)]\r\n  0x683af800 JavaThread \"DefaultQuartzScheduler_Worker-7\" [_thread_blocked, id=5336, stack(0x678b0000,0x67900000)]\r\n  0x68433800 JavaThread \"DefaultQuartzScheduler_Worker-6\" [_thread_blocked, id=3084, stack(0x677d0000,0x67820000)]\r\n  0x68751400 JavaThread \"DefaultQuartzScheduler_Worker-5\" [_thread_blocked, id=2676, stack(0x67780000,0x677d0000)]\r\n  0x68568800 JavaThread \"DefaultQuartzScheduler_Worker-4\" [_thread_blocked, id=3040, stack(0x67730000,0x67780000)]\r\n  0x66396400 JavaThread \"DefaultQuartzScheduler_Worker-3\" [_thread_blocked, id=1920, stack(0x676e0000,0x67730000)]\r\n  0x68601000 JavaThread \"DefaultQuartzScheduler_Worker-2\" [_thread_blocked, id=5676, stack(0x67690000,0x676e0000)]\r\n  0x69126400 JavaThread \"DefaultQuartzScheduler_Worker-1\" [_thread_blocked, id=1628, stack(0x67640000,0x67690000)]\r\n  0x68949800 JavaThread \"DefaultQuartzScheduler_Worker-0\" [_thread_blocked, id=2824, stack(0x675f0000,0x67640000)]\r\n  0x66e21800 JavaThread \"WorkManager(2)-1\" daemon [_thread_blocked, id=148, stack(0x675a0000,0x675f0000)]\r\n  0x69622400 JavaThread \"Thread-6\" daemon [_thread_blocked, id=2700, stack(0x67550000,0x675a0000)]\r\n  0x683b7400 JavaThread \"JBossMQ Cache Reference Softner\" daemon [_thread_blocked, id=2792, stack(0x67860000,0x678b0000)]\r\n  0x671d6400 JavaThread \"ContainerBackgroundProcessor[StandardEngine[jboss.web]]\" daemon [_thread_blocked, id=5196, stack(0x67500000,0x67550000)]\r\n  0x66f58400 JavaThread \"SubscriptionWatchDog\" [_thread_blocked, id=2776, stack(0x66a00000,0x66a50000)]\r\n  0x66d54c00 JavaThread \"ServerSocketRefresh\" daemon [_thread_blocked, id=3440, stack(0x669b0000,0x66a00000)]\r\n  0x66d1ac00 JavaThread \"AcceptorThread#0:3873\" [_thread_in_native, id=292, stack(0x66960000,0x669b0000)]\r\n  0x66da3c00 JavaThread \"ServerSocketRefresh\" daemon [_thread_blocked, id=4752, stack(0x66910000,0x66960000)]\r\n  0x662bb400 JavaThread \"AcceptorThread#0:4446\" [_thread_in_native, id=2764, stack(0x668c0000,0x66910000)]\r\n  0x66146800 JavaThread \"PooledInvokerAcceptor#0-4445\" [_thread_in_native, id=2572, stack(0x66870000,0x668c0000)]\r\n  0x66e88c00 JavaThread \"RMI TCP Accept-4444\" daemon [_thread_in_native, id=4312, stack(0x66820000,0x66870000)]\r\n  0x66e88400 JavaThread \"Listener:4844\" daemon [_thread_in_native, id=1896, stack(0x667d0000,0x66820000)]\r\n  0x66e72400 JavaThread \"Thread-4\" daemon [_thread_blocked, id=1084, stack(0x66780000,0x667d0000)]\r\n  0x66d09800 JavaThread \"Thread-3\" daemon [_thread_blocked, id=2872, stack(0x66730000,0x66780000)]\r\n  0x66c09400 JavaThread \"Listener:4840\" daemon [_thread_in_native, id=1948, stack(0x666e0000,0x66730000)]\r\n  0x660b7400 JavaThread \"JBoss System Threads(1)-2\" daemon [_thread_in_native, id=5172, stack(0x66690000,0x666e0000)]\r\n  0x662f2800 JavaThread \"GC Daemon\" daemon [_thread_blocked, id=4436, stack(0x66640000,0x66690000)]\r\n  0x662f2000 JavaThread \"RMI Reaper\" [_thread_blocked, id=3888, stack(0x665f0000,0x66640000)]\r\n  0x66eabc00 JavaThread \"RMI TCP Accept-1098\" daemon [_thread_in_native, id=1528, stack(0x665a0000,0x665f0000)]\r\n  0x661cfc00 JavaThread \"JBoss System Threads(1)-1\" daemon [_thread_in_native, id=3024, stack(0x66550000,0x665a0000)]\r\n  0x66dd6800 JavaThread \"ScannerThread\" daemon [_thread_blocked, id=3088, stack(0x66460000,0x664b0000)]\r\n  0x66c12400 JavaThread \"Timer-0\" daemon [_thread_blocked, id=5260, stack(0x66410000,0x66460000)]\r\n  0x002a8c00 JavaThread \"DestroyJavaVM\" [_thread_blocked, id=2228, stack(0x00640000,0x00690000)]\r\n  0x65b15800 JavaThread \"Low Memory Detector\" daemon [_thread_blocked, id=4988, stack(0x65e40000,0x65e90000)]\r\n  0x65b13400 JavaThread \"CompilerThread1\" daemon [_thread_blocked, id=1408, stack(0x65df0000,0x65e40000)]\r\n  0x65b0d800 JavaThread \"CompilerThread0\" daemon [_thread_blocked, id=3304, stack(0x65da0000,0x65df0000)]\r\n  0x65b0c000 JavaThread \"Attach Listener\" daemon [_thread_blocked, id=1480, stack(0x65d50000,0x65da0000)]\r\n  0x65b0a800 JavaThread \"Surrogate Locker Thread (CMS)\" daemon [_thread_blocked, id=1456, stack(0x65d00000,0x65d50000)]\r\n  0x623ad400 JavaThread \"Finalizer\" daemon [_thread_blocked, id=1320, stack(0x65ab0000,0x65b00000)]\r\n  0x623abc00 JavaThread \"Reference Handler\" daemon [_thread_blocked, id=2780, stack(0x65a60000,0x65ab0000)]\r\n\r\nOther Threads:\r\n  0x623a9400 VMThread [stack: 0x65a10000,0x65a60000] [id=5344]\r\n  0x65b17800 WatcherThread [stack: 0x65e90000,0x65ee0000] [id=456]\r\n\r\nVM state:not at safepoint (normal execution)\r\n\r\nVM Mutex/Monitor currently owned by a thread: None\r\n\r\nHeap\r\n par new generation   total 29504K, used 10015K [0x037f0000, 0x057f0000, 0x057f0000)\r\n  eden space 26240K,  26% used [0x037f0000, 0x03ed3a50, 0x05190000)\r\n  from space 3264K,  90% used [0x054c0000, 0x057a41e0, 0x057f0000)\r\n  to   space 3264K,   0% used [0x05190000, 0x05190000, 0x054c0000)\r\n concurrent mark-sweep generation total 991232K, used 569428K [0x057f0000, 0x41ff0000, 0x41ff0000)\r\n concurrent-mark-sweep perm gen total 195336K, used 116938K [0x41ff0000, 0x4deb2000, 0x61ff0000)\r\n\r\nDynamic libraries:\r\n0x00400000 - 0x00424000 \tC:\\Java\\jdk1.6.0_18\\bin\\java.exe\r\n0x7c800000 - 0x7c8c3000 \tC:\\WINDOWS\\system32\\ntdll.dll\r\n0x77e40000 - 0x77f42000 \tC:\\WINDOWS\\system32\\kernel32.dll\r\n0x7d1e0000 - 0x7d27c000 \tC:\\WINDOWS\\system32\\ADVAPI32.dll\r\n0x77c50000 - 0x77cf0000 \tC:\\WINDOWS\\system32\\RPCRT4.dll\r\n0x76f50000 - 0x76f63000 \tC:\\WINDOWS\\system32\\Secur32.dll\r\n0x7c340000 - 0x7c396000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\msvcr71.dll\r\n0x6db70000 - 0x6df9b000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\server\\jvm.dll\r\n0x77380000 - 0x77411000 \tC:\\WINDOWS\\system32\\USER32.dll\r\n0x77c00000 - 0x77c49000 \tC:\\WINDOWS\\system32\\GDI32.dll\r\n0x76aa0000 - 0x76acd000 \tC:\\WINDOWS\\system32\\WINMM.dll\r\n0x76290000 - 0x762ad000 \tC:\\WINDOWS\\system32\\IMM32.DLL\r\n0x71bc0000 - 0x71bc8000 \tC:\\WINDOWS\\system32\\rdpsnd.dll\r\n0x771f0000 - 0x77201000 \tC:\\WINDOWS\\system32\\WINSTA.dll\r\n0x77ba0000 - 0x77bfa000 \tC:\\WINDOWS\\system32\\msvcrt.dll\r\n0x71c40000 - 0x71c97000 \tC:\\WINDOWS\\system32\\NETAPI32.dll\r\n0x76b70000 - 0x76b7b000 \tC:\\WINDOWS\\system32\\PSAPI.DLL\r\n0x6d860000 - 0x6d86c000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\verify.dll\r\n0x6d3e0000 - 0x6d3ff000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\java.dll\r\n0x6d340000 - 0x6d348000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\hpi.dll\r\n0x6d8a0000 - 0x6d8af000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\zip.dll\r\n0x6d6c0000 - 0x6d6d3000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\net.dll\r\n0x71c00000 - 0x71c17000 \tC:\\WINDOWS\\system32\\WS2_32.dll\r\n0x71bf0000 - 0x71bf8000 \tC:\\WINDOWS\\system32\\WS2HELP.dll\r\n0x71b20000 - 0x71b61000 \tC:\\WINDOWS\\System32\\mswsock.dll\r\n0x76ed0000 - 0x76efa000 \tC:\\WINDOWS\\system32\\DNSAPI.dll\r\n0x76f70000 - 0x76f77000 \tC:\\WINDOWS\\System32\\winrnr.dll\r\n0x76f10000 - 0x76f3e000 \tC:\\WINDOWS\\system32\\WLDAP32.dll\r\n0x76f80000 - 0x76f85000 \tC:\\WINDOWS\\system32\\rasadhlp.dll\r\n0x6d610000 - 0x6d619000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\management.dll\r\n0x68000000 - 0x68035000 \tC:\\WINDOWS\\system32\\rsaenh.dll\r\n0x7c8d0000 - 0x7d0cf000 \tC:\\WINDOWS\\system32\\SHELL32.dll\r\n0x7d180000 - 0x7d1d2000 \tC:\\WINDOWS\\system32\\SHLWAPI.dll\r\n0x77420000 - 0x77523000 \tC:\\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.3790.4770_x-ww_05FDF087\\comctl32.dll\r\n0x664b0000 - 0x6650a000 \tC:\\WINDOWS\\system32\\hnetcfg.dll\r\n0x71ae0000 - 0x71ae8000 \tC:\\WINDOWS\\System32\\wshtcpip.dll\r\n0x66a50000 - 0x66a6c000 \tC:\\jboss-4.2.3.GA\\bin\\native\\libtcnative-1.dll\r\n0x66a70000 - 0x66a95000 \tC:\\jboss-4.2.3.GA\\bin\\native\\libapr-1.dll\r\n0x66aa0000 - 0x66ba7000 \tC:\\jboss-4.2.3.GA\\bin\\native\\LIBEAY32.dll\r\n0x71bb0000 - 0x71bb9000 \tC:\\WINDOWS\\system32\\WSOCK32.dll\r\n0x66bb0000 - 0x66be2000 \tC:\\jboss-4.2.3.GA\\bin\\native\\SSLEAY32.dll\r\n0x6d6e0000 - 0x6d6e9000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\nio.dll\r\n0x6d840000 - 0x6d848000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\sunmscapi.dll\r\n0x761b0000 - 0x76243000 \tC:\\WINDOWS\\system32\\CRYPT32.dll\r\n0x76190000 - 0x761a2000 \tC:\\WINDOWS\\system32\\MSASN1.dll\r\n0x76cf0000 - 0x76d0a000 \tC:\\WINDOWS\\system32\\iphlpapi.dll\r\n0x76cd0000 - 0x76ce9000 \tC:\\WINDOWS\\system32\\MPRAPI.dll\r\n0x76df0000 - 0x76e24000 \tC:\\WINDOWS\\system32\\ACTIVEDS.dll\r\n0x76dc0000 - 0x76de8000 \tC:\\WINDOWS\\system32\\adsldpc.dll\r\n0x76b80000 - 0x76bae000 \tC:\\WINDOWS\\system32\\credui.dll\r\n0x76a80000 - 0x76a92000 \tC:\\WINDOWS\\system32\\ATL.DLL\r\n0x77670000 - 0x777a9000 \tC:\\WINDOWS\\system32\\ole32.dll\r\n0x7d0e0000 - 0x7d16b000 \tC:\\WINDOWS\\system32\\OLEAUT32.dll\r\n0x76e30000 - 0x76e3c000 \tC:\\WINDOWS\\system32\\rtutils.dll\r\n0x7e020000 - 0x7e02f000 \tC:\\WINDOWS\\system32\\SAMLIB.dll\r\n0x770e0000 - 0x771e8000 \tC:\\WINDOWS\\system32\\SETUPAPI.dll\r\n0x6d7b0000 - 0x6d7b6000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\rmi.dll\r\n0x6d1f0000 - 0x6d33a000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\awt.dll\r\n0x73070000 - 0x73097000 \tC:\\WINDOWS\\system32\\WINSPOOL.DRV\r\n0x6b9a0000 - 0x6b9c4000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\jpeg.dll\r\n0x6d6f0000 - 0x6d744000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\fontmanager.dll\r\n0x6b040000 - 0x6b06f000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\cmm.dll\r\n0x6d500000 - 0x6d523000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\dcpr.dll\r\n0x762b0000 - 0x762f9000 \tC:\\WINDOWS\\system32\\COMDLG32.DLL\r\n\r\nVM Arguments:\r\njvm_args: -Xrs -Djava.library.path=C:\\jboss-4.2.3.GA\\bin\\native;C:\\Perl\\site\\bin;C:\\Perl\\bin;C:\\Program Files\\Support Tools\\;C:\\Program Files\\Windows Resource Kits\\Tools\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0;C:\\GSI-TOOLS\\bin;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\VSShell\\Common7\\IDE\\;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Java\\jdk1.6.0_18\\bin; -Dprogram.name=run.bat -Xms1000m -Xmx1000m -Xrs -XX:PermSize=128m -XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC -XX:+CMSPermGenSweepingEnabled -XX:+CMSClassUnloadingEnabled -XX:-ReduceInitialCardMarks -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -XX:CompileCommand=exclude,net/sf/saxon/event/ReceivingContentHandler,startElement -Djava.endorsed.dirs=C:\\jboss-4.2.3.GA\\lib\\endorsed \r\njava_command: org.jboss.Main\r\nLauncher Type: SUN_STANDARD\r\n\r\nEnvironment Variables:\r\nJAVA_HOME=C:\\Java\\jdk1.6.0_18\r\nPATH=C:\\jboss-4.2.3.GA\\bin\\native;C:\\Perl\\site\\bin;C:\\Perl\\bin;C:\\Program Files\\Support Tools\\;C:\\Program Files\\Windows Resource Kits\\Tools\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0;C:\\GSI-TOOLS\\bin;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\VSShell\\Common7\\IDE\\;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Java\\jdk1.6.0_18\\bin;\r\nOS=Windows_NT\r\nPROCESSOR_IDENTIFIER=x86 Family 16 Model 2 Stepping 3, AuthenticAMD\r\n\r\n\r\n\r\n---------------  S Y S T E M  ---------------\r\n\r\nOS: Windows Server 2003 family Build 3790 Service Pack 2\r\n\r\nCPU:total 2 (4 cores per cpu, 1 threads per core) family 16 model 2 stepping 3, cmov, cx8, fxsr, mmx, sse, sse2, sse3, popcnt, mmxext, 3dnow, 3dnowext, lzcnt, sse4a\r\n\r\nMemory: 4k page, physical 4193500k(1696908k free), swap 6115232k(3935444k free)\r\n\r\nvm_info: Java HotSpot(TM) Server VM (16.0-b13) for windows-x86 JRE (1.6.0_18-b07), built on Dec 17 2009 13:29:37 by \"java_re\" with MS VC++ 7.1 (VS2003)\r\n\r\ntime: Wed Oct 10 16:01:50 2012\r\nelapsed time: 8411 seconds\r\n\r\n",
        "EXCEPTION_ACCESS_VIOLATION in fontmanager.dll When converting the attached PDF to a PNG using PDFImageWriter.writeImage I receive an EXCEPTION_ACCESS_VIOLATION in fontmanager.dll.  This is similar to PDFBOX-780 but using the PDF attached to that issue doesn't produce the error.\r\n\r\nThis error doesn't occur with 1.7 but I do get the warning \"Could not parse predefined CMAP file for 'Adobe-Identity-UCS'\"."
    ],
    [
        "PDFBOX-1436",
        "PDFBOX-490",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-1436",
        "PDFBOX-924",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-1436",
        "PDFBOX-984",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-1436",
        "PDFBOX-1019",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-1436",
        "PDFBOX-1068",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-1436",
        "PDFBOX-1296",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-1466",
        "PDFBOX-539",
        "Rendering of pattern colorspace fails I was trying to print a pdf which was generated by iText v2.1.5. Unfortunately parts of it were printed in white \u2013 the filling color was missing. I could reduce the problem to the attached PDF. When trying to print with e.g. PDocument.silentPrint I get the following info message:\r\n[INFO] [org.apache.pdfbox.pdfviewer.PageDrawer] ColorSpace Pattern doesn't provide a non-stroking color, using white instead!",
        "print to pdf example not working WARNING: java.io.IOException: Not implemented\r\njava.io.IOException: Not implemented\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDPattern.createColorSpace(PDPattern.java:92)\r\n\r\nrepeated multiple times.\r\n\r\nrendered document is missing various content while retaining other\r\n\r\nused survey.pdf "
    ],
    [
        "PDFBOX-1466",
        "PDFBOX-1094",
        "Rendering of pattern colorspace fails I was trying to print a pdf which was generated by iText v2.1.5. Unfortunately parts of it were printed in white \u2013 the filling color was missing. I could reduce the problem to the attached PDF. When trying to print with e.g. PDocument.silentPrint I get the following info message:\r\n[INFO] [org.apache.pdfbox.pdfviewer.PageDrawer] ColorSpace Pattern doesn't provide a non-stroking color, using white instead!",
        "Pattern colorspace support PDFBox doesn't support PDPattern colorspaces"
    ],
    [
        "PDFBOX-1466",
        "PDFBOX-1280",
        "Rendering of pattern colorspace fails I was trying to print a pdf which was generated by iText v2.1.5. Unfortunately parts of it were printed in white \u2013 the filling color was missing. I could reduce the problem to the attached PDF. When trying to print with e.g. PDocument.silentPrint I get the following info message:\r\n[INFO] [org.apache.pdfbox.pdfviewer.PageDrawer] ColorSpace Pattern doesn't provide a non-stroking color, using white instead!",
        "Support for PDPattern \"colorspace\" PDPattern is a special colorspace which provides a shading or a tiling pattern to be used for stroke or fill operations. At least one PDF generator is known to use this on occasion as a means of embedding images into PDFs (Aspose.Words)"
    ],
    [
        "PDFBOX-1481",
        "PDFBOX-1084",
        "Ignore postscript code when parsing a type1 font Some (tex?-) fonts may contain optional postscript code which lead to a NumberFormatException.",
        "java.lang.NumberFormatException when getting PDF text of some PDF file if dup line does not contains font index Get the following exception when getting text of some PDF if dup line does not contains font index (I can send a sample PDF file)\r\njava.lang.NumberFormatException: For input string: \"8#40\"\r\n        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\r\n        at java.lang.Integer.parseInt(Integer.java:458)\r\n        at java.lang.Integer.parseInt(Integer.java:499)\r\n        at org.apache.pdfbox.pdmodel.font.PDType1Font.getEncodingFromFont(PDType1Font.java:341)\r\n        at org.apache.pdfbox.pdmodel.font.PDType1Font.determineEncoding(PDType1Font.java:276)\r\n        at org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:181)\r\n        at org.apache.pdfbox.pdmodel.font.PDSimpleFont.<init>(PDSimpleFont.java:83)\r\n        at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:152)\r\n        at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:108)\r\n        at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)\r\n        at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:243)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n        at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:442)\r\n        at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:366)\r\n        at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:322)\r\n        at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:242)\r\n        at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:255)\r\n\r\nSuggested correction is :\r\nin org.apache.pdfbox.pdmodel.font.PDType1Font.java in method getEncodingFromFont add try/catch block line 341 to avoid java.lang.NumberFormatException if dup line does not contains font index.\r\n"
    ],
    [
        "PDFBOX-1485",
        "PDFBOX-1478",
        "cannt read embedded fonts I am using pdfbox-1.7.1.jar,fontbox-1.7.1.jar,jempbox-1.7.1.jar and commons-logging-1.1.1.jar\r\n\r\nthe problem not in printing it self,\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem \r\n\r\nPlease tell me how can i solve this problem\r\n\r\nThanks ",
        "Problem with printing landscape document I am using pdfbox-1.6.0.jar,fontbox-1.6.0.jar,jempbox-1.6.0.jar and commons-logging-1.1.1.jar\r\n\r\nwhen i want to printing landscape documents It printing as portrait document \r\n\r\nPlease tell me how can i solve this problem\r\n\r\nThanks\r\n"
    ],
    [
        "PDFBOX-1498",
        "PDFBOX-1490",
        "Index Out Of Bounds Exception while reading large PDF Document  I am getting java.lang.IndexOutOfBoundsException while reading large PDF document (800 mb). \r\nBelow is the full stack\r\n\r\nException in thread \"main\" org.apache.pdfbox.exceptions.WrappedIOException\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:243)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1071)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1038)\r\n\tat imageData.AddFooter.main(AddFooter.java:26)\r\nCaused by: java.lang.IndexOutOfBoundsException: Index: 3377, Size: 3377\r\n\tat java.util.ArrayList.RangeCheck(ArrayList.java:547)\r\n\tat java.util.ArrayList.get(ArrayList.java:322)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileOutputStream.write(RandomAccessFileOutputStream.java:106)\r\n\tat java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\r\n\tat java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\r\n\tat java.io.FilterOutputStream.close(FilterOutputStream.java:140)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.parseCOSStream(BaseParser.java:606)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:566)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:187)\r\n\t... 3 more\r\n",
        "pdf page => inline image not converted Some inline images from pdf page are be missed after converting page to image\r\n\r\n\r\nextracts of the logs are:\r\n\r\n{noformat}\r\n[WARN] 2013-01-10 10:45:26,491 [main]\r\norg.apache.pdfbox.util.operator.SetNonStrokingColor - Not supported\r\ncolorspace Indexed within operator scn\r\n[ERROR] 2013-01-10 10:45:26,507 [main]\r\norg.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap -\r\njava.lang.IndexOutOfBoundsException: Index: 12, Size: 12\r\njava.lang.IndexOutOfBoundsException: Index: 12, Size: 12\r\nat java.util.ArrayList.RangeCheck(ArrayList.java:547)\r\nat java.util.ArrayList.get(ArrayList.java:322)\r\nat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\nat\r\norg.apache.pdfbox.io.RandomAccessFileOutputStream.write(RandomAccessFileOutputStream.java:116)\r\nat\r\norg.apache.pdfbox.filter.RunLengthDecodeFilter.decode(RunLengthDecodeFilter.java:92)\r\nat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:279)\r\nat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)\r\nat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:156)\r\nat\r\norg.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:214)\r\nat org.apache.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:468)\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:185)\r\nat org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:83)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\nat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)\r\nat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:757)\r\n.....\r\n[WARN] 2013-01-10 10:45:26,883 [main]\r\norg.apache.pdfbox.pdmodel.graphics.color.PDColorState - Unable to create\r\nthe color instance [0.0, 0.0, 0.0] in color space Indexed{ }; guessing\r\ncolor ...\r\nInterpretating as RGB\r\njava.io.IOException: Not implemented\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.color.PDIndexed.createColorSpace(PDIndexed.java:116)\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.getJavaColorSpace(PDColorSpace.java:85)\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:180)\r\n....\r\n{noformat}\r\n\r\nFull debug log messages are available under :  http://pastebin.com/iMJS7guS\r\nThe converted image can be seen under http://postimage.org/image/kl0hfrk0b/\r\n\r\n\r\nIf more information is required, please let me know!\r\nOutput from \"WriteDecodedDoc\" not possible because\r\n\"java.lang.IndexOutOfBoundsException: Index: 12, Size: 12\" has been\r\nthrown...\r\n\r\n\r\nBest Regards,\r\nSascha"
    ],
    [
        "PDFBOX-1506",
        "PDFBOX-833",
        "Incorrect visualization of PDF document via PageDrawer I tried to render page of my document via PageDrawer using method:\r\n\r\ndrawer.drawPage(g, page, drawDimension);\r\n\r\nAnd got incorrect visualization of characters (see attachment), but if I use PDFTextStripperByArea, it extracts correct chars, problems in fonts.",
        "Wrong encoding with Type1C font when specific encoding is defined The Type1C font implementation overwrites the encoding() method of PDFont base class. This results in a lookup of codes to characters as defined in the font.\r\nHowever if an encoding is explicitly given (like WinAnsiEncoding) this leads to wrong results if encoding codes do not match glyph codes.\r\nIn a test document (which unfortunately I cannot make public - an article from Elsevier) a Type1C font is embedded which defines a copyright sign at glyph position 259. The encoding is defines as WinAnsiEncoding. Text characters are defined corresponding to the WinAnsiEncoding. In case of the copyright sign it is 0xa9 (169) where the font has glyph 'quotesingle' defined.\r\nSince currently I have no other test cases I implemented following workaround for WinAnsiEncoding (which might be relaxed to other PDF encodings as well:\r\nin PDType1CFont.encode() I start with:\r\n\r\nif ( getEncoding() instanceof WinAnsiEncoding )\r\n  // use PDFont encoding\r\n  return super.encode( bytes, offset, length );\r\n\r\nThis resolves the encoding problems for text extraction."
    ],
    [
        "PDFBOX-1516",
        "PDFBOX-1490",
        "PDFPagePanel not Working When i run this code i get a long list of exception and i dont know why.\r\n\r\ntry{\r\n            \r\n            PDDocument pd=PDDocument.load(new File(\"Data/BookShelf/AVI/DEFAULT/apa_editorial_style.pdf\"));\r\n            List allPages = pd.getDocumentCatalog().getAllPages(); \r\n            System.out.println(\"Number of Pages :\"+pd.getNumberOfPages());\r\n            PDFPagePanel p=new PDFPagePanel();\r\n            PDPage firstPage = null;\r\n            if(allPages.size()>0){\r\n                 firstPage = (PDPage)allPages.get(0);\r\n                 p.setPage(firstPage);\r\n                 read.add(p); // read is a JPanel\r\n                 jScrollPane1.setViewportView(p);\r\n                 pd.close();\r\n            }\r\n        }\r\n        catch(Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\n\r\n\r\nPlease help me out .........\r\n",
        "pdf page => inline image not converted Some inline images from pdf page are be missed after converting page to image\r\n\r\n\r\nextracts of the logs are:\r\n\r\n{noformat}\r\n[WARN] 2013-01-10 10:45:26,491 [main]\r\norg.apache.pdfbox.util.operator.SetNonStrokingColor - Not supported\r\ncolorspace Indexed within operator scn\r\n[ERROR] 2013-01-10 10:45:26,507 [main]\r\norg.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap -\r\njava.lang.IndexOutOfBoundsException: Index: 12, Size: 12\r\njava.lang.IndexOutOfBoundsException: Index: 12, Size: 12\r\nat java.util.ArrayList.RangeCheck(ArrayList.java:547)\r\nat java.util.ArrayList.get(ArrayList.java:322)\r\nat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\nat\r\norg.apache.pdfbox.io.RandomAccessFileOutputStream.write(RandomAccessFileOutputStream.java:116)\r\nat\r\norg.apache.pdfbox.filter.RunLengthDecodeFilter.decode(RunLengthDecodeFilter.java:92)\r\nat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:279)\r\nat org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)\r\nat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:156)\r\nat\r\norg.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:214)\r\nat org.apache.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:468)\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:185)\r\nat org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:83)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\nat\r\norg.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\nat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)\r\nat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:757)\r\n.....\r\n[WARN] 2013-01-10 10:45:26,883 [main]\r\norg.apache.pdfbox.pdmodel.graphics.color.PDColorState - Unable to create\r\nthe color instance [0.0, 0.0, 0.0] in color space Indexed{ }; guessing\r\ncolor ...\r\nInterpretating as RGB\r\njava.io.IOException: Not implemented\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.color.PDIndexed.createColorSpace(PDIndexed.java:116)\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.getJavaColorSpace(PDColorSpace.java:85)\r\nat\r\norg.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:180)\r\n....\r\n{noformat}\r\n\r\nFull debug log messages are available under :  http://pastebin.com/iMJS7guS\r\nThe converted image can be seen under http://postimage.org/image/kl0hfrk0b/\r\n\r\n\r\nIf more information is required, please let me know!\r\nOutput from \"WriteDecodedDoc\" not possible because\r\n\"java.lang.IndexOutOfBoundsException: Index: 12, Size: 12\" has been\r\nthrown...\r\n\r\n\r\nBest Regards,\r\nSascha"
    ],
    [
        "PDFBOX-1516",
        "PDFBOX-1498",
        "PDFPagePanel not Working When i run this code i get a long list of exception and i dont know why.\r\n\r\ntry{\r\n            \r\n            PDDocument pd=PDDocument.load(new File(\"Data/BookShelf/AVI/DEFAULT/apa_editorial_style.pdf\"));\r\n            List allPages = pd.getDocumentCatalog().getAllPages(); \r\n            System.out.println(\"Number of Pages :\"+pd.getNumberOfPages());\r\n            PDFPagePanel p=new PDFPagePanel();\r\n            PDPage firstPage = null;\r\n            if(allPages.size()>0){\r\n                 firstPage = (PDPage)allPages.get(0);\r\n                 p.setPage(firstPage);\r\n                 read.add(p); // read is a JPanel\r\n                 jScrollPane1.setViewportView(p);\r\n                 pd.close();\r\n            }\r\n        }\r\n        catch(Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 12, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:273)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:254)\r\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n\tat org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1547)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:230)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:257)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)\r\n\tat org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JViewport.paint(JViewport.java:731)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1063)\r\n\tat javax.swing.JLayeredPane.paint(JLayeredPane.java:585)\r\n\tat javax.swing.JComponent.paintChildren(JComponent.java:887)\r\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5228)\r\n\tat javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1482)\r\n\tat javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1413)\r\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1206)\r\n\tat javax.swing.JComponent.paint(JComponent.java:1040)\r\n\tat java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)\r\n\tat sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)\r\n\tat sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)\r\n\tat java.awt.Container.paint(Container.java:1967)\r\n\tat java.awt.Window.paint(Window.java:3877)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:781)\r\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:728)\r\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:677)\r\n\tat javax.swing.RepaintManager.access$700(RepaintManager.java:59)\r\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1621)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:721)\r\n\tat java.awt.EventQueue.access$200(EventQueue.java:103)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:682)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:680)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:691)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:97)\r\n\r\n\r\nPlease help me out .........\r\n",
        "Index Out Of Bounds Exception while reading large PDF Document  I am getting java.lang.IndexOutOfBoundsException while reading large PDF document (800 mb). \r\nBelow is the full stack\r\n\r\nException in thread \"main\" org.apache.pdfbox.exceptions.WrappedIOException\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:243)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1071)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1038)\r\n\tat imageData.AddFooter.main(AddFooter.java:26)\r\nCaused by: java.lang.IndexOutOfBoundsException: Index: 3377, Size: 3377\r\n\tat java.util.ArrayList.RangeCheck(ArrayList.java:547)\r\n\tat java.util.ArrayList.get(ArrayList.java:322)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileOutputStream.write(RandomAccessFileOutputStream.java:106)\r\n\tat java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\r\n\tat java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\r\n\tat java.io.FilterOutputStream.close(FilterOutputStream.java:140)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.parseCOSStream(BaseParser.java:606)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:566)\r\n\tat org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:187)\r\n\t... 3 more\r\n"
    ],
    [
        "PDFBOX-1520",
        "PDFBOX-490",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks ",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-1520",
        "PDFBOX-924",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks ",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-1520",
        "PDFBOX-984",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks ",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-1520",
        "PDFBOX-1019",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks ",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-1520",
        "PDFBOX-1068",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks ",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-1520",
        "PDFBOX-1296",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks ",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-1520",
        "PDFBOX-1436",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks ",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-1567",
        "PDFBOX-954",
        " Error Opening PDF in Adobe Reader - The font 'HoneyScript-Light' contains bad /Widths. \r\nThe pdf created using PDFBOX 1.7.0 file contains errors when opening in Adobe Reader with error msg: \"The font 'HoneyScript-Light' contains bad /Widths.\"\r\n\r\nCreated a new pdf file written with the below piece of code and tried to open it in Adobe Reader, while opening getting an error message- \"The font 'HoneyScript-Light' contains bad /Widths.\" . This error is also occurring even while writing in existing pdf document.\r\nI am using Adobe Reader Version 11.0.1. , even tried in 10.1.6. the same issue persist\r\n\r\n        PDDocument pdDocument = new PDDocument();\r\n        pdDocument.addPage(new PDPage());\r\n        BufferedImage bi = new BufferedImage(10, 10, 10);\r\n        Points point = new Points(300, 500);\r\n          @SuppressWarnings(\"unchecked\")\r\n                List<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();\r\n                PDPage pdPage = list.get(list.size() - 1);\r\n                String fontPathName = \"HoneyScript-Light.ttf\";\r\n                 PDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,\r\n                 Sample.class.getClassLoader()\r\n                 .getResource(fontPathName).openStream() );        \r\n                PDJpeg ximage = new PDJpeg(pdDocument, bi);\r\n                PDPageContentStream contentStream = new PDPageContentStream(pdDocument,\r\n                                pdPage, true, true);\r\n                contentStream.beginText();\r\n                contentStream.setFont(fonta,18);\r\n                contentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );\r\n                contentStream.setNonStrokingColor(Color.black);\r\n                contentStream.drawString(\"Name: \");\r\n                contentStream.endText();\r\n                contentStream.close();\r\n                pdDocument.save(\"test/Test.pdf\");\r\n                pdDocument.close();\r\n\r\nThe same has been tried with fonts such as MyriadSetText.ttf, Miama.ttf, Myriad.ttf.",
        "Embedded font: value for /Widths faulty (worked in PDFBox 1.3.0!) We have a problem with the font 'LucidiaSansUnicode (l_10646.ttf). It is embedded in a PDF and when viewing this PDF (with Acrobat Reader 9), an error\r\n\r\n   In der Schrift \"LucidaSansUnicode\" ist der Wert f\u00fcr /Widths fehlerhaft.\r\n\r\noccurs (roughly translated: \"In font \"LucidaSansUNicode\" the value for /Widths is faulty.\"). I noticed that this error only occurs when the first page is displayed that has text added by PDFBox! The same font is also used for all other text (used by Apache FOP to generate). When I look at the dialog window of Acrobat 3. tab \"Fonts\", I notice lots of entries\r\n\r\n    LucidaSansUnicode (Eingebettete Untergruppe)\r\n        Typ: TrueType (CID)\r\n        Kodierung: Identity-H\r\n\r\nbut only 1 entry at the very top that looks different:\r\n\r\n    LucidaSansUnicode (Eingebettet)\r\n         Typ: TrueType\r\n        Kodierung: Ansi\r\n\r\nI guess one is from Apache FOP (generation of PDF) and one is from PDFBox (adding additional text to the PDF). However, both use the same source file \"l_10646.ttf\"!\r\n\r\nUsing PDFBox 1.3.0-snapshot (or iText 2.1.7), this problem does NOT occur!\r\n\r\nThis only occurs with this \"LucidaSansUnicode\" font - all our other custom fonts don't cause this problem.\r\n\r\nThe difference I notice in Acrobat Reader Fonts tab is the first font entry:\r\n\r\nPDFBox 1.4.0:\r\n\r\n    LucidaSansUnicode (Eingebettet)\r\n        Typ: TrueType\r\n        Kodierung: Ansi\r\n\r\nPDFBox 1.3.0 or iText 2.1.7:\r\n\r\n    LucidaSansUnicode (Eingebettete Untergruppe)\r\n        Typ: TrueType\r\n        Kodierung: Ansi\r\n\r\n\r\nSo, PDFBox 1.4.0 only shows \"embedded\" (\"Eingebettet\") but PDFBox 1.3.0/iText version shows \"embedded subgroup\" (\"Eingebettete Untergruppe\")! Perhaps this is the problem?"
    ],
    [
        "PDFBOX-1569",
        "PDFBOX-212",
        "Chinese, Korean - MultiByte Character displayed incorrectly While trying using Chinese Character to write to a PDF, it Displays incorrectly. Sample Code tried .\r\nAlso tried with other TTF Files fireflysung.ttf,gbsn00lp.ttf, \u91d1\u6885\u6bdb\u884c\u4e66.TTF, SimSun.ttf . Have also tried Modifying the Encoding in PDTrueTypeFont.java loadTTF(PDDocument doc, InputStream stream) method.\r\n\r\n        PDDocument pdDocument = new PDDocument();\r\n        pdDocument.addPage(new PDPage());\r\n        BufferedImage bi = new BufferedImage(10, 10, 10);\r\n        Points point = new Points(300, 500);\r\n          @SuppressWarnings(\"unchecked\")\r\n\tList<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();\r\n\tPDPage pdPage = list.get(list.size() - 1);\r\n\tString fontPathName = \"sazanami-gothic.ttf\";\r\n\tPDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,\r\n\t Sample.class.getClassLoader()\r\n\t .getResource(fontPathName).openStream() );\t\t \r\n\t\r\n\tPDJpeg ximage = new PDJpeg(pdDocument, bi);\r\n\tPDPageContentStream contentStream = new PDPageContentStream(pdDocument,\r\n\t\tpdPage, true, true);\r\n\tcontentStream.beginText();\r\n\tcontentStream.setFont(fonta,18);\r\n\tcontentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );\r\n\tcontentStream.setNonStrokingColor(Color.black);\r\n\tcontentStream.drawString(\"\u60b2\u3057\u3044\");\r\n\tcontentStream.endText();\r\n\tcontentStream.close();\r\n\tpdDocument.save(\"test/Test.pdf\");\r\n\tpdDocument.close();\t\r\n\r\nI also looked into other issues reported  PDFBOX-1071, PDFBOX-1302 , PDFBOX-491, PDFBOX-696,PDFBOX-725\r\n\r\n",
        "PDF Document cut German Umlauts [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1587745\nOriginally submitted by kajiro on 2006-10-31 01:05.\n\nI use the class TextToPDF for create a PDF Document\nfrom a text file. That operates correctly with a simply\ntext. But when i use german umlauts in the text like\n\u00c3\u00a4,\u00c3\u00b6,\u00c3\u00bc or \u00c3\u009f the PDF Document cut this letters. \n\nAttached is a sample document contaning four words with\nincorrectly umlauts! \n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1587745&file_id=200742\nbsp.pdf (application/pdf), 958 bytes\nUmlauts are incorrect\n\n[comment on SourceForge]\nOriginally sent by benlitchfield.\nLogged In: YES \nuser_id=601708\nOriginator: NO\n\nTo the anonymous poster, did you mean for both PDF links to be the same?\n\nBen\n\n[comment on SourceForge]\nOriginally sent by nobody.\nLogged In: NO \n\nFor PDF file, which contains accented Latin1\ncharacters:\n    http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get a u with umlauts converted into \"currency1u\"\n(look at the first name on the first page).\n\nFor the following file containing Japanese characters:\n     http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get error:\n     java.io.IOException: Unknown encoding for 'H'\nI also can't seem to cut and past the form."
    ],
    [
        "PDFBOX-1569",
        "PDFBOX-553",
        "Chinese, Korean - MultiByte Character displayed incorrectly While trying using Chinese Character to write to a PDF, it Displays incorrectly. Sample Code tried .\r\nAlso tried with other TTF Files fireflysung.ttf,gbsn00lp.ttf, \u91d1\u6885\u6bdb\u884c\u4e66.TTF, SimSun.ttf . Have also tried Modifying the Encoding in PDTrueTypeFont.java loadTTF(PDDocument doc, InputStream stream) method.\r\n\r\n        PDDocument pdDocument = new PDDocument();\r\n        pdDocument.addPage(new PDPage());\r\n        BufferedImage bi = new BufferedImage(10, 10, 10);\r\n        Points point = new Points(300, 500);\r\n          @SuppressWarnings(\"unchecked\")\r\n\tList<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();\r\n\tPDPage pdPage = list.get(list.size() - 1);\r\n\tString fontPathName = \"sazanami-gothic.ttf\";\r\n\tPDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,\r\n\t Sample.class.getClassLoader()\r\n\t .getResource(fontPathName).openStream() );\t\t \r\n\t\r\n\tPDJpeg ximage = new PDJpeg(pdDocument, bi);\r\n\tPDPageContentStream contentStream = new PDPageContentStream(pdDocument,\r\n\t\tpdPage, true, true);\r\n\tcontentStream.beginText();\r\n\tcontentStream.setFont(fonta,18);\r\n\tcontentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );\r\n\tcontentStream.setNonStrokingColor(Color.black);\r\n\tcontentStream.drawString(\"\u60b2\u3057\u3044\");\r\n\tcontentStream.endText();\r\n\tcontentStream.close();\r\n\tpdDocument.save(\"test/Test.pdf\");\r\n\tpdDocument.close();\t\r\n\r\nI also looked into other issues reported  PDFBOX-1071, PDFBOX-1302 , PDFBOX-491, PDFBOX-696,PDFBOX-725\r\n\r\n",
        "writing pdf file in Japanese, garbled use PdfBox to write pdf file in Japanese,generated file is garbled."
    ],
    [
        "PDFBOX-1569",
        "PDFBOX-922",
        "Chinese, Korean - MultiByte Character displayed incorrectly While trying using Chinese Character to write to a PDF, it Displays incorrectly. Sample Code tried .\r\nAlso tried with other TTF Files fireflysung.ttf,gbsn00lp.ttf, \u91d1\u6885\u6bdb\u884c\u4e66.TTF, SimSun.ttf . Have also tried Modifying the Encoding in PDTrueTypeFont.java loadTTF(PDDocument doc, InputStream stream) method.\r\n\r\n        PDDocument pdDocument = new PDDocument();\r\n        pdDocument.addPage(new PDPage());\r\n        BufferedImage bi = new BufferedImage(10, 10, 10);\r\n        Points point = new Points(300, 500);\r\n          @SuppressWarnings(\"unchecked\")\r\n\tList<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();\r\n\tPDPage pdPage = list.get(list.size() - 1);\r\n\tString fontPathName = \"sazanami-gothic.ttf\";\r\n\tPDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,\r\n\t Sample.class.getClassLoader()\r\n\t .getResource(fontPathName).openStream() );\t\t \r\n\t\r\n\tPDJpeg ximage = new PDJpeg(pdDocument, bi);\r\n\tPDPageContentStream contentStream = new PDPageContentStream(pdDocument,\r\n\t\tpdPage, true, true);\r\n\tcontentStream.beginText();\r\n\tcontentStream.setFont(fonta,18);\r\n\tcontentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );\r\n\tcontentStream.setNonStrokingColor(Color.black);\r\n\tcontentStream.drawString(\"\u60b2\u3057\u3044\");\r\n\tcontentStream.endText();\r\n\tcontentStream.close();\r\n\tpdDocument.save(\"test/Test.pdf\");\r\n\tpdDocument.close();\t\r\n\r\nI also looked into other issues reported  PDFBOX-1071, PDFBOX-1302 , PDFBOX-491, PDFBOX-696,PDFBOX-725\r\n\r\n",
        "True type PDFont subclass only supports WinAnsiEncoding (hardcoded!) PDFBox cannot embed Identity-H or Identity-V type TTF fonts in the PDF it creates, making it impossible to create PDFs in any language apart from English and ones supported in WinAnsiEncoding. This behaviour is caused because method PDTrueTypeFont.loadTTF has hardcoded WinAnsiEncoding inside, and there is no Identity-H or Identity-V Encoding classes provided (to set afterwards via PDFont.setFont() )\r\n\r\nThis excludes the following languages plus many others:\r\n\r\n- Greek\r\n- Bulgarian\r\n- Swedish\r\n- Baltic languages\r\n- Malteze \r\n\r\nThe PDF created contains garbled characters and/or squares.\r\n\r\nSimple test case:\r\n\r\n{code}\r\n                PDDocument doc = null;\r\n\t\ttry {\r\n\t\t\tdoc = new PDDocument();\r\n\t\t\tPDPage page = new PDPage();\r\n\t\t\tdoc.addPage(page);\r\n\t\t\t// extract fonts for fields\r\n\t\t\tbyte[] arialNorm = extractFont(\"arial.ttf\");\r\n\t\t\t//byte[] arialBold = extractFont(\"arialbd.ttf\"); \r\n\t\t\t//PDFont font = PDType1Font.HELVETICA;\r\n\t\t\tPDFont font = PDTrueTypeFont.loadTTF(doc, new ByteArrayInputStream(arialNorm));\r\n\t\t\t\r\n\t\t\tPDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n\t\t\tcontentStream.beginText();\r\n\t\t\tcontentStream.setFont(font, 12);\r\n\t\t\tcontentStream.moveTextPositionByAmount(100, 700);\r\n\t\t\tcontentStream.drawString(\"Hello world from PDFBox \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"); // text here may appear garbled; insert any text in Greek or Bulgarian or Malteze\r\n\t\t\tcontentStream.endText();\r\n\t\t\tcontentStream.close();\r\n\t\t\tdoc.save(\"pdfbox.pdf\");\r\n\t\t\tSystem.out.println(\" created!\");\r\n\t\t} catch (Exception ioe) {\r\n\t\t\tioe.printStackTrace();\r\n\t\t} finally {\r\n\t\t\tif (doc != null) {\r\n\t\t\t\ttry { doc.close(); } catch (Exception e) {}\r\n\t\t\t}\r\n\t\t}\r\n{code}\r\n"
    ],
    [
        "PDFBOX-1569",
        "PDFBOX-1071",
        "Chinese, Korean - MultiByte Character displayed incorrectly While trying using Chinese Character to write to a PDF, it Displays incorrectly. Sample Code tried .\r\nAlso tried with other TTF Files fireflysung.ttf,gbsn00lp.ttf, \u91d1\u6885\u6bdb\u884c\u4e66.TTF, SimSun.ttf . Have also tried Modifying the Encoding in PDTrueTypeFont.java loadTTF(PDDocument doc, InputStream stream) method.\r\n\r\n        PDDocument pdDocument = new PDDocument();\r\n        pdDocument.addPage(new PDPage());\r\n        BufferedImage bi = new BufferedImage(10, 10, 10);\r\n        Points point = new Points(300, 500);\r\n          @SuppressWarnings(\"unchecked\")\r\n\tList<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();\r\n\tPDPage pdPage = list.get(list.size() - 1);\r\n\tString fontPathName = \"sazanami-gothic.ttf\";\r\n\tPDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,\r\n\t Sample.class.getClassLoader()\r\n\t .getResource(fontPathName).openStream() );\t\t \r\n\t\r\n\tPDJpeg ximage = new PDJpeg(pdDocument, bi);\r\n\tPDPageContentStream contentStream = new PDPageContentStream(pdDocument,\r\n\t\tpdPage, true, true);\r\n\tcontentStream.beginText();\r\n\tcontentStream.setFont(fonta,18);\r\n\tcontentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );\r\n\tcontentStream.setNonStrokingColor(Color.black);\r\n\tcontentStream.drawString(\"\u60b2\u3057\u3044\");\r\n\tcontentStream.endText();\r\n\tcontentStream.close();\r\n\tpdDocument.save(\"test/Test.pdf\");\r\n\tpdDocument.close();\t\r\n\r\nI also looked into other issues reported  PDFBOX-1071, PDFBOX-1302 , PDFBOX-491, PDFBOX-696,PDFBOX-725\r\n\r\n",
        "Can not generate chinese character PDF file I practice the PDF generate code for chinese character and load the chinese font ttf, but can not get the chinese PDF with correct display.'\r\nThe code is as below: The font coding is UTF-8\r\n\r\n            doc = new PDDocument();\r\n            PDPage page = new PDPage();\r\n            doc.addPage( page );\r\n            PDFont font = PDTrueTypeFont.loadTTF(doc, \"d:\\\\temp\\\\ttf\\\\fireflysung.ttf\");\r\n            PDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n            contentStream.beginText();\r\n            contentStream.moveTextPositionByAmount(100, 700);\r\n             contentStream.setFont(font,12);\r\n            \r\n            contentStream.drawString(\"\u4e2d\u6587\u6e2c\u8a66\");\r\n            contentStream.endText();\r\n            contentStream.close();\r\n            doc.save(\"d:\\\\temp\\\\helloworld.pdf\");"
    ],
    [
        "PDFBOX-1593",
        "PDFBOX-953",
        "Adobe encrypted document doesn't parse correct (Acrobat 9 compatibility) Trying to parse and receive some information from encrypted documents created with Adobe 9 with compatibility to Acrobat 9, cause an error while decrypting informations.\r\n\r\nI tested documents with follow compatibility:\r\nAcrobat 3 (40-bit RC4) -> works\r\nAcrobat 5 & 6 (128-bit RC4) ->  work\r\nAcrobat 7 (128-bit AES) ->  work\r\nAcrobat 9 (256-bit AES) -> doesn't work\r\n\r\nThe follow error will be thrown.\r\n\r\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException\r\n\tat java.lang.System.arraycopy(Native Method)\r\n\tat org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeEncryptedKey(StandardSecurityHandler.java:591)\r\n\tat org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeUserPassword(StandardSecurityHandler.java:628)\r\n\tat org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.isUserPassword(StandardSecurityHandler.java:812)\r\n\tat org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption(StandardSecurityHandler.java:213)\r\n\tat org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:154)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1509)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.decrypt(PDDocument.java:919)\r\n\tat de.bos_bremen.pdftoolbox.testing.Test.main(Test.java:45)",
        "PDFBox fails to ExtractText from Adobe Acrobat X 256-bit AES encrypted documents From the command line version of PDFBox, this exception is printed out:\r\n\r\nExtractText failed with the following exception:\r\njava.lang.ArrayIndexOutOfBoundsException\r\n        at java.lang.System.arraycopy(Native Method)\r\n        at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeEncryptedKey(StandardSecurityHandler.java:571)\r\n        at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeUserPassword(StandardSecurityHandler.java:608)\r\n        at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.isUserPassword(StandardSecurityHandler.java:792)\r\n        at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:189)\r\n        at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1091)\r\n        at org.apache.pdfbox.ExtractText.main(ExtractText.java:190)\r\n        at org.apache.pdfbox.PDFBox.main(PDFBox.java:42)\r\n\r\nThe document I was using was encrypted using Adobe Acrobat X Pro and has only Page Extraction disabled inside of it.  It was encrypted only with a permissions password.  "
    ],
    [
        "PDFBOX-1635",
        "PDFBOX-1625",
        "Exception on saving document I am performing some operations on pdf documents such as merging, spliting, reordering (pages). I am currently  encountering some issues when attempting to save the newly modified pdf file. \r\n\r\nA simplified test case (extract the first 5 pages from a pdf into a new pdf) is:\r\n\r\n     @Test\r\n    public void testPdfBox2() throws Exception {\r\n        PDDocument returnDocument = new PDDocument();\r\n        String outputFilename = \"/tmp/testpdfreorder.pdf\";\r\n\r\n        List<Integer> pages = Arrays.asList(1, 2, 3, 4, 5);\r\n\r\n        try {\r\n            // get/load current document\r\n            PDDocument currentPdf = PDDocument.load(new File(\"/tmp/hibernate_reference.pdf\"));\r\n\r\n            // get the current pages of the document\r\n            @SuppressWarnings(\"unchecked\")\r\n            List<PDPage> currentDocumentPages = currentPdf.getDocumentCatalog().getAllPages();\r\n\r\n            for (Integer currentPage : pages) {\r\n                returnDocument.importPage(currentDocumentPages.get(currentPage - 1));\r\n            }\r\n\r\n            currentPdf.close();\r\n\r\n        } finally {\r\n            returnDocument.save(outputFilename);\r\n            returnDocument.close();\r\n        }\r\n    }\r\n\r\nThe problem is caused in the above code by calling currentPdf.close() before the returnDocument.save has been called. This looks very similar to this issue PDFBOX-1586 which is marked as \"fixed\" in 1.8.2, but in my opinion it is not.\r\n\r\nThe stacktrace I am currently getting is:\r\n\r\norg.apache.pdfbox.exceptions.COSVisitorException: java.lang.IndexOutOfBoundsException: Index: 72, Size: 0\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1354)\r\n\tat org.apache.pdfbox.cos.COSStream.accept(COSStream.java:217)\r\n\tat org.apache.pdfbox.cos.COSObject.accept(COSObject.java:206)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:525)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:435)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1122)\r\n\tat org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:552)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1501)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1324)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1305)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1292)\r\n\tat com.test.PdfBoxTest.testPdfBox2(PdfBoxTest.java:72)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n\tat java.lang.reflect.Method.invoke(Method.java:597)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\r\nCaused by: java.lang.IndexOutOfBoundsException: Index: 72, Size: 0\r\n\tat java.util.ArrayList.RangeCheck(ArrayList.java:547)\r\n\tat java.util.ArrayList.get(ArrayList.java:322)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:218)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:258)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:317)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1337)\r\n\t... 34 more\r\n\r\n",
        "java.lang.IndexOutOfBoundsException at writing PDF file I got this error:\r\n\r\ni will just recreate a document with pages 1-6.\r\n\r\n\r\nException in thread \"main\" java.io.IOException: org.apache.pdfbox.exceptions.COSVisitorException: java.lang.IndexOutOfBoundsException: Index: 115, Size: 0\r\n\tat de.back2heaven.pdf.model.TargetDocumuent.save(TargetDocumuent.java:56)\r\n\tat de.back2heaven.pdf.model.Document.prozess(Document.java:76)\r\n\tat de.back2heaven.pdf.model.Document.main(Document.java:56)\r\nCaused by: org.apache.pdfbox.exceptions.COSVisitorException: java.lang.IndexOutOfBoundsException: Index: 115, Size: 0\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1354)\r\n\tat org.apache.pdfbox.cos.COSStream.accept(COSStream.java:217)\r\n\tat org.apache.pdfbox.cos.COSObject.accept(COSObject.java:206)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:525)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:435)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1122)\r\n\tat org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:552)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1501)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1324)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1305)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1292)\r\n\tat de.back2heaven.pdf.model.TargetDocumuent.save(TargetDocumuent.java:54)\r\n\t... 2 more\r\nCaused by: java.lang.IndexOutOfBoundsException: Index: 115, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:604)\r\n\tat java.util.ArrayList.get(ArrayList.java:382)\r\n\tat org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)\r\n\tat org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)\r\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\r\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:275)\r\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:334)\r\n\tat org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1337)\r\n\t... 13 more\r\n"
    ],
    [
        "PDFBOX-1668",
        "PDFBOX-1585",
        "Loading a Russian PDF never finishes  Try to run this line:\r\n\r\nPDDocument.load(new URL(\"http://www.who.int/entity/foodsafety/publications/general/en/global_strategy_ru.pdf\"));\r\n\r\nThe loading never finishes... taking a lot of CPU.\r\n\r\nThe document size (574K) should not be the problem. I guess something in that document causes the issue with PdfBox. And I'd like to know if such could be a more general issue or what.\r\n\r\nThanks! ",
        "org.apache.pdfbox.util.PDFTextStripper.getText() causes thread to block indefinitely URL of the problematic pdf file is http://www.redalyc.org/pdf/540/54017220.pdf\r\n\r\nMy program tries to extract the fulltext of the given pdf file in the following manner:\r\n\r\n{code}\r\nString fileName = \"/home/sascha/testfile.pdf\"                   // 1\r\nPDDocument pdDoc = PDDocument.load(fileName, true); // 2\r\nPDFTextStripper text = new PDFTextStripper();\t            // 3\r\nString fullText = text.getText(pdDoc);                               // 4\r\n{code}\r\n\r\nThe call in line 4 causes the thread to block indefinitely (runs now for more than two days without making any progress). The file is stored in a local file system (no network interaction occurs).\r\n\r\njstack indicates that the thread is not deadlocked:\r\n\r\n{code}\r\n\"main\" prio=10 tid=0x000000004187d800 nid=0x6ed8 runnable [0x00007f9e28e56000]\r\n   java.lang.Thread.State: RUNNABLE\r\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)\r\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:237)\r\n        - locked <0x00000007d73a84a0> (a java.io.BufferedInputStream)\r\n        at java.io.FilterInputStream.read(FilterInputStream.java:66)\r\n        at java.io.PushbackInputStream.read(PushbackInputStream.java:122)\r\n        at org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n        at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1006)\r\n        at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:260)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:255)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n        at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n        at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n        at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455)\r\n        at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)\r\n        at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335)\r\n        at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:254)\r\n        at de.kobv.ked.extraction.FulltextExtraction.getFulltext(FulltextExtraction.java:65)\r\n{code}\r\n\r\nAny idea or advice on how to fix that problem? Is it possible to set up a timeout for the extraction operation?"
    ],
    [
        "PDFBOX-1686",
        "PDFBOX-371",
        "[PATCH] Bullets missing Using PDFToImage bullets are missing",
        "Soft Hyphen character not mapped to hyphen in WinAnsiEncoding (and suggested fix) When running text extraction on a PDF file that contains the soft hyphen character in the WinAnsiEncoding (that is, 0255), the text extractor incorrectly maps this as a space, when it should be a hyphen. As the PDF Reference 1.7 says in note 5 of table D.1:\n\n'The hyphen character is also encoded as 255 in WinAnsiEncoding. The meaning of this duplicate code is \"soft hyphen,\" but it is typographically the same as hyphen.'\n\nThe reason that a soft hyphen is typographically the same as hyphen is that a soft hyphen indicates that a hyphen MAY be placed here if necessary (i.e. breaking a word across lines). Since the soft hyphen should only be put, by the PDF producer, at the end of a line to break a word, it stands to reason that the option to place a hyphen must be taken.\n\nI think I've traced the reason for the substitution to Encoding.getName, where because there is no mapping in the codeToName mapping for this code in WinAnsiEncoding, by default it returns \"space\".\n\nThe fix is not as simple as adding an addCharacterEncoding( 0255, COSName.getPDFName(\"hyphen\")) to WinAnsiEncoding, because that will set both the codeToName mapping AND the nameToCode mapping, which will overwrite the 055 nameToCode mapping.\n\nAdding this line:\n\ncodeToName.add( new Integer(0255), COSName.getPDFName(\"hyphen\"));\n\nto the end of the WinAnsiEncoding constructor seems to fix the issue."
    ],
    [
        "PDFBOX-1686",
        "PDFBOX-1357",
        "[PATCH] Bullets missing Using PDFToImage bullets are missing",
        "Missing character encoding in MacRoman & WinAnsi During my Preflight refactoring, I encountered some characters mapping that are missing from the WinAnsiEncoding and the MacRomanEncoding.\r\n\r\n\"nonbreaking space\" is missing from the WInAnsi and the MacRoman Encoding that must be mapped with the \"space\" character.\r\n\"soft hyphen\" is missing from the WinAnsi encoding that must be mapped with the \"hyphen\" character. \r\n\r\nUnfortunately, they are no clearly defined name for these two characters, so only the getName() method have been updated to return \"space\" and \"hyphen\" when code for the \"nonbreaking space\" or \"soft hyphen\" is received.\r\n"
    ],
    [
        "PDFBOX-1697",
        "PDFBOX-1562",
        "the text show Incorrect the text show Incorrect",
        "Thumbnail of PDF is missing image When rendering a thumbnail of the attached PDF, the image of the boy holding the drumsticks is missing."
    ],
    [
        "PDFBOX-1697",
        "PDFBOX-1577",
        "the text show Incorrect the text show Incorrect",
        "Transparency and Shadow Effects One of our customers had major problems with PDFs designed in InDesign. TextBoxes which used any kind of native PDF effects like shadows or transparency ended up in the final JPG (using the PDFToImage conversion) as text that is surrounded by a grey box. Seeing that handling such features is most likely a new feature request, i labeled it that way. Maybe there is the chance of a possible bugfix to at least not show the grey box seen in the jpg I will upload."
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-490",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-924",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-984",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-1019",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-1068",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-1296",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-1436",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-1699",
        "PDFBOX-1520",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". ",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-1700",
        "PDFBOX-1664",
        "TTF Font fails to load Array index out of bounds attempting to load true type font.  Statement that failed is...\r\n PDTrueTypeFont.loadTTF(document, \"/usr/share/fonts/truetype/liberation/LiberationMono-Regular.ttf\");\r\nError is\r\n java.lang.ArrayIndexOutOfBoundsException: 5 at  org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:418)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:201)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:177)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:158)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:145)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:132)\r\n\r\n... Please accept apologies if this is a user error.    Font file is as installed by Ubuntu, exists and is viewable.  Changing the file name produces 'no such file or directory', as expected, so pretty sure it has found the file.\r\n\r\n\r\n",
        "NullPointerException in PDType1Font.java I get this with 1.8.2 with certain files:\r\n\r\n17.07.2013 11:48:54.406 WARN  [main] org.apache.pdfbox.util.PDFStreamEngine:567 - java.lang.NullPointerException\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.pdmodel.font.FontManager.normalizeFontname(FontManager.java:136)\r\n\tat org.apache.pdfbox.pdmodel.font.FontManager.getAwtFont(FontManager.java:82)\r\n\tat org.apache.pdfbox.pdmodel.font.PDType1Font.getawtFont(PDType1Font.java:240)\r\n\tat org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(PDSimpleFont.java:109)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:496)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:781)\r\n\tat pdfboxpageimageextraction.ExtractImages.doPdf(ExtractImages.java:108)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:67)\r\n\r\nThe cause [as of 19.8.2013] is in PageDrawer.java:\r\n\r\n    awtFont = FontManager.getAwtFont(fd.getFontName());\r\n\r\nwhich fails because fd.getFontName() returns null.\r\n\r\nA fix (don't know if it is good or just the symptom) is to add this line above:\r\n\r\n    if (fd.getFontName() != null)\r\n\r\nIt happens with 1.8.2, and the 2.0.0 version that I downloaded on May 5th.\r\n\r\n\r\nI can't provide a file, because its confidential.\r\n[memo for me: it is file 287]"
    ],
    [
        "PDFBOX-1705",
        "PDFBOX-212",
        "can not Write Hebrew and Chinese word into a PDF  Can not write Hebrew or Chinese into PDF file. It shows unreadable codes.  If it does not support with latest version, please comments me. Thank you.\r\n{code}\r\nPDDocument document = new PDDocument();\r\nPDPage page = new PDPage();\r\ndocument.addPage( page );\r\nPDFont font = PDTrueTypeFont.loadTTF(document, \"pdf/simkai.ttf\");\r\nPDPageContentStream contentStream = new PDPageContentStream(document, page);\r\ncontentStream.beginText();\r\ncontentStream.setFont( font, 12 );\r\ncontentStream.moveTextPositionByAmount( 100, 700 );\r\ncontentStream.drawString(\"\u4e2d\u6587 = Chinese\");\r\ncontentStream.drawString(\"Hebrew= \u05d4\u05e2\u05ea\u05e7\");\r\ncontentStream.endText();\r\ncontentStream.close();\r\ndocument.save( \"pdf/Hello World.pdf\");\r\ndocument.close();\r\n{code}\r\n",
        "PDF Document cut German Umlauts [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1587745\nOriginally submitted by kajiro on 2006-10-31 01:05.\n\nI use the class TextToPDF for create a PDF Document\nfrom a text file. That operates correctly with a simply\ntext. But when i use german umlauts in the text like\n\u00c3\u00a4,\u00c3\u00b6,\u00c3\u00bc or \u00c3\u009f the PDF Document cut this letters. \n\nAttached is a sample document contaning four words with\nincorrectly umlauts! \n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1587745&file_id=200742\nbsp.pdf (application/pdf), 958 bytes\nUmlauts are incorrect\n\n[comment on SourceForge]\nOriginally sent by benlitchfield.\nLogged In: YES \nuser_id=601708\nOriginator: NO\n\nTo the anonymous poster, did you mean for both PDF links to be the same?\n\nBen\n\n[comment on SourceForge]\nOriginally sent by nobody.\nLogged In: NO \n\nFor PDF file, which contains accented Latin1\ncharacters:\n    http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get a u with umlauts converted into \"currency1u\"\n(look at the first name on the first page).\n\nFor the following file containing Japanese characters:\n     http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get error:\n     java.io.IOException: Unknown encoding for 'H'\nI also can't seem to cut and past the form."
    ],
    [
        "PDFBOX-1705",
        "PDFBOX-553",
        "can not Write Hebrew and Chinese word into a PDF  Can not write Hebrew or Chinese into PDF file. It shows unreadable codes.  If it does not support with latest version, please comments me. Thank you.\r\n{code}\r\nPDDocument document = new PDDocument();\r\nPDPage page = new PDPage();\r\ndocument.addPage( page );\r\nPDFont font = PDTrueTypeFont.loadTTF(document, \"pdf/simkai.ttf\");\r\nPDPageContentStream contentStream = new PDPageContentStream(document, page);\r\ncontentStream.beginText();\r\ncontentStream.setFont( font, 12 );\r\ncontentStream.moveTextPositionByAmount( 100, 700 );\r\ncontentStream.drawString(\"\u4e2d\u6587 = Chinese\");\r\ncontentStream.drawString(\"Hebrew= \u05d4\u05e2\u05ea\u05e7\");\r\ncontentStream.endText();\r\ncontentStream.close();\r\ndocument.save( \"pdf/Hello World.pdf\");\r\ndocument.close();\r\n{code}\r\n",
        "writing pdf file in Japanese, garbled use PdfBox to write pdf file in Japanese,generated file is garbled."
    ],
    [
        "PDFBOX-1705",
        "PDFBOX-922",
        "can not Write Hebrew and Chinese word into a PDF  Can not write Hebrew or Chinese into PDF file. It shows unreadable codes.  If it does not support with latest version, please comments me. Thank you.\r\n{code}\r\nPDDocument document = new PDDocument();\r\nPDPage page = new PDPage();\r\ndocument.addPage( page );\r\nPDFont font = PDTrueTypeFont.loadTTF(document, \"pdf/simkai.ttf\");\r\nPDPageContentStream contentStream = new PDPageContentStream(document, page);\r\ncontentStream.beginText();\r\ncontentStream.setFont( font, 12 );\r\ncontentStream.moveTextPositionByAmount( 100, 700 );\r\ncontentStream.drawString(\"\u4e2d\u6587 = Chinese\");\r\ncontentStream.drawString(\"Hebrew= \u05d4\u05e2\u05ea\u05e7\");\r\ncontentStream.endText();\r\ncontentStream.close();\r\ndocument.save( \"pdf/Hello World.pdf\");\r\ndocument.close();\r\n{code}\r\n",
        "True type PDFont subclass only supports WinAnsiEncoding (hardcoded!) PDFBox cannot embed Identity-H or Identity-V type TTF fonts in the PDF it creates, making it impossible to create PDFs in any language apart from English and ones supported in WinAnsiEncoding. This behaviour is caused because method PDTrueTypeFont.loadTTF has hardcoded WinAnsiEncoding inside, and there is no Identity-H or Identity-V Encoding classes provided (to set afterwards via PDFont.setFont() )\r\n\r\nThis excludes the following languages plus many others:\r\n\r\n- Greek\r\n- Bulgarian\r\n- Swedish\r\n- Baltic languages\r\n- Malteze \r\n\r\nThe PDF created contains garbled characters and/or squares.\r\n\r\nSimple test case:\r\n\r\n{code}\r\n                PDDocument doc = null;\r\n\t\ttry {\r\n\t\t\tdoc = new PDDocument();\r\n\t\t\tPDPage page = new PDPage();\r\n\t\t\tdoc.addPage(page);\r\n\t\t\t// extract fonts for fields\r\n\t\t\tbyte[] arialNorm = extractFont(\"arial.ttf\");\r\n\t\t\t//byte[] arialBold = extractFont(\"arialbd.ttf\"); \r\n\t\t\t//PDFont font = PDType1Font.HELVETICA;\r\n\t\t\tPDFont font = PDTrueTypeFont.loadTTF(doc, new ByteArrayInputStream(arialNorm));\r\n\t\t\t\r\n\t\t\tPDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n\t\t\tcontentStream.beginText();\r\n\t\t\tcontentStream.setFont(font, 12);\r\n\t\t\tcontentStream.moveTextPositionByAmount(100, 700);\r\n\t\t\tcontentStream.drawString(\"Hello world from PDFBox \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"); // text here may appear garbled; insert any text in Greek or Bulgarian or Malteze\r\n\t\t\tcontentStream.endText();\r\n\t\t\tcontentStream.close();\r\n\t\t\tdoc.save(\"pdfbox.pdf\");\r\n\t\t\tSystem.out.println(\" created!\");\r\n\t\t} catch (Exception ioe) {\r\n\t\t\tioe.printStackTrace();\r\n\t\t} finally {\r\n\t\t\tif (doc != null) {\r\n\t\t\t\ttry { doc.close(); } catch (Exception e) {}\r\n\t\t\t}\r\n\t\t}\r\n{code}\r\n"
    ],
    [
        "PDFBOX-1705",
        "PDFBOX-1071",
        "can not Write Hebrew and Chinese word into a PDF  Can not write Hebrew or Chinese into PDF file. It shows unreadable codes.  If it does not support with latest version, please comments me. Thank you.\r\n{code}\r\nPDDocument document = new PDDocument();\r\nPDPage page = new PDPage();\r\ndocument.addPage( page );\r\nPDFont font = PDTrueTypeFont.loadTTF(document, \"pdf/simkai.ttf\");\r\nPDPageContentStream contentStream = new PDPageContentStream(document, page);\r\ncontentStream.beginText();\r\ncontentStream.setFont( font, 12 );\r\ncontentStream.moveTextPositionByAmount( 100, 700 );\r\ncontentStream.drawString(\"\u4e2d\u6587 = Chinese\");\r\ncontentStream.drawString(\"Hebrew= \u05d4\u05e2\u05ea\u05e7\");\r\ncontentStream.endText();\r\ncontentStream.close();\r\ndocument.save( \"pdf/Hello World.pdf\");\r\ndocument.close();\r\n{code}\r\n",
        "Can not generate chinese character PDF file I practice the PDF generate code for chinese character and load the chinese font ttf, but can not get the chinese PDF with correct display.'\r\nThe code is as below: The font coding is UTF-8\r\n\r\n            doc = new PDDocument();\r\n            PDPage page = new PDPage();\r\n            doc.addPage( page );\r\n            PDFont font = PDTrueTypeFont.loadTTF(doc, \"d:\\\\temp\\\\ttf\\\\fireflysung.ttf\");\r\n            PDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n            contentStream.beginText();\r\n            contentStream.moveTextPositionByAmount(100, 700);\r\n             contentStream.setFont(font,12);\r\n            \r\n            contentStream.drawString(\"\u4e2d\u6587\u6e2c\u8a66\");\r\n            contentStream.endText();\r\n            contentStream.close();\r\n            doc.save(\"d:\\\\temp\\\\helloworld.pdf\");"
    ],
    [
        "PDFBOX-1705",
        "PDFBOX-1569",
        "can not Write Hebrew and Chinese word into a PDF  Can not write Hebrew or Chinese into PDF file. It shows unreadable codes.  If it does not support with latest version, please comments me. Thank you.\r\n{code}\r\nPDDocument document = new PDDocument();\r\nPDPage page = new PDPage();\r\ndocument.addPage( page );\r\nPDFont font = PDTrueTypeFont.loadTTF(document, \"pdf/simkai.ttf\");\r\nPDPageContentStream contentStream = new PDPageContentStream(document, page);\r\ncontentStream.beginText();\r\ncontentStream.setFont( font, 12 );\r\ncontentStream.moveTextPositionByAmount( 100, 700 );\r\ncontentStream.drawString(\"\u4e2d\u6587 = Chinese\");\r\ncontentStream.drawString(\"Hebrew= \u05d4\u05e2\u05ea\u05e7\");\r\ncontentStream.endText();\r\ncontentStream.close();\r\ndocument.save( \"pdf/Hello World.pdf\");\r\ndocument.close();\r\n{code}\r\n",
        "Chinese, Korean - MultiByte Character displayed incorrectly While trying using Chinese Character to write to a PDF, it Displays incorrectly. Sample Code tried .\r\nAlso tried with other TTF Files fireflysung.ttf,gbsn00lp.ttf, \u91d1\u6885\u6bdb\u884c\u4e66.TTF, SimSun.ttf . Have also tried Modifying the Encoding in PDTrueTypeFont.java loadTTF(PDDocument doc, InputStream stream) method.\r\n\r\n        PDDocument pdDocument = new PDDocument();\r\n        pdDocument.addPage(new PDPage());\r\n        BufferedImage bi = new BufferedImage(10, 10, 10);\r\n        Points point = new Points(300, 500);\r\n          @SuppressWarnings(\"unchecked\")\r\n\tList<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();\r\n\tPDPage pdPage = list.get(list.size() - 1);\r\n\tString fontPathName = \"sazanami-gothic.ttf\";\r\n\tPDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,\r\n\t Sample.class.getClassLoader()\r\n\t .getResource(fontPathName).openStream() );\t\t \r\n\t\r\n\tPDJpeg ximage = new PDJpeg(pdDocument, bi);\r\n\tPDPageContentStream contentStream = new PDPageContentStream(pdDocument,\r\n\t\tpdPage, true, true);\r\n\tcontentStream.beginText();\r\n\tcontentStream.setFont(fonta,18);\r\n\tcontentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );\r\n\tcontentStream.setNonStrokingColor(Color.black);\r\n\tcontentStream.drawString(\"\u60b2\u3057\u3044\");\r\n\tcontentStream.endText();\r\n\tcontentStream.close();\r\n\tpdDocument.save(\"test/Test.pdf\");\r\n\tpdDocument.close();\t\r\n\r\nI also looked into other issues reported  PDFBOX-1071, PDFBOX-1302 , PDFBOX-491, PDFBOX-696,PDFBOX-725\r\n\r\n"
    ],
    [
        "PDFBOX-1713",
        "PDFBOX-371",
        "[PATCH] Bullet character not rendered See attached file. In WinAnsiEncoding, any unused code greater than 040 maps to the bullet character.\r\nThe attached patch takes that into account to render characters that don't use the standard encoding for bullet.",
        "Soft Hyphen character not mapped to hyphen in WinAnsiEncoding (and suggested fix) When running text extraction on a PDF file that contains the soft hyphen character in the WinAnsiEncoding (that is, 0255), the text extractor incorrectly maps this as a space, when it should be a hyphen. As the PDF Reference 1.7 says in note 5 of table D.1:\n\n'The hyphen character is also encoded as 255 in WinAnsiEncoding. The meaning of this duplicate code is \"soft hyphen,\" but it is typographically the same as hyphen.'\n\nThe reason that a soft hyphen is typographically the same as hyphen is that a soft hyphen indicates that a hyphen MAY be placed here if necessary (i.e. breaking a word across lines). Since the soft hyphen should only be put, by the PDF producer, at the end of a line to break a word, it stands to reason that the option to place a hyphen must be taken.\n\nI think I've traced the reason for the substitution to Encoding.getName, where because there is no mapping in the codeToName mapping for this code in WinAnsiEncoding, by default it returns \"space\".\n\nThe fix is not as simple as adding an addCharacterEncoding( 0255, COSName.getPDFName(\"hyphen\")) to WinAnsiEncoding, because that will set both the codeToName mapping AND the nameToCode mapping, which will overwrite the 055 nameToCode mapping.\n\nAdding this line:\n\ncodeToName.add( new Integer(0255), COSName.getPDFName(\"hyphen\"));\n\nto the end of the WinAnsiEncoding constructor seems to fix the issue."
    ],
    [
        "PDFBOX-1713",
        "PDFBOX-1357",
        "[PATCH] Bullet character not rendered See attached file. In WinAnsiEncoding, any unused code greater than 040 maps to the bullet character.\r\nThe attached patch takes that into account to render characters that don't use the standard encoding for bullet.",
        "Missing character encoding in MacRoman & WinAnsi During my Preflight refactoring, I encountered some characters mapping that are missing from the WinAnsiEncoding and the MacRomanEncoding.\r\n\r\n\"nonbreaking space\" is missing from the WInAnsi and the MacRoman Encoding that must be mapped with the \"space\" character.\r\n\"soft hyphen\" is missing from the WinAnsi encoding that must be mapped with the \"hyphen\" character. \r\n\r\nUnfortunately, they are no clearly defined name for these two characters, so only the getName() method have been updated to return \"space\" and \"hyphen\" when code for the \"nonbreaking space\" or \"soft hyphen\" is received.\r\n"
    ],
    [
        "PDFBOX-1713",
        "PDFBOX-1686",
        "[PATCH] Bullet character not rendered See attached file. In WinAnsiEncoding, any unused code greater than 040 maps to the bullet character.\r\nThe attached patch takes that into account to render characters that don't use the standard encoding for bullet.",
        "[PATCH] Bullets missing Using PDFToImage bullets are missing"
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-490",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-924",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-984",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-1019",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-1068",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-1296",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-1436",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-1520",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-1717",
        "PDFBOX-1699",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". "
    ],
    [
        "PDFBOX-1722",
        "PDFBOX-1414",
        "PDF conversion to image crashes the JVM because PDFBOX dont find the font and getFontDescriptor some pdf files crashes the JVM during conversion to image with the following message : \r\n\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x0000000060d07697, pid=6488, tid=8628\r\n#\r\n# JRE version: 7.0_25-b17\r\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (23.25-b01 mixed mode windows-amd64 compressed oops)\r\n# Problematic frame:\r\n# C  [t2k.dll+0x17697]\r\n#\r\n# Failed to write core dump. Minidumps are not enabled by default on client versions of Windows\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n#   http://bugreport.sun.com/bugreport/crash.jsp\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n\r\n\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.writeFont(Ljava/awt/Graphics2D;Ljava/awt/geom/AffineTransform;FFLjava/awt/font/GlyphVector;)V+63\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(Ljava/lang/String;[ILjava/awt/Graphics;FLjava/awt/geom/AffineTransform;FF)V+253\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(Lorg/apache/pdfbox/util/TextPosition;)V+436\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processEncodedText([B)V+709\r\nj  org.apache.pdfbox.util.operator.ShowTextGlyph.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V+162\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processOperator(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V+35\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/cos/COSStream;)V+126\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+20\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+43\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(Ljava/awt/Graphics;Lorg/apache/pdfbox/pdmodel/PDPage;Ljava/awt/Dimension;)V+80\r\nj  org.apache.pdfbox.pdmodel.PDPage.convertToImage(II)Ljava/awt/image/BufferedImage;+310\r\nj  com.portal.cq.util.PDFUtils.getPdfPagesAsImages(Ljava/lang/String;)Ljava/util/List;+116\r\nj  com.portal.cq.thread.CompiladorDeDocumentosRunnable.run()V+24\r\nj  java.lang.Thread.run()V+11\r\nv  ~StubRoutines::call_stub\r\n\r\nso i tried to resolve de PDFont with the bellow code:\r\n\r\ndocument = PDDocument.load(\"\\\\\\\\192.168.1.8\\\\clientes\\\\NEWSPACE\\\\IN\\\\ControleQualidade\\\\INTERFILE\\\\3032152_5.pdf\");\r\nPDFont font = PDTrueTypeFont.loadTTF(document, new File(\"//192.168.1.8/clientes/font/arial.ttf\"));\r\n\r\n@SuppressWarnings(\"unchecked\")\r\n\t\t\tList<PDPage> pages = document.getDocumentCatalog().getAllPages();\r\n\t\t\tint j = 1;\r\n\t\t\tfor (PDPage page : pages) {\r\n\t\t\t\tMap<String, PDFont> maps = page.getResources().getFonts();\r\n\t\t\t\tSet<String> chaves = maps.keySet();\r\n\t\t\t\tFont f = null;\r\n\t\t\t\tfor (String chave : chaves) {\r\n\t\t\t\t\tif (chave != null) {\r\n\t\t\t\t\t\tif (maps.get(chave).getFontDescriptor() != null) {\r\n\t\t\t\t\t\t\tf = FontManager.getAwtFont(maps.get(chave)\r\n\t\t\t\t\t\t\t\t\t.getFontDescriptor().getFontName());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tpage.getResources().getFonts().put(chave, font);\r\n\t\t\t\t\t\t\tsb.append(i+j+\".png com problemas \\n\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tBufferedImage convertedImage = page.convertToImage(BufferedImage.TYPE_BYTE_BINARY, RESOLUTION_DEFAULT);\r\n\t\t\t\tsaveImageToRepository(i, j, convertedImage);\r\n\t\t\t\tj++;\r\n\t\t\t\tif (isNegativeImage(convertedImage)) {\r\n\t\t\t\t\tbImages.add(invertNegativeImage(convertedImage));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbImages.add(convertedImage);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\nbut in the end it change all my documents\r\nwith a log:\r\n\r\nWARNING: Changing font on <\u0016> from <Arial> to the default font\r\nSet 19, 2013 3:19:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n\r\ni'll attached de result of this\r\nhow i can solve this?",
        "EXCEPTION_ACCESS_VIOLATION in fontmanager.dll When converting the attached PDF to a PNG using PDFImageWriter.writeImage I receive an EXCEPTION_ACCESS_VIOLATION in fontmanager.dll.  This is similar to PDFBOX-780 but using the PDF attached to that issue doesn't produce the error.\r\n\r\nThis error doesn't occur with 1.7 but I do get the warning \"Could not parse predefined CMAP file for 'Adobe-Identity-UCS'\"."
    ],
    [
        "PDFBOX-1722",
        "PDFBOX-1426",
        "PDF conversion to image crashes the JVM because PDFBOX dont find the font and getFontDescriptor some pdf files crashes the JVM during conversion to image with the following message : \r\n\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x0000000060d07697, pid=6488, tid=8628\r\n#\r\n# JRE version: 7.0_25-b17\r\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (23.25-b01 mixed mode windows-amd64 compressed oops)\r\n# Problematic frame:\r\n# C  [t2k.dll+0x17697]\r\n#\r\n# Failed to write core dump. Minidumps are not enabled by default on client versions of Windows\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n#   http://bugreport.sun.com/bugreport/crash.jsp\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n\r\n\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.writeFont(Ljava/awt/Graphics2D;Ljava/awt/geom/AffineTransform;FFLjava/awt/font/GlyphVector;)V+63\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(Ljava/lang/String;[ILjava/awt/Graphics;FLjava/awt/geom/AffineTransform;FF)V+253\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(Lorg/apache/pdfbox/util/TextPosition;)V+436\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processEncodedText([B)V+709\r\nj  org.apache.pdfbox.util.operator.ShowTextGlyph.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V+162\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processOperator(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V+35\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/cos/COSStream;)V+126\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+20\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+43\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(Ljava/awt/Graphics;Lorg/apache/pdfbox/pdmodel/PDPage;Ljava/awt/Dimension;)V+80\r\nj  org.apache.pdfbox.pdmodel.PDPage.convertToImage(II)Ljava/awt/image/BufferedImage;+310\r\nj  com.portal.cq.util.PDFUtils.getPdfPagesAsImages(Ljava/lang/String;)Ljava/util/List;+116\r\nj  com.portal.cq.thread.CompiladorDeDocumentosRunnable.run()V+24\r\nj  java.lang.Thread.run()V+11\r\nv  ~StubRoutines::call_stub\r\n\r\nso i tried to resolve de PDFont with the bellow code:\r\n\r\ndocument = PDDocument.load(\"\\\\\\\\192.168.1.8\\\\clientes\\\\NEWSPACE\\\\IN\\\\ControleQualidade\\\\INTERFILE\\\\3032152_5.pdf\");\r\nPDFont font = PDTrueTypeFont.loadTTF(document, new File(\"//192.168.1.8/clientes/font/arial.ttf\"));\r\n\r\n@SuppressWarnings(\"unchecked\")\r\n\t\t\tList<PDPage> pages = document.getDocumentCatalog().getAllPages();\r\n\t\t\tint j = 1;\r\n\t\t\tfor (PDPage page : pages) {\r\n\t\t\t\tMap<String, PDFont> maps = page.getResources().getFonts();\r\n\t\t\t\tSet<String> chaves = maps.keySet();\r\n\t\t\t\tFont f = null;\r\n\t\t\t\tfor (String chave : chaves) {\r\n\t\t\t\t\tif (chave != null) {\r\n\t\t\t\t\t\tif (maps.get(chave).getFontDescriptor() != null) {\r\n\t\t\t\t\t\t\tf = FontManager.getAwtFont(maps.get(chave)\r\n\t\t\t\t\t\t\t\t\t.getFontDescriptor().getFontName());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tpage.getResources().getFonts().put(chave, font);\r\n\t\t\t\t\t\t\tsb.append(i+j+\".png com problemas \\n\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tBufferedImage convertedImage = page.convertToImage(BufferedImage.TYPE_BYTE_BINARY, RESOLUTION_DEFAULT);\r\n\t\t\t\tsaveImageToRepository(i, j, convertedImage);\r\n\t\t\t\tj++;\r\n\t\t\t\tif (isNegativeImage(convertedImage)) {\r\n\t\t\t\t\tbImages.add(invertNegativeImage(convertedImage));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbImages.add(convertedImage);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\nbut in the end it change all my documents\r\nwith a log:\r\n\r\nWARNING: Changing font on <\u0016> from <Arial> to the default font\r\nSet 19, 2013 3:19:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n\r\ni'll attached de result of this\r\nhow i can solve this?",
        "JVM crashes when trying to process the attached pdf's #\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x6d703bf9, pid=5384, tid=4788\r\n#\r\n# JRE version: 6.0_18-b07\r\n# Java VM: Java HotSpot(TM) Server VM (16.0-b13 mixed mode windows-x86 )\r\n# Problematic frame:\r\n# C  [fontmanager.dll+0x13bf9]\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n#   http://java.sun.com/webapps/bugreport/crash.jsp\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n\r\n---------------  T H R E A D  ---------------\r\n\r\nCurrent thread (0x6a057400):  JavaThread \"ajp-127.0.0.1-8009-11\" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)]\r\n\r\nsiginfo: ExceptionCode=0xc0000005, reading address 0x00000010\r\n\r\nRegisters:\r\nEAX=0x00000000, EBX=0x00000000, ECX=0x0000000a, EDX=0x69b1c6c8\r\nESP=0x6cf5e89c, EBP=0x6cf5e8b4, ESI=0x6aadfdd0, EDI=0x6aadfdd0\r\nEIP=0x6d703bf9, EFLAGS=0x00010246\r\n\r\nTop of Stack: (sp=0x6cf5e89c)\r\n0x6cf5e89c:   00000000 6aadfdd0 636d6170 6aadfdd0\r\n0x6cf5e8ac:   6d703d33 685e4130 6cf5e924 6d6f3ced\r\n0x6cf5e8bc:   6aadfdd0 00000062 00000000 6cf5e920\r\n0x6cf5e8cc:   6aadfdd0 685e4130 00000001 00000000\r\n0x6cf5e8dc:   00000007 00000000 00000000 00000000\r\n0x6cf5e8ec:   00000000 6a8a3840 00000000 00000000\r\n0x6cf5e8fc:   6a8a3c98 00000000 00000000 00000000\r\n0x6cf5e90c:   6a8a3838 00000000 00000000 00000000 \r\n\r\nInstructions: (pc=0x6d703bf9)\r\n0x6d703be9:   75 51 57 68 70 61 6d 63 56 e8 6f fd ff ff 6a 00\r\n0x6d703bf9:   ff 70 10 ff 70 0c ff b6 88 00 00 00 ff b6 90 00 \r\n\r\n\r\nStack: [0x6cf10000,0x6cf60000],  sp=0x6cf5e89c,  free space=13a6cf5e3d8k\r\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\r\nC  [fontmanager.dll+0x13bf9]\r\nC  [fontmanager.dll+0x3ced]\r\nC  [fontmanager.dll+0x3da3]\r\n\r\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\r\nj  sun.font.FileFont.getGlyphImage(JI)J+0\r\nJ  sun.font.FileFontStrike.getGlyphMetrics(IZ)Ljava/awt/geom/Point2D$Float;\r\nJ  sun.font.FileFontStrike.getGlyphMetrics(I)Ljava/awt/geom/Point2D$Float;\r\nJ  sun.font.StandardGlyphVector.initPositions()V\r\nJ  sun.font.GlyphList.setFromGlyphVector(Lsun/java2d/loops/FontInfo;Ljava/awt/font/GlyphVector;FF)V\r\nJ  sun.java2d.pipe.GlyphListPipe.drawGlyphVector(Lsun/java2d/SunGraphics2D;Ljava/awt/font/GlyphVector;FF)V\r\nj  sun.java2d.pipe.ValidatePipe.drawGlyphVector(Lsun/java2d/SunGraphics2D;Ljava/awt/font/GlyphVector;FF)V+17\r\nJ  sun.java2d.SunGraphics2D.drawGlyphVector(Ljava/awt/font/GlyphVector;FF)V\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.writeFont(Ljava/awt/Graphics2D;Ljava/awt/geom/AffineTransform;FFLjava/awt/font/GlyphVector;)V+63\r\nj  org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(Ljava/lang/String;[ILjava/awt/Graphics;FLjava/awt/geom/AffineTransform;FF)V+253\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(Lorg/apache/pdfbox/util/TextPosition;)V+436\r\nJ  org.apache.pdfbox.util.PDFStreamEngine.processEncodedText([B)V\r\nJ  org.apache.pdfbox.util.operator.ShowTextGlyph.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V\r\nJ  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/cos/COSStream;)V\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+20\r\nj  org.apache.pdfbox.util.PDFStreamEngine.processStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+43\r\nj  org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(Ljava/awt/Graphics;Lorg/apache/pdfbox/pdmodel/PDPage;Ljava/awt/Dimension;)V+80\r\nj  org.apache.pdfbox.pdmodel.PDPage.convertToImage(II)Ljava/awt/image/BufferedImage;+200\r\nj  org.apache.pdfbox.pdmodel.PDPage.convertToImage()Ljava/awt/image/BufferedImage;+6\r\nj  com.otgs.ecom.utils.PdfProcessing.getPageAsImage(I)Ljava/awt/image/BufferedImage;+29\r\nj  com.otgs.ecom.utils.ThumbnailGenerator.getPreviewForPDF([B)[B+21\r\nj  com.omc.ecom.customer.db.iphone.IAttachment.setThumbnail([B)V+59\r\nj  com.omc.ecom.customer.db.iphone.IAttachment.setImage([BZ)V+14\r\nj  com.omc.ecom.customer.db.iphone.IAttachment.setCompressImage([B)V+3\r\nj  com.omc.ecom.service.impl.UploadAttachService.importUploadAttachments(Lcom/otgs/ecom/base/dbaccess/UserInfo;IILcom/oreilly/servlet/MultipartRequest;Ljava/lang/String;)V+727\r\nj  com.otgs.ecom.web.ExpenseReports.Expenses.Attachments.UploadAttachController.uploadImport(Ljavax/servlet/http/HttpServletRequest;Lcom/otgs/ecom/base/dbaccess/UserInfo;II)V+75\r\nj  com.otgs.ecom.web.ExpenseReports.Expenses.Attachments.UploadAttachController.handleRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)Lorg/springframework/web/servlet/ModelAndView;+319\r\nj  org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/lang/Object;)Lorg/springframework/web/servlet/ModelAndView;+6\r\nj  org.springframework.web.servlet.DispatcherServlet.doDispatch(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+279\r\nj  org.springframework.web.servlet.DispatcherServlet.doService(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+231\r\nj  org.springframework.web.servlet.FrameworkServlet.processRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+111\r\nj  org.springframework.web.servlet.FrameworkServlet.doPost(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+3\r\nj  javax.servlet.http.HttpServlet.service(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+139\r\nj  javax.servlet.http.HttpServlet.service(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+30\r\nj  org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+374\r\nj  org.apache.catalina.core.ApplicationFilterChain.doFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+101\r\nj  org.apache.catalina.core.StandardWrapperValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+778\r\nJ  org.apache.catalina.core.StandardContextValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V\r\nj  org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+356\r\nj  org.jboss.web.tomcat.security.JaccContextValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+42\r\nj  org.apache.catalina.core.StandardHostValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+64\r\nj  org.apache.catalina.valves.ErrorReportValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+6\r\nj  org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+35\r\nj  org.apache.catalina.core.StandardEngineValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+42\r\nj  org.apache.catalina.connector.CoyoteAdapter.service(Lorg/apache/coyote/Request;Lorg/apache/coyote/Response;)V+157\r\nJ  org.apache.coyote.ajp.AjpAprProcessor.process(J)Z\r\nj  org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler.process(J)Lorg/apache/tomcat/util/net/AprEndpoint$Handler$SocketState;+39\r\nj  org.apache.tomcat.util.net.AprEndpoint$Worker.run()V+147\r\nj  java.lang.Thread.run()V+11\r\nv  ~StubRoutines::call_stub\r\n\r\n---------------  P R O C E S S  ---------------\r\n\r\nJava Threads: ( => current thread )\r\n  0x68df6400 JavaThread \"RMI RenewClean-[127.0.0.1:1098]\" daemon [_thread_blocked, id=5140, stack(0x6e4f0000,0x6e540000)]\r\n  0x6857a400 JavaThread \"JBoss System Threads(1)-76\" daemon [_thread_blocked, id=2284, stack(0x6b6d0000,0x6b720000)]\r\n  0x6873dc00 JavaThread \"RMI TCP Connection(679)-127.0.0.1\" daemon [_thread_in_native, id=2268, stack(0x6ea40000,0x6ea90000)]\r\n  0x78095800 JavaThread \"RMI TCP Connection(685)-127.0.0.1\" daemon [_thread_in_native, id=4820, stack(0x6e9f0000,0x6ea40000)]\r\n  0x78095400 JavaThread \"RMI TCP Connection(677)-127.0.0.1\" daemon [_thread_in_native, id=2680, stack(0x6e9a0000,0x6e9f0000)]\r\n  0x69d4b400 JavaThread \"RMI TCP Connection(689)-127.0.0.1\" daemon [_thread_in_native, id=5688, stack(0x6e950000,0x6e9a0000)]\r\n  0x69502400 JavaThread \"RMI TCP Connection(682)-127.0.0.1\" daemon [_thread_in_native, id=332, stack(0x6e900000,0x6e950000)]\r\n  0x696e3400 JavaThread \"RMI TCP Connection(683)-127.0.0.1\" daemon [_thread_in_native, id=4372, stack(0x6e8b0000,0x6e900000)]\r\n  0x78043400 JavaThread \"RMI TCP Connection(687)-127.0.0.1\" daemon [_thread_in_native, id=4076, stack(0x6e860000,0x6e8b0000)]\r\n  0x696e3800 JavaThread \"RMI TCP Connection(691)-127.0.0.1\" daemon [_thread_in_native, id=5180, stack(0x6e630000,0x6e680000)]\r\n  0x6af8f400 JavaThread \"RMI TCP Connection(695)-127.0.0.1\" daemon [_thread_in_native, id=3800, stack(0x6e770000,0x6e7c0000)]\r\n  0x687af400 JavaThread \"RMI TCP Connection(693)-127.0.0.1\" daemon [_thread_in_native, id=4972, stack(0x6e720000,0x6e770000)]\r\n  0x78035800 JavaThread \"RMI TCP Connection(694)-127.0.0.1\" daemon [_thread_in_native, id=892, stack(0x6e680000,0x6e6d0000)]\r\n  0x6a628400 JavaThread \"JBoss System Threads(1)-75\" daemon [_thread_blocked, id=2596, stack(0x6e5e0000,0x6e630000)]\r\n  0x69a94800 JavaThread \"JBoss System Threads(1)-73\" daemon [_thread_blocked, id=4920, stack(0x6e540000,0x6e590000)]\r\n  0x69f2b800 JavaThread \"JBoss System Threads(1)-72\" daemon [_thread_blocked, id=4600, stack(0x6e220000,0x6e270000)]\r\n  0x69027400 JavaThread \"JBoss System Threads(1)-71\" daemon [_thread_blocked, id=1684, stack(0x6e0e0000,0x6e130000)]\r\n  0x780de400 JavaThread \"RMI TCP Connection(697)-127.0.0.1\" daemon [_thread_in_native, id=2360, stack(0x6e4a0000,0x6e4f0000)]\r\n  0x6824cc00 JavaThread \"RMI TCP Connection(idle)\" daemon [_thread_blocked, id=5736, stack(0x6e450000,0x6e4a0000)]\r\n  0x69770400 JavaThread \"RMI TCP Connection(idle)\" daemon [_thread_blocked, id=2404, stack(0x6e270000,0x6e2c0000)]\r\n  0x6a9aa800 JavaThread \"JBoss System Threads(1)-70\" daemon [_thread_blocked, id=3288, stack(0x6e180000,0x6e1d0000)]\r\n  0x685f1800 JavaThread \"JBoss System Threads(1)-69\" daemon [_thread_blocked, id=5460, stack(0x6e1d0000,0x6e220000)]\r\n  0x68246800 JavaThread \"JBoss System Threads(1)-68\" daemon [_thread_blocked, id=4708, stack(0x6e130000,0x6e180000)]\r\n  0x68ba2800 JavaThread \"RMI TCP Connection(696)-127.0.0.1\" daemon [_thread_in_native, id=3420, stack(0x6e6d0000,0x6e720000)]\r\n  0x69762000 JavaThread \"ajp-127.0.0.1-8009-23\" daemon [_thread_blocked, id=3120, stack(0x6dff0000,0x6e040000)]\r\n  0x66d20400 JavaThread \"ajp-127.0.0.1-8009-22\" daemon [_thread_blocked, id=5444, stack(0x6dfa0000,0x6dff0000)]\r\n  0x6898a800 JavaThread \"EsamApiServer-3114\" [_thread_in_native, id=1676, stack(0x6e400000,0x6e450000)]\r\n  0x68875c00 JavaThread \"EsamApiServer-2805\" [_thread_in_native, id=4384, stack(0x6e3b0000,0x6e400000)]\r\n  0x680c6800 JavaThread \"EsamApiServer-2781\" [_thread_in_native, id=2788, stack(0x6e360000,0x6e3b0000)]\r\n  0x68526400 JavaThread \"EsamApiServer-2780\" [_thread_in_native, id=5592, stack(0x6e310000,0x6e360000)]\r\n  0x68351400 JavaThread \"EsamApiServer-2779\" [_thread_in_native, id=5888, stack(0x6e2c0000,0x6e310000)]\r\n  0x6a247400 JavaThread \"MultiThreadedHttpConnectionManager cleanup\" daemon [_thread_blocked, id=2484, stack(0x6da00000,0x6da50000)]\r\n  0x68921800 JavaThread \"ajp-127.0.0.1-8009-21\" daemon [_thread_blocked, id=4896, stack(0x6e090000,0x6e0e0000)]\r\n  0x6a9a2400 JavaThread \"ajp-127.0.0.1-8009-20\" daemon [_thread_blocked, id=4792, stack(0x6e040000,0x6e090000)]\r\n  0x68969c00 JavaThread \"Timer-6\" [_thread_blocked, id=4588, stack(0x6daf0000,0x6db40000)]\r\n  0x68ca6400 JavaThread \"ajp-127.0.0.1-8009-19\" daemon [_thread_blocked, id=6048, stack(0x6daa0000,0x6daf0000)]\r\n  0x692b1400 JavaThread \"ajp-127.0.0.1-8009-18\" daemon [_thread_in_native, id=136, stack(0x6da50000,0x6daa0000)]\r\n  0x7948b400 JavaThread \"EsamApiServer-1832\" [_thread_in_native, id=4172, stack(0x6d9b0000,0x6da00000)]\r\n  0x67196400 JavaThread \"EsamApiServer-1065\" [_thread_in_native, id=5644, stack(0x6d7c0000,0x6d810000)]\r\n  0x6982b400 JavaThread \"EsamApiServer-1064\" [_thread_in_native, id=312, stack(0x6d750000,0x6d7a0000)]\r\n  0x68e54400 JavaThread \"EsamApiServer-4998\" [_thread_in_native, id=4760, stack(0x6d5a0000,0x6d5f0000)]\r\n  0x686fd400 JavaThread \"EsamApiServer-4988\" [_thread_in_native, id=2272, stack(0x6b680000,0x6b6d0000)]\r\n  0x6986c400 JavaThread \"Thread-45\" [_thread_in_native, id=3988, stack(0x6d670000,0x6d6c0000)]\r\n  0x68edd400 JavaThread \"Connection listener 2\" daemon [_thread_in_native, id=3652, stack(0x6d620000,0x6d670000)]\r\n  0x6909b800 JavaThread \"AWT-Windows\" daemon [_thread_in_native, id=1812, stack(0x6d550000,0x6d5a0000)]\r\n  0x69380400 JavaThread \"Java2D Disposer\" daemon [_thread_blocked, id=4676, stack(0x6d350000,0x6d3a0000)]\r\n  0x69e4d400 JavaThread \"EsamApiServer-4933\" [_thread_in_native, id=5236, stack(0x6d1a0000,0x6d1f0000)]\r\n  0x69ba0800 JavaThread \"EsamApiServer-4931\" [_thread_in_native, id=3156, stack(0x6d0f0000,0x6d140000)]\r\n  0x69c7c400 JavaThread \"RMI Scheduler(0)\" daemon [_thread_blocked, id=3680, stack(0x6d0a0000,0x6d0f0000)]\r\n  0x6a67f400 JavaThread \"OOB-8,127.0.0.1:4869\" [_thread_blocked, id=4468, stack(0x6b950000,0x6b9a0000)]\r\n  0x6908a400 JavaThread \"EsamApiServer-4904\" [_thread_in_native, id=4040, stack(0x6b900000,0x6b950000)]\r\n  0x69fadc00 JavaThread \"OOB-7,127.0.0.1:4869\" [_thread_blocked, id=4936, stack(0x6b8b0000,0x6b900000)]\r\n  0x671a0400 JavaThread \"OOB-6,127.0.0.1:4869\" [_thread_blocked, id=4568, stack(0x6b860000,0x6b8b0000)]\r\n  0x69436800 JavaThread \"OOB-5,127.0.0.1:4869\" [_thread_blocked, id=4152, stack(0x6b810000,0x6b860000)]\r\n  0x6a18e800 JavaThread \"ajp-127.0.0.1-8009-17\" daemon [_thread_blocked, id=5096, stack(0x6d150000,0x6d1a0000)]\r\n  0x68db8400 JavaThread \"ajp-127.0.0.1-8009-16\" daemon [_thread_blocked, id=4100, stack(0x6bbb0000,0x6bc00000)]\r\n  0x699a9400 JavaThread \"ajp-127.0.0.1-8009-15\" daemon [_thread_blocked, id=5632, stack(0x6bb60000,0x6bbb0000)]\r\n  0x69ac1400 JavaThread \"ajp-127.0.0.1-8009-14\" daemon [_thread_blocked, id=4212, stack(0x6d000000,0x6d050000)]\r\n  0x6931e400 JavaThread \"ajp-127.0.0.1-8009-13\" daemon [_thread_blocked, id=1916, stack(0x6cfb0000,0x6d000000)]\r\n  0x68c5f400 JavaThread \"ajp-127.0.0.1-8009-12\" daemon [_thread_blocked, id=5220, stack(0x6cf60000,0x6cfb0000)]\r\n=>0x6a057400 JavaThread \"ajp-127.0.0.1-8009-11\" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)]\r\n  0x68cf9400 JavaThread \"ajp-127.0.0.1-8009-10\" daemon [_thread_blocked, id=4776, stack(0x6cec0000,0x6cf10000)]\r\n  0x66f2a400 JavaThread \"ajp-127.0.0.1-8009-9\" daemon [_thread_blocked, id=5972, stack(0x6ce70000,0x6cec0000)]\r\n  0x68430400 JavaThread \"ajp-127.0.0.1-8009-8\" daemon [_thread_in_native, id=3332, stack(0x6ce20000,0x6ce70000)]\r\n  0x689cb400 JavaThread \"ajp-127.0.0.1-8009-7\" daemon [_thread_blocked, id=1904, stack(0x6cdd0000,0x6ce20000)]\r\n  0x686ed800 JavaThread \"ajp-127.0.0.1-8009-6\" daemon [_thread_blocked, id=348, stack(0x6cd80000,0x6cdd0000)]\r\n  0x6957b400 JavaThread \"ajp-127.0.0.1-8009-5\" daemon [_thread_blocked, id=3424, stack(0x6cd30000,0x6cd80000)]\r\n  0x65b20800 JavaThread \"ajp-127.0.0.1-8009-4\" daemon [_thread_blocked, id=5988, stack(0x6cce0000,0x6cd30000)]\r\n  0x69c4bc00 JavaThread \"ajp-127.0.0.1-8009-3\" daemon [_thread_blocked, id=5904, stack(0x6cc90000,0x6cce0000)]\r\n  0x69c4b400 JavaThread \"ajp-127.0.0.1-8009-2\" daemon [_thread_blocked, id=4428, stack(0x6bc30000,0x6bc80000)]\r\n  0x6a706400 JavaThread \"ajp-127.0.0.1-8009-1\" daemon [_thread_blocked, id=5124, stack(0x65ee0000,0x65f30000)]\r\n  0x6604d400 JavaThread \"ajp-127.0.0.1-8009-Acceptor-0\" daemon [_thread_in_native, id=784, stack(0x6cc40000,0x6cc90000)]\r\n  0x6609e400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-7\" daemon [_thread_blocked, id=4596, stack(0x6cbf0000,0x6cc40000)]\r\n  0x68699400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-6\" daemon [_thread_blocked, id=5488, stack(0x6cba0000,0x6cbf0000)]\r\n  0x66e5f000 JavaThread \"ajp-127.0.0.1-8009-CometPoller-5\" daemon [_thread_blocked, id=3932, stack(0x6cb50000,0x6cba0000)]\r\n  0x69790800 JavaThread \"ajp-127.0.0.1-8009-CometPoller-4\" daemon [_thread_blocked, id=4540, stack(0x6cb00000,0x6cb50000)]\r\n  0x68ff2c00 JavaThread \"ajp-127.0.0.1-8009-CometPoller-3\" daemon [_thread_blocked, id=6116, stack(0x6cab0000,0x6cb00000)]\r\n  0x69d74400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-2\" daemon [_thread_blocked, id=1412, stack(0x6ca60000,0x6cab0000)]\r\n  0x6a766400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-1\" daemon [_thread_blocked, id=5876, stack(0x6ca10000,0x6ca60000)]\r\n  0x69421400 JavaThread \"ajp-127.0.0.1-8009-CometPoller-0\" daemon [_thread_blocked, id=1304, stack(0x6c9c0000,0x6ca10000)]\r\n  0x68836800 JavaThread \"ajp-127.0.0.1-8009-Poller-7\" daemon [_thread_in_native, id=3208, stack(0x6c970000,0x6c9c0000)]\r\n  0x68a40400 JavaThread \"ajp-127.0.0.1-8009-Poller-6\" daemon [_thread_in_native, id=2800, stack(0x6c920000,0x6c970000)]\r\n  0x68aa1400 JavaThread \"ajp-127.0.0.1-8009-Poller-5\" daemon [_thread_in_native, id=1776, stack(0x6c8d0000,0x6c920000)]\r\n  0x682f7800 JavaThread \"ajp-127.0.0.1-8009-Poller-4\" daemon [_thread_in_native, id=488, stack(0x6c480000,0x6c4d0000)]\r\n  0x66e64c00 JavaThread \"ajp-127.0.0.1-8009-Poller-3\" daemon [_thread_in_native, id=1800, stack(0x6c430000,0x6c480000)]\r\n  0x6a211400 JavaThread \"ajp-127.0.0.1-8009-Poller-2\" daemon [_thread_in_native, id=5668, stack(0x6c3e0000,0x6c430000)]\r\n  0x68bda400 JavaThread \"ajp-127.0.0.1-8009-Poller-1\" daemon [_thread_in_native, id=780, stack(0x6c390000,0x6c3e0000)]\r\n  0x6a20c400 JavaThread \"ajp-127.0.0.1-8009-Poller-0\" daemon [_thread_in_native, id=4976, stack(0x6c340000,0x6c390000)]\r\n  0x66037400 JavaThread \"http-127.0.0.1-8080-Acceptor-0\" daemon [_thread_in_native, id=964, stack(0x6c2f0000,0x6c340000)]\r\n  0x6921d400 JavaThread \"http-127.0.0.1-8080-Sendfile-0\" daemon [_thread_blocked, id=5556, stack(0x6c2a0000,0x6c2f0000)]\r\n  0x686ca800 JavaThread \"http-127.0.0.1-8080-CometPoller-7\" daemon [_thread_blocked, id=4440, stack(0x6c250000,0x6c2a0000)]\r\n  0x68c96400 JavaThread \"http-127.0.0.1-8080-CometPoller-6\" daemon [_thread_blocked, id=2024, stack(0x6c200000,0x6c250000)]\r\n  0x69f98800 JavaThread \"http-127.0.0.1-8080-CometPoller-5\" daemon [_thread_blocked, id=5788, stack(0x6c1b0000,0x6c200000)]\r\n  0x66ff9400 JavaThread \"http-127.0.0.1-8080-CometPoller-4\" daemon [_thread_blocked, id=4116, stack(0x6c160000,0x6c1b0000)]\r\n  0x68910400 JavaThread \"http-127.0.0.1-8080-CometPoller-3\" daemon [_thread_blocked, id=3884, stack(0x6c110000,0x6c160000)]\r\n  0x6a4f9400 JavaThread \"http-127.0.0.1-8080-CometPoller-2\" daemon [_thread_blocked, id=1052, stack(0x6c0c0000,0x6c110000)]\r\n  0x670abc00 JavaThread \"http-127.0.0.1-8080-CometPoller-1\" daemon [_thread_blocked, id=2892, stack(0x6c070000,0x6c0c0000)]\r\n  0x688b7000 JavaThread \"http-127.0.0.1-8080-CometPoller-0\" daemon [_thread_blocked, id=5928, stack(0x6c020000,0x6c070000)]\r\n  0x6a308400 JavaThread \"http-127.0.0.1-8080-Poller-7\" daemon [_thread_blocked, id=5892, stack(0x6bfd0000,0x6c020000)]\r\n  0x6a479400 JavaThread \"http-127.0.0.1-8080-Poller-6\" daemon [_thread_blocked, id=4064, stack(0x6bf80000,0x6bfd0000)]\r\n  0x687dd800 JavaThread \"http-127.0.0.1-8080-Poller-5\" daemon [_thread_blocked, id=1816, stack(0x6bd30000,0x6bd80000)]\r\n  0x68f9a400 JavaThread \"http-127.0.0.1-8080-Poller-4\" daemon [_thread_blocked, id=5380, stack(0x6bce0000,0x6bd30000)]\r\n  0x6a46f400 JavaThread \"http-127.0.0.1-8080-Poller-3\" daemon [_thread_blocked, id=4696, stack(0x6bc90000,0x6bce0000)]\r\n  0x69308800 JavaThread \"http-127.0.0.1-8080-Poller-2\" daemon [_thread_blocked, id=3072, stack(0x6bb10000,0x6bb60000)]\r\n  0x6a67fc00 JavaThread \"http-127.0.0.1-8080-Poller-1\" daemon [_thread_blocked, id=3836, stack(0x6bac0000,0x6bb10000)]\r\n  0x6a46fc00 JavaThread \"http-127.0.0.1-8080-Poller-0\" daemon [_thread_blocked, id=5228, stack(0x6ba70000,0x6bac0000)]\r\n  0x6a316800 JavaThread \"Thread-5\" [_thread_blocked, id=5192, stack(0x6ba20000,0x6ba70000)]\r\n  0x6a50a000 JavaThread \"JBossLifeThread\" [_thread_blocked, id=3444, stack(0x6b9d0000,0x6ba20000)]\r\n  0x66fe1400 JavaThread \"EsamApiServer\" [_thread_in_native, id=4572, stack(0x6b7c0000,0x6b810000)]\r\n  0x68b4c400 JavaThread \"Thread-25\" [_thread_blocked, id=5796, stack(0x6b770000,0x6b7c0000)]\r\n  0x685c0800 JavaThread \"Thread-24\" [_thread_blocked, id=4260, stack(0x6b720000,0x6b770000)]\r\n  0x693b5800 JavaThread \"Thread-21\" [_thread_blocked, id=2768, stack(0x6b630000,0x6b680000)]\r\n  0x694ba400 JavaThread \"Timer-5\" [_thread_blocked, id=4220, stack(0x6b5e0000,0x6b630000)]\r\n  0x6a0bb800 JavaThread \"Thread-19\" [_thread_blocked, id=5752, stack(0x6b590000,0x6b5e0000)]\r\n  0x697cbc00 JavaThread \"Thread-18\" [_thread_blocked, id=132, stack(0x6b540000,0x6b590000)]\r\n  0x68976400 JavaThread \"OOB-4,127.0.0.1:4869\" [_thread_blocked, id=3432, stack(0x6b4f0000,0x6b540000)]\r\n  0x68aafc00 JavaThread \"OOB-3,127.0.0.1:4869\" [_thread_blocked, id=5916, stack(0x6b4a0000,0x6b4f0000)]\r\n  0x66e81400 JavaThread \"ConnectionValidator\" daemon [_thread_blocked, id=3044, stack(0x6b450000,0x6b4a0000)]\r\n  0x69007c00 JavaThread \"IdleRemover\" daemon [_thread_blocked, id=1760, stack(0x6b400000,0x6b450000)]\r\n  0x69f33400 JavaThread \"Thread-17\" [_thread_blocked, id=2040, stack(0x6b3b0000,0x6b400000)]\r\n  0x68d85400 JavaThread \"PipelineJobScheduler\" [_thread_blocked, id=2560, stack(0x6b360000,0x6b3b0000)]\r\n  0x69fc1c00 JavaThread \"Timer-4,127.0.0.1:4869\" daemon [_thread_blocked, id=1944, stack(0x6b310000,0x6b360000)]\r\n  0x69d20c00 JavaThread \"Timer-3,127.0.0.1:4869\" daemon [_thread_blocked, id=3416, stack(0x6b2c0000,0x6b310000)]\r\n  0x68f63c00 JavaThread \"OOB-2,127.0.0.1:4869\" [_thread_blocked, id=5076, stack(0x6b270000,0x6b2c0000)]\r\n  0x68d6dc00 JavaThread \"OOB-1,127.0.0.1:4869\" [_thread_blocked, id=1732, stack(0x6b220000,0x6b270000)]\r\n  0x69efb400 JavaThread \"Timer-2,127.0.0.1:4869\" daemon [_thread_blocked, id=5072, stack(0x6b1d0000,0x6b220000)]\r\n  0x68f8bc00 JavaThread \"UDP mcast,127.0.0.1:4869\" [_thread_in_native, id=812, stack(0x6b180000,0x6b1d0000)]\r\n  0x69f35c00 JavaThread \"UDP ucast,127.0.0.1:4869\" [_thread_in_native, id=4092, stack(0x6b130000,0x6b180000)]\r\n  0x68845800 JavaThread \"FD_SOCK server socket acceptor,null\" daemon [_thread_in_native, id=3008, stack(0x6b0e0000,0x6b130000)]\r\n  0x69fcfc00 JavaThread \"Timer-1,127.0.0.1:4869\" daemon [_thread_blocked, id=4852, stack(0x6b090000,0x6b0e0000)]\r\n  0x68126400 JavaThread \"Timer-4\" [_thread_blocked, id=5760, stack(0x67eb0000,0x67f00000)]\r\n  0x696eb400 JavaThread \"Timer-3\" [_thread_blocked, id=2996, stack(0x67e60000,0x67eb0000)]\r\n  0x692b5400 JavaThread \"Timer-2\" [_thread_blocked, id=5680, stack(0x67e10000,0x67e60000)]\r\n  0x69684400 JavaThread \"reaper:handler\" daemon [_thread_blocked, id=384, stack(0x67dc0000,0x67e10000)]\r\n  0x68b14400 JavaThread \"reaper:user\" daemon [_thread_blocked, id=4636, stack(0x67d70000,0x67dc0000)]\r\n  0x691d1800 JavaThread \"reaper:template\" daemon [_thread_blocked, id=4264, stack(0x67d20000,0x67d70000)]\r\n  0x68f8b400 JavaThread \"reaper:config\" daemon [_thread_blocked, id=2852, stack(0x67cd0000,0x67d20000)]\r\n  0x68ead400 JavaThread \"org.webmacro.util.ThreadScheduler\" daemon [_thread_blocked, id=2148, stack(0x67c80000,0x67cd0000)]\r\n  0x68a62400 JavaThread \"UILServerILService Accept Thread\" [_thread_in_native, id=4968, stack(0x67c30000,0x67c80000)]\r\n  0x65cfb400 JavaThread \"TimeoutFactory-0\" daemon [_thread_blocked, id=4396, stack(0x67be0000,0x67c30000)]\r\n  0x68b15800 JavaThread \"JCA PoolFiller\" [_thread_blocked, id=2972, stack(0x67b90000,0x67be0000)]\r\n  0x68761400 JavaThread \"Timer-1\" daemon [_thread_blocked, id=1552, stack(0x67b40000,0x67b90000)]\r\n  0x66d8a400 JavaThread \"HSQLDB Timer @1826ac5\" daemon [_thread_blocked, id=2744, stack(0x679f0000,0x67a40000)]\r\n  0x6706e400 JavaThread \"DefaultQuartzScheduler_QuartzSchedulerThread\" [_thread_blocked, id=3308, stack(0x679a0000,0x679f0000)]\r\n  0x689b3400 JavaThread \"DefaultQuartzScheduler_Worker-9\" [_thread_blocked, id=3868, stack(0x67950000,0x679a0000)]\r\n  0x685a3400 JavaThread \"DefaultQuartzScheduler_Worker-8\" [_thread_blocked, id=680, stack(0x67900000,0x67950000)]\r\n  0x683af800 JavaThread \"DefaultQuartzScheduler_Worker-7\" [_thread_blocked, id=5336, stack(0x678b0000,0x67900000)]\r\n  0x68433800 JavaThread \"DefaultQuartzScheduler_Worker-6\" [_thread_blocked, id=3084, stack(0x677d0000,0x67820000)]\r\n  0x68751400 JavaThread \"DefaultQuartzScheduler_Worker-5\" [_thread_blocked, id=2676, stack(0x67780000,0x677d0000)]\r\n  0x68568800 JavaThread \"DefaultQuartzScheduler_Worker-4\" [_thread_blocked, id=3040, stack(0x67730000,0x67780000)]\r\n  0x66396400 JavaThread \"DefaultQuartzScheduler_Worker-3\" [_thread_blocked, id=1920, stack(0x676e0000,0x67730000)]\r\n  0x68601000 JavaThread \"DefaultQuartzScheduler_Worker-2\" [_thread_blocked, id=5676, stack(0x67690000,0x676e0000)]\r\n  0x69126400 JavaThread \"DefaultQuartzScheduler_Worker-1\" [_thread_blocked, id=1628, stack(0x67640000,0x67690000)]\r\n  0x68949800 JavaThread \"DefaultQuartzScheduler_Worker-0\" [_thread_blocked, id=2824, stack(0x675f0000,0x67640000)]\r\n  0x66e21800 JavaThread \"WorkManager(2)-1\" daemon [_thread_blocked, id=148, stack(0x675a0000,0x675f0000)]\r\n  0x69622400 JavaThread \"Thread-6\" daemon [_thread_blocked, id=2700, stack(0x67550000,0x675a0000)]\r\n  0x683b7400 JavaThread \"JBossMQ Cache Reference Softner\" daemon [_thread_blocked, id=2792, stack(0x67860000,0x678b0000)]\r\n  0x671d6400 JavaThread \"ContainerBackgroundProcessor[StandardEngine[jboss.web]]\" daemon [_thread_blocked, id=5196, stack(0x67500000,0x67550000)]\r\n  0x66f58400 JavaThread \"SubscriptionWatchDog\" [_thread_blocked, id=2776, stack(0x66a00000,0x66a50000)]\r\n  0x66d54c00 JavaThread \"ServerSocketRefresh\" daemon [_thread_blocked, id=3440, stack(0x669b0000,0x66a00000)]\r\n  0x66d1ac00 JavaThread \"AcceptorThread#0:3873\" [_thread_in_native, id=292, stack(0x66960000,0x669b0000)]\r\n  0x66da3c00 JavaThread \"ServerSocketRefresh\" daemon [_thread_blocked, id=4752, stack(0x66910000,0x66960000)]\r\n  0x662bb400 JavaThread \"AcceptorThread#0:4446\" [_thread_in_native, id=2764, stack(0x668c0000,0x66910000)]\r\n  0x66146800 JavaThread \"PooledInvokerAcceptor#0-4445\" [_thread_in_native, id=2572, stack(0x66870000,0x668c0000)]\r\n  0x66e88c00 JavaThread \"RMI TCP Accept-4444\" daemon [_thread_in_native, id=4312, stack(0x66820000,0x66870000)]\r\n  0x66e88400 JavaThread \"Listener:4844\" daemon [_thread_in_native, id=1896, stack(0x667d0000,0x66820000)]\r\n  0x66e72400 JavaThread \"Thread-4\" daemon [_thread_blocked, id=1084, stack(0x66780000,0x667d0000)]\r\n  0x66d09800 JavaThread \"Thread-3\" daemon [_thread_blocked, id=2872, stack(0x66730000,0x66780000)]\r\n  0x66c09400 JavaThread \"Listener:4840\" daemon [_thread_in_native, id=1948, stack(0x666e0000,0x66730000)]\r\n  0x660b7400 JavaThread \"JBoss System Threads(1)-2\" daemon [_thread_in_native, id=5172, stack(0x66690000,0x666e0000)]\r\n  0x662f2800 JavaThread \"GC Daemon\" daemon [_thread_blocked, id=4436, stack(0x66640000,0x66690000)]\r\n  0x662f2000 JavaThread \"RMI Reaper\" [_thread_blocked, id=3888, stack(0x665f0000,0x66640000)]\r\n  0x66eabc00 JavaThread \"RMI TCP Accept-1098\" daemon [_thread_in_native, id=1528, stack(0x665a0000,0x665f0000)]\r\n  0x661cfc00 JavaThread \"JBoss System Threads(1)-1\" daemon [_thread_in_native, id=3024, stack(0x66550000,0x665a0000)]\r\n  0x66dd6800 JavaThread \"ScannerThread\" daemon [_thread_blocked, id=3088, stack(0x66460000,0x664b0000)]\r\n  0x66c12400 JavaThread \"Timer-0\" daemon [_thread_blocked, id=5260, stack(0x66410000,0x66460000)]\r\n  0x002a8c00 JavaThread \"DestroyJavaVM\" [_thread_blocked, id=2228, stack(0x00640000,0x00690000)]\r\n  0x65b15800 JavaThread \"Low Memory Detector\" daemon [_thread_blocked, id=4988, stack(0x65e40000,0x65e90000)]\r\n  0x65b13400 JavaThread \"CompilerThread1\" daemon [_thread_blocked, id=1408, stack(0x65df0000,0x65e40000)]\r\n  0x65b0d800 JavaThread \"CompilerThread0\" daemon [_thread_blocked, id=3304, stack(0x65da0000,0x65df0000)]\r\n  0x65b0c000 JavaThread \"Attach Listener\" daemon [_thread_blocked, id=1480, stack(0x65d50000,0x65da0000)]\r\n  0x65b0a800 JavaThread \"Surrogate Locker Thread (CMS)\" daemon [_thread_blocked, id=1456, stack(0x65d00000,0x65d50000)]\r\n  0x623ad400 JavaThread \"Finalizer\" daemon [_thread_blocked, id=1320, stack(0x65ab0000,0x65b00000)]\r\n  0x623abc00 JavaThread \"Reference Handler\" daemon [_thread_blocked, id=2780, stack(0x65a60000,0x65ab0000)]\r\n\r\nOther Threads:\r\n  0x623a9400 VMThread [stack: 0x65a10000,0x65a60000] [id=5344]\r\n  0x65b17800 WatcherThread [stack: 0x65e90000,0x65ee0000] [id=456]\r\n\r\nVM state:not at safepoint (normal execution)\r\n\r\nVM Mutex/Monitor currently owned by a thread: None\r\n\r\nHeap\r\n par new generation   total 29504K, used 10015K [0x037f0000, 0x057f0000, 0x057f0000)\r\n  eden space 26240K,  26% used [0x037f0000, 0x03ed3a50, 0x05190000)\r\n  from space 3264K,  90% used [0x054c0000, 0x057a41e0, 0x057f0000)\r\n  to   space 3264K,   0% used [0x05190000, 0x05190000, 0x054c0000)\r\n concurrent mark-sweep generation total 991232K, used 569428K [0x057f0000, 0x41ff0000, 0x41ff0000)\r\n concurrent-mark-sweep perm gen total 195336K, used 116938K [0x41ff0000, 0x4deb2000, 0x61ff0000)\r\n\r\nDynamic libraries:\r\n0x00400000 - 0x00424000 \tC:\\Java\\jdk1.6.0_18\\bin\\java.exe\r\n0x7c800000 - 0x7c8c3000 \tC:\\WINDOWS\\system32\\ntdll.dll\r\n0x77e40000 - 0x77f42000 \tC:\\WINDOWS\\system32\\kernel32.dll\r\n0x7d1e0000 - 0x7d27c000 \tC:\\WINDOWS\\system32\\ADVAPI32.dll\r\n0x77c50000 - 0x77cf0000 \tC:\\WINDOWS\\system32\\RPCRT4.dll\r\n0x76f50000 - 0x76f63000 \tC:\\WINDOWS\\system32\\Secur32.dll\r\n0x7c340000 - 0x7c396000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\msvcr71.dll\r\n0x6db70000 - 0x6df9b000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\server\\jvm.dll\r\n0x77380000 - 0x77411000 \tC:\\WINDOWS\\system32\\USER32.dll\r\n0x77c00000 - 0x77c49000 \tC:\\WINDOWS\\system32\\GDI32.dll\r\n0x76aa0000 - 0x76acd000 \tC:\\WINDOWS\\system32\\WINMM.dll\r\n0x76290000 - 0x762ad000 \tC:\\WINDOWS\\system32\\IMM32.DLL\r\n0x71bc0000 - 0x71bc8000 \tC:\\WINDOWS\\system32\\rdpsnd.dll\r\n0x771f0000 - 0x77201000 \tC:\\WINDOWS\\system32\\WINSTA.dll\r\n0x77ba0000 - 0x77bfa000 \tC:\\WINDOWS\\system32\\msvcrt.dll\r\n0x71c40000 - 0x71c97000 \tC:\\WINDOWS\\system32\\NETAPI32.dll\r\n0x76b70000 - 0x76b7b000 \tC:\\WINDOWS\\system32\\PSAPI.DLL\r\n0x6d860000 - 0x6d86c000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\verify.dll\r\n0x6d3e0000 - 0x6d3ff000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\java.dll\r\n0x6d340000 - 0x6d348000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\hpi.dll\r\n0x6d8a0000 - 0x6d8af000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\zip.dll\r\n0x6d6c0000 - 0x6d6d3000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\net.dll\r\n0x71c00000 - 0x71c17000 \tC:\\WINDOWS\\system32\\WS2_32.dll\r\n0x71bf0000 - 0x71bf8000 \tC:\\WINDOWS\\system32\\WS2HELP.dll\r\n0x71b20000 - 0x71b61000 \tC:\\WINDOWS\\System32\\mswsock.dll\r\n0x76ed0000 - 0x76efa000 \tC:\\WINDOWS\\system32\\DNSAPI.dll\r\n0x76f70000 - 0x76f77000 \tC:\\WINDOWS\\System32\\winrnr.dll\r\n0x76f10000 - 0x76f3e000 \tC:\\WINDOWS\\system32\\WLDAP32.dll\r\n0x76f80000 - 0x76f85000 \tC:\\WINDOWS\\system32\\rasadhlp.dll\r\n0x6d610000 - 0x6d619000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\management.dll\r\n0x68000000 - 0x68035000 \tC:\\WINDOWS\\system32\\rsaenh.dll\r\n0x7c8d0000 - 0x7d0cf000 \tC:\\WINDOWS\\system32\\SHELL32.dll\r\n0x7d180000 - 0x7d1d2000 \tC:\\WINDOWS\\system32\\SHLWAPI.dll\r\n0x77420000 - 0x77523000 \tC:\\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.3790.4770_x-ww_05FDF087\\comctl32.dll\r\n0x664b0000 - 0x6650a000 \tC:\\WINDOWS\\system32\\hnetcfg.dll\r\n0x71ae0000 - 0x71ae8000 \tC:\\WINDOWS\\System32\\wshtcpip.dll\r\n0x66a50000 - 0x66a6c000 \tC:\\jboss-4.2.3.GA\\bin\\native\\libtcnative-1.dll\r\n0x66a70000 - 0x66a95000 \tC:\\jboss-4.2.3.GA\\bin\\native\\libapr-1.dll\r\n0x66aa0000 - 0x66ba7000 \tC:\\jboss-4.2.3.GA\\bin\\native\\LIBEAY32.dll\r\n0x71bb0000 - 0x71bb9000 \tC:\\WINDOWS\\system32\\WSOCK32.dll\r\n0x66bb0000 - 0x66be2000 \tC:\\jboss-4.2.3.GA\\bin\\native\\SSLEAY32.dll\r\n0x6d6e0000 - 0x6d6e9000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\nio.dll\r\n0x6d840000 - 0x6d848000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\sunmscapi.dll\r\n0x761b0000 - 0x76243000 \tC:\\WINDOWS\\system32\\CRYPT32.dll\r\n0x76190000 - 0x761a2000 \tC:\\WINDOWS\\system32\\MSASN1.dll\r\n0x76cf0000 - 0x76d0a000 \tC:\\WINDOWS\\system32\\iphlpapi.dll\r\n0x76cd0000 - 0x76ce9000 \tC:\\WINDOWS\\system32\\MPRAPI.dll\r\n0x76df0000 - 0x76e24000 \tC:\\WINDOWS\\system32\\ACTIVEDS.dll\r\n0x76dc0000 - 0x76de8000 \tC:\\WINDOWS\\system32\\adsldpc.dll\r\n0x76b80000 - 0x76bae000 \tC:\\WINDOWS\\system32\\credui.dll\r\n0x76a80000 - 0x76a92000 \tC:\\WINDOWS\\system32\\ATL.DLL\r\n0x77670000 - 0x777a9000 \tC:\\WINDOWS\\system32\\ole32.dll\r\n0x7d0e0000 - 0x7d16b000 \tC:\\WINDOWS\\system32\\OLEAUT32.dll\r\n0x76e30000 - 0x76e3c000 \tC:\\WINDOWS\\system32\\rtutils.dll\r\n0x7e020000 - 0x7e02f000 \tC:\\WINDOWS\\system32\\SAMLIB.dll\r\n0x770e0000 - 0x771e8000 \tC:\\WINDOWS\\system32\\SETUPAPI.dll\r\n0x6d7b0000 - 0x6d7b6000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\rmi.dll\r\n0x6d1f0000 - 0x6d33a000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\awt.dll\r\n0x73070000 - 0x73097000 \tC:\\WINDOWS\\system32\\WINSPOOL.DRV\r\n0x6b9a0000 - 0x6b9c4000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\jpeg.dll\r\n0x6d6f0000 - 0x6d744000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\fontmanager.dll\r\n0x6b040000 - 0x6b06f000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\cmm.dll\r\n0x6d500000 - 0x6d523000 \tC:\\Java\\jdk1.6.0_18\\jre\\bin\\dcpr.dll\r\n0x762b0000 - 0x762f9000 \tC:\\WINDOWS\\system32\\COMDLG32.DLL\r\n\r\nVM Arguments:\r\njvm_args: -Xrs -Djava.library.path=C:\\jboss-4.2.3.GA\\bin\\native;C:\\Perl\\site\\bin;C:\\Perl\\bin;C:\\Program Files\\Support Tools\\;C:\\Program Files\\Windows Resource Kits\\Tools\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0;C:\\GSI-TOOLS\\bin;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\VSShell\\Common7\\IDE\\;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Java\\jdk1.6.0_18\\bin; -Dprogram.name=run.bat -Xms1000m -Xmx1000m -Xrs -XX:PermSize=128m -XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC -XX:+CMSPermGenSweepingEnabled -XX:+CMSClassUnloadingEnabled -XX:-ReduceInitialCardMarks -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -XX:CompileCommand=exclude,net/sf/saxon/event/ReceivingContentHandler,startElement -Djava.endorsed.dirs=C:\\jboss-4.2.3.GA\\lib\\endorsed \r\njava_command: org.jboss.Main\r\nLauncher Type: SUN_STANDARD\r\n\r\nEnvironment Variables:\r\nJAVA_HOME=C:\\Java\\jdk1.6.0_18\r\nPATH=C:\\jboss-4.2.3.GA\\bin\\native;C:\\Perl\\site\\bin;C:\\Perl\\bin;C:\\Program Files\\Support Tools\\;C:\\Program Files\\Windows Resource Kits\\Tools\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0;C:\\GSI-TOOLS\\bin;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\VSShell\\Common7\\IDE\\;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Java\\jdk1.6.0_18\\bin;\r\nOS=Windows_NT\r\nPROCESSOR_IDENTIFIER=x86 Family 16 Model 2 Stepping 3, AuthenticAMD\r\n\r\n\r\n\r\n---------------  S Y S T E M  ---------------\r\n\r\nOS: Windows Server 2003 family Build 3790 Service Pack 2\r\n\r\nCPU:total 2 (4 cores per cpu, 1 threads per core) family 16 model 2 stepping 3, cmov, cx8, fxsr, mmx, sse, sse2, sse3, popcnt, mmxext, 3dnow, 3dnowext, lzcnt, sse4a\r\n\r\nMemory: 4k page, physical 4193500k(1696908k free), swap 6115232k(3935444k free)\r\n\r\nvm_info: Java HotSpot(TM) Server VM (16.0-b13) for windows-x86 JRE (1.6.0_18-b07), built on Dec 17 2009 13:29:37 by \"java_re\" with MS VC++ 7.1 (VS2003)\r\n\r\ntime: Wed Oct 10 16:01:50 2012\r\nelapsed time: 8411 seconds\r\n\r\n"
    ],
    [
        "PDFBOX-1726",
        "PDFBOX-1585",
        "PDDocument.load() freezes while loading certain types of documents (Infinity load) When trying to load the document located at http://web.itu.edu.tr/~pazarci/rtv/TEK_Digital%20Video%20Measurements_25W_14700_3.pdf, the system halts and never come back. It does not exit and does not print any error message. It just stops at PDDocument.load() and does not continue.\r\n\r\nHere are the steps to reproduce (Assuming that the file is located at docPath variable):\r\n\r\n{code}\r\n\r\nFileInputStream file = new FileInputStream(docPath);\r\nPDDocument documento = PDDocument.load(stream, true);\r\n{code}\r\n\r\n",
        "org.apache.pdfbox.util.PDFTextStripper.getText() causes thread to block indefinitely URL of the problematic pdf file is http://www.redalyc.org/pdf/540/54017220.pdf\r\n\r\nMy program tries to extract the fulltext of the given pdf file in the following manner:\r\n\r\n{code}\r\nString fileName = \"/home/sascha/testfile.pdf\"                   // 1\r\nPDDocument pdDoc = PDDocument.load(fileName, true); // 2\r\nPDFTextStripper text = new PDFTextStripper();\t            // 3\r\nString fullText = text.getText(pdDoc);                               // 4\r\n{code}\r\n\r\nThe call in line 4 causes the thread to block indefinitely (runs now for more than two days without making any progress). The file is stored in a local file system (no network interaction occurs).\r\n\r\njstack indicates that the thread is not deadlocked:\r\n\r\n{code}\r\n\"main\" prio=10 tid=0x000000004187d800 nid=0x6ed8 runnable [0x00007f9e28e56000]\r\n   java.lang.Thread.State: RUNNABLE\r\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)\r\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:237)\r\n        - locked <0x00000007d73a84a0> (a java.io.BufferedInputStream)\r\n        at java.io.FilterInputStream.read(FilterInputStream.java:66)\r\n        at java.io.PushbackInputStream.read(PushbackInputStream.java:122)\r\n        at org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)\r\n        at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1006)\r\n        at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:260)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)\r\n        at org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:255)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n        at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n        at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n        at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n        at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455)\r\n        at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)\r\n        at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335)\r\n        at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:254)\r\n        at de.kobv.ked.extraction.FulltextExtraction.getFulltext(FulltextExtraction.java:65)\r\n{code}\r\n\r\nAny idea or advice on how to fix that problem? Is it possible to set up a timeout for the extraction operation?"
    ],
    [
        "PDFBOX-1726",
        "PDFBOX-1668",
        "PDDocument.load() freezes while loading certain types of documents (Infinity load) When trying to load the document located at http://web.itu.edu.tr/~pazarci/rtv/TEK_Digital%20Video%20Measurements_25W_14700_3.pdf, the system halts and never come back. It does not exit and does not print any error message. It just stops at PDDocument.load() and does not continue.\r\n\r\nHere are the steps to reproduce (Assuming that the file is located at docPath variable):\r\n\r\n{code}\r\n\r\nFileInputStream file = new FileInputStream(docPath);\r\nPDDocument documento = PDDocument.load(stream, true);\r\n{code}\r\n\r\n",
        "Loading a Russian PDF never finishes  Try to run this line:\r\n\r\nPDDocument.load(new URL(\"http://www.who.int/entity/foodsafety/publications/general/en/global_strategy_ru.pdf\"));\r\n\r\nThe loading never finishes... taking a lot of CPU.\r\n\r\nThe document size (574K) should not be the problem. I guess something in that document causes the issue with PdfBox. And I'd like to know if such could be a more general issue or what.\r\n\r\nThanks! "
    ],
    [
        "PDFBOX-1751",
        "PDFBOX-1314",
        "Signing external signed document again with pdfbox, break the document. 1/ I sign a file using this method\r\n\r\n\tpublic static void signByPdfbox(\r\n\t\t\tFile inputPDF,\r\n\t\t\tFile outputPDF,\r\n\t\t\tKeyStore ks,\r\n\t\t\tString password) \r\n\tthrows IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, COSVisitorException, SignatureException {\r\n\r\n\t\tPDDocument inputDoc = PDDocument.load(inputPDF);\r\n\t\t\r\n\t\t\r\n\t\tPADESSigner signer = new PADESSigner(ks, password);\r\n\t\t\r\n\t\tsigner.setSignatureName(\"Hello1\");\r\n\t\tsigner.setSignatureReason(\"Why noy\");\r\n\t\tsigner.setSignatureLocation(\"Curacao\");\r\n\t\tsigner.setSignatureContactInfo(\"david.keller.fr@gmail.com\");\r\n\t\t\r\n\t\tsigner.signPDF(inputDoc, outputPDF);\r\n\t}\r\n\r\n\r\n\r\n2/ I resign the same file using the same method and in acrobat reader I have this error : SignDict/Contents illegal data\r\n\r\nI have googelized it, and I found only old topics for iText lib.\r\nI have tried the same with iText 5.X, and double signatures works\r\n\r\n\r\n",
        "PDFParser should set \"direct\" property in COSBase if this object is direct PDFParser during PDF parsing does not update COSBase#direct property - it always return false when read. Especially this issue manifests for dictionary objects when PDF is saved (either regularly or incrementally) - all dictionary objects in saved PDF, if they do not have COSBase#direct property set or are not specifically treated by COSWriter (like XObject or Resources) are written as indirect objects. Though PDF specification allows dictionary objects to be indirect, but not for /Extensions dictionary in document catalog: \"The extensions dictionary, all developer extensions dictionary entries in the extensions dictionary, as well as their entries, all shall be direct objects (i.e., this information shall be nested directly within the catalog dictionary with no indirect objects used).\" (see ISO 32000-1: 7.12 Extensions Dictionary)."
    ],
    [
        "PDFBOX-1751",
        "PDFBOX-1370",
        "Signing external signed document again with pdfbox, break the document. 1/ I sign a file using this method\r\n\r\n\tpublic static void signByPdfbox(\r\n\t\t\tFile inputPDF,\r\n\t\t\tFile outputPDF,\r\n\t\t\tKeyStore ks,\r\n\t\t\tString password) \r\n\tthrows IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, COSVisitorException, SignatureException {\r\n\r\n\t\tPDDocument inputDoc = PDDocument.load(inputPDF);\r\n\t\t\r\n\t\t\r\n\t\tPADESSigner signer = new PADESSigner(ks, password);\r\n\t\t\r\n\t\tsigner.setSignatureName(\"Hello1\");\r\n\t\tsigner.setSignatureReason(\"Why noy\");\r\n\t\tsigner.setSignatureLocation(\"Curacao\");\r\n\t\tsigner.setSignatureContactInfo(\"david.keller.fr@gmail.com\");\r\n\t\t\r\n\t\tsigner.signPDF(inputDoc, outputPDF);\r\n\t}\r\n\r\n\r\n\r\n2/ I resign the same file using the same method and in acrobat reader I have this error : SignDict/Contents illegal data\r\n\r\nI have googelized it, and I found only old topics for iText lib.\r\nI have tried the same with iText 5.X, and double signatures works\r\n\r\n\r\n",
        "Only the last visual signature is valid when multiple signatures have been added on different pages * Every visual signature that is added invalidates the previous ones (Adobe Reader displays the message that the document has changed)\r\n* If the signatures are added to different pages only the ones that have been added to the page of the last one are visible in PDFReader (Adobe displays the message in the signature view that the form field has been deleted)"
    ],
    [
        "PDFBOX-1761",
        "PDFBOX-1607",
        "java.lang.StringIndexOutOfBoundsException: String index out of range: 2047 Using code samples provided in PDFBOX-1757 using load() and loadNonSeq() gives the following exception(s) for the test file:\r\n\r\n -http://digitalcorpora.org/corp/nps/files/govdocs1/447/447403.pdf\r\n\tjava.lang.StringIndexOutOfBoundsException: String index out of range: 2047\r\n\tat java.lang.AbstractStringBuilder.deleteCharAt(AbstractStringBuilder.java:770)\r\n\tat java.lang.StringBuilder.deleteCharAt(StringBuilder.java:263)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1000)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)\r\n\t-using loadnonseq\r\n\tjava.lang.StringIndexOutOfBoundsException: String index out of range: 2047\r\n\tat java.lang.AbstractStringBuilder.deleteCharAt(AbstractStringBuilder.java:770)\r\n\tat java.lang.StringBuilder.deleteCharAt(StringBuilder.java:263)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1000)\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)",
        "StringIndexOutOfBoundsException in PDFParser I have few test files parsed fine in PDFBox 1.7.1 but not in 1.8.1:\r\n\r\njava.lang.StringIndexOutOfBoundsException: String index out of range: 2047\r\n     at java.lang.AbstractStringBuilder.deleteCharAt(AbstractStringBuilder.java:762)\r\n     at java.lang.StringBuilder.deleteCharAt(StringBuilder.java:258)\r\n     at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1000)\r\n     at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)\r\n     at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1241)\r\n     at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:558)\r\n     at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:188)"
    ],
    [
        "PDFBOX-1780",
        "PDFBOX-1314",
        "previous revision is damaged after signing  Ihave PDF file which was signed by some other application. When I try to sign it with PDFbox, previous revision is damaged. I have discussion at stackoverflow, with Michael Klink.\r\nhttp://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271\r\n\r\nwhen we see some changes merely was structural. Some changes was just rounding problem   - PDFBOX-1778.\r\n\r\nWhen I test,  problem of damaged signature was  caused from structural change [when there must be direct reference, there was indirect reference and etc..]\r\n\r\nSo we solve that problem. I will upload damaged PDF document,  fixed pdf, and the patch too.\r\n",
        "PDFParser should set \"direct\" property in COSBase if this object is direct PDFParser during PDF parsing does not update COSBase#direct property - it always return false when read. Especially this issue manifests for dictionary objects when PDF is saved (either regularly or incrementally) - all dictionary objects in saved PDF, if they do not have COSBase#direct property set or are not specifically treated by COSWriter (like XObject or Resources) are written as indirect objects. Though PDF specification allows dictionary objects to be indirect, but not for /Extensions dictionary in document catalog: \"The extensions dictionary, all developer extensions dictionary entries in the extensions dictionary, as well as their entries, all shall be direct objects (i.e., this information shall be nested directly within the catalog dictionary with no indirect objects used).\" (see ISO 32000-1: 7.12 Extensions Dictionary)."
    ],
    [
        "PDFBOX-1780",
        "PDFBOX-1370",
        "previous revision is damaged after signing  Ihave PDF file which was signed by some other application. When I try to sign it with PDFbox, previous revision is damaged. I have discussion at stackoverflow, with Michael Klink.\r\nhttp://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271\r\n\r\nwhen we see some changes merely was structural. Some changes was just rounding problem   - PDFBOX-1778.\r\n\r\nWhen I test,  problem of damaged signature was  caused from structural change [when there must be direct reference, there was indirect reference and etc..]\r\n\r\nSo we solve that problem. I will upload damaged PDF document,  fixed pdf, and the patch too.\r\n",
        "Only the last visual signature is valid when multiple signatures have been added on different pages * Every visual signature that is added invalidates the previous ones (Adobe Reader displays the message that the document has changed)\r\n* If the signatures are added to different pages only the ones that have been added to the page of the last one are visible in PDFReader (Adobe displays the message in the signature view that the form field has been deleted)"
    ],
    [
        "PDFBOX-1780",
        "PDFBOX-1751",
        "previous revision is damaged after signing  Ihave PDF file which was signed by some other application. When I try to sign it with PDFbox, previous revision is damaged. I have discussion at stackoverflow, with Michael Klink.\r\nhttp://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271\r\n\r\nwhen we see some changes merely was structural. Some changes was just rounding problem   - PDFBOX-1778.\r\n\r\nWhen I test,  problem of damaged signature was  caused from structural change [when there must be direct reference, there was indirect reference and etc..]\r\n\r\nSo we solve that problem. I will upload damaged PDF document,  fixed pdf, and the patch too.\r\n",
        "Signing external signed document again with pdfbox, break the document. 1/ I sign a file using this method\r\n\r\n\tpublic static void signByPdfbox(\r\n\t\t\tFile inputPDF,\r\n\t\t\tFile outputPDF,\r\n\t\t\tKeyStore ks,\r\n\t\t\tString password) \r\n\tthrows IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, COSVisitorException, SignatureException {\r\n\r\n\t\tPDDocument inputDoc = PDDocument.load(inputPDF);\r\n\t\t\r\n\t\t\r\n\t\tPADESSigner signer = new PADESSigner(ks, password);\r\n\t\t\r\n\t\tsigner.setSignatureName(\"Hello1\");\r\n\t\tsigner.setSignatureReason(\"Why noy\");\r\n\t\tsigner.setSignatureLocation(\"Curacao\");\r\n\t\tsigner.setSignatureContactInfo(\"david.keller.fr@gmail.com\");\r\n\t\t\r\n\t\tsigner.signPDF(inputDoc, outputPDF);\r\n\t}\r\n\r\n\r\n\r\n2/ I resign the same file using the same method and in acrobat reader I have this error : SignDict/Contents illegal data\r\n\r\nI have googelized it, and I found only old topics for iText lib.\r\nI have tried the same with iText 5.X, and double signatures works\r\n\r\n\r\n"
    ],
    [
        "PDFBOX-1785",
        "PDFBOX-212",
        "Print the chinese character I have scenario like this,\r\n\r\nWe are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as \"?\".\r\n\r\nPlease help me out of this.\r\n\r\nThanks, Sivaraman",
        "PDF Document cut German Umlauts [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1587745\nOriginally submitted by kajiro on 2006-10-31 01:05.\n\nI use the class TextToPDF for create a PDF Document\nfrom a text file. That operates correctly with a simply\ntext. But when i use german umlauts in the text like\n\u00c3\u00a4,\u00c3\u00b6,\u00c3\u00bc or \u00c3\u009f the PDF Document cut this letters. \n\nAttached is a sample document contaning four words with\nincorrectly umlauts! \n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1587745&file_id=200742\nbsp.pdf (application/pdf), 958 bytes\nUmlauts are incorrect\n\n[comment on SourceForge]\nOriginally sent by benlitchfield.\nLogged In: YES \nuser_id=601708\nOriginator: NO\n\nTo the anonymous poster, did you mean for both PDF links to be the same?\n\nBen\n\n[comment on SourceForge]\nOriginally sent by nobody.\nLogged In: NO \n\nFor PDF file, which contains accented Latin1\ncharacters:\n    http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get a u with umlauts converted into \"currency1u\"\n(look at the first name on the first page).\n\nFor the following file containing Japanese characters:\n     http://acl.ldc.upenn.edu//P/P06/P06-2052.pdf\nI get error:\n     java.io.IOException: Unknown encoding for 'H'\nI also can't seem to cut and past the form."
    ],
    [
        "PDFBOX-1785",
        "PDFBOX-553",
        "Print the chinese character I have scenario like this,\r\n\r\nWe are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as \"?\".\r\n\r\nPlease help me out of this.\r\n\r\nThanks, Sivaraman",
        "writing pdf file in Japanese, garbled use PdfBox to write pdf file in Japanese,generated file is garbled."
    ],
    [
        "PDFBOX-1785",
        "PDFBOX-922",
        "Print the chinese character I have scenario like this,\r\n\r\nWe are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as \"?\".\r\n\r\nPlease help me out of this.\r\n\r\nThanks, Sivaraman",
        "True type PDFont subclass only supports WinAnsiEncoding (hardcoded!) PDFBox cannot embed Identity-H or Identity-V type TTF fonts in the PDF it creates, making it impossible to create PDFs in any language apart from English and ones supported in WinAnsiEncoding. This behaviour is caused because method PDTrueTypeFont.loadTTF has hardcoded WinAnsiEncoding inside, and there is no Identity-H or Identity-V Encoding classes provided (to set afterwards via PDFont.setFont() )\r\n\r\nThis excludes the following languages plus many others:\r\n\r\n- Greek\r\n- Bulgarian\r\n- Swedish\r\n- Baltic languages\r\n- Malteze \r\n\r\nThe PDF created contains garbled characters and/or squares.\r\n\r\nSimple test case:\r\n\r\n{code}\r\n                PDDocument doc = null;\r\n\t\ttry {\r\n\t\t\tdoc = new PDDocument();\r\n\t\t\tPDPage page = new PDPage();\r\n\t\t\tdoc.addPage(page);\r\n\t\t\t// extract fonts for fields\r\n\t\t\tbyte[] arialNorm = extractFont(\"arial.ttf\");\r\n\t\t\t//byte[] arialBold = extractFont(\"arialbd.ttf\"); \r\n\t\t\t//PDFont font = PDType1Font.HELVETICA;\r\n\t\t\tPDFont font = PDTrueTypeFont.loadTTF(doc, new ByteArrayInputStream(arialNorm));\r\n\t\t\t\r\n\t\t\tPDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n\t\t\tcontentStream.beginText();\r\n\t\t\tcontentStream.setFont(font, 12);\r\n\t\t\tcontentStream.moveTextPositionByAmount(100, 700);\r\n\t\t\tcontentStream.drawString(\"Hello world from PDFBox \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"); // text here may appear garbled; insert any text in Greek or Bulgarian or Malteze\r\n\t\t\tcontentStream.endText();\r\n\t\t\tcontentStream.close();\r\n\t\t\tdoc.save(\"pdfbox.pdf\");\r\n\t\t\tSystem.out.println(\" created!\");\r\n\t\t} catch (Exception ioe) {\r\n\t\t\tioe.printStackTrace();\r\n\t\t} finally {\r\n\t\t\tif (doc != null) {\r\n\t\t\t\ttry { doc.close(); } catch (Exception e) {}\r\n\t\t\t}\r\n\t\t}\r\n{code}\r\n"
    ],
    [
        "PDFBOX-1785",
        "PDFBOX-1071",
        "Print the chinese character I have scenario like this,\r\n\r\nWe are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as \"?\".\r\n\r\nPlease help me out of this.\r\n\r\nThanks, Sivaraman",
        "Can not generate chinese character PDF file I practice the PDF generate code for chinese character and load the chinese font ttf, but can not get the chinese PDF with correct display.'\r\nThe code is as below: The font coding is UTF-8\r\n\r\n            doc = new PDDocument();\r\n            PDPage page = new PDPage();\r\n            doc.addPage( page );\r\n            PDFont font = PDTrueTypeFont.loadTTF(doc, \"d:\\\\temp\\\\ttf\\\\fireflysung.ttf\");\r\n            PDPageContentStream contentStream = new PDPageContentStream(doc, page);\r\n            contentStream.beginText();\r\n            contentStream.moveTextPositionByAmount(100, 700);\r\n             contentStream.setFont(font,12);\r\n            \r\n            contentStream.drawString(\"\u4e2d\u6587\u6e2c\u8a66\");\r\n            contentStream.endText();\r\n            contentStream.close();\r\n            doc.save(\"d:\\\\temp\\\\helloworld.pdf\");"
    ],
    [
        "PDFBOX-1785",
        "PDFBOX-1569",
        "Print the chinese character I have scenario like this,\r\n\r\nWe are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as \"?\".\r\n\r\nPlease help me out of this.\r\n\r\nThanks, Sivaraman",
        "Chinese, Korean - MultiByte Character displayed incorrectly While trying using Chinese Character to write to a PDF, it Displays incorrectly. Sample Code tried .\r\nAlso tried with other TTF Files fireflysung.ttf,gbsn00lp.ttf, \u91d1\u6885\u6bdb\u884c\u4e66.TTF, SimSun.ttf . Have also tried Modifying the Encoding in PDTrueTypeFont.java loadTTF(PDDocument doc, InputStream stream) method.\r\n\r\n        PDDocument pdDocument = new PDDocument();\r\n        pdDocument.addPage(new PDPage());\r\n        BufferedImage bi = new BufferedImage(10, 10, 10);\r\n        Points point = new Points(300, 500);\r\n          @SuppressWarnings(\"unchecked\")\r\n\tList<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();\r\n\tPDPage pdPage = list.get(list.size() - 1);\r\n\tString fontPathName = \"sazanami-gothic.ttf\";\r\n\tPDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,\r\n\t Sample.class.getClassLoader()\r\n\t .getResource(fontPathName).openStream() );\t\t \r\n\t\r\n\tPDJpeg ximage = new PDJpeg(pdDocument, bi);\r\n\tPDPageContentStream contentStream = new PDPageContentStream(pdDocument,\r\n\t\tpdPage, true, true);\r\n\tcontentStream.beginText();\r\n\tcontentStream.setFont(fonta,18);\r\n\tcontentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );\r\n\tcontentStream.setNonStrokingColor(Color.black);\r\n\tcontentStream.drawString(\"\u60b2\u3057\u3044\");\r\n\tcontentStream.endText();\r\n\tcontentStream.close();\r\n\tpdDocument.save(\"test/Test.pdf\");\r\n\tpdDocument.close();\t\r\n\r\nI also looked into other issues reported  PDFBOX-1071, PDFBOX-1302 , PDFBOX-491, PDFBOX-696,PDFBOX-725\r\n\r\n"
    ],
    [
        "PDFBOX-1785",
        "PDFBOX-1705",
        "Print the chinese character I have scenario like this,\r\n\r\nWe are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as \"?\".\r\n\r\nPlease help me out of this.\r\n\r\nThanks, Sivaraman",
        "can not Write Hebrew and Chinese word into a PDF  Can not write Hebrew or Chinese into PDF file. It shows unreadable codes.  If it does not support with latest version, please comments me. Thank you.\r\n{code}\r\nPDDocument document = new PDDocument();\r\nPDPage page = new PDPage();\r\ndocument.addPage( page );\r\nPDFont font = PDTrueTypeFont.loadTTF(document, \"pdf/simkai.ttf\");\r\nPDPageContentStream contentStream = new PDPageContentStream(document, page);\r\ncontentStream.beginText();\r\ncontentStream.setFont( font, 12 );\r\ncontentStream.moveTextPositionByAmount( 100, 700 );\r\ncontentStream.drawString(\"\u4e2d\u6587 = Chinese\");\r\ncontentStream.drawString(\"Hebrew= \u05d4\u05e2\u05ea\u05e7\");\r\ncontentStream.endText();\r\ncontentStream.close();\r\ndocument.save( \"pdf/Hello World.pdf\");\r\ndocument.close();\r\n{code}\r\n"
    ],
    [
        "PDFBOX-1793",
        "PDFBOX-1783",
        "Failure to extract custom encoded text PDFBox extracts a binary garble from this file.  Adobe Reader does the same.  Linux's pdftotext extracts text fairly well.  I suspect there's a custom font/encoding node that isn't being processed, but I could be wrong.",
        "PdfBox extracts werid signs instead of text PDFBox extracts complete bogus text from the attached document. I have attached the .PDF in question. I discovered this when using Tika, so I have linked the corresponding TIKA Jira issue to this issue as well."
    ],
    [
        "PDFBOX-1794",
        "PDFBOX-1107",
        "Rendering Problem with Type 3 Fonts  The attached file does not render correctly.\r\n\r\n(This is the same problem mentioned in PDFBOX-1773, but this time its not from my employer. I was able to find a tool (qpdf) to create an uncompressed PDF file and this way to remove my customer#)",
        "PDF created by Bullzip PDF Printer / www.bullzip.com / Freeware Edition shows weird characters Opening the PDF via PDFReader 1.6 + 1.7 SNAPSHOT results in an unreadable page. All other pdf viewers I tried have correctly displayed the file.\r\nThe only related log message shown was \r\n\r\n25.08.2011 11:59:41 org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nINFO: unsupported/disabled operation: EI\r\n\r\nwhich is probably unrelated. My guess its the font they used (see screenshot) however if the font is unknown or problematic, shouldn't pdfreader use a default font or something? Maybe I am wrong anyway :-)"
    ],
    [
        "PDFBOX-1806",
        "PDFBOX-1792",
        "Metadata not completely extracted by traditional parser, but is extracted by NonSequentialParser ",
        "Different metadata with NonSequentialPDFParser The traditional parser is able to extract metadata from a test document from TIKA-738.  The NonSequentialPDFParser is not able to extract metadata from that file.  Another file from the Tika test suite has metadata that can be extracted by the NonSequentialPDFParser but not by classic. "
    ],
    [
        "PDFBOX-1824",
        "PDFBOX-1562",
        "[PATCH] CFF fonts render wrong glyphs I've found three very closely related CFF encoding issues in v2.0.0 when using PDFToImage.\r\n\r\nProblem 1\r\n---------\r\n\r\nLook a line 7 of the poem, it should be \"And the mouldering dust that years have made\"\r\nbut instead says \"Afld the fioulderiflg dust that years have fiade\"\r\n\r\nThe CFF font is asseumed to use CIDs but it does not if its not a ROS font.\r\nTherefore we add a check for CFF ROS class.\r\n\r\nPatch 1 fixes this.\r\n\r\nProblem 2\r\n---------\r\n\r\nLook at line 3 \"of right shoice\" should be \"of right choice\".\r\nLikewise on line 2 of the 2nd paragraph \"And a staunsh\" should be \"And a staunch\",\r\nthe st and ch ligatures are incorrect.\r\n\r\nThis is because the font is an CFF ROS CID Font and the glyphs for the st and ch ligatures\r\nboth have no name. The CFF format achieves this by using SIDs beyond the size of the string\r\nindex, which map to .notdef. So there is a unique SID for each glyph, but not a unique name.\r\n\r\nUnfortuntely, PDFBox assumes that Type 1 fonts have glyphs with unique names, and this\r\nassumtion appears throughout the codebase. Because a glyph name and a SID perform essentially\r\nthe same role, I recommend a simple solution to the problem: when an SID beyond the size of\r\nthe string index is encounteted, instead of mapping it to .notdef it should be mapped to \r\na new name with the prefix \"SID\" for example mapping SID 409 to the name \"SID409\". That way\r\neach glyph will have a unique name, which is what PDFbox assumes.\r\n\r\nPatch 2 fixes this.\r\n\r\nProblem 3\r\n---------\r\n\r\nLook at line 2, \"That creepeth o\u00c9er ruins old!\" the word \"o'er\" is incorrectly rendered\r\nas \"o\u00c9er\". This is because the Encoding entry in the PDF maps code 201 from \"Eacute\" in the\r\nbase encoding to \"quoteright\", but this is being ignored by PDFBox.\r\n\r\nIn the CFFGlyph2D constructor PDFBox examines the font's built-in charset. When the name\r\n\"quoteright\" is encountered it is looked up in the PDF Encoding (i.e. nameToCode) where\r\nit is changed to code 201. Thus code 201 is associated with the \"quoteright\" glyph in the\r\ncodeToGlyph map. This is correct. \r\n\r\nHowever, later when the \"Eacute\" glyph is encountered, its built-in charset code is also\r\n201 (which is standard) and so the codeToGlyph map entry is overwritten, resulting in\r\ncode 201 being associated with the \"Eacute\" glyph. \r\n\r\nThe solution is to build the codeToGlyph map in a strict order: first populate it with the\r\nfont's built-in charset, then the PDF Encoding overwrites any entries which it defines.\r\n\r\nPatch 3 fixes this (and also replaces patch 2)\r\n",
        "Thumbnail of PDF is missing image When rendering a thumbnail of the attached PDF, the image of the boy holding the drumsticks is missing."
    ],
    [
        "PDFBOX-1824",
        "PDFBOX-1577",
        "[PATCH] CFF fonts render wrong glyphs I've found three very closely related CFF encoding issues in v2.0.0 when using PDFToImage.\r\n\r\nProblem 1\r\n---------\r\n\r\nLook a line 7 of the poem, it should be \"And the mouldering dust that years have made\"\r\nbut instead says \"Afld the fioulderiflg dust that years have fiade\"\r\n\r\nThe CFF font is asseumed to use CIDs but it does not if its not a ROS font.\r\nTherefore we add a check for CFF ROS class.\r\n\r\nPatch 1 fixes this.\r\n\r\nProblem 2\r\n---------\r\n\r\nLook at line 3 \"of right shoice\" should be \"of right choice\".\r\nLikewise on line 2 of the 2nd paragraph \"And a staunsh\" should be \"And a staunch\",\r\nthe st and ch ligatures are incorrect.\r\n\r\nThis is because the font is an CFF ROS CID Font and the glyphs for the st and ch ligatures\r\nboth have no name. The CFF format achieves this by using SIDs beyond the size of the string\r\nindex, which map to .notdef. So there is a unique SID for each glyph, but not a unique name.\r\n\r\nUnfortuntely, PDFBox assumes that Type 1 fonts have glyphs with unique names, and this\r\nassumtion appears throughout the codebase. Because a glyph name and a SID perform essentially\r\nthe same role, I recommend a simple solution to the problem: when an SID beyond the size of\r\nthe string index is encounteted, instead of mapping it to .notdef it should be mapped to \r\na new name with the prefix \"SID\" for example mapping SID 409 to the name \"SID409\". That way\r\neach glyph will have a unique name, which is what PDFbox assumes.\r\n\r\nPatch 2 fixes this.\r\n\r\nProblem 3\r\n---------\r\n\r\nLook at line 2, \"That creepeth o\u00c9er ruins old!\" the word \"o'er\" is incorrectly rendered\r\nas \"o\u00c9er\". This is because the Encoding entry in the PDF maps code 201 from \"Eacute\" in the\r\nbase encoding to \"quoteright\", but this is being ignored by PDFBox.\r\n\r\nIn the CFFGlyph2D constructor PDFBox examines the font's built-in charset. When the name\r\n\"quoteright\" is encountered it is looked up in the PDF Encoding (i.e. nameToCode) where\r\nit is changed to code 201. Thus code 201 is associated with the \"quoteright\" glyph in the\r\ncodeToGlyph map. This is correct. \r\n\r\nHowever, later when the \"Eacute\" glyph is encountered, its built-in charset code is also\r\n201 (which is standard) and so the codeToGlyph map entry is overwritten, resulting in\r\ncode 201 being associated with the \"Eacute\" glyph. \r\n\r\nThe solution is to build the codeToGlyph map in a strict order: first populate it with the\r\nfont's built-in charset, then the PDF Encoding overwrites any entries which it defines.\r\n\r\nPatch 3 fixes this (and also replaces patch 2)\r\n",
        "Transparency and Shadow Effects One of our customers had major problems with PDFs designed in InDesign. TextBoxes which used any kind of native PDF effects like shadows or transparency ended up in the final JPG (using the PDFToImage conversion) as text that is surrounded by a grey box. Seeing that handling such features is most likely a new feature request, i labeled it that way. Maybe there is the chance of a possible bugfix to at least not show the grey box seen in the jpg I will upload."
    ],
    [
        "PDFBOX-1824",
        "PDFBOX-1697",
        "[PATCH] CFF fonts render wrong glyphs I've found three very closely related CFF encoding issues in v2.0.0 when using PDFToImage.\r\n\r\nProblem 1\r\n---------\r\n\r\nLook a line 7 of the poem, it should be \"And the mouldering dust that years have made\"\r\nbut instead says \"Afld the fioulderiflg dust that years have fiade\"\r\n\r\nThe CFF font is asseumed to use CIDs but it does not if its not a ROS font.\r\nTherefore we add a check for CFF ROS class.\r\n\r\nPatch 1 fixes this.\r\n\r\nProblem 2\r\n---------\r\n\r\nLook at line 3 \"of right shoice\" should be \"of right choice\".\r\nLikewise on line 2 of the 2nd paragraph \"And a staunsh\" should be \"And a staunch\",\r\nthe st and ch ligatures are incorrect.\r\n\r\nThis is because the font is an CFF ROS CID Font and the glyphs for the st and ch ligatures\r\nboth have no name. The CFF format achieves this by using SIDs beyond the size of the string\r\nindex, which map to .notdef. So there is a unique SID for each glyph, but not a unique name.\r\n\r\nUnfortuntely, PDFBox assumes that Type 1 fonts have glyphs with unique names, and this\r\nassumtion appears throughout the codebase. Because a glyph name and a SID perform essentially\r\nthe same role, I recommend a simple solution to the problem: when an SID beyond the size of\r\nthe string index is encounteted, instead of mapping it to .notdef it should be mapped to \r\na new name with the prefix \"SID\" for example mapping SID 409 to the name \"SID409\". That way\r\neach glyph will have a unique name, which is what PDFbox assumes.\r\n\r\nPatch 2 fixes this.\r\n\r\nProblem 3\r\n---------\r\n\r\nLook at line 2, \"That creepeth o\u00c9er ruins old!\" the word \"o'er\" is incorrectly rendered\r\nas \"o\u00c9er\". This is because the Encoding entry in the PDF maps code 201 from \"Eacute\" in the\r\nbase encoding to \"quoteright\", but this is being ignored by PDFBox.\r\n\r\nIn the CFFGlyph2D constructor PDFBox examines the font's built-in charset. When the name\r\n\"quoteright\" is encountered it is looked up in the PDF Encoding (i.e. nameToCode) where\r\nit is changed to code 201. Thus code 201 is associated with the \"quoteright\" glyph in the\r\ncodeToGlyph map. This is correct. \r\n\r\nHowever, later when the \"Eacute\" glyph is encountered, its built-in charset code is also\r\n201 (which is standard) and so the codeToGlyph map entry is overwritten, resulting in\r\ncode 201 being associated with the \"Eacute\" glyph. \r\n\r\nThe solution is to build the codeToGlyph map in a strict order: first populate it with the\r\nfont's built-in charset, then the PDF Encoding overwrites any entries which it defines.\r\n\r\nPatch 3 fixes this (and also replaces patch 2)\r\n",
        "the text show Incorrect the text show Incorrect"
    ],
    [
        "PDFBOX-1824",
        "PDFBOX-1711",
        "[PATCH] CFF fonts render wrong glyphs I've found three very closely related CFF encoding issues in v2.0.0 when using PDFToImage.\r\n\r\nProblem 1\r\n---------\r\n\r\nLook a line 7 of the poem, it should be \"And the mouldering dust that years have made\"\r\nbut instead says \"Afld the fioulderiflg dust that years have fiade\"\r\n\r\nThe CFF font is asseumed to use CIDs but it does not if its not a ROS font.\r\nTherefore we add a check for CFF ROS class.\r\n\r\nPatch 1 fixes this.\r\n\r\nProblem 2\r\n---------\r\n\r\nLook at line 3 \"of right shoice\" should be \"of right choice\".\r\nLikewise on line 2 of the 2nd paragraph \"And a staunsh\" should be \"And a staunch\",\r\nthe st and ch ligatures are incorrect.\r\n\r\nThis is because the font is an CFF ROS CID Font and the glyphs for the st and ch ligatures\r\nboth have no name. The CFF format achieves this by using SIDs beyond the size of the string\r\nindex, which map to .notdef. So there is a unique SID for each glyph, but not a unique name.\r\n\r\nUnfortuntely, PDFBox assumes that Type 1 fonts have glyphs with unique names, and this\r\nassumtion appears throughout the codebase. Because a glyph name and a SID perform essentially\r\nthe same role, I recommend a simple solution to the problem: when an SID beyond the size of\r\nthe string index is encounteted, instead of mapping it to .notdef it should be mapped to \r\na new name with the prefix \"SID\" for example mapping SID 409 to the name \"SID409\". That way\r\neach glyph will have a unique name, which is what PDFbox assumes.\r\n\r\nPatch 2 fixes this.\r\n\r\nProblem 3\r\n---------\r\n\r\nLook at line 2, \"That creepeth o\u00c9er ruins old!\" the word \"o'er\" is incorrectly rendered\r\nas \"o\u00c9er\". This is because the Encoding entry in the PDF maps code 201 from \"Eacute\" in the\r\nbase encoding to \"quoteright\", but this is being ignored by PDFBox.\r\n\r\nIn the CFFGlyph2D constructor PDFBox examines the font's built-in charset. When the name\r\n\"quoteright\" is encountered it is looked up in the PDF Encoding (i.e. nameToCode) where\r\nit is changed to code 201. Thus code 201 is associated with the \"quoteright\" glyph in the\r\ncodeToGlyph map. This is correct. \r\n\r\nHowever, later when the \"Eacute\" glyph is encountered, its built-in charset code is also\r\n201 (which is standard) and so the codeToGlyph map entry is overwritten, resulting in\r\ncode 201 being associated with the \"Eacute\" glyph. \r\n\r\nThe solution is to build the codeToGlyph map in a strict order: first populate it with the\r\nfont's built-in charset, then the PDF Encoding overwrites any entries which it defines.\r\n\r\nPatch 3 fixes this (and also replaces patch 2)\r\n",
        "Loss of colour precision in exporting PDF to image In attempting to convert a PDF which makes use of CMYK colours as well as colour transparencies, but the output I'm seeing doesn't match the input.  \r\n\r\nI'm using the command line PDFToImage and have output in a lossless format and attempted to use all potential color depths to see if I can find a workable option.  "
    ],
    [
        "PDFBOX-1841",
        "PDFBOX-1799",
        "irregular NPE In ImageIOUtils.addResolution We're having an issue with PDFBox within out test suite where it sometimes throws an NPE and sometimes does not.\r\n\r\nh3. Background\r\nWe have a PDF File within our test suite that has JBIG2 encoded images. We have the JAI and JAI-ImageIO extensions installed with JAVA, but do *not* have a JBIG2 extension installed as discussed in PDFBOX-1067 as we need to keep with an Apache 2.0 license and cannot include the GPL3.0 jbig2-imageio.\r\n\r\nh3. Issue\r\nOur issue, to be clear is *not* that we cannot handle the JBIG2 encoded images, but instead, that we're sometimes getting NPEs thrown by the system and sometimes not. (which makes it seem like it's possibly  a race condition).\r\n\r\nThe NPE we're seeing is:\r\n{code}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,752 0    [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{q}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,762 10   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Q}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,762 10   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{q}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,763 11   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,763 11   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,763 11   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{622}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,765 13   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{800}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,766 14   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{re}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,766 14   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{W}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,766 14   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{n}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,769 17   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{q}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,769 17   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{622.8001}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{800.6401}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,772 20   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,772 20   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{cm}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,772 20   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{Im1}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,778 26   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Do}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,806 54   [main ] (PDPixelMap.java:309) org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap - ColorModel: IndexColorModel: #pixelBits = 1 numComponents = 3 color space = java.awt.color.ICC_ColorSpace@3b568fbc transparency = 1 transIndex   = -1 has alpha = false isAlphaPre = false\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,808 56   [main ] (Invoke.java:93) org.apache.pdfbox.util.operator.pagedrawer.Invoke - imageWidth: 1730\t\timageHeight: 2224\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,874 122  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Q}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,874 122  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{3}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tr}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.7233}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{137.14}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{572.41}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,878 126  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:32\tDEBUG 2014-01-11 16:24:32,878 126  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:33\tDEBUG 2014-01-11 16:24:33,774 1022 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{The }\r\nbuild\t11-Jan-2014 16:24:33\tDEBUG 2014-01-11 16:24:33,775 1023 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:33\tINFO  2014-01-11 16:24:33,994 1242 [main ] (PDTrueTypeFont.java:474) org.apache.pdfbox.pdmodel.font.PDTrueTypeFont - Using font Serif.bold instead\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,033 1281 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,033 1281 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0396}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{208.37}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,040 1288 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{572.41}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,040 1288 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,040 1288 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,047 1295 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,048 1296 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,048 1296 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Archeology }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,048 1296 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,079 1327 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,083 1331 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,083 1331 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{38.8128}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{139.29}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{514.45}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,088 1336 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,089 1337 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{of }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,091 1339 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tINFO  2014-01-11 16:24:34,093 1341 [main ] (PDTrueTypeFont.java:474) org.apache.pdfbox.pdmodel.font.PDTrueTypeFont - Using font Serif.plain instead\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,098 1346 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,107 1355 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0191}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,111 1359 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,111 1359 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{178.71}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{514.45}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Lake }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,115 1363 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,117 1365 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0213}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{260.4579}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{514.45}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,123 1371 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,123 1371 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Mead }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,123 1371 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,125 1373 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,125 1373 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0223}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{137.39}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{456.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,129 1377 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{National }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,129 1377 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,132 1380 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,132 1380 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0138}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{269.8112}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{456.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Recreation }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,136 1384 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,139 1387 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,141 1389 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.9266}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{137.81}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{404.29}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Area }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,145 1393 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,153 1401 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,159 1407 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{24.4513}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{136.75}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{319.68}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{An }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,164 1412 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,164 1412 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,164 1412 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0234}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{173.11}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{319.68}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,167 1415 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,171 1419 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,171 1419 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,172 1420 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Assessment }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,172 1420 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,176 1424 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,179 1427 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,179 1427 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.023}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{132.2302}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{94.689}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{National }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,189 1437 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,189 1437 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,189 1437 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,194 1442 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,194 1442 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.7968}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{222.01}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{94.68}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,197 1445 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Park }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,197 1445 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,199 1447 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,203 1451 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,203 1451 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.004}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{273.89}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{94.68}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Service }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,209 1457 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,215 1463 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,215 1463 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{-0.035}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{21.2481}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{131.37}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{U. }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,220 1468 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,223 1471 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,223 1471 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{-0.035}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{21.9974}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{154.03}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{S. }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,231 1479 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.7742}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{178.08}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,236 1484 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,236 1484 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Department }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,236 1484 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{25.4579}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,250 1498 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{306.47}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{of }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0373}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,255 1503 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,259 1507 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,259 1507 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{332.58}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{the }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,266 1514 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,266 1514 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,270 1518 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,270 1518 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,270 1518 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,275 1523 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,275 1523 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.5584}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{369.19}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Interior }\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,278 1526 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,281 1529 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,281 1529 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,282 1530 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}\r\nbuild\t11-Jan-2014 16:24:34\tDEBUG 2014-01-11 16:24:34,282 1530 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Q}\r\nbuild\t11-Jan-2014 16:24:34\tINFO  2014-01-11 16:24:34,282 1530 [main ] (PDFImageWriter.java:135) org.apache.pdfbox.util.PDFImageWriter - Writing: /home/bamboo/current/temp/TDAR-TRUNK3-JOB1/pia-09-lame-1980-small1.jpg\r\nbuild\t11-Jan-2014 16:24:34\tERROR 2014-01-11 16:24:34,291 1539 [main ] (PDFJBIG2TestCase.java:55) org.tdar.utils.PDFJBIG2TestCase - encountered NPE\r\nbuild\t11-Jan-2014 16:24:34\tjava.lang.NullPointerException\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.pdfbox.util.ImageIOUtil.addResolution(ImageIOUtil.java:211)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.pdfbox.util.ImageIOUtil.createMetadata(ImageIOUtil.java:204)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:158)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:114)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:81)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:136)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.tdar.utils.PDFJBIG2TestCase.testJBIG2(PDFJBIG2TestCase.java:50)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\nbuild\t11-Jan-2014 16:24:34\t\tat java.lang.reflect.Method.invoke(Method.java:606)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\nbuild\t11-Jan-2014 16:24:34\t\tat java.lang.reflect.Method.invoke(Method.java:606)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(ReflectionUtils.java:208)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:156)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:82)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.plugin.surefire.InPluginVMSurefireStarter.runSuitesInProcess(InPluginVMSurefireStarter.java:82)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:942)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:822)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:720)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:106)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:317)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:152)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:555)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:214)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:158)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\nbuild\t11-Jan-2014 16:24:34\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\nbuild\t11-Jan-2014 16:24:34\t\tat java.lang.reflect.Method.invoke(Method.java:606)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\r\nbuild\t11-Jan-2014 16:24:34\tTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 2.664 sec <<< FAILURE! - in org.tdar.utils.PDFJBIG2TestCase\r\nbuild\t11-Jan-2014 16:24:34\ttestJBIG2(org.tdar.utils.PDFJBIG2TestCase)  Time elapsed: 2.438 sec  <<< FAILURE!\r\nbuild\t11-Jan-2014 16:24:34\tjava.lang.AssertionError: encountered NPE in proccessing JBIG2 file\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.junit.Assert.fail(Assert.java:88)\r\nbuild\t11-Jan-2014 16:24:34\t\tat org.tdar.utils.PDFJBIG2TestCase.testJBIG2(PDFJBIG2TestCase.java:56)\r\nbuild\t11-Jan-2014 16:24:34\t\r\n{code}\r\n\r\nI'm attaching the PDF that's causing the issue.",
        "NullPointerException when constructing a PDJPeg using a BufferedImage In pdfbox 1.8.2 and 1.8.3, the constructor of PDJPeg class that takes a BufferedImage throws java.lang.NullPointerException:\r\n\r\n\t    BufferedImage bi = ImageIO.read(this.getClass().getClassLoader().getResourceAsStream(\"images/icon.png\"));\r\n\t    \r\n\t    PDJpeg icon = new PDJpeg(pdf, bi);\r\n\r\nThe stack trace is:\r\n\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.util.ImageIOUtil.addResolution(ImageIOUtil.java:211)\r\n\tat org.apache.pdfbox.util.ImageIOUtil.createMetadata(ImageIOUtil.java:204)\r\n\tat org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:158)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg.createImageStream(PDJpeg.java:171)\r\n\tat org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg.<init>(PDJpeg.java:133)\r\n\r\nThe culprit is in this method in the ImageIOUtil:\r\n\r\n    private static IIOMetadata createMetadata(RenderedImage image, ImageWriter imageWriter,\r\n            ImageWriteParam writerParams, int resolution)\r\n    {\r\n        .....\r\n        IIOMetadata meta = imageWriter.getDefaultImageMetadata( type, writerParams );\r\n        return (addResolution(meta, resolution) ? meta : null);\r\n    } \r\n\r\nOne of the JPG image writer in our environment is com.sun.media.imageioimpl.plugins.jpeg.CLibJPEGImageWriter, its implementation of getDefaultImageMetadata() returns null:\r\n\r\npublic IIOMetadata getDefaultImageMetadata(ImageTypeSpecifier imageType, ImageWriteParam param) {\r\n        return null;\r\n    }\r\n\r\nthis causes the NullPointerException at the first line of the addResolution() method:\r\n\r\n       if (!meta.isReadOnly() && meta.isStandardMetadataFormatSupported())\r\n\r\nI suggest that null checks be added at the following places:\r\n\r\n1. ImageIOUtil.addResolution():\r\n\r\n       if (!meta.isReadOnly() && meta.isStandardMetadataFormatSupported())\r\n\r\n==>\r\n\r\n       if (meta != null && meta.isReadOnly() && meta.isStandardMetadataFormatSupported())\r\n\r\n2. ImageIOUtil.writeImage():\r\n\r\n                   IIOMetadata meta = createMetadata( image, imageWriter, writerParams, resolution);\r\n\t           imageWriter.setOutput( output );\r\n\t           imageWriter.write( null, new IIOImage( image, null, meta ), writerParams );\r\n\t           foundWriter = true;\r\n\r\n==>\r\n\r\n                   IIOMetadata meta = createMetadata( image, imageWriter, writerParams, resolution);\r\n                    if (meta != null) {\r\n\t                    imageWriter.setOutput( output );\r\n\t                    imageWriter.write( null, new IIOImage( image, null, meta ), writerParams );\r\n\t                    foundWriter = true;\r\n                    }\r\n"
    ],
    [
        "PDFBOX-1857",
        "PDFBOX-1822",
        "Attachment damages singature I have PDF document. \r\n\r\n1) Adobe reader reads  document well. \r\n2) I sign document  (using pdfbox-examples)  and everything is well\r\n3) Then I try to attach file to original PDF (Code is written in the pdfbox web page - in the cookBook).\r\n4) Adobe reader reads  attached document well. everything is well.\r\n5) Now I have document with attachment. \r\n6) I try to sign that document  (I mean document with attachment). And I have 2 problem:\r\n\r\n\r\nFirst:\r\nwhen I open document, Adobe reader tells me that signature byte range is invalid.\r\n\r\nSecond:\r\nwhen I try to close document (I mean to close adobe reader), Adobe reader tells me that:\r\nDo you want to save changes to \"original[with-attachment][signed]\" before closing?\r\n",
        "Signature byte range is Invalid On person send me a unsigned PDF document. He wanted to sign it. When I try to sign it (using pad box), I have some problem.\r\n\r\nAfter signing adobe reader tells me \"The signature byre range is invalid\".  \r\n\r\nI will attach original and signed document.\r\n\r\nI think, it is PDF box parser error. another signature libraries sign document very well. I'm searching the problem at the moment, in order to fix it.\r\n"
    ],
    [
        "PDFBOX-1899",
        "PDFBOX-1288",
        "Rendering issues with images and lines The file from PDFBOX-882 still has some minor rendering issues with images and lines, and logs some interesting errors to the console.",
        "Lines will not be printed (correctly) in case they are part of a clipping mask In case of a PDF file that was created with FOP 1.0 and was printed with PDFBox, lines disappeared or lines appeared smaller. PDF files that were created with Adobe InDesign (e.g.) will be printed correctly.\r\n\r\nIt has something to do with lines which are part of a clipping mask. FOP seems to generate a clipping mask around all kind of borders. Lines of type <fo:leader> appear correctly and are not part of an clipping mask.\r\n\r\nWhen printing a FOP-PDF with PDFBox, PDFBox moves the clipping mask, so the line is not visible anymore. Please see attached Screenshot.\r\n\r\nThe PDF file I created with FOP is named: original.pdf\r\nThe resulting PDF file after printing with PDFBox is named: after_printing_with_pdfbox.pdf\r\n\r\nRegards\r\nChristoph"
    ],
    [
        "PDFBOX-1922",
        "PDFBOX-1393",
        "NonSequentialParser not reading version in header and trailer On older pdf files, the NonSequentialParser returns a different PDFVersion than the traditional parser via the call: document.getDocument().getVersion().  \r\n\r\nI think this is because NonSequentialParser is not reading the header but relying on the default 1.4 if no version is found in the trailer.\r\n\r\nMany apologies if this is a duplicate.  I feel like I've seen this issue elsewhere, but I can't track it down.",
        "NonSequentialPDFParser is not parsing actual PDF header   org.apache.pdfbox.pdfparser.NonSequentialPDFParser parse() method is not getting the PDF version number declared in a pdf file's PDF header -- when the parse() returns the COSDocument, that COSDocument contains the hard-coded (this itself should be reported as a separate bug) value of %PDF-1.4\r\n\r\nThe parse() method should be parsing the actual PDF header and returning the actual value\r\n"
    ],
    [
        "PDFBOX-1935",
        "PDFBOX-1288",
        "round edge with wrong color file found at:\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=886049\r\nhttp://www.miloticky.unas.cz/jidelnicek.pdf\r\nthe pdf.js viewer has the same bug.",
        "Lines will not be printed (correctly) in case they are part of a clipping mask In case of a PDF file that was created with FOP 1.0 and was printed with PDFBox, lines disappeared or lines appeared smaller. PDF files that were created with Adobe InDesign (e.g.) will be printed correctly.\r\n\r\nIt has something to do with lines which are part of a clipping mask. FOP seems to generate a clipping mask around all kind of borders. Lines of type <fo:leader> appear correctly and are not part of an clipping mask.\r\n\r\nWhen printing a FOP-PDF with PDFBox, PDFBox moves the clipping mask, so the line is not visible anymore. Please see attached Screenshot.\r\n\r\nThe PDF file I created with FOP is named: original.pdf\r\nThe resulting PDF file after printing with PDFBox is named: after_printing_with_pdfbox.pdf\r\n\r\nRegards\r\nChristoph"
    ],
    [
        "PDFBOX-1935",
        "PDFBOX-1899",
        "round edge with wrong color file found at:\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=886049\r\nhttp://www.miloticky.unas.cz/jidelnicek.pdf\r\nthe pdf.js viewer has the same bug.",
        "Rendering issues with images and lines The file from PDFBOX-882 still has some minor rendering issues with images and lines, and logs some interesting errors to the console."
    ],
    [
        "PDFBOX-1947",
        "PDFBOX-1451",
        "Axial shading doesn't appear ShadingType 2 (axial shading) doesn't appear in attached file. Maybe related to PDFBOX-1442.",
        "Error in converting a pdf to image using convertToImage Hi,\r\nI converted a pdf to image using\r\nClass : PDPage \r\nAPI : public BufferedImage convertToImage()\r\ni obtained an image with the first line of the bulleted list on the right with strange character and:\r\nwith 1.5.0 version is missing the image on the top\r\nwith 1.7.1 i had a strange color issue."
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-490",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-924",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-984",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-1019",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-1068",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-1296",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-1436",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-1520",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-1699",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". "
    ],
    [
        "PDFBOX-2000",
        "PDFBOX-1717",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page.",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place."
    ],
    [
        "PDFBOX-2004",
        "PDFBOX-1917",
        "PDF2Image hangs/loops forever processing PDF When the attached PDF file is rendered to a JPG image it causes PDFBox to loop forever. \r\n\r\nThe problem is easily produced using the PDFBox example org.apache.pdfbox.PDF2Image with the following command line options:- \r\n\r\n-imageType jpg -outputPrefix OUT- Hang.pdf\r\n\r\nThe fault is new to 1.8.4. As a workaround, we are using 1.8.3 which does not suffer.\r\nWe have found many such files and have identified this one as I can share it publicly. ",
        "Rendering hangs Rendering hangs in page 9 of the attached file. It hangs in PageDrawer.strokePath(), there in graphics.draw(path). I'd like to hear from people using a different JDK version if it works."
    ],
    [
        "PDFBOX-2006",
        "PDFBOX-62",
        "Glyphs rendered at the same spot Page 1 of the attached file has the glyphs of one block all rendered at the same spot. This does not happen in 1.8.",
        "Incorrect (zero) character widths returned in some docs [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1216674\nOriginally submitted by tamirhassan on 2005-06-07 13:42.\n\nFor certain PDF documents (such as the one attached) \nthe character/string widths (as obtained e.g. by the \nPDFont.getStringWidth method) are not returned \ncorrectly, i.e. they appear to be correct for punctuation \ncharacters but are zero for alphanumeric characters.  \n\nIt seems as if these alphanumeric characters are NOT \nwithin PDFont.firstChar and PDFont.lastChar in the \nType 1 font.  The method therefore attempts to obtain \nthe font widths from the AFM (font metric) file, but fails \n(silently) with a 'resource is null' logline message.\n\n(Note that this problem doesn't seem to occur with Type \n1 fonts in other documents.)\n\nA more detailed discussion regarding this issue can be \nfound in this link:\n\nhttp://sourceforge.net/forum/forum.php?\nthread_id=1260349&forum_id=267205\n\nThanks in advance for any help that can be obtained,\n\nTam"
    ],
    [
        "PDFBOX-2006",
        "PDFBOX-1192",
        "Glyphs rendered at the same spot Page 1 of the attached file has the glyphs of one block all rendered at the same spot. This does not happen in 1.8.",
        "getWidth() == 0 if external fonts are used getWidth() == 0 if a font isn't embedded to the pdf"
    ],
    [
        "PDFBOX-2016",
        "PDFBOX-1634",
        "Stream parsing still incorrect if length value is wrong From issue PDFBOX-1333 - \"In 1.7.0 stream parsing in BaseParser was optimized to use length value if available. The advantage is faster parsing and independence of 'endstream' bytes sequences in stream. However the disadvantage is that streams with wrong length values cannot be parsed anymore\" - etc. \r\n\r\nThis issue was marked as fixed now that COSStreams can once again be parsed by reading all the way to 'endstream'. However, the resulting COSStream object still contains the expected length, not the true length. When parsing the COSStream with a PDFStreamParser, the call to COSStream#getUnfilteredStream uses getLength() instead of getLengthWritten to limit the amount of data that can be read. This can truncate the stream and means that incorrect length values still lead to missing data, and so limits the usefulness of the last fix. Changing the call to getLengthWritten should solve the problem.\r\n\r\n",
        "[PATCH] Adobe reader crash due to wrong length Adobe reader 9 and 10 crash because length inside source pdf was wrong\r\n\r\nSource pdf has length of 174, should be 172, this causes pdfbox to add \"q\" to end of stream and crash reader\r\n\r\nIm running using fop test.fo out.pdf\r\n\r\n/Type /XObject\r\n/Resources 5125 0 R\r\n/Subtype /Form\r\n/BBox [0 0 413.3900146484 17.4599990845]\r\n/Matrix [1 0 0 1 0 0]\r\n/Length 5126 0 R\r\n/FormType 1\r\n>>\r\nstream\r\nq Q /Tx BMC q 0 0 413.39 15.46 re W n q BT 1 0 0 1 2 5.46 Tm /CourierNewPSMT 10 Tf 0 g ($17,500 TSP Pre-Tax Contributions or Roth \\(After Tax\\) Contributio)Tj 0 g ET Q EMC\r\nendstream\r\n\r\n5126 0 obj\r\n174\r\nendobj"
    ],
    [
        "PDFBOX-2031",
        "PDFBOX-1998",
        "GrayScale images become inverted PDPixelMap.getRGBImage() inverts images. After debugging it appears that the inversion happens at the end, in applyMasks(image);\r\n\r\nSome more debugging info:\r\nbitsPerComponent == 1\r\ngetImageMask() == true\r\ngetColorSpace() == PDDeviceGray\r\n\r\nmap == new byte[] {(byte)0xff} // used for IndexColorModel\r\n\r\nIn imageMask(baseImage) this happens:\r\n\r\ngraphics.setColor(Color.BLACK);\r\ngraphics.fillRect(0, 0, baseImage.getWidth(), baseImage.getHeight());\r\n        // assume default values ([0,1]) for the DecodeArray\r\n        // TODO DecodeArray == [1,0]\r\n        graphics.setComposite(AlphaComposite.DstIn);\r\n        graphics.drawImage(baseImage, null, 0, 0);\r\n        graphics.dispose();\r\n        return stencilMask;\r\n\r\nI wish I could provide a sample file, but I have no sanitized data files. ",
        "PDF rendering with reversed colors The attached PDF (from \u00c9tienne Landry on the user mailing list) is rendered in w/b instead of b/w. This does not happen in the 2.0 version."
    ],
    [
        "PDFBOX-2053",
        "PDFBOX-62",
        "Issue with PDFBox position reading Using PDFBox 1.8.4,\r\nbug #1:\r\n\t\tPDDocument doc = new PDDocument();\r\n\t\tdoc.load(\"test-pcc7247.pdf\");\r\n\t\tdoc.save(\"out.pdf\");\r\n\t\tdoc.close();\r\n\r\nThe resulting file is corrupted, contains 0 pages and cannot be viewed by Acrobat Reader.\r\n\r\n\r\nbug #2: consider the following code snippet. The code runs like this:\r\n      Extractor extractor = new Extractor();\r\n      extractor.writeText(pdDoc, output);\r\n\r\nUsing the code defined like this:\r\n\r\npublic class Extractor extends PDFTextStripper {\r\n...\r\n    protected void writePage() throws IOException\r\n    {\r\n        for( int i = 0; i < charactersByArticle.size(); i++)\r\n        {\r\n            List<TextPosition> textList = charactersByArticle.get( i );\r\n            Iterator textIter = textList.iterator();\r\n            while( textIter.hasNext() )\r\n            {\r\n                TextPosition position = (TextPosition)textIter.next();\r\n\r\nIn the given piece of code, position variable correctly iterates through the letters of the first line of the provided pdf document, but its coordinates (x, y, widths, etc) are always the same. Just to be clear, 1 position always relates to 1 letter, and its widths array's length always equals 1. So we get the same coordinates for every letter in a line. Expected behaviour is either having new coordinates per letter or having widths[] contain widths for the characters of a whole line of text",
        "Incorrect (zero) character widths returned in some docs [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1216674\nOriginally submitted by tamirhassan on 2005-06-07 13:42.\n\nFor certain PDF documents (such as the one attached) \nthe character/string widths (as obtained e.g. by the \nPDFont.getStringWidth method) are not returned \ncorrectly, i.e. they appear to be correct for punctuation \ncharacters but are zero for alphanumeric characters.  \n\nIt seems as if these alphanumeric characters are NOT \nwithin PDFont.firstChar and PDFont.lastChar in the \nType 1 font.  The method therefore attempts to obtain \nthe font widths from the AFM (font metric) file, but fails \n(silently) with a 'resource is null' logline message.\n\n(Note that this problem doesn't seem to occur with Type \n1 fonts in other documents.)\n\nA more detailed discussion regarding this issue can be \nfound in this link:\n\nhttp://sourceforge.net/forum/forum.php?\nthread_id=1260349&forum_id=267205\n\nThanks in advance for any help that can be obtained,\n\nTam"
    ],
    [
        "PDFBOX-2053",
        "PDFBOX-1192",
        "Issue with PDFBox position reading Using PDFBox 1.8.4,\r\nbug #1:\r\n\t\tPDDocument doc = new PDDocument();\r\n\t\tdoc.load(\"test-pcc7247.pdf\");\r\n\t\tdoc.save(\"out.pdf\");\r\n\t\tdoc.close();\r\n\r\nThe resulting file is corrupted, contains 0 pages and cannot be viewed by Acrobat Reader.\r\n\r\n\r\nbug #2: consider the following code snippet. The code runs like this:\r\n      Extractor extractor = new Extractor();\r\n      extractor.writeText(pdDoc, output);\r\n\r\nUsing the code defined like this:\r\n\r\npublic class Extractor extends PDFTextStripper {\r\n...\r\n    protected void writePage() throws IOException\r\n    {\r\n        for( int i = 0; i < charactersByArticle.size(); i++)\r\n        {\r\n            List<TextPosition> textList = charactersByArticle.get( i );\r\n            Iterator textIter = textList.iterator();\r\n            while( textIter.hasNext() )\r\n            {\r\n                TextPosition position = (TextPosition)textIter.next();\r\n\r\nIn the given piece of code, position variable correctly iterates through the letters of the first line of the provided pdf document, but its coordinates (x, y, widths, etc) are always the same. Just to be clear, 1 position always relates to 1 letter, and its widths array's length always equals 1. So we get the same coordinates for every letter in a line. Expected behaviour is either having new coordinates per letter or having widths[] contain widths for the characters of a whole line of text",
        "getWidth() == 0 if external fonts are used getWidth() == 0 if a font isn't embedded to the pdf"
    ],
    [
        "PDFBOX-2053",
        "PDFBOX-2006",
        "Issue with PDFBox position reading Using PDFBox 1.8.4,\r\nbug #1:\r\n\t\tPDDocument doc = new PDDocument();\r\n\t\tdoc.load(\"test-pcc7247.pdf\");\r\n\t\tdoc.save(\"out.pdf\");\r\n\t\tdoc.close();\r\n\r\nThe resulting file is corrupted, contains 0 pages and cannot be viewed by Acrobat Reader.\r\n\r\n\r\nbug #2: consider the following code snippet. The code runs like this:\r\n      Extractor extractor = new Extractor();\r\n      extractor.writeText(pdDoc, output);\r\n\r\nUsing the code defined like this:\r\n\r\npublic class Extractor extends PDFTextStripper {\r\n...\r\n    protected void writePage() throws IOException\r\n    {\r\n        for( int i = 0; i < charactersByArticle.size(); i++)\r\n        {\r\n            List<TextPosition> textList = charactersByArticle.get( i );\r\n            Iterator textIter = textList.iterator();\r\n            while( textIter.hasNext() )\r\n            {\r\n                TextPosition position = (TextPosition)textIter.next();\r\n\r\nIn the given piece of code, position variable correctly iterates through the letters of the first line of the provided pdf document, but its coordinates (x, y, widths, etc) are always the same. Just to be clear, 1 position always relates to 1 letter, and its widths array's length always equals 1. So we get the same coordinates for every letter in a line. Expected behaviour is either having new coordinates per letter or having widths[] contain widths for the characters of a whole line of text",
        "Glyphs rendered at the same spot Page 1 of the attached file has the glyphs of one block all rendered at the same spot. This does not happen in 1.8."
    ],
    [
        "PDFBOX-2059",
        "PDFBOX-62",
        "Characters are not positioned properly (due to wrong width&height of chars) Characters in this PDF are not positioned properly.\r\nAll characters are rendered at position x=0.0\r\nProblem is in PDFont.getFontWidth(). it returns 0.0 for every char.\r\nThe same applies for PDFont.getFontHeight()",
        "Incorrect (zero) character widths returned in some docs [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1216674\nOriginally submitted by tamirhassan on 2005-06-07 13:42.\n\nFor certain PDF documents (such as the one attached) \nthe character/string widths (as obtained e.g. by the \nPDFont.getStringWidth method) are not returned \ncorrectly, i.e. they appear to be correct for punctuation \ncharacters but are zero for alphanumeric characters.  \n\nIt seems as if these alphanumeric characters are NOT \nwithin PDFont.firstChar and PDFont.lastChar in the \nType 1 font.  The method therefore attempts to obtain \nthe font widths from the AFM (font metric) file, but fails \n(silently) with a 'resource is null' logline message.\n\n(Note that this problem doesn't seem to occur with Type \n1 fonts in other documents.)\n\nA more detailed discussion regarding this issue can be \nfound in this link:\n\nhttp://sourceforge.net/forum/forum.php?\nthread_id=1260349&forum_id=267205\n\nThanks in advance for any help that can be obtained,\n\nTam"
    ],
    [
        "PDFBOX-2059",
        "PDFBOX-1192",
        "Characters are not positioned properly (due to wrong width&height of chars) Characters in this PDF are not positioned properly.\r\nAll characters are rendered at position x=0.0\r\nProblem is in PDFont.getFontWidth(). it returns 0.0 for every char.\r\nThe same applies for PDFont.getFontHeight()",
        "getWidth() == 0 if external fonts are used getWidth() == 0 if a font isn't embedded to the pdf"
    ],
    [
        "PDFBOX-2059",
        "PDFBOX-2006",
        "Characters are not positioned properly (due to wrong width&height of chars) Characters in this PDF are not positioned properly.\r\nAll characters are rendered at position x=0.0\r\nProblem is in PDFont.getFontWidth(). it returns 0.0 for every char.\r\nThe same applies for PDFont.getFontHeight()",
        "Glyphs rendered at the same spot Page 1 of the attached file has the glyphs of one block all rendered at the same spot. This does not happen in 1.8."
    ],
    [
        "PDFBOX-2059",
        "PDFBOX-2053",
        "Characters are not positioned properly (due to wrong width&height of chars) Characters in this PDF are not positioned properly.\r\nAll characters are rendered at position x=0.0\r\nProblem is in PDFont.getFontWidth(). it returns 0.0 for every char.\r\nThe same applies for PDFont.getFontHeight()",
        "Issue with PDFBox position reading Using PDFBox 1.8.4,\r\nbug #1:\r\n\t\tPDDocument doc = new PDDocument();\r\n\t\tdoc.load(\"test-pcc7247.pdf\");\r\n\t\tdoc.save(\"out.pdf\");\r\n\t\tdoc.close();\r\n\r\nThe resulting file is corrupted, contains 0 pages and cannot be viewed by Acrobat Reader.\r\n\r\n\r\nbug #2: consider the following code snippet. The code runs like this:\r\n      Extractor extractor = new Extractor();\r\n      extractor.writeText(pdDoc, output);\r\n\r\nUsing the code defined like this:\r\n\r\npublic class Extractor extends PDFTextStripper {\r\n...\r\n    protected void writePage() throws IOException\r\n    {\r\n        for( int i = 0; i < charactersByArticle.size(); i++)\r\n        {\r\n            List<TextPosition> textList = charactersByArticle.get( i );\r\n            Iterator textIter = textList.iterator();\r\n            while( textIter.hasNext() )\r\n            {\r\n                TextPosition position = (TextPosition)textIter.next();\r\n\r\nIn the given piece of code, position variable correctly iterates through the letters of the first line of the provided pdf document, but its coordinates (x, y, widths, etc) are always the same. Just to be clear, 1 position always relates to 1 letter, and its widths array's length always equals 1. So we get the same coordinates for every letter in a line. Expected behaviour is either having new coordinates per letter or having widths[] contain widths for the characters of a whole line of text"
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-490",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-924",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-984",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-1019",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-1068",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-1296",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-1436",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-1520",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-1699",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". "
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-1717",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place."
    ],
    [
        "PDFBOX-2060",
        "PDFBOX-2000",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page."
    ],
    [
        "PDFBOX-2062",
        "PDFBOX-39",
        "Setting a PDFFormField's value with a specific font size causes the font size to change on click Setting the font size of a PDField causes the font size to change on click on the field. It starts out with incorrect font size. When the field is clicked, it displays in the font size correctly. Clicking outside the field, reverts back to the incorrect font size.\r\n\r\nThis behavior was also mentioned in PDFBOX-1419 in passing.\r\n\r\n\r\nCode:\r\n{code}\r\npdfFormField.getDictionary.setString(COSName.DA, \"/Helv 10 Tf 0 g\u201d)\r\npdfFormField.setValue(\"Hello\u201d)\r\n{code}\r\n\r\nA simple example of such a PDF [is here|http://monosnap.com/file/5fxGhQSdXszX4DIoTyGguZ3ploinAC].",
        "Text moves when using SetField and then selecting field [imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1118054\nOriginally submitted by benlitchfield on 2005-02-07 10:44.\n\nLook at pdf_with_lots_of_fields.pdf\n\nRan \n\njava org.pdfbox.examples.fdf.SetField \ntmp\\pdf_with_lots_of_fields.pdf \"Feld.2\" \"Test\"\n\nWhen you select the field with the \"Test\" text in it, the \ntext shifts slightly to the left.  It should not do that.\n\nWhile looking at this PDF, there are a lot of fields on it, \nshould test setting each field to test all the various field \ntypes.  Then add it as a junit test.\n\nBen\n\n[comment on SourceForge]\nOriginally sent by pedropuchalski.\nLogged In: YES \nuser_id=1463773\n\nI have similar problem, usually my text is bigger then \nfield's \"bounding box\" so I can see only the lower part of \nchars. As I have researched the sources, I think the problem \nis with org.pdfbox.pdmodel.interactive.form.PDAppearance.\ncalculateFontSize(...) method. If it will be implemented \ncorrect for Type0Fonts(and probably others) text won't \n\"move\" and (in my case) I will see the whole chars(font size \nwill be set properly).\n\n[comment on SourceForge]\nOriginally sent by daniel_.\nLogged In: YES \nuser_id=1323827\n\nI put a sample on the ftp site. The filename is: pdfbox-Bugs-\n1118054_Daniel_testoutput.pdf.\n\nDaniel\n\n[comment on SourceForge]\nOriginally sent by benlitchfield.\nLogged In: YES \nuser_id=601708\n\nDaniel,\n\nCan you upload a sample PDF.  The PDFBox FTP site \nftp.pdfbox.org is write only, so you can upload a sample and \nonly I will be able to access it.\n\nBen Litchfield\n\n[comment on SourceForge]\nOriginally sent by daniel_.\nLogged In: YES \nuser_id=1323827\n\nI have the same problem with my PDFs. The PDF contains a \ntext field that is supposed to display a bar code roated by 90 \ndegrees. The bar code will be displayed by using a special \nfont (i.e. Code-39-30). After creating the PDF with PDFBox, \nthe bar code is displayed, however not rotated. Only after \nclicking into the text field, the bar code is rotated. Similar \nbehaviour as descibed below.\nAs we plan to use this in a customer portal and the printed \ndocuments have to be scanned automatically with the rotated \nbar code, you can imagine that a bugfix for this problem is \nvery important and urgent for us.\n\nThanks in advance for your help\nDaniel\n\n[comment on SourceForge]\nOriginally sent by benlitchfield.\nLogged In: YES \nuser_id=601708\n\nThe problem is that PDFBox is not correctly generating the \nappearance stream for the field.  When you click in the field \nAcrobat will regenerate it, which is why it switches back and \nforth between correct and incorrect. \n\nThanks for the example docs, I will let you know when I get a \nchance to look at it.\n\nBen\n\n[comment on SourceForge]\nOriginally sent by seafoxx.\nLogged In: YES \nuser_id=305823\n\nI think that my problem posted 3 weeks ago is the same as\nthis bug.\n\nwhen selecting the field the style changes to \"as it should\nbe\", when leaving the style changes back to \"how it not\nshould be\". I added two example-pdf files. the first one is\nthe original (template-pdf) with some fields having the\n\"comb of x characters\" option enabled (did it with adobe,\nnot with pdfbox). the second file is the filled pdf, read it\nwith pdfbox, filled some fields with \"setText()\" and then\nsaved it back to disk.\n\nI didn't add the two files to the bug, because they are\nquite big (420k each).\n\noriginal text form my forum post:\n\nOne defines, how many letters should be placed inside the\ntext field and the letters will all have the same distance\nbetween each other. I need this option because i have\nseveral fixed-length input fields and need to place the\nletters on the correct positions. \nan examlpe of the template-pdf placed at \nhttp://kaempfe.net/pdf/pdfboxexample_before.pdf \nwhen filling the form fields with pdfbox everyting works\nfine, but the comb-option gets almost lost. the output pdf\ndoes not display the form fields correctly, the comb-option\nseems to be activated when focussing one form field and\ndeactivated on leaving that field. the fields are not\nread-only, so one can edit them in the output-pdf also. when\ndoing that, the comp-options comes back and the letters stay\nin place when leaving the form field. \nan example of the output-pdf is placed at \nhttp://kaempfe.net/pdf/pdfboxexample_after.pdf\n\n[comment on SourceForge]\nOriginally sent by seafoxx.\nLogged In: YES \nuser_id=305823\n\nI have the same problem when using PDField.setComb(true) -\ncurrently posted to the help-forum, added two links to the\nexample-files. forum thread is ->\nhttp://sourceforge.net/forum/forum.php?thread_id=1294072&forum_id=267205\n\ncya.\nbastian kaempfe\n\n[comment on SourceForge]\nOriginally sent by benlitchfield.\nLogged In: YES \nuser_id=601708\n\nAlso verify pdf_with_fields2.pdf!\n\nBen"
    ],
    [
        "PDFBOX-2072",
        "PDFBOX-1755",
        "Wrong calculation of space char width in PDFStreamEngine PDFStreamEngine calculates width of space character wrongly.\r\nPage's content stream contains this operation:\r\n\"0 12 -12 0 562.3199 372.7105 Tm\"\r\n\r\nand that causes PDFStreamEngine calculate width of \" \" to value 0",
        "Wrong widthOfSpace For some TextPositions in this particular PDF (after being processed with PDFStreamEngine), the getWidthOfSpace method returns 0.\r\n\r\nI've traced the bug to `processEncodedText` in `PDFStreamEngine`: when  `spaceWidthText` is converted to display units, `textMatrix.getValue(0,0)` returns 0. Being a factor in the conversion expression, sets the result to 0.\r\n\r\nfloat spaceWidthDisp = spaceWidthText * fontSizeText * horizontalScalingText * textMatrix.getValue(0, 0)\r\n                    * ctm.getValue(0, 0);\r\n\r\nThe conversion is correct if that factor is removed from the expression.\r\n"
    ],
    [
        "PDFBOX-2077",
        "PDFBOX-2070",
        "Empty (invalid) DecodeParms is added to image PDF contains image (xobject), it as no \"/DecodeParms\".\r\nPDFBox adds empty \"/DecodeParms\" to this image which results to invalid PDF and Adobe reader complains about it.\r\n\r\nProblem is caused by calling PDResources.getXObjects().\r\n\r\nIt is very similar to PDFBOX-2042",
        "Filter.decode() modifies PDF if there is a filter array If there are several filters (filter array) in an image, PDFBox is inserting an empty DecodeParms object here\r\n{code}\r\nparams.setItem(COSName.DECODE_PARMS, getDecodeParams(params, index));\r\n{code}\r\ninstead of either inserting an empty COSArray, or (better) do nothing. Saving such a PDF results in it not being displayable in the Acrobat Reader.\r\n\r\nTest code:\r\n{code}\r\n        PDDocument d = PDDocument.load(\"before.pdf\");\r\n        new PDFRenderer(d).renderImage(0);\r\n        d.save(\"after.pdf\");\r\n{code}\r\nThe rendering is important because without it, the filtered objects aren't decoded."
    ],
    [
        "PDFBOX-2080",
        "PDFBOX-1867",
        "Barcode getting color inverted in pdf to image conversion While converting a 1 page pdf to an image (both attached below), the image converts properly, however the barcodes colours invert.\r\n\r\nThe code used to do the conversion looks like this right now:\r\n\r\n      public static void convertPDFToJPG(String src){\r\n\r\n            try{\r\n\r\n                  //load pdf file in the document object\r\n                  PDDocument doc=PDDocument.load(new FileInputStream(src));\r\n                  //Get all pages from document and store them in a list\r\n                  List<PDPage> pages=doc.getDocumentCatalog().getAllPages();\r\n                  //create iterator object so it is easy to access each page from the list\r\n                  Iterator<PDPage> i= pages.iterator();\r\n                  int count=1; //count variable used to separate each image file\r\n                  //Convert every page of the pdf document to a unique image file\r\n                  System.out.println(\"Please wait...\");\r\n                  while(i.hasNext()){\r\n                        PDPage page=i.next(); \r\n                        BufferedImage bi=page.convertToImage( BufferedImage.TYPE_INT_RGB,  300);\r\n                        FileOutputStream fos = new FileOutputStream(new File(\"d:\\\\slika2_3.jpg\"));\r\n                        //ImageIO.write(bi, \"jpg\", new File(\"d:\\\\pdfimageold.jpg\"));\r\n                        boolean foundWriter = ImageIOUtil.writeImage(bi, \"jpg\", fos, 300);\r\n                        count++;\r\n                  \r\n                  }\r\n                  System.out.println(\"Conversion complete\");\r\n            }catch(IOException ie){ie.printStackTrace();}\r\n      }\r\n",
        "Images improperly rendered Using the PDFToImage command on the attached Document2.pdf produces Document21.jpg, where the images parts are very pixelized, and some text has inverted colors.\r\n\r\nLoggings prints:\r\n\r\nJan 27, 2014 3:51:44 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nINFO: unsupported/disabled operation: EI\r\n"
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-490",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-924",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-984",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-1019",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-1068",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-1296",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-1436",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-1520",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-1699",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". "
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-1717",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place."
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-2000",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page."
    ],
    [
        "PDFBOX-2083",
        "PDFBOX-2060",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}"
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-490",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-924",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-984",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-1019",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-1068",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-1296",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-1436",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-1520",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-1699",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". "
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-1717",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place."
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-2000",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page."
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-2060",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}"
    ],
    [
        "PDFBOX-2085",
        "PDFBOX-2083",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();"
    ],
    [
        "PDFBOX-2093",
        "PDFBOX-371",
        "\"bullet\" character is not rendered In this PDF is a \"bullet\" character which is not rendered.\r\nThere is some problem with translating code to glyph.\r\n\r\nThat character has code 127 (0x7F), but mapping for it is not found\r\n{code}\r\n14:33:17,966 DEBUG Type1Glyph2D:127 - FKOYIT+MyriadPro-Cond: glyph mapping for 127 not found\r\n{code}\r\n\r\nembedded font contains definition for \"bullet\" character.\r\nBut \"bullet\" character has code 183 in mapping table (from StandardEncoding, I suppose).",
        "Soft Hyphen character not mapped to hyphen in WinAnsiEncoding (and suggested fix) When running text extraction on a PDF file that contains the soft hyphen character in the WinAnsiEncoding (that is, 0255), the text extractor incorrectly maps this as a space, when it should be a hyphen. As the PDF Reference 1.7 says in note 5 of table D.1:\n\n'The hyphen character is also encoded as 255 in WinAnsiEncoding. The meaning of this duplicate code is \"soft hyphen,\" but it is typographically the same as hyphen.'\n\nThe reason that a soft hyphen is typographically the same as hyphen is that a soft hyphen indicates that a hyphen MAY be placed here if necessary (i.e. breaking a word across lines). Since the soft hyphen should only be put, by the PDF producer, at the end of a line to break a word, it stands to reason that the option to place a hyphen must be taken.\n\nI think I've traced the reason for the substitution to Encoding.getName, where because there is no mapping in the codeToName mapping for this code in WinAnsiEncoding, by default it returns \"space\".\n\nThe fix is not as simple as adding an addCharacterEncoding( 0255, COSName.getPDFName(\"hyphen\")) to WinAnsiEncoding, because that will set both the codeToName mapping AND the nameToCode mapping, which will overwrite the 055 nameToCode mapping.\n\nAdding this line:\n\ncodeToName.add( new Integer(0255), COSName.getPDFName(\"hyphen\"));\n\nto the end of the WinAnsiEncoding constructor seems to fix the issue."
    ],
    [
        "PDFBOX-2093",
        "PDFBOX-1357",
        "\"bullet\" character is not rendered In this PDF is a \"bullet\" character which is not rendered.\r\nThere is some problem with translating code to glyph.\r\n\r\nThat character has code 127 (0x7F), but mapping for it is not found\r\n{code}\r\n14:33:17,966 DEBUG Type1Glyph2D:127 - FKOYIT+MyriadPro-Cond: glyph mapping for 127 not found\r\n{code}\r\n\r\nembedded font contains definition for \"bullet\" character.\r\nBut \"bullet\" character has code 183 in mapping table (from StandardEncoding, I suppose).",
        "Missing character encoding in MacRoman & WinAnsi During my Preflight refactoring, I encountered some characters mapping that are missing from the WinAnsiEncoding and the MacRomanEncoding.\r\n\r\n\"nonbreaking space\" is missing from the WInAnsi and the MacRoman Encoding that must be mapped with the \"space\" character.\r\n\"soft hyphen\" is missing from the WinAnsi encoding that must be mapped with the \"hyphen\" character. \r\n\r\nUnfortunately, they are no clearly defined name for these two characters, so only the getName() method have been updated to return \"space\" and \"hyphen\" when code for the \"nonbreaking space\" or \"soft hyphen\" is received.\r\n"
    ],
    [
        "PDFBOX-2093",
        "PDFBOX-1686",
        "\"bullet\" character is not rendered In this PDF is a \"bullet\" character which is not rendered.\r\nThere is some problem with translating code to glyph.\r\n\r\nThat character has code 127 (0x7F), but mapping for it is not found\r\n{code}\r\n14:33:17,966 DEBUG Type1Glyph2D:127 - FKOYIT+MyriadPro-Cond: glyph mapping for 127 not found\r\n{code}\r\n\r\nembedded font contains definition for \"bullet\" character.\r\nBut \"bullet\" character has code 183 in mapping table (from StandardEncoding, I suppose).",
        "[PATCH] Bullets missing Using PDFToImage bullets are missing"
    ],
    [
        "PDFBOX-2093",
        "PDFBOX-1713",
        "\"bullet\" character is not rendered In this PDF is a \"bullet\" character which is not rendered.\r\nThere is some problem with translating code to glyph.\r\n\r\nThat character has code 127 (0x7F), but mapping for it is not found\r\n{code}\r\n14:33:17,966 DEBUG Type1Glyph2D:127 - FKOYIT+MyriadPro-Cond: glyph mapping for 127 not found\r\n{code}\r\n\r\nembedded font contains definition for \"bullet\" character.\r\nBut \"bullet\" character has code 183 in mapping table (from StandardEncoding, I suppose).",
        "[PATCH] Bullet character not rendered See attached file. In WinAnsiEncoding, any unused code greater than 040 maps to the bullet character.\r\nThe attached patch takes that into account to render characters that don't use the standard encoding for bullet."
    ],
    [
        "PDFBOX-2101",
        "PDFBOX-626",
        "Surprising memory consumption when extracting images ExtractImages seems to fail to release memory resources on some files in both PDFBox 1.8.5 and trunk.  \r\n\r\nOn this file 4MB file [http://digitalcorpora.org/corp/nps/files/govdocs1/239/239665.pdf], if extracting every image on every page (and there are many, many duplicate images), there is an OOM with -Xmx1g.  If there is no Xmx and there is > 2.5g available, ExtractImages will work.\r\n\r\nWith some experimentation, the triggers seem to be JPEG images that have masks.  I'm not sure, though, whether the issue is with PDFBox or Java.\r\n\r\nCommandlines:\r\n1.8.5:\r\njava -Xmx1g -cp pdfbox-app-1.8.5.jar org.apache.pdfbox.ExtractImages 239665.pdf\r\n\r\n2.0_SNAPSHOT:\r\njava -Xmx1g -cp pdfbox-app-2.0.0-SNAPSHOT.jar org.apache.pdfbox.tools.ExtractImages -addkey 239665.pdf\r\n\r\nResults:\r\n1.8.5: 906 files before OOM\r\n{noformat}\r\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\r\n        at java.util.Arrays.copyOf(Arrays.java:2271)\r\n        at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:113)\r\n        at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.ja\r\nva:93)\r\n        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:140)\r\n        at org.apache.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:\r\n514)\r\n        at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDP\r\nixelMap.java:217)\r\n        at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStr\r\neam(PDPixelMap.java:363)\r\n        at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(\r\nPDXObjectImage.java:254)\r\n        at org.apache.pdfbox.ExtractImages.processResources(ExtractImages.java:2\r\n02)\r\n        at org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:160)\r\n\r\n        at org.apache.pdfbox.ExtractImages.main(ExtractImages.java:65)\r\n{noformat}\r\n\r\n2.0_SNAPSHOT: 428 files before OOM\r\n{noformat}\r\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\r\n        at java.util.Arrays.copyOf(Arrays.java:2271)\r\n        at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:113)\r\n        at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.ja\r\nva:93)\r\n        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:140)\r\n        at org.apache.pdfbox.io.IOUtils.copy(IOUtils.java:70)\r\n        at org.apache.pdfbox.io.IOUtils.toByteArray(IOUtils.java:52)\r\n        at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit(\r\nSampledImageReader.java:171)\r\n        at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBIma\r\nge(SampledImageReader.java:154)\r\n        at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDIm\r\nageXObject.java:171)\r\n        at org.apache.pdfbox.tools.ExtractImages.write2file(ExtractImages.java:2\r\n31)\r\n        at org.apache.pdfbox.tools.ExtractImages.processResources(ExtractImages.\r\njava:206)\r\n        at org.apache.pdfbox.tools.ExtractImages.extractImages(ExtractImages.jav\r\na:164)\r\n        at org.apache.pdfbox.tools.ExtractImages.main(ExtractImages.java:69)\r\n{noformat}",
        "Reduce the memory impact of the COS object model The current COS object model in org.apache.pdfbox.cos is not much optimized for memory, which causes quite large memory requirements when processing large PDF documents."
    ],
    [
        "PDFBOX-2139",
        "PDFBOX-1740",
        "German Umlaute (mutated vowel) are rendered incorrect German Umlate, specifically the 2 dots on top of the characters, are not rendered correctly after loading a PDDocument and creating a postscriptfile with the resulting ByteArrayOutputStream. \r\n\r\nI use a 2.0 nightbuild.\r\n\r\n{code:title=PDFService.java|borderStyle=solid}\r\nprivate ByteArrayOutputStream pdf2ps(byte[] pdf) throws PrinterException, IOException {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory\r\n\t\t\t\t.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\tPDDocument doc = PDDocument.load(new ByteArrayInputStream(pdf), false);\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\r\n\r\n\tPDFPrinter printer = new PDFPrinter(doc, Scaling.ACTUAL_SIZE, Orientation.AUTO);\r\n\tprinter.silentPrint(pjob);\r\n\r\n\tdoc.close();\r\n\r\n\treturn bout;\r\n}\r\n{code}\r\n\r\n\r\n",
        "Umlaut not rendered correctly in TTF composite glyph The dots above the \"U\" in the attached file are not rendered correctly. From looking at the points array, I think that the cause is NOT the calculation of the shape path itself (PDFBOX-1435), it must be before, i.e. the calculation of the point coordinates that are used later for the shapes, done in GlyfCompositeDescript.getXCoordinate() or even deeper.\r\n\r\nThe X coordinates from the \"U\" are between 80 and 640. The X coordinates of the two dots are between 406 and 587, i.e. the two dots are at the right:\r\n\r\npoints:\r\nPoint(547,-729,onCurve,)\r\nPoint(640,-729,onCurve,)\r\nPoint(640,-217,onCurve,)\r\nPoint(640,-107,,)\r\nPoint(487,23,,)\r\nPoint(359,23,onCurve,)\r\nPoint(229,23,,)\r\nPoint(80,-106,,)\r\nPoint(80,-217,onCurve,)\r\nPoint(80,-729,onCurve,)\r\nPoint(173,-729,onCurve,)\r\nPoint(173,-217,onCurve,)\r\nPoint(173,-138,,)\r\nPoint(274,-59,,)\r\nPoint(359,-59,onCurve,)\r\nPoint(447,-59,,)\r\nPoint(547,-143,,)\r\nPoint(547,-217,onCurve,endOfContour)\r\nPoint(510,-881,onCurve,)\r\nPoint(510,-777,onCurve,)\r\nPoint(406,-777,onCurve,)\r\nPoint(406,-881,onCurve,endOfContour)\r\nPoint(587,-881,onCurve,)\r\nPoint(587,-777,onCurve,)\r\nPoint(483,-777,onCurve,)\r\nPoint(483,-881,onCurve,endOfContour)\r\n\r\nThe font can be found here:\r\nhttp://ftp.gnu.org/gnu/freefont/freefont-ttf-20120503.zip\r\n"
    ],
    [
        "PDFBOX-2141",
        "PDFBOX-1936",
        "Shading not applied to text The attached PDF draws a text filled with horizontal shading going from red to blue. When rendered via PDFBox, the text is completely filled with red. The problem is that AxialShadingContext#getRaster() gets called with positions that completely fell outside of the range stored in its coords[] field. The fix seems to be to set glyph transform rather than graphics2d transform in PageDrawer#writeText() as shown in the attached patch.",
        "text outline with shading pattern is invisible This is also somewhat of a regression: in PDFBOX-615, the file color_gradient.pdf-1.png had the text rendered, although in black. Currently, the text is invisible."
    ],
    [
        "PDFBOX-2153",
        "PDFBOX-1451",
        "Setting the correct clipping path for shading While doing tests with the file eci_altona-test-suite-v2_technical_H.pdf (uncompressed) of PDFBOX-1915 I noticed that by removing a \"W\" (modifies the clipping region) operator of a type 7 shading I got a lot more correct shadings (type 6 and lower). It looked like PDFBox had been using the clipping of the type 7 when drawing the type 6, which is just a rectangle above in that rendering. This resulted in a blank.\r\n\r\nBy adding \r\n{code}\r\ngraphics.setClip(getGraphicsState().getCurrentClippingPath());\r\n{code}\r\nin PageDrawer.shfill() just before the graphics.fill() I get several files to render correctly that I hadn't before.\r\n\r\n(Setting null will probably do the same, didn't test that yet).\r\n\r\nThe following PDFs are rendered correctly with the change:\r\nMcAfee-ShadingType7.pdf\r\neci_altona-test-suite-v2_technical_H.pdf\r\ncrestron-p9.pdf  (these three found in PDFBOX-1915)\r\nPDFBOX-1451.pdf (\"alfresco\")\r\nPDFBOX-1940.pdf (\"chart\")\r\nPDFBOX-1861-tracemonkey.pdf p.11\r\n\r\nNot solved by the change:\r\nPDFBOX-2098-asyTUG.pdf p.6  (this one doesn't use shfill)\r\nPDFBOX-1861-tracemonkey.pdf p.6 (not shading)\r\nPDFBOX-1416.pdf (not shading)\r\ntexample-rgb-triangle.pdf (John has an explanation about that one)\r\n\r\nWDYT? Is there any reason NOT to set the clipping path in PageDrawer.shFill() ?",
        "Error in converting a pdf to image using convertToImage Hi,\r\nI converted a pdf to image using\r\nClass : PDPage \r\nAPI : public BufferedImage convertToImage()\r\ni obtained an image with the first line of the bulleted list on the right with strange character and:\r\nwith 1.5.0 version is missing the image on the top\r\nwith 1.7.1 i had a strange color issue."
    ],
    [
        "PDFBOX-2153",
        "PDFBOX-1947",
        "Setting the correct clipping path for shading While doing tests with the file eci_altona-test-suite-v2_technical_H.pdf (uncompressed) of PDFBOX-1915 I noticed that by removing a \"W\" (modifies the clipping region) operator of a type 7 shading I got a lot more correct shadings (type 6 and lower). It looked like PDFBox had been using the clipping of the type 7 when drawing the type 6, which is just a rectangle above in that rendering. This resulted in a blank.\r\n\r\nBy adding \r\n{code}\r\ngraphics.setClip(getGraphicsState().getCurrentClippingPath());\r\n{code}\r\nin PageDrawer.shfill() just before the graphics.fill() I get several files to render correctly that I hadn't before.\r\n\r\n(Setting null will probably do the same, didn't test that yet).\r\n\r\nThe following PDFs are rendered correctly with the change:\r\nMcAfee-ShadingType7.pdf\r\neci_altona-test-suite-v2_technical_H.pdf\r\ncrestron-p9.pdf  (these three found in PDFBOX-1915)\r\nPDFBOX-1451.pdf (\"alfresco\")\r\nPDFBOX-1940.pdf (\"chart\")\r\nPDFBOX-1861-tracemonkey.pdf p.11\r\n\r\nNot solved by the change:\r\nPDFBOX-2098-asyTUG.pdf p.6  (this one doesn't use shfill)\r\nPDFBOX-1861-tracemonkey.pdf p.6 (not shading)\r\nPDFBOX-1416.pdf (not shading)\r\ntexample-rgb-triangle.pdf (John has an explanation about that one)\r\n\r\nWDYT? Is there any reason NOT to set the clipping path in PageDrawer.shFill() ?",
        "Axial shading doesn't appear ShadingType 2 (axial shading) doesn't appear in attached file. Maybe related to PDFBOX-1442."
    ],
    [
        "PDFBOX-2160",
        "PDFBOX-884",
        "PDFTextStripper doesn't always write paragraph start In some cases PDFTextStripper writes more paragraph ends than paragraph starts.",
        "Error in HTML output when detecting paragraph boundaries There is an error in paragraph detection in 1.3 version and in current development trunk. In some situations is outputing a non closed <p> tag. It happens in new pages, when - I think - the first paragraph is empty (an empty string).\r\n\r\nI attach a quite simple patch for solving this problem, perhaps is not very elegant, but is quite dificult for me to understand paragraph logic in current development trunk.\r\n"
    ],
    [
        "PDFBOX-2165",
        "PDFBOX-1790",
        "NPE with barcode ttf font Inspired by this complaint\r\nhttp://stackoverflow.com/a/24432822/535646\r\nI tried loading barcode fonts with PDFBox, with the command\r\n{code}\r\nPDTrueTypeFont.loadTTF()\r\n{code}\r\n\r\nWith the file Code39.ttf that I get here\r\nhttp://www.myfont.de/download.php?winfont=bar-code-39-lesbar&type=zip\r\nI get this exception:\r\n{code}\r\nException in thread \"main\" java.lang.NullPointerException\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.makeFontDescriptor(PDTrueTypeFont.java:328)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:127)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:80)\r\n{code}\r\n",
        "NPE during PDTrueTypeFont.loadTTF() on Mac TrueType font lacking Windows-platformID CMAPEncodingEntry I'm attempting to embed a TrueType font using PDFBox, on the Mac, using PDTrueType.loadTTF( PDDocument, InputStream, Encoding ).\r\n\r\nFor TrueType fonts originating from Windows (e.g., Tahoma) this works.\r\n\r\nFor TrueType fonts originating from the Mac (e.g., Apple Chancery), a NullPointerException is thrown.\r\n\r\n    java.lang.NullPointerException\r\n                at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:409)\r\n                at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:201)\r\n                at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:177)\r\n\r\nI stepped through the code in a debugger. The method PDTrueTypeFont.loadDescriptorDictionary() loops through the cmap table for the font, looking for a cmap with platform ID 3 (Windows), and sets the variable unimap only if one is found. After that loop, the variable unimap is dereferenced without checking for null.\r\n\r\nSome Mac TrueType fonts have platform IDs 0 (Unicode) and 1 (Mac), but not 3 (Windows).\r\n\r\nAt the least, a null check seems required. But more desirable would be support for Mac TrueType fonts.\r\n\r\nAm I missing something, or should I enter a bug?\r\n\r\nExample problem font:\r\n* Apple Chancery (Included with OS)\r\n\r\nDetails:\r\n* PDFBox version: 1.8.2 [Have not yet tested with 1.8.3, which was released a few days ago]\r\n* Platform: Mac\r\n* Java 6\r\n* Font platform IDs: 0, 1\r\n"
    ],
    [
        "PDFBOX-2180",
        "PDFBOX-1997",
        "LAB color space produces wrong colors The attached example uses LAB colors. When rendering it using PDFToImage, the result is kind of violet, instead of black text and yellow rectangles (see the attached jpeg). \r\n\r\nWhen comparing 1.8 sources with current trunk, the incoming values are \"scaled to range\" in trunk PDLab#toRGB(), while this was not the case in 1.8 PDColorState and ColorSpaceLab. As far as I can tell, in 1.8 the values were only \"clipped to range\" in ColorSpaceLab#toCIEXYZ(). \r\n\r\nIf I remove the scaling in 2.0 the rendering is correct.",
        "CIE LAB item missing in rendering The file from PDFBOX-1681 is missing the \"CIELAB\" output, it was there a few weeks ago."
    ],
    [
        "PDFBOX-2182",
        "PDFBOX-1961",
        "Regression Watermark image missing Works in 1.8\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage image.pdf",
        "Page with annotations renders fine with 1.8 but not with 2.0 Page 2 of the attached PDF (from a ghostscript installation) renders fine with 1.8 but not with 2.0. The other pages are not rendered properly with any version."
    ],
    [
        "PDFBOX-2223",
        "PDFBOX-1295",
        "Can't read embedded ICC profile, using alternate color space from PDFBOX-1501 java -jar pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage E-frutiger.pdf\r\n\r\nSEVERE: Can't read embedded ICC profile, using alternate color space",
        "Unable to create the color instance / bg color inverted I get a ton of red for this code segment, and the resulting file has the background color inverted.\r\n\r\n            PDDocument document = null;\r\n\r\n            try\r\n            {\r\n                document = PDDocument.load(pdfFile);\r\n\r\n                List pages = document.getDocumentCatalog().getAllPages();\r\n                int p = 0;\r\n                for (Object pobj : pages)\r\n                {\r\n                    PDPage page = (PDPage) pobj;\r\n                    ++p;\r\n                    BufferedImage bim = page.convertToImage();\r\n\r\n                    // Test with output in memory, to see the size\r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream();\r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout);\r\n                    if (!memoutok)\r\n                        System.err.println (\"mem write failed for \" + p);\r\n                    memout.reset();\r\n                    memout.close();\r\n\r\n                    // Test with output to png file\r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p);\r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname));\r\n                    if (!foutok)\r\n                        System.err.println (\"file write failed for \" + p);\r\n...\r\n\r\n\r\nApr 26, 2012 2:15:49 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [1.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)\r\n\tat org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(FillNonZeroRule.java:58)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.133057] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:50 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: EI\r\nApr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.921875] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)\r\n\tat org.apache.pdfbox.util.operator.pagedrawer.FillEvenOddRule.process(FillEvenOddRule.java:57)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.397949] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.898438] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)\r\n\tat org.apache.pdfbox.util.operator.pagedrawer.FillEvenOddRule.process(FillEvenOddRule.java:57)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.397949] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.667969] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)\r\n\tat org.apache.pdfbox.util.operator.pagedrawer.FillEvenOddRule.process(FillEvenOddRule.java:57)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [1.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)\r\n\tat org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(FillNonZeroRule.java:58)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [1.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)\r\n\tat org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(FillNonZeroRule.java:58)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:52 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\nApr 26, 2012 2:15:52 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor\r\nWarnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}]} }\r\n\t Number of Components: 1; guessing color ... \r\nInterpretating as single-integer RGB\r\njava.awt.color.ProfileDataException: Invalid profile sequence\r\n\tat sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)\r\n\tat java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)\r\n\tat java.awt.Color.<init>(Color.java:542)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)\r\n\tat org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)\r\n\tat org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)\r\n\tat pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)\r\n\r\n"
    ],
    [
        "PDFBOX-2231",
        "PDFBOX-2230",
        "PDF takes minutes to convert in JDK8 Takes seconds on pdfbox 1.8\r\n\r\njava -jar /home/simon/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Binder1.pdf",
        "PDF from PDFBOX-214 takes minutes to convert on JDK8 Takes seconds on pdfbox 1.8\r\n\r\njava -jar /home/simon/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage test.pdf\r\n\r\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1589598&file_id=201210"
    ],
    [
        "PDFBOX-2235",
        "PDFBOX-1288",
        "Lines missing PDF to image java -jar /home/simon/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage lines.pdf",
        "Lines will not be printed (correctly) in case they are part of a clipping mask In case of a PDF file that was created with FOP 1.0 and was printed with PDFBox, lines disappeared or lines appeared smaller. PDF files that were created with Adobe InDesign (e.g.) will be printed correctly.\r\n\r\nIt has something to do with lines which are part of a clipping mask. FOP seems to generate a clipping mask around all kind of borders. Lines of type <fo:leader> appear correctly and are not part of an clipping mask.\r\n\r\nWhen printing a FOP-PDF with PDFBox, PDFBox moves the clipping mask, so the line is not visible anymore. Please see attached Screenshot.\r\n\r\nThe PDF file I created with FOP is named: original.pdf\r\nThe resulting PDF file after printing with PDFBox is named: after_printing_with_pdfbox.pdf\r\n\r\nRegards\r\nChristoph"
    ],
    [
        "PDFBOX-2235",
        "PDFBOX-1899",
        "Lines missing PDF to image java -jar /home/simon/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage lines.pdf",
        "Rendering issues with images and lines The file from PDFBOX-882 still has some minor rendering issues with images and lines, and logs some interesting errors to the console."
    ],
    [
        "PDFBOX-2235",
        "PDFBOX-1935",
        "Lines missing PDF to image java -jar /home/simon/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage lines.pdf",
        "round edge with wrong color file found at:\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=886049\r\nhttp://www.miloticky.unas.cz/jidelnicek.pdf\r\nthe pdf.js viewer has the same bug."
    ],
    [
        "PDFBOX-2248",
        "PDFBOX-2020",
        "nullpointerexception on validImageColorSpace java.lang.NullPointerException\r\n    at org.apache.pdfbox.preflight.content.ContentStreamEngine.validImageColorSpace(ContentStreamEngine.java:330)\r\n    at org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:178)\r\n    at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n    at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n    at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n    at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:76)\r\n    at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:179)\r\n    at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:87)\r\n    at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n    at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n    at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)\r\n    at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)\r\n    at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\r\n\r\n\r\ni cannot submit an exemple PDF, because the one with the errors are confidential.\r\nthey were generated with PDFCreator (winword 2010, print into)\r\nnot all the PDF generated the same way have the same error\r\n\r\ncritical for us because we need to validate the PDFs before uploading them to our server.",
        "PDF/A Validation raises NullPointerException for PDFs without ImageColorSpace TestCode: Example Code http://pdfbox.apache.org/cookbook/pdfavalidation.html\r\n\r\nIf i check a PDF without ImageColorSpace the example Code raises the following NullPointerException:\r\nException in thread \"main\" java.lang.NullPointerException\r\n\tat org.apache.pdfbox.preflight.content.ContentStreamEngine.validImageColorSpace(ContentStreamEngine.java:323)\r\n\tat org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:179)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:254)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:221)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:203)\r\n\tat org.apache.pdfbox.preflight.content.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:76)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:180)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:88)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)\r\n\tat org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:169)\r\n\tat PdfBox.main(PdfBox.java:33)\r\n\r\nI think the method org.apache.pdfbox.pdmodel.PDResources.getColorSpaces (PDResources.java:311) did not return a object if their is no image color space but the code line org.apache.pdfbox.preflight.content.ContentStreamEngine.validImageColorSpace(ContentStreamEngine.java:323) expects a object in any case."
    ],
    [
        "PDFBOX-2253",
        "PDFBOX-414",
        "Numbers 1-5 appear differently File from PDFBOX-301\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage COS1102A015v1.pdf",
        "Support missing text renderings modes In org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition() text will be rendered using the 1 of 7 rendering modes. PDFBox only supports 2 of them (see table 5.3 in the pdf-reference-manual in chapter \"Text Rendering Mode\") "
    ],
    [
        "PDFBOX-2253",
        "PDFBOX-678",
        "Numbers 1-5 appear differently File from PDFBOX-301\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage COS1102A015v1.pdf",
        "Support missing Text Rendering Modes when rendering a PDF Of the 7 different Text Rendering Modes only mode 0 (Fill Text) is correctly implemented. Mode 1 (Stroke Text) falls back to Mode 0 and the others are not implemented. I'm looking to implement the missing modes (at least some of them).\r\n\r\nBefore doing so I'm proposing a structural change to when rendering really occurs. Currently it's done within the PDxxxFont classes. I'd rather implement the (AWT) text output in PageDrawer (or helper classes within the same package) and use the font classes to return an AWT font by adding a getAwtFont method. Doing so we get a better separation between the PDF related stuff (PDxxx) and applications like PageDrawer. The current rendering specific code within the PDxxxFont classes can be retained for compatibility and marked deprecated at a later stage.\r\n\r\nWDYT?"
    ],
    [
        "PDFBOX-2255",
        "PDFBOX-414",
        "Text not rendered bold  File from PDFBOX-265\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX265-problem.pdf",
        "Support missing text renderings modes In org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition() text will be rendered using the 1 of 7 rendering modes. PDFBox only supports 2 of them (see table 5.3 in the pdf-reference-manual in chapter \"Text Rendering Mode\") "
    ],
    [
        "PDFBOX-2255",
        "PDFBOX-678",
        "Text not rendered bold  File from PDFBOX-265\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX265-problem.pdf",
        "Support missing Text Rendering Modes when rendering a PDF Of the 7 different Text Rendering Modes only mode 0 (Fill Text) is correctly implemented. Mode 1 (Stroke Text) falls back to Mode 0 and the others are not implemented. I'm looking to implement the missing modes (at least some of them).\r\n\r\nBefore doing so I'm proposing a structural change to when rendering really occurs. Currently it's done within the PDxxxFont classes. I'd rather implement the (AWT) text output in PageDrawer (or helper classes within the same package) and use the font classes to return an AWT font by adding a getAwtFont method. Doing so we get a better separation between the PDF related stuff (PDxxx) and applications like PageDrawer. The current rendering specific code within the PDxxxFont classes can be retained for compatibility and marked deprecated at a later stage.\r\n\r\nWDYT?"
    ],
    [
        "PDFBOX-2255",
        "PDFBOX-2253",
        "Text not rendered bold  File from PDFBOX-265\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX265-problem.pdf",
        "Numbers 1-5 appear differently File from PDFBOX-301\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage COS1102A015v1.pdf"
    ],
    [
        "PDFBOX-2263",
        "PDFBOX-1959",
        "Support OS with limited fonts Some operating systems (centos base) have no /usr/share/fonts so if pdf doesnt embed fonts you only get default font with pdf to image, no bold or italic.\r\nCould pdfbox add back fonts inside jars as fallback as we had in 1.8 in pdfbox/src/main/resources/org/apache/pdfbox/resources/ttf/",
        "Remove AWT Fonts Since PDFBOX-1844 added the Type 1 font parser, there is no need to use AWT any more for font rendering. We should remove all calls to AWT string drawing methods.\r\n\r\nHowever, before we can do this we need to ship a set of standard 14 fonts with PDFBox as currently the system fonts are being used via AWT. We also need to provide a mechanism for the user to supply their own external fonts for cases where embedded fonts are missing.\r\n\r\nThe main question is, what fonts should we ship? Some of the \"free\" fonts I've seen render very poorly, any suggestions? Furthermore, are there fonts under more restrictive licenses which we could ship? Apache does allow for such files to be part of a project under certain conditions."
    ],
    [
        "PDFBOX-2263",
        "PDFBOX-2262",
        "Support OS with limited fonts Some operating systems (centos base) have no /usr/share/fonts so if pdf doesnt embed fonts you only get default font with pdf to image, no bold or italic.\r\nCould pdfbox add back fonts inside jars as fallback as we had in 1.8 in pdfbox/src/main/resources/org/apache/pdfbox/resources/ttf/",
        "Remove usage of AWT fonts We're still using AWT fonts to render the \"standard 14\" built-in fonts, which causes rendering problems and encoding issues (see  PDFBOX-2140). We're also using AWT for some fallback fonts.\r\n\r\nRemoval of these AWT fonts isn't too difficult, we need to load the fonts using the existing PDFFontManager mechanism which has recently been added. All missing TrueType fonts loaded from disk have been using SystemFontManager for a number of weeks now. \r\n\r\nWe should ship some sensible default fonts with PDFBox, such as the Liberation fonts (see PDFBOX-2169, PDFBOX-2263), in case PDFFontManager can't find anything suitable, rather than falling back to the default TTF font, but by default we'll probe the system for suitable fonts."
    ],
    [
        "PDFBOX-2272",
        "PDFBOX-800",
        "Can't extract vertical text correctly - -1.8.6 can't extract the Unicode due to failing to map the UCS2 CMap for 90ms-RKSJ-V.-\r\n- 2.0 extracts the text but can't handle the vertical layout\r\n\r\nAlso see the file from PDFBOX-2294 which contains both horizontal and vertical text.",
        "Wrong text extract from vertical textboxes in pdf files Vertical textboxes in pdf files are not extracted correctly (using the tika library in C#).\r\nFor example if there is a vertical textbox \"hello\" in a pdf file (!WITHOUT! line breaks):\r\nH\r\nE\r\nL\r\nL\r\nO\r\nthe parser returns 5 strings, each with a single letter, even there is NO line break after every letter.\r\nIs there a option to avoid this problem?"
    ],
    [
        "PDFBOX-2282",
        "PDFBOX-2277",
        "Visual signature in bad proportions I want to convert into a picture a signed PDF document with a visual signature. This visual signature is done with functions of PDFBox. The resulting image has a visual signature, but in bad proportions (it is much smaller).\r\nI use addSignature() method to add a visual signature that works very well.\r\nThe problem may be at the addSignature () function or at PDFToImage() function.\r\nNote that the document signed with PDFBox visualizes very well with Adobe Reader and the signature created with Adobe Reader converts correctly in picture.\r\n\r\nAlso some PDF documents are very badly converted into image, I think especially at this Adobe document that is totally unreadable when converted:\r\nhttp://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/acrobat_digital_signature_appearances_v9.pdf\r\nCould you fix this issue in a future version ?\r\n",
        "Text overflow in field In pdf from PDFBOX-563\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX563-TestFax_merged.pdf"
    ],
    [
        "PDFBOX-2283",
        "PDFBOX-2277",
        "Incorrect transform for annotations / appearance streams The attached file (from the ghostscript installation) doesn't render properly, especially page 3, where the images are about double the size. The cause is that the transform for the appearance stream must be calculated based on the BBox and the appearance rectangle and the matrix (if available). This is described in \"Algorithm: Appearance streams\" in the \"Appearance Streams\" section of the spec.\r\n\r\nI have already prepared a fix, which I will commit after PDFBOX-2262.\r\n\r\nUpdate: this issue is also about signatures and acroform fields, because these have also appearance streams that are rendered with the same code.",
        "Text overflow in field In pdf from PDFBOX-563\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX563-TestFax_merged.pdf"
    ],
    [
        "PDFBOX-2283",
        "PDFBOX-2282",
        "Incorrect transform for annotations / appearance streams The attached file (from the ghostscript installation) doesn't render properly, especially page 3, where the images are about double the size. The cause is that the transform for the appearance stream must be calculated based on the BBox and the appearance rectangle and the matrix (if available). This is described in \"Algorithm: Appearance streams\" in the \"Appearance Streams\" section of the spec.\r\n\r\nI have already prepared a fix, which I will commit after PDFBOX-2262.\r\n\r\nUpdate: this issue is also about signatures and acroform fields, because these have also appearance streams that are rendered with the same code.",
        "Visual signature in bad proportions I want to convert into a picture a signed PDF document with a visual signature. This visual signature is done with functions of PDFBox. The resulting image has a visual signature, but in bad proportions (it is much smaller).\r\nI use addSignature() method to add a visual signature that works very well.\r\nThe problem may be at the addSignature () function or at PDFToImage() function.\r\nNote that the document signed with PDFBox visualizes very well with Adobe Reader and the signature created with Adobe Reader converts correctly in picture.\r\n\r\nAlso some PDF documents are very badly converted into image, I think especially at this Adobe document that is totally unreadable when converted:\r\nhttp://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/acrobat_digital_signature_appearances_v9.pdf\r\nCould you fix this issue in a future version ?\r\n"
    ],
    [
        "PDFBOX-2331",
        "PDFBOX-2250",
        "Expected a long type at offset 22112, instead got '_AJ1T' PDF from PDFBOX-647\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage -nonSeq Function\\ Structure\\ example.pdf\r\n\r\nException in thread \"main\" java.io.IOException: Error: Expected a long type at offset 22112, instead got '_AJ1T'\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1701)\r\n\t",
        "Improve XRef self healing mechanism PDFBOX-1769 introduced a \"self healing\" mechanism to repair corrupt XRef offsets. But that one was just a starter and there remain a lot of issues to be solved. I'm planing to solve at least some of them.\r\n\r\nAll fixes and improvements are targeting the non-sequential parser and I won't port those changes to the old parser."
    ],
    [
        "PDFBOX-2346",
        "PDFBOX-2345",
        "Unknown dir object c=']' cInt=93 peek=']' peekInt=93 3641 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar WriteDecodedDoc -nonSeq out.pdf\r\nException in thread \"main\" java.io.IOException: Unknown dir object c=']' cInt=93 peek=']' peekInt=93 3641\r\n\tat org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1368)\r\n",
        "IndexOutOfBoundsException reading encrypted pdf java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar WriteDecodedDoc -nonSeq out.pdf\r\n\r\nException in thread \"main\" java.lang.IndexOutOfBoundsException: Index: 4, Size: 4\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:635)\r\n\tat java.util.ArrayList.get(ArrayList.java:411)\r\n\tat org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:110)\r\n"
    ],
    [
        "PDFBOX-2348",
        "PDFBOX-2299",
        "NullPointerException regression Type0FontValidator.java:90 In may 2014, this problem did not yet exist, but the patches since appear to have introduced it.\r\n\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.checkMandatoryFields(Type0FontValidator.java:90)\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.validate(Type0FontValidator.java:76)\r\n\tat org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:72)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:106)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:84)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:164)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:83)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)\r\n\tat org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)\r\n\r\nFormat.PDF_A1B\r\n\r\nsee also PDFBOX-2299",
        "Isartor tests don't work anymore Sorry, I hadn't thought about this when testing the no-awt version, but the Isartor tests don't work anymore (I have them enabled for my own version since PDFBOX-2179).\r\n{code}\r\n-------------------------------------------------------------------------------\r\nTest set: org.apache.pdfbox.preflight.TestIsartor\r\n-------------------------------------------------------------------------------\r\nTests run: 204, Failures: 35, Errors: 0, Skipped: 0, Time elapsed: 29.485 sec <<< FAILURE! - in org.apache.pdfbox.preflight.TestIsartor\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.2 Graphics\\6.2.3 Colour spaces\\6.2.3.3 Uncalibrated colour spaces\\isartor-6-2-3-3-t02-fail-h.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.092 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-2-3-3-t02-fail-h.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.2 Graphics\\6.2.3 Colour spaces\\6.2.3.3 Uncalibrated colour spaces\\isartor-6-2-3-3-t02-fail-i.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.006 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-2-3-3-t02-fail-i.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.2 Font types\\isartor-6-3-2-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 1.837 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-2-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.1 General\\isartor-6-3-3-1-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.191 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-1-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.1 General\\isartor-6-3-3-1-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.051 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-1-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.2 CIDFonts\\isartor-6-3-3-2-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.051 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-2-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.3 CMaps\\isartor-6-3-3-3-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.199 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-3-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.3 CMaps\\isartor-6-3-3-3-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.042 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-3-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.046 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.03 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-c.pdf : UnsupportedOperationException raised , message=not implemented: missing CFF\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.01 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-d.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-e.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-e.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-f.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.027 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-f.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-g.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-g.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-h.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.01 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-h.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.029 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.036 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-c.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.088 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-d.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t03-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.001 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t03-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.6 Font metrics\\isartor-6-3-6-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.053 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-6-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.6 Font metrics\\isartor-6-3-6-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.067 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-6-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.6 Font metrics\\isartor-6-3-6-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.08 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-6-t01-fail-c.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.7 Character encodings\\isartor-6-3-7-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.022 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-7-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.7 Character encodings\\isartor-6-3-7-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-7-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.7 Character encodings\\isartor-6-3-7-t03-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.023 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-7-t03-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.2 Annotation types\\isartor-6-5-2-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-2-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.004 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.014 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-c.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-d.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.9 Interactive Forms\\isartor-6-9-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.019 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-9-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.9 Interactive Forms\\isartor-6-9-t02-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.032 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-9-t02-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n{code}"
    ],
    [
        "PDFBOX-2349",
        "PDFBOX-2299",
        "NullPointerException in FontDescriptorHelper.validate() Same test as in PDFBOX-2348\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.preflight.font.descriptor.FontDescriptorHelper.validate(FontDescriptorHelper.java:84)\r\n\tat org.apache.pdfbox.preflight.font.SimpleFontValidator.processFontDescriptorValidation(SimpleFontValidator.java:90)\r\n\tat org.apache.pdfbox.preflight.font.SimpleFontValidator.validate(SimpleFontValidator.java:64)\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.processDescendantFont(Type0FontValidator.java:136)\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.validate(Type0FontValidator.java:78)\r\n\tat org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:72)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:106)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:84)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:164)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:83)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)\r\n\tat org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.isPdfA(ValidationWithPdfbox1653.java:238)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.isPdfA(ValidationWithPdfbox1653.java:161)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.isPdfA(ValidationWithPdfbox1653.java:144)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.testFile(ValidationWithPdfbox1653.java:354)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.test(ValidationWithPdfbox1653.java:330)",
        "Isartor tests don't work anymore Sorry, I hadn't thought about this when testing the no-awt version, but the Isartor tests don't work anymore (I have them enabled for my own version since PDFBOX-2179).\r\n{code}\r\n-------------------------------------------------------------------------------\r\nTest set: org.apache.pdfbox.preflight.TestIsartor\r\n-------------------------------------------------------------------------------\r\nTests run: 204, Failures: 35, Errors: 0, Skipped: 0, Time elapsed: 29.485 sec <<< FAILURE! - in org.apache.pdfbox.preflight.TestIsartor\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.2 Graphics\\6.2.3 Colour spaces\\6.2.3.3 Uncalibrated colour spaces\\isartor-6-2-3-3-t02-fail-h.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.092 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-2-3-3-t02-fail-h.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.2 Graphics\\6.2.3 Colour spaces\\6.2.3.3 Uncalibrated colour spaces\\isartor-6-2-3-3-t02-fail-i.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.006 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-2-3-3-t02-fail-i.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.2 Font types\\isartor-6-3-2-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 1.837 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-2-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.1 General\\isartor-6-3-3-1-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.191 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-1-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.1 General\\isartor-6-3-3-1-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.051 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-1-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.2 CIDFonts\\isartor-6-3-3-2-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.051 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-2-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.3 CMaps\\isartor-6-3-3-3-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.199 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-3-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.3 Composite fonts\\6.3.3.3 CMaps\\isartor-6-3-3-3-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.042 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-3-3-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.046 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.03 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-c.pdf : UnsupportedOperationException raised , message=not implemented: missing CFF\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.01 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-d.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-e.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-e.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-f.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.027 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-f.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-g.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-g.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.4 Embedded font programs\\isartor-6-3-4-t01-fail-h.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.01 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-4-t01-fail-h.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.029 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.036 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-c.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t01-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.088 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t01-fail-d.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.5 Font subsets\\isartor-6-3-5-t03-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.001 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-5-t03-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.6 Font metrics\\isartor-6-3-6-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.053 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-6-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.6 Font metrics\\isartor-6-3-6-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.067 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-6-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.6 Font metrics\\isartor-6-3-6-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.08 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-6-t01-fail-c.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.7 Character encodings\\isartor-6-3-7-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.022 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-7-t01-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.7 Character encodings\\isartor-6-3-7-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-7-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.3 Fonts\\6.3.7 Character encodings\\isartor-6-3-7-t03-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.023 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-3-7-t03-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.2 Annotation types\\isartor-6-5-2-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-2-t01-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.004 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.014 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-c.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.5 Annotations\\6.5.3 Annotation dictionaries\\isartor-6-5-3-t04-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-5-3-t04-fail-d.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.9 Interactive Forms\\isartor-6-9-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.019 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-9-t02-fail-a.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n\r\nvalidate[target\\pdfs\\Isartor testsuite\\PDFA-1b\\6.9 Interactive Forms\\isartor-6-9-t02-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.032 sec  <<< FAILURE!\r\njava.lang.AssertionError: isartor-6-9-t02-fail-b.pdf : NullPointerException raised , message=null\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)\r\n{code}"
    ],
    [
        "PDFBOX-2349",
        "PDFBOX-2348",
        "NullPointerException in FontDescriptorHelper.validate() Same test as in PDFBOX-2348\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.preflight.font.descriptor.FontDescriptorHelper.validate(FontDescriptorHelper.java:84)\r\n\tat org.apache.pdfbox.preflight.font.SimpleFontValidator.processFontDescriptorValidation(SimpleFontValidator.java:90)\r\n\tat org.apache.pdfbox.preflight.font.SimpleFontValidator.validate(SimpleFontValidator.java:64)\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.processDescendantFont(Type0FontValidator.java:136)\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.validate(Type0FontValidator.java:78)\r\n\tat org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:72)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:106)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:84)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:164)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:83)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)\r\n\tat org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.isPdfA(ValidationWithPdfbox1653.java:238)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.isPdfA(ValidationWithPdfbox1653.java:161)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.isPdfA(ValidationWithPdfbox1653.java:144)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.testFile(ValidationWithPdfbox1653.java:354)\r\n\tat com.privasphere.pdf.pdfA.ValidationWithPdfbox1653.test(ValidationWithPdfbox1653.java:330)",
        "NullPointerException regression Type0FontValidator.java:90 In may 2014, this problem did not yet exist, but the patches since appear to have introduced it.\r\n\r\njava.lang.NullPointerException\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.checkMandatoryFields(Type0FontValidator.java:90)\r\n\tat org.apache.pdfbox.preflight.font.Type0FontValidator.validate(Type0FontValidator.java:76)\r\n\tat org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:72)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:106)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:84)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:164)\r\n\tat org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:83)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)\r\n\tat org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)\r\n\tat org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)\r\n\r\nFormat.PDF_A1B\r\n\r\nsee also PDFBOX-2299"
    ],
    [
        "PDFBOX-2353",
        "PDFBOX-2177",
        "ArrayIndexOutOfBoundsException in Type2CharString.drawAlternatingCurve The file from PDFBOX-2348 fails with this exception:\r\n{code}\r\njava.lang.ArrayIndexOutOfBoundsException: Array index out of range: 3\r\n\tat java.util.Vector.get(Vector.java:744)\r\n\tat org.apache.fontbox.cff.Type2CharString.drawAlternatingCurve(Type2CharString.java:333)\r\n\tat org.apache.fontbox.cff.Type2CharString.handleCommand(Type2CharString.java:181)\r\n\tat org.apache.fontbox.cff.Type2CharString.access$000(Type2CharString.java:32)\r\n\tat org.apache.fontbox.cff.Type2CharString$1.handleCommand(Type2CharString.java:104)\r\n\tat org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:45)\r\n\tat org.apache.fontbox.cff.Type2CharString.convertType1ToType2(Type2CharString.java:107)\r\n\tat org.apache.fontbox.cff.Type2CharString.<init>(Type2CharString.java:58)\r\n\tat org.apache.fontbox.cff.CIDKeyedType2CharString.<init>(CIDKeyedType2CharString.java:46)\r\n\tat org.apache.fontbox.cff.CFFCIDFont.getType2CharString(CFFCIDFont.java:233)\r\n\tat org.apache.pdfbox.pdmodel.font.PDCIDFontType0.getType2CharString(PDCIDFontType0.java:210)\r\n\tat org.apache.pdfbox.rendering.font.CIDType0Glyph2D.getPathForCharacterCode(CIDType0Glyph2D.java:63)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:431)\r\n{code}",
        "[PATCH] IndexOutOfBoundsException reading embedded OpenType font java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage opentype.pdf \r\nPDFToImage failed with the following exception:\r\njava.lang.IndexOutOfBoundsException: Index: 2, Size: 2\r\n\tat java.util.SubList.rangeCheck(AbstractList.java:755)\r\n\tat java.util.SubList.get(AbstractList.java:639)\r\n\tat java.util.Collections$SynchronizedList.get(Collections.java:2477)\r\n\tat org.apache.fontbox.cff.Type2CharString.drawCurve(Type2CharString.java:356)\r\n\r\n7zip attachment\r\n"
    ],
    [
        "PDFBOX-2418",
        "PDFBOX-2417",
        "xmp regression? 7.3 : Error on MetaData, Schema is not set in this document : http://ns.adobe.com/xap/1.0/g/img/ 7.3 : Error on MetaData, Schema is not set in this document : http://ns.adobe.com/xap/1.0/g/img/",
        "xmp regression? 7.3 : Error on MetaData, Schema is not set in this document : http://ns.adobe.com/xap/1.0/sType/Dimensions# oops, the error message has changed a little bit:\r\nwas \"7.6 : Error on MetaData, Type not defined : Dimensions\"\r\n\r\norg.apache.xmpbox.xml.XmpParsingException: Schema is not set in this document : http://ns.adobe.com/xap/1.0/sType/Dimensions#\r\n\tat org.apache.xmpbox.xml.DomXmpParser.checkPropertyDefinition(DomXmpParser.java:808)\r\n\tat org.apache.xmpbox.xml.DomXmpParser.parseLiDescription(DomXmpParser.java:530)\r\n\tat org.apache.xmpbox.xml.DomXmpParser.createProperty(DomXmpParser.java:353)\r\n\tat org.apache.xmpbox.xml.DomXmpParser.parseDescriptionRoot(DomXmpParser.java:292)\r\n\tat org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:206)\r\n\tat org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:114)\r\n\tat org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:66)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)\r\n\tat org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)"
    ],
    [
        "PDFBOX-2483",
        "PDFBOX-1774",
        "StackOverflowError in preflight I get a stack overflow with the attached file. I can't even get the full trace.\r\n{code}\r\nException in thread \"main\" java.lang.StackOverflowError\r\n\tat java.util.regex.Pattern$Single.<init>(Unknown Source)\r\n\tat java.util.regex.Pattern.newSingle(Unknown Source)\r\n\tat java.util.regex.Pattern.atom(Unknown Source)\r\n\tat java.util.regex.Pattern.sequence(Unknown Source)\r\n\tat java.util.regex.Pattern.expr(Unknown Source)\r\n\tat java.util.regex.Pattern.compile(Unknown Source)\r\n\tat java.util.regex.Pattern.<init>(Unknown Source)\r\n\tat java.util.regex.Pattern.compile(Unknown Source)\r\n\tat java.lang.String.replaceAll(Unknown Source)\r\n\tat org.apache.pdfbox.pdmodel.font.ExternalFonts.getSubstitutes(ExternalFonts.java:208)\r\n\tat org.apache.pdfbox.pdmodel.font.ExternalFonts.getTrueTypeFont(ExternalFonts.java:384)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:144)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:81)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.getFonts(ResourcesValidationProcess.java:127)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:93)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:76)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)\r\n{code}\r\n",
        "StackOverflowError; Preflight->Font StackOverflowError when using this code:\r\n{code}\r\n\t\t\tPreflightParser parser = new PreflightParser(pFile);\r\n\t\t\tparser.parse();\r\n\t\t\tPreflightDocument document = parser.getPreflightDocument();\r\n\t\t\tdocument.validate();\r\n{code}\r\n\r\nWith the attached file (originally from http://digitalcorpora.org/corp/nps/files/govdocs1/659/659756.pdf )\r\n\r\nStack trace:\r\n{code}\r\nException in thread \"main\" java.lang.StackOverflowError\r\n\tat java.net.URLClassLoader$2.run(URLClassLoader.java:385)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.net.URLClassLoader.findResource(URLClassLoader.java:382)\r\n\tat java.lang.ClassLoader.getResource(ClassLoader.java:1002)\r\n\tat java.lang.ClassLoader.getResource(ClassLoader.java:997)\r\n\tat java.lang.ClassLoader.getResourceAsStream(ClassLoader.java:1192)\r\n\tat org.apache.pdfbox.util.ResourceLoader.loadResource(ResourceLoader.java:60)\r\n\tat org.apache.pdfbox.pdmodel.font.PDSimpleFont.determineEncoding(PDSimpleFont.java:314)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:123)\r\n\tat org.apache.pdfbox.pdmodel.font.PDSimpleFont.<init>(PDSimpleFont.java:73)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:102)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:100)\r\n\tat org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:204)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:91)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:74)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:77)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:191)\r\n\tat org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:78)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)\r\n\tat org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)\r\n\tat org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)\r\n\tat org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:77)\r\n{code}\r\n"
    ],
    [
        "PDFBOX-2493",
        "PDFBOX-2163",
        "OOM with corrupt PDF file I have a large archive of PDF files, some of which are unfortunately corrupt. I'm scanning them using a webapp and Tika, which in turn uses PDFBox. I have one file which results in errors in Tika 1.4 & 1.5 but with Tika 1.6 (which uses PDFBox 1.8.6) as well as causing errors it also causes PDFBox to consume ~4GB of heap before descending into a GC death-spiral. Unfortunately I can't provide the PDF file that causes this as the contents are confidential. As Tika/PDFBox are being used from inside a webapp I can cope with errors being thrown but the OOM caused by 1.8.6 is a blocker and I've had to revert to Tika 1.5, which in turn uses PDFBox 1.8.4.\r\n\r\nERROR - FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nERROR - FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nINFO - unsupported/disabled operation: >\r\nWARN - java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\r\n\tat java.util.ArrayList.get(ArrayList.java:429)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nINFO - unsupported/disabled operation: B110EBE04050412\r\nWARN - java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\r\n\tat java.util.ArrayList.get(ArrayList.java:429)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nINFO - unsupported/disabled operation: B0F0F07100D05050603140D10093E0903DB06050E3C0405D\r\nINFO - unsupported/disabled operation: E\r\nINFO - unsupported/disabled operation: C\r\nINFO - unsupported/disabled operation: B051A0E0C0E130B060B0C0D050640750D020E0D050DE506400C13010B050271\r\nINFO - unsupported/disabled operation: A\r\nINFO - unsupported/disabled operation: D\r\nINFO - unsupported/disabled operation: B100\r\nWARN - java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\r\n\tat java.util.ArrayList.get(ArrayList.java:429)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nINFO - unsupported/disabled operation: B5\r\nWARN - java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\r\n\tat java.util.ArrayList.get(ArrayList.java:429)\r\n\tat org.apache.pdfbox.util.operator.MoveText.process(MoveText.java:41)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nINFO - unsupported/disabled operation: B020903110B06050E0F051E0C67A31C05340D000E0D03070C05074\r\nINFO - unsupported/disabled operation: B11160B1005\r\nINFO - unsupported/disabled operation: FB\r\nINFO - unsupported/disabled operation: B230C0B12\r\nWARN - java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\r\n\tat java.util.ArrayList.get(ArrayList.java:429)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nINFO - unsupported/disabled operation: DE\r\nINFO - unsupported/disabled operation: B10050E1F0506AE080B230C0B1419C50E3C0\r\nINFO - unsupported/disabled operation: B05650A09010D0B3F1103B\r\nWARN - java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\r\n\tat java.util.ArrayList.get(ArrayList.java:429)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nINFO - unsupported/disabled operation: B0C0D2419\r\nINFO - unsupported/disabled operation: B040503020B0\r\nWARN - java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:653)\r\n\tat java.util.ArrayList.get(ArrayList.java:429)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nERROR - FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nERROR - FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nERROR - FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nERROR - error: array index out of bounds\r\njava.lang.ArrayIndexOutOfBoundsException: 3337\r\n\tat org.apache.fontbox.ttf.GlyfSimpleDescript.readFlags(GlyfSimpleDescript.java:199)\r\n\tat org.apache.fontbox.ttf.GlyfSimpleDescript.<init>(GlyfSimpleDescript.java:78)\r\n\tat org.apache.fontbox.ttf.GlyphData.initData(GlyphData.java:57)\r\n\tat org.apache.fontbox.ttf.GlyphTable.initData(GlyphTable.java:69)\r\n\tat org.apache.fontbox.ttf.TrueTypeFont.initializeTable(TrueTypeFont.java:280)\r\n\tat org.apache.fontbox.ttf.AbstractTTFParser.parseTables(AbstractTTFParser.java:128)\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:80)\r\n\tat org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:109)\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:25)\r\n\tat org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:84)\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:25)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getTTFFont(PDTrueTypeFont.java:632)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontWidth(PDTrueTypeFont.java:673)\r\n\tat org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:233)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:411)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\r\n\tat org.apache.fontbox.ttf.GlyfCompositeDescript.<init>(GlyfCompositeDescript.java:58)\r\n\tat org.apache.fontbox.ttf.GlyphData.initData(GlyphData.java:62)\r\n\tat org.apache.fontbox.ttf.GlyphTable.initData(GlyphTable.java:69)\r\n\tat org.apache.fontbox.ttf.TrueTypeFont.initializeTable(TrueTypeFont.java:280)\r\n\tat org.apache.fontbox.ttf.AbstractTTFParser.parseTables(AbstractTTFParser.java:128)\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:80)\r\n\tat org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:109)\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:25)\r\n\tat org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:84)\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:25)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getTTFFont(PDTrueTypeFont.java:632)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontWidth(PDTrueTypeFont.java:673)\r\n\tat org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:233)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:411)\r\n\tat org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)\r\n\tat org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:460)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:385)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:344)\r\n\tat org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:130)\r\n\tat org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)\r\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:121)\r\n\tat org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:143)\r\n\tat org.apache.tika.cli.TikaCLI.process(TikaCLI.java:422)\r\n\tat org.apache.tika.cli.TikaCLI.main(TikaCLI.java:113)\r\n",
        "inline image with EI in the middle incorrectly parsed This PDF\r\nhttp://digitalcorpora.org/corp/nps/files/govdocs1/876/876636.pdf\r\nhas an exception because the end of an inline image is improperly detected. The stream looks like this:\r\n{code}\r\nBI\r\n  /W 452\r\n  /H 169\r\n  /BPC 8\r\n  /CS /RGB\r\n  /D [0.0 1.0 0.0 1.0 0.0 1.0]\r\n  /F [/A85 /Fl]\r\nID\r\n......................................................\r\n....................................................EI\r\n......................................................\r\n...\r\n....\r\nEI Q\r\n{code}\r\n\r\nThe inline images are handled in PDFStreamParser. This is tricky, we look for followup bin data to check that it isn't an EI in the middle, but here it isn't bin data, but ascii85 stuff. We also can't request that there be a LF before the EI, because I remember that I had a PDF at work created by a well known company that doesn't use it."
    ],
    [
        "PDFBOX-2507",
        "PDFBOX-2019",
        "Annotation example not rendered to image taking the code from the example at \r\nexamples/src/main/java/org/apache/pdfbox/examples/pdmodel/Annotation.java\r\nadd the following lines at the end (before the finally):\r\nBufferedImage image = new PDFRenderer(document).renderImageWithDPI(0, 600);\t\t\t\tImageIO.write(image, \"jpg\", new File(\"example.jpg\"));\r\n\r\nand the image contains only the text without any annotation.\r\n",
        "Annotations produced by Annotation.java example are not rendered correctly The sample PDF produced by /examples/src/main/java/org/apache/pdfbox/examples/pdmodel/Annotation.java cannot be properly displayed by the pdfbox-app-2.0.0-SNAPSHOT's PDFReader function -- the circle, square, and line annotations are not visible.\r\n\r\nUnknown if this is a problem with the Annotation.java example, the pdfbox-app, or with the library itself."
    ],
    [
        "PDFBOX-2510",
        "PDFBOX-2469",
        "Getting \"Error: The supplied password does not match either the owner or user password in the document.\" while trying to parse pdf without password in  I have a pdf that was correctly parsed for some time and suddenly I've got \"javax.crypto.BadPaddingException: Given final block not properly padded\" when I tried to parse it with pdfbox-1.8.7. Then I tried pdfbox-1.8.8-SNAPSHOT and I've got \"Error: The supplied password does not match either the owner or user password in the document.\". Here is the code I'm using:\r\n\r\n\r\nContentHandler handler = new BodyContentHandler(400000);\r\n\t\tMetadata metadata = new Metadata();\r\n\t\tParser parser = new AutoDetectParser();\r\n\r\n\t\ttry (TikaInputStream stream = TikaInputStream.get(input)) {\r\n\t\t\tparser.parse(stream, handler, metadata, new ParseContext());\r\n\t\t} catch (IOException | SAXException | TikaException e) {\r\n\t\t\tLOG.error(\"Could not parse the input document\", e);\r\n\t\t}\r\n\t\treturn handler.toString();\r\n\r\n(I am using it with tika-parsers-1.6)",
        "javax.crypto.BadPaddingException in PDFBox 1.8.8-SNAPSHOT [~gagravarr] noticed that one of our old test files fails a Tika test now with PDFBox 1.8.7 and Java 1.6.\r\n\r\nI just tested the pure PDFBox app built with PDFBox 1.8.8-SNAPSHOT, and I'm getting the same exception with Java 1.6 and Java 1.7.\r\n\r\nStacktrace: \r\n{noformat}\r\nExtractText failed with the following exception:\r\njava.io.IOException: javax.crypto.BadPaddingException: Given final block not properly padded\r\n        at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:118)\r\n        at javax.crypto.CipherInputStream.read(CipherInputStream.java:236)\r\n        at javax.crypto.CipherInputStream.read(CipherInputStream.java:212)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:316)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream(SecurityHandler.java:421)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:390)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptObject(SecurityHandler.java:365)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.proceedDecryption(SecurityHandler.java:196)\r\n        at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:158)\r\n        at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1598)\r\n        at org.apache.pdfbox.ExtractText.startExtraction(ExtractText.java:216)\r\n        at org.apache.pdfbox.ExtractText.main(ExtractText.java:85)\r\n        at org.apache.pdfbox.PDFBox.main(PDFBox.java:58)\r\nCaused by: javax.crypto.BadPaddingException: Given final block not properly padded\r\n        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:811)\r\n        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)\r\n        at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:423)\r\n        at javax.crypto.Cipher.doFinal(Cipher.java:1708)\r\n        at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:112)\r\n        ... 12 more\r\n{noformat}\r\njava version \"1.7.0_71\"\r\nOpenJDK Runtime Environment (rhel-2.5.3.1.el6-x86_64 u71-b14)\r\nOpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)\r\n\r\nand\r\n\r\njava version \"1.6.0_33\"\r\nOpenJDK Runtime Environment (IcedTea6 1.13.5) (rhel-1.13.5.0.el6_6-x86_64)\r\nOpenJDK 64-Bit Server VM (build 23.25-b01, mixed mode)\r\n"
    ],
    [
        "PDFBOX-2514",
        "PDFBOX-1844",
        "partialy loaded PDF file by pdfbox When I started application pdf is loaded but interpretation of file is not like in Adobe Acrobat. I see INFO and WARNING messages in log and I guess it is a problem with fonts but could you please give me more infos why reading of this pdf fails.\r\n(java -jar pdfbox-app-1.8.7.jar PDFReader keba.pdf)\r\n",
        "[PATCH] Parser for Type 1 Fonts This patch adds a parser for Type 1 fonts to FontBox and makes use of it in PDFBox for rendering Type 1 glyphs. This should fix various issues with the JVM crashing and rendering fonts incorrectly.\r\n\r\nIt was necessary to modify Type1CharStringParser to handle the `callothersubr` command and correctly handle subroutines. Likewise, Type1CharString was modified to support \"flex\".\r\n\r\nThis patch does not remove the AWT fallback for non-embedded and standard 14 fonts because an entirely new fallback system is needed and suitable fonts will need to be shipped as part of PDFBox. This needs to be discussed on the mailing list and/or in follow-on issue.\r\n\r\nNote: To keep this patch small I have not replaced any of the existing ad-hoc Type 1 parsing code in PDType1Font and preflight. Those classes retain their original code which can be replaced in subsequent patches/refactoring. I can open follow-on issues for these.\r\n\r\n~~~\r\n\r\nAs well as the patch, the these files were added:\r\n+ /pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/font/Type1Glyph2D.java\r\n+ /fontbox/src/main/java/org/apache/fontbox/encoding/CustomEncoding.java\r\n+ /fontbox/src/main/java/org/apache/fontbox/type1/Token.java\r\n+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1CharStringReader.java\r\n+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Font.java\r\n+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java\r\n+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Mapping.java\r\n+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java\r\n\r\nAnd this file was removed:\r\n- /pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/font/CFFGlyph2D.java\r\n"
    ],
    [
        "PDFBOX-2519",
        "PDFBOX-539",
        "Regression: Box color missing PDF from PDFBOX-372\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Webmail02.pdf",
        "print to pdf example not working WARNING: java.io.IOException: Not implemented\r\njava.io.IOException: Not implemented\r\n\tat org.apache.pdfbox.pdmodel.graphics.color.PDPattern.createColorSpace(PDPattern.java:92)\r\n\r\nrepeated multiple times.\r\n\r\nrendered document is missing various content while retaining other\r\n\r\nused survey.pdf "
    ],
    [
        "PDFBOX-2519",
        "PDFBOX-1094",
        "Regression: Box color missing PDF from PDFBOX-372\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Webmail02.pdf",
        "Pattern colorspace support PDFBox doesn't support PDPattern colorspaces"
    ],
    [
        "PDFBOX-2519",
        "PDFBOX-1280",
        "Regression: Box color missing PDF from PDFBOX-372\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Webmail02.pdf",
        "Support for PDPattern \"colorspace\" PDPattern is a special colorspace which provides a shading or a tiling pattern to be used for stroke or fill operations. At least one PDF generator is known to use this on occasion as a means of embedding images into PDFs (Aspose.Words)"
    ],
    [
        "PDFBOX-2519",
        "PDFBOX-1466",
        "Regression: Box color missing PDF from PDFBOX-372\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Webmail02.pdf",
        "Rendering of pattern colorspace fails I was trying to print a pdf which was generated by iText v2.1.5. Unfortunately parts of it were printed in white \u2013 the filling color was missing. I could reduce the problem to the attached PDF. When trying to print with e.g. PDocument.silentPrint I get the following info message:\r\n[INFO] [org.apache.pdfbox.pdfviewer.PageDrawer] ColorSpace Pattern doesn't provide a non-stroking color, using white instead!"
    ],
    [
        "PDFBOX-2522",
        "PDFBOX-2469",
        "javax.crypto.IllegalBlockSizeException in ExtractText The attached file can be viewed, but ExtractText is not possible:\r\n{code}\r\nException in thread \"main\" java.io.IOException: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:361)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream(SecurityHandler.java:448)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:413)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptObject(SecurityHandler.java:389)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.proceedDecryption(SecurityHandler.java:178)\r\n\tat org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:164)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1224)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:265)\r\n\tat org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:241)\r\n\tat org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:84)\r\n\tat org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:55)\r\nCaused by: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher\r\n\tat com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:750)\r\n\tat com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)\r\n\tat com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)\r\n\tat javax.crypto.Cipher.doFinal(Cipher.java:2145)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:343)\r\n\t... 10 more\r\n{code}\r\n",
        "javax.crypto.BadPaddingException in PDFBox 1.8.8-SNAPSHOT [~gagravarr] noticed that one of our old test files fails a Tika test now with PDFBox 1.8.7 and Java 1.6.\r\n\r\nI just tested the pure PDFBox app built with PDFBox 1.8.8-SNAPSHOT, and I'm getting the same exception with Java 1.6 and Java 1.7.\r\n\r\nStacktrace: \r\n{noformat}\r\nExtractText failed with the following exception:\r\njava.io.IOException: javax.crypto.BadPaddingException: Given final block not properly padded\r\n        at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:118)\r\n        at javax.crypto.CipherInputStream.read(CipherInputStream.java:236)\r\n        at javax.crypto.CipherInputStream.read(CipherInputStream.java:212)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:316)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream(SecurityHandler.java:421)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:390)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptObject(SecurityHandler.java:365)\r\n        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.proceedDecryption(SecurityHandler.java:196)\r\n        at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:158)\r\n        at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1598)\r\n        at org.apache.pdfbox.ExtractText.startExtraction(ExtractText.java:216)\r\n        at org.apache.pdfbox.ExtractText.main(ExtractText.java:85)\r\n        at org.apache.pdfbox.PDFBox.main(PDFBox.java:58)\r\nCaused by: javax.crypto.BadPaddingException: Given final block not properly padded\r\n        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:811)\r\n        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)\r\n        at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:423)\r\n        at javax.crypto.Cipher.doFinal(Cipher.java:1708)\r\n        at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:112)\r\n        ... 12 more\r\n{noformat}\r\njava version \"1.7.0_71\"\r\nOpenJDK Runtime Environment (rhel-2.5.3.1.el6-x86_64 u71-b14)\r\nOpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)\r\n\r\nand\r\n\r\njava version \"1.6.0_33\"\r\nOpenJDK Runtime Environment (IcedTea6 1.13.5) (rhel-1.13.5.0.el6_6-x86_64)\r\nOpenJDK 64-Bit Server VM (build 23.25-b01, mixed mode)\r\n"
    ],
    [
        "PDFBOX-2522",
        "PDFBOX-2510",
        "javax.crypto.IllegalBlockSizeException in ExtractText The attached file can be viewed, but ExtractText is not possible:\r\n{code}\r\nException in thread \"main\" java.io.IOException: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:361)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream(SecurityHandler.java:448)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:413)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptObject(SecurityHandler.java:389)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.proceedDecryption(SecurityHandler.java:178)\r\n\tat org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:164)\r\n\tat org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1224)\r\n\tat org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:265)\r\n\tat org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:241)\r\n\tat org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:84)\r\n\tat org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:55)\r\nCaused by: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher\r\n\tat com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:750)\r\n\tat com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)\r\n\tat com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)\r\n\tat javax.crypto.Cipher.doFinal(Cipher.java:2145)\r\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:343)\r\n\t... 10 more\r\n{code}\r\n",
        "Getting \"Error: The supplied password does not match either the owner or user password in the document.\" while trying to parse pdf without password in  I have a pdf that was correctly parsed for some time and suddenly I've got \"javax.crypto.BadPaddingException: Given final block not properly padded\" when I tried to parse it with pdfbox-1.8.7. Then I tried pdfbox-1.8.8-SNAPSHOT and I've got \"Error: The supplied password does not match either the owner or user password in the document.\". Here is the code I'm using:\r\n\r\n\r\nContentHandler handler = new BodyContentHandler(400000);\r\n\t\tMetadata metadata = new Metadata();\r\n\t\tParser parser = new AutoDetectParser();\r\n\r\n\t\ttry (TikaInputStream stream = TikaInputStream.get(input)) {\r\n\t\t\tparser.parse(stream, handler, metadata, new ParseContext());\r\n\t\t} catch (IOException | SAXException | TikaException e) {\r\n\t\t\tLOG.error(\"Could not parse the input document\", e);\r\n\t\t}\r\n\t\treturn handler.toString();\r\n\r\n(I am using it with tika-parsers-1.6)"
    ],
    [
        "PDFBOX-2596",
        "PDFBOX-2592",
        "NullPointerException in RandomAccessFileInputStream Line 94 contains a synchronized(file) that throws a NullPointerException under some strange circumstances that I haven't been able to fully identify yet.  I have downloaded the 1.8.8 source and the fix I used is simply to add \"&& file != null\" to the previous if statement.\r\nI can reproduce this bug with live user data, but I haven't been able to with test data yet.  It happens when I try to create a pdf with 36 pages that have an image, some drawn coloured boxes and some text, on each page.  If I remove some of the pages before I call save(File) it doesn't happen - depending on which pages I remove it can be ok with up to 26 pages, or break with fewer.  Quite strange.  I suspect it's to do with the size of the data as opposed to the number of pages.\r\n\r\nI will continue to investigate, since there seems to be some underlying issue, but for now I guess the null protection should be ok to add?\r\n\r\nThanks,\r\nJohn",
        "Allow sharing of COS objects between different documents A number of users on the mailing list have asked about how to import pages from other PDFs as forms, our current solution is LayerUtility, which is depends on PDFCloneUtility. Both these classes are surprisingly complex for what should be a simple task.\r\n\r\nThe two main tasks which these classes perform is copying the page's COSStream and cloning every relevant COS object. However, there seems to be no real need to do any of this copying and cloning - there's nothing about any of the COS objects which is specific to a given document. While a COSStream can share the same backing file as the COSDocument, this isn't a problem for COSWriter, even then we need only make sure that an exception is thrown if a COSStream is used after its parent COSDocument is closed.\r\n\r\nNote that there *is* one artificial dependency between COSDictionary and COSArrays and their parent COSDocument, that is that calling close() on the COSDocument clears the contents of all child COSDictionary and COSArrays. However, there's no need for this, it seems to have come about due to some long past confusion regarding how garbage collection works in Java - we all know that it's not necessary to set objects to null or clear lists when we are done with them.\r\n\r\nI propose that we get rid of the unnecessary object and list clearing in COSDocument#close() and add some checks to COSStream to throw user-friendly exceptions when reading from a closed backing stream. This will allow us to directly share COS objects between different COSDocuments, allowing simple \"x = y\" copying and making LayerUtility and PDFCloneUtility unnecessary. Instead of:\r\n\r\n{code}\r\nCOSStream pageStream = (COSStream)page.getStream().getCOSObject();\r\nPDStream newStream = new PDStream(targetDoc, pageStream.getUnfilteredStream(), false);\r\nPDFormXObject form = new PDFormXObject(newStream);\r\n\r\nPDResources pageRes = page.getResources();\r\nPDResources formRes = new PDResources();\r\nPDFCloneUtility cloner = new PDFCloneUtility(document);\r\ncloner.cloneMerge(pageRes, formRes);\r\nform.setResources(formRes);\r\n{code}\r\n\r\nWe could have:\r\n{code}\r\nPDFormXObject form = new PDFormXObject(page.getStream());\r\nform.setResources(page.getResources());\r\n{code}"
    ],
    [
        "PDFBOX-2671",
        "PDFBOX-1288",
        "Type3 glyph missing in rendering A minus sign is missing in the rendering of the second line of the file from PDFBOX-2383. That one belongs to the type3 font \"T2\".",
        "Lines will not be printed (correctly) in case they are part of a clipping mask In case of a PDF file that was created with FOP 1.0 and was printed with PDFBox, lines disappeared or lines appeared smaller. PDF files that were created with Adobe InDesign (e.g.) will be printed correctly.\r\n\r\nIt has something to do with lines which are part of a clipping mask. FOP seems to generate a clipping mask around all kind of borders. Lines of type <fo:leader> appear correctly and are not part of an clipping mask.\r\n\r\nWhen printing a FOP-PDF with PDFBox, PDFBox moves the clipping mask, so the line is not visible anymore. Please see attached Screenshot.\r\n\r\nThe PDF file I created with FOP is named: original.pdf\r\nThe resulting PDF file after printing with PDFBox is named: after_printing_with_pdfbox.pdf\r\n\r\nRegards\r\nChristoph"
    ],
    [
        "PDFBOX-2671",
        "PDFBOX-1899",
        "Type3 glyph missing in rendering A minus sign is missing in the rendering of the second line of the file from PDFBOX-2383. That one belongs to the type3 font \"T2\".",
        "Rendering issues with images and lines The file from PDFBOX-882 still has some minor rendering issues with images and lines, and logs some interesting errors to the console."
    ],
    [
        "PDFBOX-2671",
        "PDFBOX-1935",
        "Type3 glyph missing in rendering A minus sign is missing in the rendering of the second line of the file from PDFBOX-2383. That one belongs to the type3 font \"T2\".",
        "round edge with wrong color file found at:\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=886049\r\nhttp://www.miloticky.unas.cz/jidelnicek.pdf\r\nthe pdf.js viewer has the same bug."
    ],
    [
        "PDFBOX-2671",
        "PDFBOX-2235",
        "Type3 glyph missing in rendering A minus sign is missing in the rendering of the second line of the file from PDFBOX-2383. That one belongs to the type3 font \"T2\".",
        "Lines missing PDF to image java -jar /home/simon/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage lines.pdf"
    ],
    [
        "PDFBOX-2677",
        "PDFBOX-156",
        "Negative Outlines COUNT and various issues Hi,\r\nI started playing with the outline package few days ago mostly writing unit tests but I found the current implementation has a number of issues and started fixing them. I ended up with a quite substantial patch I'm going to attach.\r\nSo far I only addressed the addition of nodes.\r\nCurrent implementation suffers of some issues:\r\n* insertSiblingAfter doesn't set the LAST on its parent in case it's the last node\r\n* Outlines COUNT can be negative (and often is) despite the spec table 152 states \"The value cannot be negative.\"\r\n* invalid outline hierarchy with wrong COUNT can be created with no warning with code like:\r\n\t{code:java}\r\n\tPDDocumentOutline outline = new PDDocumentOutline();\r\n        PDOutlineItem root = new PDOutlineItem();\r\n        root.setTitle(\"Root\");\r\n        PDOutlineItem child1 = new PDOutlineItem();\r\n        child1.setTitle(\"child1\");\r\n        PDOutlineItem child11 = new PDOutlineItem();\r\n        child11.setTitle(\"child11\");\r\n        PDOutlineItem child12 = new PDOutlineItem();\r\n        child12.setTitle(\"child12\");\r\n        PDOutlineItem child13 = new PDOutlineItem();\r\n        child13.setTitle(\"child13\");\r\n        child11.insertSiblingAfter(child12);\r\n        child12.insertSiblingAfter(child13);\r\n        child1.appendChild(child12);\r\n        root.appendChild(child1);\r\n        outline.appendChild(root);\r\n\t{code}\r\n\r\nI'm going to attach a couple of generated pdf showing the mentioned issues.\r\n\r\nThe patch addresses:\r\n* PDFBOX-156\r\n* PDFBOX-996\r\n* PDFBOX-1209\r\n* Outlines COUNT is always positive  (table 152 \"Total number of visible outline items at all levels of the outline\")\r\n* Outline items COUNT is correctly calculated\r\n* NEXT, PREV, LAST and FIRST are are consistently set\r\n* unit tested\r\n\r\nI added a restriction to methods adding nodes (children or siblings) that throws an exception in case the node is already part of a list (i.e it has a prev or a next) so basically with the patch you cannot create a list of nodes and then add one of them as last child of another node but you'll have to first add the first child and then add siblings to the child. \r\nThose scenarios are currently silently accepted creating invalid outlines (see the attached outline_wrong_first_has_prev.pdf) and would require quite some work to handle all of them so, I'm not sure it's the best solution but at least the user is guided with a message instead of creating an outline where the FIRST item has a PREV.\r\nIt breaks the current API and it might be reworked to be less intrusive but since you are on 2.0.0-SNAPSHOT I thought it was ok.\r\nPlease let me know if there's anything I can help with.",
        "PDOutlineItem does not implement equals [imported from SourceForge]\r\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1475739\r\nOriginally submitted by robertwenner on 2006-04-24 12:23.\r\n\r\nThis code\r\n\r\nPDOutlineItem a = outline.getFirstChild();\r\nPDOutlineItem b = outline.getFirstChild();\r\nif (!a.equals(b)) {\r\n    throw new RuntimeException(\"Not equal\");\r\n}\r\n\r\nthrows, because PDOutlineItem does not implement equals().\r\n\r\nI'd like to compare nodes to each other while\r\ntraversing the outline. How do I do that without equals\r\nor hashCode working properly?\r\n\r\nThanks,\r\n\r\nRobert"
    ],
    [
        "PDFBOX-2677",
        "PDFBOX-996",
        "Negative Outlines COUNT and various issues Hi,\r\nI started playing with the outline package few days ago mostly writing unit tests but I found the current implementation has a number of issues and started fixing them. I ended up with a quite substantial patch I'm going to attach.\r\nSo far I only addressed the addition of nodes.\r\nCurrent implementation suffers of some issues:\r\n* insertSiblingAfter doesn't set the LAST on its parent in case it's the last node\r\n* Outlines COUNT can be negative (and often is) despite the spec table 152 states \"The value cannot be negative.\"\r\n* invalid outline hierarchy with wrong COUNT can be created with no warning with code like:\r\n\t{code:java}\r\n\tPDDocumentOutline outline = new PDDocumentOutline();\r\n        PDOutlineItem root = new PDOutlineItem();\r\n        root.setTitle(\"Root\");\r\n        PDOutlineItem child1 = new PDOutlineItem();\r\n        child1.setTitle(\"child1\");\r\n        PDOutlineItem child11 = new PDOutlineItem();\r\n        child11.setTitle(\"child11\");\r\n        PDOutlineItem child12 = new PDOutlineItem();\r\n        child12.setTitle(\"child12\");\r\n        PDOutlineItem child13 = new PDOutlineItem();\r\n        child13.setTitle(\"child13\");\r\n        child11.insertSiblingAfter(child12);\r\n        child12.insertSiblingAfter(child13);\r\n        child1.appendChild(child12);\r\n        root.appendChild(child1);\r\n        outline.appendChild(root);\r\n\t{code}\r\n\r\nI'm going to attach a couple of generated pdf showing the mentioned issues.\r\n\r\nThe patch addresses:\r\n* PDFBOX-156\r\n* PDFBOX-996\r\n* PDFBOX-1209\r\n* Outlines COUNT is always positive  (table 152 \"Total number of visible outline items at all levels of the outline\")\r\n* Outline items COUNT is correctly calculated\r\n* NEXT, PREV, LAST and FIRST are are consistently set\r\n* unit tested\r\n\r\nI added a restriction to methods adding nodes (children or siblings) that throws an exception in case the node is already part of a list (i.e it has a prev or a next) so basically with the patch you cannot create a list of nodes and then add one of them as last child of another node but you'll have to first add the first child and then add siblings to the child. \r\nThose scenarios are currently silently accepted creating invalid outlines (see the attached outline_wrong_first_has_prev.pdf) and would require quite some work to handle all of them so, I'm not sure it's the best solution but at least the user is guided with a message instead of creating an outline where the FIRST item has a PREV.\r\nIt breaks the current API and it might be reworked to be less intrusive but since you are on 2.0.0-SNAPSHOT I thought it was ok.\r\nPlease let me know if there's anything I can help with.",
        "need to insert a child as the first child of an outline but you can only append to the outline. After some investigation I determined that the new code needed to go into \"PDOutlineNode.java\" in package \"org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline\".\r\n\r\nThe following is the code for a new method I wrote and tested.  Since I can not commit the code I will leave that to someone who can.  The code has been tested, but another pair of eyes never hurts.\r\n{code}\r\n********* Begin code for new method in PDOutlineNode.java *****************\r\n    /**\r\n     * Insert this node before the current first child node or as the only\r\n     * node if there are no children.\r\n     * @param outlineNode\r\n     */\r\n    public void insertFirstChild( PDOutlineItem outlineNode )\r\n    {\r\n        PDOutlineItem wasFirstNode = this.getFirstChild();\r\n        int currentOpenCount = getOpenCount();\r\n        int numberOfOpenNodesWeAreAdding = 1;\r\n        outlineNode.setParent( this );\r\n        PDOutlineItem lastAddedNode = outlineNode;\r\n        while(lastAddedNode.getNextSibling() != null)\r\n        {\r\n            lastAddedNode = lastAddedNode.getNextSibling();\r\n            lastAddedNode.setParent(this);\r\n        }\r\n        setFirstChild( outlineNode );\r\n        //  1 for the the item we are adding;\r\n        if( outlineNode.isNodeOpen() )\r\n        {\r\n            numberOfOpenNodesWeAreAdding += outlineNode.getOpenCount();\r\n        }\r\n        // now update the count like appendChild() does\r\n        if( isNodeOpen() )\r\n        {\r\n            setOpenCount( currentOpenCount + numberOfOpenNodesWeAreAdding );\r\n        }\r\n        else\r\n        {\r\n            setOpenCount( currentOpenCount - numberOfOpenNodesWeAreAdding );\r\n        }\r\n        // link the 2 subsets together\r\n        // end of added list -> to first of old set\r\n        lastAddedNode.setNextSibling(wasFirstNode);\r\n        // first of old set -> back to last of added set\r\n        wasFirstNode.setPreviousSibling(lastAddedNode);\r\n        // tell the parent about the new node(s) we just added\r\n        updateParentOpenCount( numberOfOpenNodesWeAreAdding );\r\n        // update last if there were no child nodes when we started.\r\n        if ( wasFirstNode == null )\r\n          setLastChild( lastAddedNode );\r\n        // else previous last is still the last one\r\n    }\r\n******** end code *****************\r\n{code}"
    ],
    [
        "PDFBOX-2677",
        "PDFBOX-1209",
        "Negative Outlines COUNT and various issues Hi,\r\nI started playing with the outline package few days ago mostly writing unit tests but I found the current implementation has a number of issues and started fixing them. I ended up with a quite substantial patch I'm going to attach.\r\nSo far I only addressed the addition of nodes.\r\nCurrent implementation suffers of some issues:\r\n* insertSiblingAfter doesn't set the LAST on its parent in case it's the last node\r\n* Outlines COUNT can be negative (and often is) despite the spec table 152 states \"The value cannot be negative.\"\r\n* invalid outline hierarchy with wrong COUNT can be created with no warning with code like:\r\n\t{code:java}\r\n\tPDDocumentOutline outline = new PDDocumentOutline();\r\n        PDOutlineItem root = new PDOutlineItem();\r\n        root.setTitle(\"Root\");\r\n        PDOutlineItem child1 = new PDOutlineItem();\r\n        child1.setTitle(\"child1\");\r\n        PDOutlineItem child11 = new PDOutlineItem();\r\n        child11.setTitle(\"child11\");\r\n        PDOutlineItem child12 = new PDOutlineItem();\r\n        child12.setTitle(\"child12\");\r\n        PDOutlineItem child13 = new PDOutlineItem();\r\n        child13.setTitle(\"child13\");\r\n        child11.insertSiblingAfter(child12);\r\n        child12.insertSiblingAfter(child13);\r\n        child1.appendChild(child12);\r\n        root.appendChild(child1);\r\n        outline.appendChild(root);\r\n\t{code}\r\n\r\nI'm going to attach a couple of generated pdf showing the mentioned issues.\r\n\r\nThe patch addresses:\r\n* PDFBOX-156\r\n* PDFBOX-996\r\n* PDFBOX-1209\r\n* Outlines COUNT is always positive  (table 152 \"Total number of visible outline items at all levels of the outline\")\r\n* Outline items COUNT is correctly calculated\r\n* NEXT, PREV, LAST and FIRST are are consistently set\r\n* unit tested\r\n\r\nI added a restriction to methods adding nodes (children or siblings) that throws an exception in case the node is already part of a list (i.e it has a prev or a next) so basically with the patch you cannot create a list of nodes and then add one of them as last child of another node but you'll have to first add the first child and then add siblings to the child. \r\nThose scenarios are currently silently accepted creating invalid outlines (see the attached outline_wrong_first_has_prev.pdf) and would require quite some work to handle all of them so, I'm not sure it's the best solution but at least the user is guided with a message instead of creating an outline where the FIRST item has a PREV.\r\nIt breaks the current API and it might be reworked to be less intrusive but since you are on 2.0.0-SNAPSHOT I thought it was ok.\r\nPlease let me know if there's anything I can help with.",
        "Add insertSiblingBefore() to PDOutlineItem At the moment it's not possible to insert a first child to a pre-existing PDDocumentOutline because all the available methods only allow you to add a PDOutlineItem at the end of the list (PDDocumentOutline.appendChild()) or after an existing child (PDOutlineItem.insertSiblingAfter()). As a result, if you wish to insert a new first child, you have to manually traverse and re-create the entire tree, which is ridiculous.\r\nAs a solution, I offer to add a new method to the PDOutlineItem class, insertSiblingBefore(). I've written the code necessary based on insertSiblingAfter(). It's very straight-forward...\r\n\r\n{code}\r\n /**\r\n     * Insert a sibling before this node.\r\n     *\r\n     * @param item The item to insert.\r\n     */\r\n    public void insertSiblingBefore( PDOutlineItem item )\r\n    {\r\n        item.setParent( getParent() );\r\n        PDOutlineItem previous = getPreviousSibling();\r\n        setPreviousSibling( item );\r\n        item.setNextSibling( this );\r\n        if( previous != null )\r\n        {\r\n            item.setPreviousSibling( previous );\r\n            previous.setNextSibling( item );\r\n        }\r\n        updateParentOpenCount( 1 );\r\n    }\r\n{code}\r\n\r\nI hope this can be integrated in the next release..."
    ],
    [
        "PDFBOX-2730",
        "PDFBOX-785",
        "PDFSplit slow and keeps unused pages PDF from PDFBOX-1298\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFSplit document.pdf",
        "Spliting a PDF creates unnecessarily large files Using PDFBox 0.8.0 (also tried on 1.1.0 and 1.2.1) to split files result in bigger parts than the original.\r\n\r\nConcerned files were made from openOffice .odt documents in version 3.0.0 using openOffice pdf Export and then merging several copies with pdfsam (http://www.pdfsam.org/)\r\n\r\nIn joined eclipse project the test file size is 10\u00a0712\u00a0749  bytes for 2812 pages and the result file sizes after splitting in two at page 2300 are : 8\u00a0812\u00a0515  bytes and 10\u00a0701\u00a0142 bytes.\r\n\r\nUsing pdfSplit in command line as result we have all single result files bigger than the original. An example is also attached. An error tells the original file is corrupted, but we tried it on a file (using pdfsam and without using it) with no error and with similar result, so I think it's not related. \r\n\r\nThis issue seems similar to PDFBOX-28.\r\n\r\n\r\n\r\n"
    ],
    [
        "PDFBOX-2732",
        "PDFBOX-2731",
        "I am facing problem in check password is correct. I  use  pdfbox  1.8.8  to check the pdf password is correct or incorrect.\r\nI am using below code:\r\npdfdocument = PDDocument.load(inss);\r\nStandardDecryptionMaterial dm = new StandardDecryptionMaterial(\"password\");\r\npdfdocument.openProtection(dm);\r\n\r\nPDFBox have any methods ?? to check password is correct is return true.  password is incorrect return false.",
        " I have check only password is correct or incorrect ,PDFBox have any methods ?? "
    ],
    [
        "PDFBOX-2814",
        "PDFBOX-2696",
        "Text not rendered in mode 7 texts in PDF are not rendered when is present shadow. \r\nThe url contains 4 pdf of the same page, exported in 4 different ways. In few cases one the last text line are not rendered.\r\n\r\nhttps://drive.google.com/drive/u/0/folders/0Bz-TZKnUq0uufmVLUDliMFBGSGRWZU1sQWVJamQ5VV9mOGxaMXhTOXZuSVhQd3Vpc280Z2M",
        "Some text missing in rendering when I want to extract an image from the first page of pdf file, some text in the first page will be disappeared, when I open  the image file."
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-490",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-924",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-984",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-1019",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-1068",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-1296",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-1436",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-1520",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-1699",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". "
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-1717",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place."
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-2000",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page."
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-2060",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}"
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-2083",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();"
    ],
    [
        "PDFBOX-2818",
        "PDFBOX-2085",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used"
    ],
    [
        "PDFBOX-2824",
        "PDFBOX-2439",
        "ArrayIndexOutOfBoundsException in GlyfSimpleDescript.readFlags() when multithreading From Kenneth K. in the mailing list:\r\n\r\nI have a client application that convert pdf documents into single page tiff images.  Since the user export large quantities of documents I use a multithreaded approach.  Each thread loads it own document and converts the pages one by one.\r\nThe pdf file is serialized to the client thread and then each thread executes the following code.  If I only use 1 thread there is no problem.  I checked to make sure objects are shared between threads.\r\n{code}\r\n\r\n            docin = PDDocument.load(new ByteArrayInputStream(documentResult.getImage().getContent()),true);\r\n            if(null==docin)\r\n              throw new Exception(\"Invalid PDF document or an occured during retrieval\");\r\n               int numPages = docin.getNumberOfPages();\r\n                     String strPath = getPath(numPages);\r\n                     int iPage = 0;\r\n            PDFRenderer renderer = new PDFRenderer(docin);\r\n            for (int i=0;i<numPages;i++)\r\n            {\r\n              PDPage page = docin.getPage(i);\r\n              PDRectangle rect = page.getMediaBox();\r\n              BufferedImage pageImage = null;\r\n              pageImage = renderer.renderImageWithDPI(i, 200f, ImageType.BINARY);\r\n              ...\r\n            }\r\n{code}\r\n\r\n{code}\r\nArray index out of range: 8\r\n       at org.apache.fontbox.ttf.GlyfSimpleDescript.readFlags(GlyfSimpleDescript.java:202)\r\n       at org.apache.fontbox.ttf.GlyfSimpleDescript.<init>(GlyfSimpleDescript.java:77)\r\n       at org.apache.fontbox.ttf.GlyphData.initData(GlyphData.java:58)\r\n       at org.apache.fontbox.ttf.GlyphTable.getGlyph(GlyphTable.java:161)\r\n       at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForGID(TTFGlyph2D.java:140)\r\n       at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:92)\r\n       at org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:333)\r\n       at org.apache.pdfbox.rendering.PageDrawer.showFontGlyph(PageDrawer.java:314)\r\n       at org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:731)\r\n       at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:690)\r\n       at org.apache.pdfbox.rendering.PageDrawer.showText(PageDrawer.java:296)\r\n       at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextStrings(PDFStreamEngine.java:600)\r\n       at org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.process(ShowTextAdjusted.java:38)\r\n       at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:802)\r\n       at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:464)\r\n       at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:438)\r\n       at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)\r\n       at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)\r\n       at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)\r\n       at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)\r\n       at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:95)\r\n       at org.ilsos.cm.export.client.rmi.workers.Pdf2SinglePageTiff.processResult(Pdf2SinglePageTiff.java:142)\r\n       at org.ilsos.cm.export.client.rmi.ExportWorker.run(ExportWorker.java:72)\r\n       at java.lang.Thread.run(Thread.java:784)\r\n{code}\r\n",
        "[PATCH] ArrayIndexOutOfBoundsException in multithreaded system When it loads replacement font from OS i sometimes get:\r\n\r\nException in thread \"Thread-27\" java.lang.ArrayIndexOutOfBoundsException: 40036\r\n\tat org.apache.fontbox.ttf.GlyfSimpleDescript.readFlags(GlyfSimpleDescript.java:197)\r\n\tat org.apache.fontbox.ttf.GlyfSimpleDescript.<init>(GlyfSimpleDescript.java:78)\r\n\tat org.apache.fontbox.ttf.GlyphData.initData(GlyphData.java:58)\r\n\tat org.apache.fontbox.ttf.GlyphTable.getGlyph(GlyphTable.java:161)\r\n\tat org.apache.pdfbox.rendering.font.TTFGlyph2D.getPathForGID(TTFGlyph2D.java:140)\r\n\tat org.apache.pdfbox.rendering.font.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:92)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:392)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.showGlyph(PageDrawer.java:372)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:411)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.showText(PageDrawer.java:346)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.showTextStrings(PDFStreamEngine.java:322)\r\n\tat org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.process(ShowTextAdjusted.java:38)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:482)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processSubStream(PDFStreamEngine.java:236)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processSubStream(PDFStreamEngine.java:201)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:155)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:177)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:228)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:160)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:109)"
    ],
    [
        "PDFBOX-2848",
        "PDFBOX-2661",
        "Could not find font: /Courier for PDTextField This code\r\n{code}\r\nPDField newField = tplDoc.getDocumentCatalog().getAcroForm().getField(\"01.011.Name\");\r\nPDTextField newTextField = (PDTextField) newField;\r\nnewTextField.setValue(\"huhu\");\r\n{code}\r\nbrings this exception:\r\n{code}\r\nException in thread \"main\" java.io.IOException: Could not find font: /Courier\r\n\tat org.apache.pdfbox.pdmodel.interactive.form.PDAppearanceString.getFont(PDAppearanceString.java:128)\r\n\tat org.apache.pdfbox.pdmodel.interactive.form.PDAppearanceString.copyNeededResourcesTo(PDAppearanceString.java:175)\r\n\tat org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceContent(AppearanceGeneratorHelper.java:130)\r\n\tat org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceValue(AppearanceGeneratorHelper.java:106)\r\n\tat org.apache.pdfbox.pdmodel.interactive.form.PDTextField.constructAppearances(PDTextField.java:262)\r\n\tat org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField.applyChange(PDTerminalField.java:220)\r\n\tat org.apache.pdfbox.pdmodel.interactive.form.PDTextField.setValue(PDTextField.java:217)\r\n{code}",
        "Implement font fallback for AcroForms There are forms where the font specified in the fields default appearance is not pointing to the correct fields or forms resources entry. Adobe Reader/Acrobat have a (unspecified) fallback mechanism to resolve such missing fonts.\r\n\r\nWe should be ably to come up with a similar solution.\r\n\r\nA sample of such an issue can be found in PDFBOX-1234"
    ],
    [
        "PDFBOX-2879",
        "PDFBOX-800",
        "Wrong vertical text extraction for apache PDFBox 2.0.0 The text extraction of vertical boxes (orientation 90\u00b0 or 270\u00b0) fails for apache PDFBox 2.0.0 on my computer.\r\n\r\nI don't know if this is directly related to PDFBOX-800, therefore I didn't create this as a subtask to the mentioned issue.\r\n\r\nI attach the files I got problems with, but you can also use the .pdf from issue \"PDFBOX-800\"",
        "Wrong text extract from vertical textboxes in pdf files Vertical textboxes in pdf files are not extracted correctly (using the tika library in C#).\r\nFor example if there is a vertical textbox \"hello\" in a pdf file (!WITHOUT! line breaks):\r\nH\r\nE\r\nL\r\nL\r\nO\r\nthe parser returns 5 strings, each with a single letter, even there is NO line break after every letter.\r\nIs there a option to avoid this problem?"
    ],
    [
        "PDFBOX-2879",
        "PDFBOX-2272",
        "Wrong vertical text extraction for apache PDFBox 2.0.0 The text extraction of vertical boxes (orientation 90\u00b0 or 270\u00b0) fails for apache PDFBox 2.0.0 on my computer.\r\n\r\nI don't know if this is directly related to PDFBOX-800, therefore I didn't create this as a subtask to the mentioned issue.\r\n\r\nI attach the files I got problems with, but you can also use the .pdf from issue \"PDFBOX-800\"",
        "Can't extract vertical text correctly - -1.8.6 can't extract the Unicode due to failing to map the UCS2 CMap for 90ms-RKSJ-V.-\r\n- 2.0 extracts the text but can't handle the vertical layout\r\n\r\nAlso see the file from PDFBOX-2294 which contains both horizontal and vertical text."
    ],
    [
        "PDFBOX-2907",
        "PDFBOX-2822",
        "Non-termination in PDResources.createKey() When trying to set a font using CSPageContentStream.setFont() a new key is required which is created in  PDResources.createKey(), ca line 450.\r\n\r\nIf the dict keySet contains \"F1\", \"F2\", \"F4\", \"F5\" then just trying to use \r\n{code}\r\n(dict.keySet().size() + 1)\r\n{code} \r\nwill not find a new key und the loop won't terminate.\r\n\r\nThis here terminates:\r\n{code}\r\n        String key;\r\n        int i = dict.keySet().size();\r\n        do\r\n        {\r\n            i++;\r\n            key = prefix + i;\r\n        }\r\n        while (dict.containsKey(key));\r\n{code}",
        "infinite loop of searching for a key in PDResources error in code of class - org.apache.pdfbox.pdmodel.PDResources\r\n{code}\r\n    private COSName createKey(COSName kind, String prefix)\r\n    {\r\n        COSDictionary dict = (COSDictionary)resources.getDictionaryObject(kind);\r\n        if (dict == null)\r\n        {\r\n            return COSName.getPDFName(prefix + 1);\r\n        }\r\n\r\n        // find a unique key\r\n        String key;\r\n        do\r\n        {\r\n            key = prefix + (dict.keySet().size() + 1);\r\n        }\r\n        while (dict.containsKey(key));    <--------------- infinite loop of searching for a key\r\n        return COSName.getPDFName(key);\r\n    }\r\n{code}\r\nmy test code:\r\n{code}\r\npublic class pdfmain_svg {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tSystem.out.println(\"hello\");\r\n\t\tPDDocument document = PDDocument.load(new File(\r\n\t\t\t\t\"d:\\\\Project\\\\pdfbox-image\\\\Acro6JSGuide.pdf\"));\r\n\r\n\t\tfloat fontSize = 10f;\r\n\r\n\t\tPDFont font = PDType0Font.load(document, new File(\r\n\t\t\t\t\"c:\\\\Windows\\\\Fonts\\\\Arial.TTF\"));\r\n\r\n\t\tfor (int pageIndex = 0; pageIndex < document.getNumberOfPages(); pageIndex++) {\r\n\t\t\tSystem.out.println(\"page index = \" + pageIndex);\r\n\t\t\tPDPage page = document.getPage(pageIndex);  \r\n\t\t\tPDPageContentStream contentStream = new PDPageContentStream(\r\n\t\t\t\t\tdocument, page, true, true);\r\n\t\t\tcontentStream.setFont(font, fontSize); <---------------- hang on page 6\r\n\t\t\tcontentStream.setNonStrokingColor(Color.LIGHT_GRAY);\r\n\t\t\tcontentStream.beginText();\r\n\t\t\tcontentStream.newLineAtOffset(100, 100);\r\n\t\t\tcontentStream.showText(\"Test printing\");\r\n\t\t\tcontentStream.endText();\r\n\t\t\tcontentStream.close();\r\n\t\t}\r\n\t\tFile f = new File(\"d:\\\\work\\\\kostya.pdf\");\r\n\t\tdocument.save(f);\r\n\t\tdocument.close();\r\n\t\tSystem.out.println(\"f=\" + f.getAbsolutePath() + \": \" + f.exists());\r\n\t}\r\n\r\n}\r\n\r\n{code}"
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-490",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Pdf Printing of text from embedded fonts When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly."
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-924",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Image not getting rendered correctly.. Hi,\r\n\r\nI converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image. \r\n\r\nClass : PDPage\r\nAPI : public BufferedImage convertToImage(int imageType, int resolution) \r\n\r\nBut the image contained \")\" characters which were not present in the pdf. "
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-984",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "When create images from PDF File with characters from PT-BR it\u00b4s printing wrong "
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-1019",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "PDF conversion to image crashes the JVM The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :\r\n\r\nAssertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.\r\nJava Result: 134\r\n\r\nThe error happens in the method convertToImage():\r\n\r\n           PDPage page = (PDPage) pages.get(startPage);\r\n           PDPage page = (PDPage) pages.get(0);\r\n           try {                \r\n                image = page.convertToImage();\r\n             } catch (IOException ex) {\r\n                Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex);                \r\n            }\r\n\r\nThe problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted."
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-1068",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Odd looking question mark at end of every line in rendered text file TestRender.pdf adds an odd-looking (different font?)\r\n    question mark to the end of every line. These are not present in \r\n    the original PDF file. Tested On:\r\n        - Mac OS 10.6\r\n        - Windows 7\r\n        - Ubuntu 10.10"
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-1296",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:\r\n\r\n            PDDocument document = null; \r\n\r\n            try \r\n            { \r\n                document = PDDocument.load(pdfFile); \r\n\r\n                List pages = document.getDocumentCatalog().getAllPages(); \r\n                int p = 0; \r\n                for (Object pobj : pages) \r\n                { \r\n                    PDPage page = (PDPage) pobj; \r\n                    ++p; \r\n                    BufferedImage bim = page.convertToImage(); \r\n\r\n                    // Test with output in memory, to see the size \r\n                    ByteArrayOutputStream memout = new ByteArrayOutputStream(); \r\n                    boolean memoutok = ImageIO.write(bim, \"png\", memout); \r\n                    if (!memoutok) \r\n                        System.err.println (\"mem write failed for \" + p); \r\n                    memout.reset(); \r\n                    memout.close(); \r\n\r\n                    // Test with output to png file \r\n                    String fname = String.format(\"%s-%02d.png\", prefix, p); \r\n                    boolean foutok = ImageIO.write(bim, \"png\", new File(fname)); \r\n                    if (!foutok) \r\n                        System.err.println (\"file write failed for \" + p); \r\n....\r\n\r\nApr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: i\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator\r\nInformation: unsupported/disabled operation: ri\r\nApr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWarnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font\r\nApr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\n"
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-1436",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Embedded font can't be read I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.\r\n\r\nNov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold\r\nNov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont\r\nINFO: Using font Arial instead"
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-1520",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "bug when reading embedded fonts Dear Sir\r\nMy pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console\r\n\r\norg.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWTAD+Arial\r\n26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Arial instead\r\n26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font AAWSAD+Arial\r\n\r\nyou got any idea to solve this problem\r\n\r\nthanks "
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-1699",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Problem with generate jpg from pdf When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt \"w\" or \"y\". "
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-1717",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Rendering to image has misplaced characters Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated. \r\n\r\nI simply exported with this command:\r\njava -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf\r\n\r\nUnfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place."
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-2000",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "White page when converting first page to image When converting first page to image by this code for attached PDF:\r\n{code}\r\nprivate static BufferedImage computeImage(PDDocument document) throws IOException {\r\n    int imageType = BufferedImage.TYPE_INT_RGB;\r\n\r\n    int resolution;\r\n    try {\r\n      resolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n    } catch (HeadlessException e) {\r\n      resolution = 96;\r\n    }\r\n\r\n    PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);\r\n    try {\r\n      BufferedImage image = page.convertToImage(imageType, resolution);\r\n      return image;\r\n    } finally {\r\n      page = null;\r\n    }\r\n  }\r\n{code}\r\n\r\nreturned image is the of a white page."
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-2060",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "PDDocument.silentPrint using default Font When trying to silent print a document following error occurs:\r\n\r\n{color:red} org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nInformation: Using font SansSerif.plain instead of Verdana{color}\r\n\r\n\r\n{code:title=SilentPrint.java|borderStyle=solid}\r\ntry {\r\n\tDocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\r\n\tString psMimeType = DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();\r\n\tStreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, psMimeType);\r\n\r\n\tString pdffile = \"c:\\\\temp\\\\TabelleTest.pdf\";\r\n\tString psfile = \"c:\\\\temp\\\\temp.ps\";\r\n\t\t\t\r\n\tPDDocument doc = PDDocument.load(pdffile);\r\n\t\t\t\r\n\t// Open the output file\r\n\tFileOutputStream fos = new FileOutputStream(psfile);\r\n\r\n\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\r\n\t// Use the first service available\r\n\tPrintService sps = factories[0].getPrintService(bout);\r\n\r\n\t// Define paper size\r\n\tPrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n\taset.add(MediaSizeName.ISO_A4);\r\n\r\n\tPrinterJob pjob = PrinterJob.getPrinterJob();\r\n\tpjob.setPrintService(sps);\r\n\t\t\t\r\n\tdoc.silentPrint(pjob);\r\n\tdoc.close();\r\n\t\t\t\r\n\tfos.write(bout.toByteArray());\r\n\tfos.close();\r\n\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n}\r\n\r\n{code}"
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-2083",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Some characters overlap other characters, font changed Hi, please forgive my english first.\r\nI tried to convert a pdf file to images, using pdfbox 1.8.4 within tika-app-1.5.jar.\r\nThe jpeg files I got were not ideal.\r\nThe content in the images were different from the pdf file.\r\nSome characters were in different places, and some characters overlapped others.\r\nThere were many lines of console information which read:\r\n'13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,094 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <y> from <Courier New Italic> to the default font \r\n13:49:07,095 WARN [PDSimpleFont:107] Changing font on <l> from <Courier New Italic> to the default font \r\n...'\r\nCould you give me some instruction, tell me how to solve this problem, how to get ideal images?\r\nThanks a lot.\r\n\r\nI attached the pdf file and one of the images.\r\nAnd here are my code:\r\nPDDocument doc = PDDocument.load(input + \".pdf\");\r\nList<PDPage> pages = doc.getDocumentCatalog().getAllPages(); \r\nfor (int i = 0; i < pages.size(); i++) { \r\n    PDPage page = pages.get(i); \r\n    BufferedImage image = page.convertToImage(); \r\n    Iterator<ImageWriter> iter = ImageIO.getImageWritersBySuffix(\"JPG\"); \r\n    ImageWriter writer = iter.next(); \r\n    File outFile = new File(input + i + \".jpg\");\r\n    FileOutputStream out = new FileOutputStream(outFile); \r\n    ImageOutputStream outImage = ImageIO.createImageOutputStream(out); \r\n    writer.setOutput(outImage); \r\n    writer.write(new IIOImage(image, null, null)); \r\n    writer.dispose(); \r\n    out.close(); \r\n} \r\ndoc.close();"
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-2085",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Monospace font is missing when rendering document Monospace font is completely missing when rendering.\r\n\r\nCode used for rendering is simple: page.convertToImage();\r\n\r\nAttached is what I'm getting on 1.8.5.\r\n\r\nSearch for 'monspaced' string in document to see where it's used"
    ],
    [
        "PDFBOX-2915",
        "PDFBOX-2818",
        "PDPage.convertToImage special symbols When converting a PDPage whit special symbols i.e: (Math Integral, Math SUM) the generates image doesn't have the symbol.\r\n\r\nSimple app that reproduces the issue:\r\n\r\n{code:title=App.java|borderStyle=solid}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDPage;\r\n\r\npublic class App {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile pdfFile = new File(\"C:\\\\Testing\\\\Symbols.pdf\");\r\n\t\tPDDocument inputPDF;\r\n\r\n\t\ttry {\r\n\t\t\tinputPDF = PDDocument.load(pdfFile);\r\n\t\t\tList<PDPage> allPages = inputPDF.getDocumentCatalog().getAllPages();\r\n\t\t\tint tmp = 1;\r\n\t\t\tfor (PDPage page : allPages) {\r\n\t\t\t\tFile outputfile = new File(\"C:\\\\Testing\\\\image\" + tmp + \".png\");\r\n\t\t\t\tImageIO.write(page.convertToImage(), \"png\", outputfile);\r\n\t\t\t\tSystem.out.println(\"Image Created -> \" + outputfile.getName());\r\n\t\t\t\ttmp++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (IOException ex) {\r\n\t\t\tLogger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);\r\n\t\t}\r\n\t}\r\n}\r\n{code}",
        "Can't read the embedded font EPSSTR+ISOCPEUR,Italic Hi, I get bad encrypted image from pdf. I know that my problem is similar to [-PDFBOX-1296-|https://issues.apache.org/jira/browse/PDFBOX-1296] or [-PDFBOX-490-|https://issues.apache.org/jira/browse/PDFBOX-490] , but I can't understand what I need to do by myself. \r\nAfter this: \r\n\r\nBufferedImage img = list.convertToImage();\r\n\r\nI get exception:\r\n\r\nINFO: Can't read the embedded font KWPMFZ+TimesNewRoman\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Using font Times New Roman instead\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString\r\nWARNING: Changing font on < > from <ISOCPEUR Italic> to the default font\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont\r\nINFO: Can't read the embedded font EPSSTR+ISOCPEUR,Italic\r\n\u043c\u0430\u044f 29, 2015 1:07:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font getawtFont\r\nINFO: Using font SansSerif.plain instead of EPSSTR+ISOCPEUR,Italic"
    ],
    [
        "PDFBOX-2929",
        "PDFBOX-2373",
        "\"Illegal instruction: 4\" with PDFToImage Attached file (page 4 from http://www.researchgate.net/publication/237090017_Paper_110 ) crashes JDK when rendered with 73, 100, 200 or 400 dpi but not with 72 or 300 dpi.",
        "Rendering at 72 dpi crashes java Rendering the attached file crashes java. It happens only at 72 dpi. It can be reproduced with the PDFToImage cmd app, not with PDFReader."
    ],
    [
        "PDFBOX-2976",
        "PDFBOX-2508",
        "java.util.zip.DataFormatException: incorrect data check When trying to open certain PDF files (examples attached, also any MSDS available at http://www.scbt.com/datasheet-356376.html ), an expection is thrown resulting in the file not being parsed:\r\njava.io.IOException: java.util.zip.DataFormatException: incorrect data check\r\n\tat org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)\r\n\tat org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)\r\n\tat org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)\r\n\tat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)\r\n\tat org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:117)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:367)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:303)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:248)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.getText(PDFTextStripper.java:209)\r\n\r\n-- or --\r\n\r\njava.io.IOException: java.util.zip.DataFormatException: incorrect data check\r\n\tat org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)\r\n\tat org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)\r\n\tat org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)\r\n\tat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)",
        "Text extraction getting zero font height, bad widths, and ? for text in this PDF with Type 3 Fonts Attached file is just line one from a file where every piece of text has these problems.  All the other lines were removed with Nitro to make a small test case.\r\n\r\nThis is the output from PrintTextLocations example:\r\nString[211.92,356.8801 fs=58.0 xscale=58.0 height=1.75392 space=190528.28 width=1.7052002]?\r\nString[129.84,347.04 fs=58.0 xscale=58.0 height=2.72832 space=288435.66 width=2.679596]?\r\nString[70.32,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=7.0643997]?\r\nString[77.3844,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?\r\nString[82.2564,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[88.590004,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577202]?\r\nString[95.167206,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[101.2572,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[107.590805,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[113.6808,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?\r\nString[118.5528,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1668015]?\r\nString[121.719604,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[128.0532,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577194]?\r\nString[134.63042,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[140.72041,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1667938]?\r\nString[522.95984,293.28 fs=58.0 xscale=58.0 height=1.36416 space=150394.36 width=1.4616089]?\r\n\r\nFontsize is way too big (should be more like 8), value for space is ridiculous, height is too small.  And each character is coming through as a '?'.  The original file has this on every piece of text.\r\n\r\nIn Acrobat everything looks fine, both in the original and in this test case.\r\n"
    ],
    [
        "PDFBOX-3038",
        "PDFBOX-3019",
        "Text extraction shows glyphs with zero height This happens with file 001033.pdf:\r\n2.0:\r\n{code}\r\nString[108.0,663.6 fs=6.96 xscale=6.96 height=0.0 space=12.1104 width=3.4800034]1\r\nString[144.0,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.996994]I\r\nString[147.417,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]n\r\nString[152.337,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25] \r\nString[154.88701,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.501999]t\r\nString[157.809,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]h\r\nString[162.729,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=3.9960022]e\r\nString[167.145,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25] \r\n{code}\r\n\r\n\r\n1.8:\r\n{code}\r\nString[108.0,663.6 fs=6.96 xscale=6.96 height=4.57272 space=1.74 width=3.4800034]1\r\nString[144.0,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.996994]I\r\nString[147.417,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]n\r\nString[152.337,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25] \r\nString[154.88701,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.501999]t\r\nString[157.809,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]h\r\nString[162.729,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=3.9960022]e\r\nString[167.145,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25] \r\n{code}\r\n\r\n\r\nThe font has an empty bbox:\r\n{code}\r\ndef\r\n/FontBBox {0 0 0 0}\r\n{code}\r\n\r\n1.8 had this code to get the height (in PDSimpleFont):\r\n{code}\r\n                PDRectangle fontBBox = desc.getFontBoundingBox();\r\n                if (fontBBox != null)\r\n                {\r\n                    retval = fontBBox.getHeight() / 2;\r\n                }\r\n                if( retval == 0 )\r\n                {\r\n                    retval = desc.getCapHeight();\r\n                }\r\n                if( retval == 0 )\r\n                {\r\n                    retval = desc.getAscent();\r\n                }\r\n                if( retval == 0 )\r\n                {\r\n                    retval = desc.getXHeight();\r\n                    if (retval > 0)\r\n                    {\r\n                        retval -= desc.getDescent();\r\n                    }\r\n                }\r\n{code}\r\n\r\n2.0 has only this:\r\n{code}\r\nfloat glyphHeight = font.getBoundingBox().getHeight() / 2;\r\n{code}\r\nSo 2.0 takes the height from the font itself, and has no Plan B.\r\n\r\nGetting the BBox from the font descriptor brings correct heights. (And a better text extraction)",
        "Unwanted spaces in text extraction From testing on my internal dataset I believe there might be some regression in the effectiveness of PDFTextStripper.\r\n\r\nHere's an [example doc|http://rampages.us/rhodesc1/wp-content/uploads/sites/4737/2014/07/Resume-Connor-Rhodes.pdf] I found on the web, which converted better in 1.8 than 2.0. Notice that it extracts \"J e a n e t t e  A c o s t a ;  S e r v i c e  M a n a g e r  a t  M a d  F o x  B r e w i n g  C o m p a n y\". It doesn't seem like there's very much space between the letters in the pdf, so it's curious to me that it didn't do too well.\r\n\r\nI realize this is an area where we probably can't strive for perfection. Yet, it does seem to me that from 1.8 to 2.0 we may have taken a step backwards. I believe there's some sort of regression test for PDFToImage which exports a set of pdfs to images at two different commits and looks at what the differences are. Do we have the same sort of thing for PDFTextStripper? If not, can we build one by pulling docs off the public web? I'd be willing to contribute to this endeavor."
    ],
    [
        "PDFBOX-3039",
        "PDFBOX-3001",
        "FileSystemFontProvider: java.lang.IllegalArgumentException: Key too long: /usr/local/share/fonts/chromeos/notofonts-20140815/NotoSansGujaratiUI-Regular.ttf {{FileSystemFontProvider}} calls {{Preferences.putByteArray()}}, which crashes if the key is longer than 80 characters.\r\n\r\nFont filenames are often longer than 80 characters.\r\n\r\nSo FileSystemFontProvider often crashes. This happens even if I try to use {{PDType1Font.HELVETICA}} ... meaning PDFBox can't read or write PDFs on my system.",
        "FileSystemFontProvider cache instability FileSystemFontProvider uses Java's Preferences API to cache font metadata, however it doesn't seem to work out of the box on Windows (due to file permissions) and one user on the mailing list has complained that on Linux file paths with more than 80 characters can't be handed. Serializable is also slow.\r\n\r\nIt looks like Preferences wasn't a good choice here. We're going to need to roll our own cache file format and save it somewhere we have write access to."
    ],
    [
        "PDFBOX-3042",
        "PDFBOX-3019",
        "Bad space calculation in text extraction Some debug output from attached reduced file:\r\n\r\n2.0:\r\n{code}\r\n\r\nspaceWidthText: 0.25\r\nfontSizeText: 12.0\r\nhorizontalScalingText: 1.0\r\ntextRenderingMatrix.getScalingFactorX(): 12.0, textRenderingMatrix: [12.0,0.0,0.0,12.0,100.0,700.0]\r\nctm.getScalingFactorX(): 1.0\r\nspaceWidthDisplay: 36.0\r\n\r\nString[100.0,91.0 fs=12.0 xscale=12.0 height=7.8808603 space=36.0 width=8.003998]B\r\n{code}\r\n\r\n\r\n1.8:\r\n{code}\r\nspaceWidthText: 0.25\r\nfontSizeText: 12.0\r\nhorizontalScalingText: 1.0\r\ntextMatrix.getXScale(): 1.0, textMatrix: [[1.0,0.0,0.0][0.0,1.0,0.0][100.0,700.0,1.0]]\r\nctm.getXScale(): 1.0\r\nspaceWidthDisp: 3.0\r\n\r\nString[100.0,91.0 fs=12.0 xscale=12.0 height=7.884 space=3.0 width=8.003998]B\r\n{code}\r\n\r\nstream content is\r\n{code}\r\n1 0 0 1 0 0 cm\r\nn\r\nBT\r\n/F12 12 Tf\r\n1 0 0 1 100 700 Tm\r\n(B) Tj\r\nET\r\n{code}\r\n\r\nThe cause is somewhat similar to PDFBOX-3019, a factor is used twice. In 2.0, the fontSize is already calculated into the \"parameters\" Matrix object, which is used to calculate \"textRenderingMatrix\". In 1.8, textStateParameters is set similarly, but not used in the calculation of spaceWidthDisp.\r\n\r\nThe problem was discovered because of different text extractions. \r\n\r\nThe problem did not appear in PDFBOX-3019 because fontSizeText was 1. \r\n\r\nThe fix also solves the problem I mentioned at the end of PDFBOX-3038.",
        "Unwanted spaces in text extraction From testing on my internal dataset I believe there might be some regression in the effectiveness of PDFTextStripper.\r\n\r\nHere's an [example doc|http://rampages.us/rhodesc1/wp-content/uploads/sites/4737/2014/07/Resume-Connor-Rhodes.pdf] I found on the web, which converted better in 1.8 than 2.0. Notice that it extracts \"J e a n e t t e  A c o s t a ;  S e r v i c e  M a n a g e r  a t  M a d  F o x  B r e w i n g  C o m p a n y\". It doesn't seem like there's very much space between the letters in the pdf, so it's curious to me that it didn't do too well.\r\n\r\nI realize this is an area where we probably can't strive for perfection. Yet, it does seem to me that from 1.8 to 2.0 we may have taken a step backwards. I believe there's some sort of regression test for PDFToImage which exports a set of pdfs to images at two different commits and looks at what the differences are. Do we have the same sort of thing for PDFTextStripper? If not, can we build one by pulling docs off the public web? I'd be willing to contribute to this endeavor."
    ],
    [
        "PDFBOX-3042",
        "PDFBOX-3038",
        "Bad space calculation in text extraction Some debug output from attached reduced file:\r\n\r\n2.0:\r\n{code}\r\n\r\nspaceWidthText: 0.25\r\nfontSizeText: 12.0\r\nhorizontalScalingText: 1.0\r\ntextRenderingMatrix.getScalingFactorX(): 12.0, textRenderingMatrix: [12.0,0.0,0.0,12.0,100.0,700.0]\r\nctm.getScalingFactorX(): 1.0\r\nspaceWidthDisplay: 36.0\r\n\r\nString[100.0,91.0 fs=12.0 xscale=12.0 height=7.8808603 space=36.0 width=8.003998]B\r\n{code}\r\n\r\n\r\n1.8:\r\n{code}\r\nspaceWidthText: 0.25\r\nfontSizeText: 12.0\r\nhorizontalScalingText: 1.0\r\ntextMatrix.getXScale(): 1.0, textMatrix: [[1.0,0.0,0.0][0.0,1.0,0.0][100.0,700.0,1.0]]\r\nctm.getXScale(): 1.0\r\nspaceWidthDisp: 3.0\r\n\r\nString[100.0,91.0 fs=12.0 xscale=12.0 height=7.884 space=3.0 width=8.003998]B\r\n{code}\r\n\r\nstream content is\r\n{code}\r\n1 0 0 1 0 0 cm\r\nn\r\nBT\r\n/F12 12 Tf\r\n1 0 0 1 100 700 Tm\r\n(B) Tj\r\nET\r\n{code}\r\n\r\nThe cause is somewhat similar to PDFBOX-3019, a factor is used twice. In 2.0, the fontSize is already calculated into the \"parameters\" Matrix object, which is used to calculate \"textRenderingMatrix\". In 1.8, textStateParameters is set similarly, but not used in the calculation of spaceWidthDisp.\r\n\r\nThe problem was discovered because of different text extractions. \r\n\r\nThe problem did not appear in PDFBOX-3019 because fontSizeText was 1. \r\n\r\nThe fix also solves the problem I mentioned at the end of PDFBOX-3038.",
        "Text extraction shows glyphs with zero height This happens with file 001033.pdf:\r\n2.0:\r\n{code}\r\nString[108.0,663.6 fs=6.96 xscale=6.96 height=0.0 space=12.1104 width=3.4800034]1\r\nString[144.0,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.996994]I\r\nString[147.417,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]n\r\nString[152.337,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25] \r\nString[154.88701,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.501999]t\r\nString[157.809,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]h\r\nString[162.729,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=3.9960022]e\r\nString[167.145,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25] \r\n{code}\r\n\r\n\r\n1.8:\r\n{code}\r\nString[108.0,663.6 fs=6.96 xscale=6.96 height=4.57272 space=1.74 width=3.4800034]1\r\nString[144.0,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.996994]I\r\nString[147.417,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]n\r\nString[152.337,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25] \r\nString[154.88701,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.501999]t\r\nString[157.809,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]h\r\nString[162.729,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=3.9960022]e\r\nString[167.145,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25] \r\n{code}\r\n\r\n\r\nThe font has an empty bbox:\r\n{code}\r\ndef\r\n/FontBBox {0 0 0 0}\r\n{code}\r\n\r\n1.8 had this code to get the height (in PDSimpleFont):\r\n{code}\r\n                PDRectangle fontBBox = desc.getFontBoundingBox();\r\n                if (fontBBox != null)\r\n                {\r\n                    retval = fontBBox.getHeight() / 2;\r\n                }\r\n                if( retval == 0 )\r\n                {\r\n                    retval = desc.getCapHeight();\r\n                }\r\n                if( retval == 0 )\r\n                {\r\n                    retval = desc.getAscent();\r\n                }\r\n                if( retval == 0 )\r\n                {\r\n                    retval = desc.getXHeight();\r\n                    if (retval > 0)\r\n                    {\r\n                        retval -= desc.getDescent();\r\n                    }\r\n                }\r\n{code}\r\n\r\n2.0 has only this:\r\n{code}\r\nfloat glyphHeight = font.getBoundingBox().getHeight() / 2;\r\n{code}\r\nSo 2.0 takes the height from the font itself, and has no Plan B.\r\n\r\nGetting the BBox from the font descriptor brings correct heights. (And a better text extraction)"
    ],
    [
        "PDFBOX-3045",
        "PDFBOX-2508",
        "File that read fine in 1.8 does not in 2.0 Attached is a page of a file that was parsed fine with PDFBox 1.8\r\n\r\nIn 2.0, using pdfbox/examples/util/PrintTextLocations.java\r\nlots of the text is missing - for example all the text like\r\n\"MERCH BANKCARD NET SETLMT\"\r\n\r\nAlso it has width_of_space as some bad value - 561591.3\r\n\r\nStart of PrintTextLocations....\r\n\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.filter.FlateFilter decode\r\nSEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException\r\nWARNING: java.util.zip.DataFormatException: incorrect data check\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException\r\nWARNING: Cannot execute restore, the graphics stack is empty\r\nString[161.94,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=6.6857147]B\r\nString[168.62572,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=4.457138]e\r\nString[173.08286,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=4.9714355]g\r\nString[178.05429,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=2.742859]i",
        "Text extraction getting zero font height, bad widths, and ? for text in this PDF with Type 3 Fonts Attached file is just line one from a file where every piece of text has these problems.  All the other lines were removed with Nitro to make a small test case.\r\n\r\nThis is the output from PrintTextLocations example:\r\nString[211.92,356.8801 fs=58.0 xscale=58.0 height=1.75392 space=190528.28 width=1.7052002]?\r\nString[129.84,347.04 fs=58.0 xscale=58.0 height=2.72832 space=288435.66 width=2.679596]?\r\nString[70.32,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=7.0643997]?\r\nString[77.3844,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?\r\nString[82.2564,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[88.590004,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577202]?\r\nString[95.167206,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[101.2572,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[107.590805,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[113.6808,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?\r\nString[118.5528,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1668015]?\r\nString[121.719604,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[128.0532,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577194]?\r\nString[134.63042,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[140.72041,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1667938]?\r\nString[522.95984,293.28 fs=58.0 xscale=58.0 height=1.36416 space=150394.36 width=1.4616089]?\r\n\r\nFontsize is way too big (should be more like 8), value for space is ridiculous, height is too small.  And each character is coming through as a '?'.  The original file has this on every piece of text.\r\n\r\nIn Acrobat everything looks fine, both in the original and in this test case.\r\n"
    ],
    [
        "PDFBOX-3045",
        "PDFBOX-2976",
        "File that read fine in 1.8 does not in 2.0 Attached is a page of a file that was parsed fine with PDFBox 1.8\r\n\r\nIn 2.0, using pdfbox/examples/util/PrintTextLocations.java\r\nlots of the text is missing - for example all the text like\r\n\"MERCH BANKCARD NET SETLMT\"\r\n\r\nAlso it has width_of_space as some bad value - 561591.3\r\n\r\nStart of PrintTextLocations....\r\n\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.filter.FlateFilter decode\r\nSEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException\r\nWARNING: java.util.zip.DataFormatException: incorrect data check\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException\r\nWARNING: Cannot execute restore, the graphics stack is empty\r\nString[161.94,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=6.6857147]B\r\nString[168.62572,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=4.457138]e\r\nString[173.08286,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=4.9714355]g\r\nString[178.05429,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=2.742859]i",
        "java.util.zip.DataFormatException: incorrect data check When trying to open certain PDF files (examples attached, also any MSDS available at http://www.scbt.com/datasheet-356376.html ), an expection is thrown resulting in the file not being parsed:\r\njava.io.IOException: java.util.zip.DataFormatException: incorrect data check\r\n\tat org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)\r\n\tat org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)\r\n\tat org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)\r\n\tat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)\r\n\tat org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:117)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:367)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:303)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:248)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.getText(PDFTextStripper.java:209)\r\n\r\n-- or --\r\n\r\njava.io.IOException: java.util.zip.DataFormatException: incorrect data check\r\n\tat org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)\r\n\tat org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)\r\n\tat org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)\r\n\tat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)"
    ],
    [
        "PDFBOX-3054",
        "PDFBOX-3053",
        "Getting Unicode mapping error, file was Ok in 1.8 Text extraction on attached file is getting many errors like:\r\n\r\nWARNING: No Unicode mapping for c (131) in font C0HR11_T1GI0361\r\n\r\nand then returning gibberish for all but the first 4 strings.\r\n\r\nIn 1.8 all the text characters were correct. Fine in Acrobat, can copy/paste from there also.\r\n\r\nThis has type 3 fonts.\r\n\r\nTested against trunk build 20151024.140757-1624",
        "Text extraction fails with type 3 fonts Text extraction fails with the attached file. It succeeds with Acrobat Reader, with PDF.js and with PDFBox 1.8.\r\n\r\nThis is not a general type 3 problem. Text extraction works with PDFBOX-2959-reduced.pdf."
    ],
    [
        "PDFBOX-3063",
        "PDFBOX-1429",
        "Appears that getStrokingColor/getNonStrokingColor are broken I am using PDFTextStripper and overriding processTextPosition so that I can test for white on white text.\r\n\r\nIn version 1.8 I called getGraphicsState().getStrokingColor() and getGraphicsState().getNonStrokingColor() to get the colors and then could test for white on white text.\r\n\r\nIn version 2.0 I am making the same calls on the same file, but the PDColor returned for both methods never changes from PDColor{components=[0.0], patternName=null}\r\n\r\nIn the attached file, there is some white text '661.37' just above and to the left of the 2.00.  Can find it in Acrobat by searching or careful selecting",
        "Add color information to TextPosition the Class org.apache.pdfbox.util.TextPosition offer just offer position of text in a page and limited Font info , (many chinese character not having FontDescriptor, so fontName and other style can not be retrieved. )\r\n I think many people use PDFBox to build a client util to extract text and image,\r\n and then reorginize the text and image to form a new article or book which will be read on ipad or mobile phone with the help of manual work to solve the layout , \r\nbut many book which have complex laout and color has so many page make this work need much human effort, if more work can be done automatically, it can be  efficient.\r\n\r\nso ,if a Class named Text with precise position ,fontSize ,font style and color and other such as background color can easily getted. \r\nthe process of Text extraction  also including exclude unnessary text, make text more colorful , can be easier."
    ],
    [
        "PDFBOX-3063",
        "PDFBOX-2246",
        "Appears that getStrokingColor/getNonStrokingColor are broken I am using PDFTextStripper and overriding processTextPosition so that I can test for white on white text.\r\n\r\nIn version 1.8 I called getGraphicsState().getStrokingColor() and getGraphicsState().getNonStrokingColor() to get the colors and then could test for white on white text.\r\n\r\nIn version 2.0 I am making the same calls on the same file, but the PDColor returned for both methods never changes from PDColor{components=[0.0], patternName=null}\r\n\r\nIn the attached file, there is some white text '661.37' just above and to the left of the 2.00.  Can find it in Acrobat by searching or careful selecting",
        "PDFTextStripper should handle colors A recent thread in the dev mailing lst (with Aaron H.) dealt with the inability to extract color with PDFTextStripper. The solution was to create a  PDFTextStripper with these entries to the properties file\r\n{code}\r\nCS=org.apache.pdfbox.util.operator.SetStrokingColorSpace\r\ncs=org.apache.pdfbox.util.operator.SetNonStrokingColorSpace\r\nG=org.apache.pdfbox.util.operator.SetStrokingGrayColor\r\ng=org.apache.pdfbox.util.operator.SetNonStrokingGrayColor\r\nK=org.apache.pdfbox.util.operator.SetStrokingCMYKColor\r\nk=org.apache.pdfbox.util.operator.SetNonStrokingCMYKColor\r\nRG=org.apache.pdfbox.util.operator.SetStrokingRGBColor\r\nrg=org.apache.pdfbox.util.operator.SetNonStrokingRGBColor\r\nSC=org.apache.pdfbox.util.operator.SetStrokingColor\r\nsc=org.apache.pdfbox.util.operator.SetNonStrokingColor\r\nSCN=org.apache.pdfbox.util.operator.SetStrokingColor\r\nscn=org.apache.pdfbox.util.operator.SetNonStrokingColor\r\n{code}\r\n\r\nI therefore propose (and I'd like to get at least one \"+1\" before starting because I've never worked on that segment before):\r\n- replacing the empty entries in the PDFTextStripper property file with the ones above\r\n- improve the printtextlocations example \r\n\r\nThe problem has come up before: PDFBOX-1736, http://stackoverflow.com/q/10844271/535646 , http://stackoverflow.com/a/9157714/535646 and the solutions presented are rather cumbersome (using a PageDrawer object)."
    ],
    [
        "PDFBOX-3077",
        "PDFBOX-2508",
        "Type 3 Fonts getting incorrect values for widthofspace PrintTextLocations on these files are getting ouf of range values for widthofspace.\r\n\r\nThe first file has values about 7 times the font height, which is incorrect.\r\nString[274.0897,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=8.152954]O\r\nString[282.24265,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=4.3676453]t\r\nString[286.6103,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=6.405884]h\r\nString[293.01617,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=5.24115]e\r\nString[298.25732,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=4.950012]r\r\n\r\nThe second file has width values completely out of range\r\nString[134.16,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.7599945]D\r\nString[139.92,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]E\r\nString[145.2,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=4.3200073]L\r\nString[151.66,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=6.4799957]M\r\nString[158.14,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]A\r\nString[163.42,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.7599945]R\r\nString[173.18,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.76001]C\r\nString[178.94,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]A\r\n\r\n",
        "Text extraction getting zero font height, bad widths, and ? for text in this PDF with Type 3 Fonts Attached file is just line one from a file where every piece of text has these problems.  All the other lines were removed with Nitro to make a small test case.\r\n\r\nThis is the output from PrintTextLocations example:\r\nString[211.92,356.8801 fs=58.0 xscale=58.0 height=1.75392 space=190528.28 width=1.7052002]?\r\nString[129.84,347.04 fs=58.0 xscale=58.0 height=2.72832 space=288435.66 width=2.679596]?\r\nString[70.32,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=7.0643997]?\r\nString[77.3844,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?\r\nString[82.2564,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[88.590004,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577202]?\r\nString[95.167206,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[101.2572,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[107.590805,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[113.6808,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?\r\nString[118.5528,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1668015]?\r\nString[121.719604,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?\r\nString[128.0532,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577194]?\r\nString[134.63042,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?\r\nString[140.72041,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1667938]?\r\nString[522.95984,293.28 fs=58.0 xscale=58.0 height=1.36416 space=150394.36 width=1.4616089]?\r\n\r\nFontsize is way too big (should be more like 8), value for space is ridiculous, height is too small.  And each character is coming through as a '?'.  The original file has this on every piece of text.\r\n\r\nIn Acrobat everything looks fine, both in the original and in this test case.\r\n"
    ],
    [
        "PDFBOX-3077",
        "PDFBOX-2976",
        "Type 3 Fonts getting incorrect values for widthofspace PrintTextLocations on these files are getting ouf of range values for widthofspace.\r\n\r\nThe first file has values about 7 times the font height, which is incorrect.\r\nString[274.0897,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=8.152954]O\r\nString[282.24265,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=4.3676453]t\r\nString[286.6103,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=6.405884]h\r\nString[293.01617,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=5.24115]e\r\nString[298.25732,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=4.950012]r\r\n\r\nThe second file has width values completely out of range\r\nString[134.16,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.7599945]D\r\nString[139.92,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]E\r\nString[145.2,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=4.3200073]L\r\nString[151.66,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=6.4799957]M\r\nString[158.14,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]A\r\nString[163.42,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.7599945]R\r\nString[173.18,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.76001]C\r\nString[178.94,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]A\r\n\r\n",
        "java.util.zip.DataFormatException: incorrect data check When trying to open certain PDF files (examples attached, also any MSDS available at http://www.scbt.com/datasheet-356376.html ), an expection is thrown resulting in the file not being parsed:\r\njava.io.IOException: java.util.zip.DataFormatException: incorrect data check\r\n\tat org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)\r\n\tat org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)\r\n\tat org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)\r\n\tat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)\r\n\tat org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:117)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:367)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:303)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:248)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.getText(PDFTextStripper.java:209)\r\n\r\n-- or --\r\n\r\njava.io.IOException: java.util.zip.DataFormatException: incorrect data check\r\n\tat org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)\r\n\tat org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)\r\n\tat org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)\r\n\tat org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)\r\n\tat org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)\r\n\tat org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)\r\n\tat org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)\r\n\tat org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)"
    ],
    [
        "PDFBOX-3077",
        "PDFBOX-3045",
        "Type 3 Fonts getting incorrect values for widthofspace PrintTextLocations on these files are getting ouf of range values for widthofspace.\r\n\r\nThe first file has values about 7 times the font height, which is incorrect.\r\nString[274.0897,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=8.152954]O\r\nString[282.24265,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=4.3676453]t\r\nString[286.6103,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=6.405884]h\r\nString[293.01617,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=5.24115]e\r\nString[298.25732,398.81638 fs=20.0 xscale=0.9705882 height=7.4249997 space=63.243523 width=4.950012]r\r\n\r\nThe second file has width values completely out of range\r\nString[134.16,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.7599945]D\r\nString[139.92,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]E\r\nString[145.2,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=4.3200073]L\r\nString[151.66,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=6.4799957]M\r\nString[158.14,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]A\r\nString[163.42,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.7599945]R\r\nString[173.18,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.76001]C\r\nString[178.94,157.79321 fs=8.0 xscale=8.0 height=3.8400002 space=4296585.0 width=5.279999]A\r\n\r\n",
        "File that read fine in 1.8 does not in 2.0 Attached is a page of a file that was parsed fine with PDFBox 1.8\r\n\r\nIn 2.0, using pdfbox/examples/util/PrintTextLocations.java\r\nlots of the text is missing - for example all the text like\r\n\"MERCH BANKCARD NET SETLMT\"\r\n\r\nAlso it has width_of_space as some bad value - 561591.3\r\n\r\nStart of PrintTextLocations....\r\n\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.filter.FlateFilter decode\r\nSEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException\r\nWARNING: java.util.zip.DataFormatException: incorrect data check\r\nOct 21, 2015 10:36:22 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException\r\nWARNING: Cannot execute restore, the graphics stack is empty\r\nString[161.94,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=6.6857147]B\r\nString[168.62572,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=4.457138]e\r\nString[173.08286,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=4.9714355]g\r\nString[178.05429,422.1 fs=10.0 xscale=10.0 height=7.2857146 space=561591.3 width=2.742859]i"
    ],
    [
        "PDFBOX-3085",
        "PDFBOX-3046",
        "New version of pdfbox(pdfbox-app-2.0.0-20151102.210538-1778.jar) throwing run-time error while calling PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder). New version of pdfbox(pdfbox-app-2.0.0-20151102.210538-1778.jar) throwing run-time error while calling PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder).\r\n\r\nIn new version there is a validation for the dpi.\r\n\r\nif (dpi <= 0)\r\n        {\r\n            throw new IllegalArgumentException(\"DPI must be greater than zero\");\r\n        }\r\n\r\nPlease help to fix this issue...",
        "Specific PDF prints really (REALLY) slow On Windows 10 I have printed a test page using the MS Publisher Color Printer (which outputs a Postscript-file) and converted that file to PDF using GhostScript ps2pdf.\r\n\r\nThe resulting single-page PDF file is printed really, really slow (180-190 seconds) while other documents (even generated using ps2pdf) print a lot faster (some seconds).\r\n\r\nI can't figure out why this is. I guess it has someting to do with the used font, but other PDF printing libraries (jPedal, jPDFPrint) are able print the same documents in a couple of seconds."
    ],
    [
        "PDFBOX-3086",
        "PDFBOX-3082",
        "OutOfMemory while building font cache caused by \"PingFang\" font (Mac OS X El Capitan) We're facing a OutOfMemory error while building the font cache. This happens for the font file \"PingFang\" which is a new system font for Mac OS X El Capitan (http://appleinsider.com/articles/15/06/08/apple-targets-china-japan-with-new-os-x-el-capitan-system-fonts-and-input).\r\n\r\nThe font file seems to be very large (about 65.5m). We tried to adjust our vm options (with -Xmx8096m for example) but had no chance to build the project.\r\n\r\nAs the \"PingFang\" font is a system font there is no (supported) chance to remove the font from the system.\r\n\r\nHere you'll see the output from the test:\r\n\r\n{code:borderStyle=solid}\r\n-------------------------------------------------------\r\n T E S T S\r\n-------------------------------------------------------\r\nRunning de.testproject.platform.pdf.service.PdfServiceTest\r\nNov 03, 2015 11:34:01 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider loadCache\r\nWARNING: New fonts found, font cache will be re-built\r\nNov 03, 2015 11:34:01 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider <init>\r\nWARNING: Building font cache, this may take a while\r\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.564 sec <<< FAILURE! - in de.testproject.platform.pdf.service.PdfServiceTest\r\ngenerateScreenshotFromPdfTest(de.testproject.platform.pdf.service.PdfServiceTest)  Time elapsed: 1.522 sec  <<< ERROR!\r\njava.lang.OutOfMemoryError: Java heap space\r\n\tat org.apache.fontbox.cff.IndexData.initData(IndexData.java:95)\r\n\tat org.apache.fontbox.cff.CFFParser.readIndexData(CFFParser.java:163)\r\n\tat org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:393)\r\n\tat org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:115)\r\n\tat org.apache.fontbox.ttf.CFFTable.read(CFFTable.java:53)\r\n\tat org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:377)\r\n\tat org.apache.fontbox.ttf.OpenTypeFont.getCFF(OpenTypeFont.java:61)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.addTrueTypeFontImpl(FileSystemFontProvider.java:432)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.addTrueTypeCollection(FileSystemFontProvider.java:344)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts(FileSystemFontProvider.java:243)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.<init>(FileSystemFontProvider.java:224)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider.<clinit>(FontMapperImpl.java:132)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.getProvider(FontMapperImpl.java:151)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFont(FontMapperImpl.java:413)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFontBoxFont(FontMapperImpl.java:376)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.getFontBoxFont(FontMapperImpl.java:350)\r\n\tat org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:113)\r\n\tat org.apache.pdfbox.pdmodel.font.PDType1Font.<clinit>(PDType1Font.java:75)\r\n\tat de.testproject.platform.pdf.service.PdfServiceTest.generateScreenshotFromPdfTest(PdfServiceTest.java:47)\r\n{code}\r\n\r\nh3. Update\r\n\r\nMade a test by updating the checkFontfile method in FontFileFinder.java to ignore the \"PingFang\" font and it works.\r\n\r\n{code:title=FontFileFinder.java|borderStyle=solid}\r\n    private boolean checkFontfile(File file)\r\n    {\r\n        String name = file.getName().toLowerCase();\r\n        return (name.endsWith(\".ttf\") || name.endsWith(\".otf\") || name.endsWith(\".pfb\") || name.endsWith(\".ttc\") && !name.startsWith(\"pingfang\"));\r\n    }\r\n{code}\r\n\r\nOf course this isn't a nice solution but i've no idea how to resolve the issue as i'm not aware of the PDFBox development. Maybe someone else has a clean solution for this problem.",
        "High memory consumption while building font cache When the font cache is build there is a very high memory consumption.\r\n\r\nFor this small program\r\n\r\n{code}\r\n    public static void main(String[] args)\r\n    {\r\n        PDFont font = PDType1Font.HELVETICA;\r\n        try\r\n        {\r\n            System.in.read();\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            // TODO Auto-generated catch block\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n{code}\r\n\r\nI need to set {{-Xmx1512M}} in order to avoid an OOM\r\n\r\nSmaller memory settings will bring this\r\n\r\n{code}\r\n$ java -Xmx1256M -jar Test.jar \r\nNov 03, 2015 2:48:32 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider loadCache\r\nWARNUNG: New fonts found, font cache will be re-built\r\nNov 03, 2015 2:48:32 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider <init>\r\nWARNUNG: Building font cache, this may take a while\r\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\r\n\tat org.apache.fontbox.cff.IndexData.initData(IndexData.java:95)\r\n\tat org.apache.fontbox.cff.CFFParser.readIndexData(CFFParser.java:163)\r\n\tat org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:393)\r\n\tat org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:115)\r\n\tat org.apache.fontbox.ttf.CFFTable.read(CFFTable.java:53)\r\n\tat org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:377)\r\n\tat org.apache.fontbox.ttf.OpenTypeFont.getCFF(OpenTypeFont.java:61)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.addTrueTypeFontImpl(FileSystemFontProvider.java:432)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.addTrueTypeCollection(FileSystemFontProvider.java:344)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts(FileSystemFontProvider.java:243)\r\n\tat org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.<init>(FileSystemFontProvider.java:224)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider.<clinit>(FontMapperImpl.java:132)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.getProvider(FontMapperImpl.java:151)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFont(FontMapperImpl.java:415)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFontBoxFont(FontMapperImpl.java:378)\r\n\tat org.apache.pdfbox.pdmodel.font.FontMapperImpl.getFontBoxFont(FontMapperImpl.java:352)\r\n\tat org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:114)\r\n\tat org.apache.pdfbox.pdmodel.font.PDType1Font.<clinit>(PDType1Font.java:76)\r\n\tat PDFontTest.main(PDFontTest.java:11)\r\n{code}\r\n\r\nPossible cause is a large number of fonts on my system\r\n\r\n{code}\r\nNov 03, 2015 2:56:01 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider loadCache\r\nWARNUNG: New fonts found, font cache will be re-built\r\nNov 03, 2015 2:56:01 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider <init>\r\nWARNUNG: Building font cache, this may take a while\r\nNov 03, 2015 2:56:22 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider saveCache\r\nWARNUNG: Finished building font cache, found 876 fonts\r\n{code}"
    ],
    [
        "PDFBOX-3114",
        "PDFBOX-1314",
        "Visible signatures in different pages changes previous revision I tried to make two visible signatures in a 2-pages pdf file using pdfbox-2.0.0-RC1.\r\n\r\nI followed the example in SVN directory\r\nhttps://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/\r\nI have just modified CreateVisibleSignature class customizing the input parameters and the page to sign.\r\n\r\nIf both the signatures are made in the same page, no error occurs. If signatures are made in different pages (e.g. signature 1 in page 1 and signature 2 in page 2), when I open the pdf file with Adobe Acrobat XI Pro (v.11.0.13) it tells that signature 1 is not valid.\r\n\r\nThe attachment below refers to the source/resourse zip file. It contains:\r\n- test.docx: 2-pages test document generated with Microsoft Office Professional Plus 2013\r\n- test1.pdf: pdf version that generates error (created with Word by selecting \"Save as Adobe PDF\" option)\r\n- test1_*.pdf: signed pdf files with error\r\n- test2.pdf: pdf version that generates no error (created with Word by selecting \"Save as\" option and then \"*.PDF\")\r\n- test2_*.pdf: signed pdf files with no error\r\n- CreateVisibleSignature.java: customized source code \r\n- stamp.png: signature image\r\n- test.p12: key store (password 12345)",
        "PDFParser should set \"direct\" property in COSBase if this object is direct PDFParser during PDF parsing does not update COSBase#direct property - it always return false when read. Especially this issue manifests for dictionary objects when PDF is saved (either regularly or incrementally) - all dictionary objects in saved PDF, if they do not have COSBase#direct property set or are not specifically treated by COSWriter (like XObject or Resources) are written as indirect objects. Though PDF specification allows dictionary objects to be indirect, but not for /Extensions dictionary in document catalog: \"The extensions dictionary, all developer extensions dictionary entries in the extensions dictionary, as well as their entries, all shall be direct objects (i.e., this information shall be nested directly within the catalog dictionary with no indirect objects used).\" (see ISO 32000-1: 7.12 Extensions Dictionary)."
    ],
    [
        "PDFBOX-3114",
        "PDFBOX-1370",
        "Visible signatures in different pages changes previous revision I tried to make two visible signatures in a 2-pages pdf file using pdfbox-2.0.0-RC1.\r\n\r\nI followed the example in SVN directory\r\nhttps://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/\r\nI have just modified CreateVisibleSignature class customizing the input parameters and the page to sign.\r\n\r\nIf both the signatures are made in the same page, no error occurs. If signatures are made in different pages (e.g. signature 1 in page 1 and signature 2 in page 2), when I open the pdf file with Adobe Acrobat XI Pro (v.11.0.13) it tells that signature 1 is not valid.\r\n\r\nThe attachment below refers to the source/resourse zip file. It contains:\r\n- test.docx: 2-pages test document generated with Microsoft Office Professional Plus 2013\r\n- test1.pdf: pdf version that generates error (created with Word by selecting \"Save as Adobe PDF\" option)\r\n- test1_*.pdf: signed pdf files with error\r\n- test2.pdf: pdf version that generates no error (created with Word by selecting \"Save as\" option and then \"*.PDF\")\r\n- test2_*.pdf: signed pdf files with no error\r\n- CreateVisibleSignature.java: customized source code \r\n- stamp.png: signature image\r\n- test.p12: key store (password 12345)",
        "Only the last visual signature is valid when multiple signatures have been added on different pages * Every visual signature that is added invalidates the previous ones (Adobe Reader displays the message that the document has changed)\r\n* If the signatures are added to different pages only the ones that have been added to the page of the last one are visible in PDFReader (Adobe displays the message in the signature view that the form field has been deleted)"
    ],
    [
        "PDFBOX-3114",
        "PDFBOX-1751",
        "Visible signatures in different pages changes previous revision I tried to make two visible signatures in a 2-pages pdf file using pdfbox-2.0.0-RC1.\r\n\r\nI followed the example in SVN directory\r\nhttps://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/\r\nI have just modified CreateVisibleSignature class customizing the input parameters and the page to sign.\r\n\r\nIf both the signatures are made in the same page, no error occurs. If signatures are made in different pages (e.g. signature 1 in page 1 and signature 2 in page 2), when I open the pdf file with Adobe Acrobat XI Pro (v.11.0.13) it tells that signature 1 is not valid.\r\n\r\nThe attachment below refers to the source/resourse zip file. It contains:\r\n- test.docx: 2-pages test document generated with Microsoft Office Professional Plus 2013\r\n- test1.pdf: pdf version that generates error (created with Word by selecting \"Save as Adobe PDF\" option)\r\n- test1_*.pdf: signed pdf files with error\r\n- test2.pdf: pdf version that generates no error (created with Word by selecting \"Save as\" option and then \"*.PDF\")\r\n- test2_*.pdf: signed pdf files with no error\r\n- CreateVisibleSignature.java: customized source code \r\n- stamp.png: signature image\r\n- test.p12: key store (password 12345)",
        "Signing external signed document again with pdfbox, break the document. 1/ I sign a file using this method\r\n\r\n\tpublic static void signByPdfbox(\r\n\t\t\tFile inputPDF,\r\n\t\t\tFile outputPDF,\r\n\t\t\tKeyStore ks,\r\n\t\t\tString password) \r\n\tthrows IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, COSVisitorException, SignatureException {\r\n\r\n\t\tPDDocument inputDoc = PDDocument.load(inputPDF);\r\n\t\t\r\n\t\t\r\n\t\tPADESSigner signer = new PADESSigner(ks, password);\r\n\t\t\r\n\t\tsigner.setSignatureName(\"Hello1\");\r\n\t\tsigner.setSignatureReason(\"Why noy\");\r\n\t\tsigner.setSignatureLocation(\"Curacao\");\r\n\t\tsigner.setSignatureContactInfo(\"david.keller.fr@gmail.com\");\r\n\t\t\r\n\t\tsigner.signPDF(inputDoc, outputPDF);\r\n\t}\r\n\r\n\r\n\r\n2/ I resign the same file using the same method and in acrobat reader I have this error : SignDict/Contents illegal data\r\n\r\nI have googelized it, and I found only old topics for iText lib.\r\nI have tried the same with iText 5.X, and double signatures works\r\n\r\n\r\n"
    ],
    [
        "PDFBOX-3114",
        "PDFBOX-1780",
        "Visible signatures in different pages changes previous revision I tried to make two visible signatures in a 2-pages pdf file using pdfbox-2.0.0-RC1.\r\n\r\nI followed the example in SVN directory\r\nhttps://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/\r\nI have just modified CreateVisibleSignature class customizing the input parameters and the page to sign.\r\n\r\nIf both the signatures are made in the same page, no error occurs. If signatures are made in different pages (e.g. signature 1 in page 1 and signature 2 in page 2), when I open the pdf file with Adobe Acrobat XI Pro (v.11.0.13) it tells that signature 1 is not valid.\r\n\r\nThe attachment below refers to the source/resourse zip file. It contains:\r\n- test.docx: 2-pages test document generated with Microsoft Office Professional Plus 2013\r\n- test1.pdf: pdf version that generates error (created with Word by selecting \"Save as Adobe PDF\" option)\r\n- test1_*.pdf: signed pdf files with error\r\n- test2.pdf: pdf version that generates no error (created with Word by selecting \"Save as\" option and then \"*.PDF\")\r\n- test2_*.pdf: signed pdf files with no error\r\n- CreateVisibleSignature.java: customized source code \r\n- stamp.png: signature image\r\n- test.p12: key store (password 12345)",
        "previous revision is damaged after signing  Ihave PDF file which was signed by some other application. When I try to sign it with PDFbox, previous revision is damaged. I have discussion at stackoverflow, with Michael Klink.\r\nhttp://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271\r\n\r\nwhen we see some changes merely was structural. Some changes was just rounding problem   - PDFBOX-1778.\r\n\r\nWhen I test,  problem of damaged signature was  caused from structural change [when there must be direct reference, there was indirect reference and etc..]\r\n\r\nSo we solve that problem. I will upload damaged PDF document,  fixed pdf, and the patch too.\r\n"
    ],
    [
        "PDFBOX-3118",
        "PDFBOX-3000",
        "Drop shadow missing I think this used to work\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage test.pdf",
        "Transparency Group issues This is a follow-up issue for transparency group issues from PDFBOX-2423. More details to come."
    ],
    [
        "PDFBOX-3130",
        "PDFBOX-2158",
        "Recent regression in PDFTextStripper, text getting garbled Text extraction using PrintTextLocations is getting garbled characters in the attached snippet. \r\n\r\nFor this file it is getting one string of \"2O(Er4env vqeheurosriAurseirueeass ss/Ct:7:rh adaliaargynse csr eadc+cit6e l1ipc te+2en 6d9c1)9e 91 2933\"\r\n\r\nThis test case is about as small as I could make it and still show the problem; when I reduced the file to just one line of text, then the text came though correctly.\r\n\r\nThis problem shows up in RC2 and the latest development build.  I believe it was OK in the development build from Nov 4",
        "ExtractText missing most of text in this PDF file, due to font bounding box with minus infinity Attached PDF file is missing most of the text when processed by the ExtractText example program\r\n\r\nI traced it down to PDFontDescriptorDictionary.getFontBoundingBox() getting a rectange for COSName.FONT_BBOX  that contained a ymin value of minus infinity. That method then creates a PDRectangle which calculates a bounding box with a ymin value of -65,329, and results in an enormous text size, and things go downhill from there.  The text cannot be matched up, and most of it ends up being discarded.\r\n\r\nI was able to hack a fix by doing a check in the constructor PDRectangle.PDRectangle( COSArray array ) for big negative numbers and setting them to 0.  With that change, all the text came through as expected. However, I don't have enough familiarity with the code to understand what a real fix ought to look like.\r\n\r\nThe PDF file looks to be fine by other programs such as Acrobat and NitroPDF"
    ],
    [
        "PDFBOX-3182",
        "PDFBOX-3000",
        "Image not rendered   When rendered, the image result of the attached PDF does not contain the background.",
        "Transparency Group issues This is a follow-up issue for transparency group issues from PDFBOX-2423. More details to come."
    ],
    [
        "PDFBOX-3182",
        "PDFBOX-3118",
        "Image not rendered   When rendered, the image result of the attached PDF does not contain the background.",
        "Drop shadow missing I think this used to work\r\n\r\njava -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage test.pdf"
    ]
]